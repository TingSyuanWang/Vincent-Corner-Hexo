{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/Connection.jpg","path":"images/Connection.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/MolecularMedicine.jpg","path":"images/MolecularMedicine.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/PottedPlant.jpg","path":"images/PottedPlant.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/TcmadrForgetpasswordPage.png","path":"images/TcmadrForgetpasswordPage.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/TcmadrLoginPage.png","path":"images/TcmadrLoginPage.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/TcmadrRegisterPage.png","path":"images/TcmadrRegisterPage.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/atom.jpg","path":"images/atom.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/github.jpg","path":"images/github.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/hello_world.png","path":"images/hello_world.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/javascript.jpg","path":"images/javascript.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/php_mysql_array.jpg","path":"images/php_mysql_array.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/line.jpg","path":"images/line.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/notebook.jpeg","path":"images/notebook.jpeg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/tcmadr_inside_page.png","path":"images/tcmadr_inside_page.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/tcmadr_procedure.png","path":"images/tcmadr_procedure.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/tcmadr_login_page.png","path":"images/tcmadr_login_page.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/thesis.jpg","path":"images/thesis.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/vincent.ico","path":"images/vincent.ico","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/wordpress.png","path":"images/wordpress.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/Mechanic＿Resurrection.jpg","path":"images/Mechanic＿Resurrection.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/emoji.png","path":"images/emoji.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/header_background.jpg","path":"images/header_background.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/hellojs.jpg","path":"images/hellojs.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/technique/MacEnvironment.jpg","path":"images/technique/MacEnvironment.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/train_to_busan.jpg","path":"images/train_to_busan.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/herbal.jpg","path":"images/herbal.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/asus.png","path":"images/asus.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/htmlcss/HtmlCssDay2.jpg","path":"images/learning/htmlcss/HtmlCssDay2.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday1.png","path":"images/learning/docker/dockerday1.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/jenkins/jenkinsday1.png","path":"images/learning/jenkins/jenkinsday1.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday3.png","path":"images/learning/kubernetes/kubernetesday3.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday4.jpg","path":"images/learning/kubernetes/kubernetesday4.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday5.png","path":"images/learning/kubernetes/kubernetesday5.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday6.png","path":"images/learning/kubernetes/kubernetesday6.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejsII/NodejsIIDay02.png","path":"images/learning/nodejsII/NodejsIIDay02.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday1.png","path":"images/learning/nodejs/nodejsday1.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday10.jpg","path":"images/learning/nodejs/nodejsday10.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday12.jpg","path":"images/learning/nodejs/nodejsday12.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday2.jpg","path":"images/learning/nodejs/nodejsday2.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday3.jpg","path":"images/learning/nodejs/nodejsday3.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday6.png","path":"images/learning/nodejs/nodejsday6.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday7.png","path":"images/learning/nodejs/nodejsday7.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday8.png","path":"images/learning/nodejs/nodejsday8.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday9.png","path":"images/learning/nodejs/nodejsday9.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday1.jpg","path":"images/learning/laravel/laravelday1.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday12.png","path":"images/learning/laravel/laravelday12.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday11.jpg","path":"images/learning/laravel/laravelday11.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday13.jpg","path":"images/learning/laravel/laravelday13.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday17.png","path":"images/learning/laravel/laravelday17.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday15.png","path":"images/learning/laravel/laravelday15.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday16.jpg","path":"images/learning/laravel/laravelday16.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday18.png","path":"images/learning/laravel/laravelday18.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday19.jpg","path":"images/learning/laravel/laravelday19.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday20.png","path":"images/learning/laravel/laravelday20.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday2.png","path":"images/learning/laravel/laravelday2.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday3.jpg","path":"images/learning/laravel/laravelday3.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday22.jpg","path":"images/learning/laravel/laravelday22.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday4.jpg","path":"images/learning/laravel/laravelday4.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday6.jpg","path":"images/learning/laravel/laravelday6.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday8.png","path":"images/learning/laravel/laravelday8.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday9.png","path":"images/learning/laravel/laravelday9.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday5.jpeg","path":"images/learning/laravel/laravelday5.jpeg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/react.png","path":"images/learning/react/react.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday10.jpg","path":"images/learning/react/reactday10.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday11.png","path":"images/learning/react/reactday11.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday4.jpg","path":"images/learning/react/reactday4.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday3.png","path":"images/learning/react/reactday3.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday5.jpg","path":"images/learning/react/reactday5.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday6.png","path":"images/learning/react/reactday6.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday7.png","path":"images/learning/react/reactday7.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday8.jpg","path":"images/learning/react/reactday8.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday1.png","path":"images/learning/reactNative/reactnativeday1.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday5.png","path":"images/learning/reactNative/reactnativeday5.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday4.jpg","path":"images/learning/reactNative/reactnativeday4.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday6.png","path":"images/learning/reactNative/reactnativeday6.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/ui/UIDay1.png","path":"images/learning/ui/UIDay1.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/tcmadr2.png","path":"images/tcmadr2.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/htmlcss/HtmlCssDay1.jpg","path":"images/learning/htmlcss/HtmlCssDay1.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday5.jpg","path":"images/learning/docker/dockerday5.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday4.png","path":"images/learning/docker/dockerday4.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday6.png","path":"images/learning/docker/dockerday6.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday2.png","path":"images/learning/kubernetes/kubernetesday2.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday1.png","path":"images/learning/kubernetes/kubernetesday1.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejsII/NodejsIIDay01.png","path":"images/learning/nodejsII/NodejsIIDay01.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday5.jpg","path":"images/learning/nodejs/nodejsday5.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday14.jpg","path":"images/learning/laravel/laravelday14.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/productivity/productivity.jpg","path":"images/learning/productivity/productivity.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday12.jpg","path":"images/learning/react/reactday12.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday2.png","path":"images/learning/react/reactday2.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/react/reactday9.jpg","path":"images/learning/react/reactday9.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday3.jpg","path":"images/learning/reactNative/reactnativeday3.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","path":"libs/jquery/2.0.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/header_background_grey.jpg","path":"images/header_background_grey.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday3.png","path":"images/learning/docker/dockerday3.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday4.jpg","path":"images/learning/nodejs/nodejsday4.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday10.png","path":"images/learning/laravel/laravelday10.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday7.jpeg","path":"images/learning/laravel/laravelday7.jpeg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday2.png","path":"images/learning/reactNative/reactnativeday2.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/tcmadr.png","path":"images/tcmadr.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/htmlcss/box-sizing.png","path":"images/learning/htmlcss/box-sizing.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/htmlcss/css-model.png","path":"images/learning/htmlcss/css-model.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/Bret Fisher_Docker.jpg","path":"images/learning/docker/Bret Fisher_Docker.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday2.png","path":"images/learning/docker/dockerday2.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/kubernetes/Edward Viaene_Kubernetes.jpg","path":"images/learning/kubernetes/Edward Viaene_Kubernetes.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/EdwinDiaz_Laravel.jpg","path":"images/learning/laravel/EdwinDiaz_Laravel.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/laravel/laravelday21.png","path":"images/learning/laravel/laravelday21.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/productivity/Doru Catana_Productivity.jpg","path":"images/learning/productivity/Doru Catana_Productivity.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday7.png","path":"images/learning/docker/dockerday7.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/docker/dockerday8.png","path":"images/learning/docker/dockerday8.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday11.jpeg","path":"images/learning/nodejs/nodejsday11.jpeg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/HellojsCertification.jpg","path":"images/HellojsCertification.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/tcm.png","path":"images/tcm.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hueman/README.md","hash":"defb1f667677e1fd13b3a4799a6c70eae621f796","modified":1488686341000},{"_id":"themes/hueman/.DS_Store","hash":"ebfbc18f6807d503ab0044cdd94e6d7e2b9775be","modified":1509819077000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1509880894000},{"_id":"themes/hueman/_config.yml","hash":"9ed3814813b56d38f5916206bf02d16dd7a3e6eb","modified":1509819729000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1488686341000},{"_id":"themes/hueman/package.json","hash":"d4ff853568e592265c2c9a21ce358f15babec14a","modified":1488686341000},{"_id":"source/about/index.md","hash":"a704d6681b64a637ef213fcf5c1826900cb3d1ab","modified":1509722797000},{"_id":"source/_posts/Github-Pushed-Commit-Delete-Redraw.md","hash":"e58400128363100758a56bed7e8e8371e4ad8721","modified":1509721329000},{"_id":"source/_posts/HTML5-CSS3-快速學習自我挑戰-Day1.md","hash":"284fb625ca34fd9b76209afa8ab470010d6cb984","modified":1510156499000},{"_id":"source/_posts/HTML5-CSS3-快速學習自我挑戰-Day2.md","hash":"b19ffa8427404159bcbcc1ae317272670d116e28","modified":1511136819180},{"_id":"source/_posts/Hello-JS-從零開始的React-Native開發.md","hash":"ae01f65d02a1fe9f34ba626a78686636d3a9b414","modified":1509721329000},{"_id":"source/_posts/HelloJS專案開發提議.md","hash":"5bc174775d90633ac421be2973c786a7c998a1c7","modified":1509721329000},{"_id":"source/_posts/In-fact-life-is-a-kind-of-strong.md","hash":"aeff0ea0c3074b13a9b6ff91ffbfd8b7ee40e0ab","modified":1509721329000},{"_id":"source/_posts/JavaScript用AJAX的方式獲得時間.md","hash":"e9247375a47b3f75265f275a5e21f304882a7639","modified":1509721329000},{"_id":"source/_posts/Kubernetes-快速學習自我挑戰-Day1.md","hash":"8128c12f245dedffff6b4636fa0d2d1ad4ed6f56","modified":1509721097000},{"_id":"source/_posts/Kubernetes-快速學習自我挑戰-Day2.md","hash":"e553bf971d23d4413d6ac4ecbcef679424aa3726","modified":1509721097000},{"_id":"source/_posts/Kubernetes-快速學習自我挑戰-Day3.md","hash":"bb41971ec0490d1cbf26e0514d315cd49e666dca","modified":1509721097000},{"_id":"source/_posts/Jenkins-快速學習自我挑戰-Day1.md","hash":"f52a753cd95d3fc9e99ad988b40cbe7748989a72","modified":1509721097000},{"_id":"source/_posts/Kubernetes-快速學習自我挑戰-Day4.md","hash":"d4739f86a31f35b2b46735bf310a79f02daaf30d","modified":1509721097000},{"_id":"source/_posts/Kubernetes-快速學習自我挑戰-Day5.md","hash":"25780a098a318ba12cade90cb3ee50d2645acf24","modified":1509721097000},{"_id":"source/_posts/Kubernetes-快速學習自我挑戰-Day6.md","hash":"961db1cd37ae9cfbdade604ffbc18c041aafbf80","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day1.md","hash":"2447cc884b2e211e28ccbdb73baf18c5652b60c4","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day10.md","hash":"02f95f947a3e3d1d92c1759c9abfbbe97df49aad","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day11.md","hash":"0496e48eb4f71b3c12c685c8f0434bcd235e4a75","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day12.md","hash":"b284884fb152b32f474751422accc2c45c7e2538","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day13.md","hash":"16a27a3d1a392ad0107553fb9c4e78e581cec141","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day14.md","hash":"35bebf2b2b3f866aee847c8975fbec6cfe860c1e","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day15.md","hash":"4a18722e7bc211dacf13fabdf35b27bc42c23443","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day16.md","hash":"962a63270a5a9b00ea1ab9f1dbf24f1a77f6eeed","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day17.md","hash":"fb28071f9d57f17e42fbad0b927880005024cad9","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day18.md","hash":"f8cf5d8a979bf915d7cc6220e6b9118ed54c822b","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day19.md","hash":"876eb90515d778fcc3badb235b3c66239a67d459","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day2.md","hash":"5e3c4a1088f2551b54ecd498a58819d271902b66","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day20.md","hash":"d09b5c89cecc9543e907edaaf5f5f0a92979bacd","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day21.md","hash":"a14918d2c49ae61f8ee2a9c797a3e5ad8489dc36","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day22.md","hash":"69725cc26edcc57f8b5a55a49bc1268eb1c2bde3","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day3.md","hash":"bcaf573d3344c10de3221ad0d79c9bb445d45182","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day4.md","hash":"dc19b5a9668b10ea7f939fec91e511e6e98f70c8","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day5.md","hash":"95ef503a7d3af55a54c366423eae110a6fc69c36","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day6.md","hash":"a314cb6d6af0f92b0652279713af86dc53ca299d","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day7.md","hash":"d25b6051ecf7818d21315aeb870bd14de2a86966","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day8.md","hash":"ee8493f34322da67035fef4e1652ac73d4669b05","modified":1509721097000},{"_id":"source/_posts/Lavarel-快速學習自我挑戰-Day9.md","hash":"6cfb8566646fb974a8acefd53f6b8f1c2c2802bd","modified":1509721097000},{"_id":"source/_posts/Mac-開發環境建置.md","hash":"84fdd34f59c0f26ec1e4b99b0279f59caa24e11e","modified":1509797965000},{"_id":"source/_posts/Mechanic: Resurrection (極速秒殺2) - 劇透.md","hash":"ef5dcbc67794dc154dbacb0f2daa6801b2e87c9f","modified":1509721329000},{"_id":"source/_posts/Nodejs-II-快速學習自我挑戰-Day1.md","hash":"4f0128ccacb3a2184438e66e2c7bb394c1b29317","modified":1509831038000},{"_id":"source/_posts/Nodejs-II-快速學習自我挑戰-Day2.md","hash":"250dd347e72343f0290a4b063d2bf7e48df61864","modified":1511064170739},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day1.md","hash":"bc651b7d907af6df8aac8a30f34d6c73de9c5c58","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day10.md","hash":"c46712837a7b75bcf7e79d6b86670ef03bcfe1c7","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day11.md","hash":"b2f21c5cd79ced7cd43eec71ed6206ccc5d5941a","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day12.md","hash":"5db92ae7289f66a4c58b5f466eb31ac0a383ab7c","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day2.md","hash":"767190de98b199a3072e626decd4499c29132169","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day3.md","hash":"e3cce857c933c9b5b1a1e150223c35e0af9064e2","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day4.md","hash":"fde91e6515317f30bd7a829c919c350dee00ae24","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day5.md","hash":"ad811aef83cac4efff9564469fce7df8c6e73f83","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day6.md","hash":"08336eaffce1009ab57131f8f14c3943fa97f7b1","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day7.md","hash":"b63b6c5984cf72c80fc9947098ae29425817e557","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day8.md","hash":"a2db8a758813b83ff2a8edb3803a1461e51fbad3","modified":1509721097000},{"_id":"source/_posts/Nodejs-快速學習自我挑戰-Day9.md","hash":"5fc43169d328a11caec9d76666652a6c30ea73ef","modified":1509721097000},{"_id":"source/_posts/PHP-multiple-select-寫入資料庫的方法.md","hash":"812b0f74446aadc15d6731092456a307c4fc4579","modified":1509721329000},{"_id":"source/_posts/React-Native-快速學習自我挑戰-Day1.md","hash":"a0dd9e14935b57e112e71507cc121da1e659e079","modified":1509721097000},{"_id":"source/_posts/React-Native-快速學習自我挑戰-Day2.md","hash":"71977c76d6db50f5da6a2aad228a4b0bbd257e2a","modified":1509721097000},{"_id":"source/_posts/React-Native-快速學習自我挑戰-Day3.md","hash":"c949c0d5f66ea817a32a2acfd77956debbada7d6","modified":1509721097000},{"_id":"source/_posts/React-Native-快速學習自我挑戰-Day4.md","hash":"2a3654f3ece681a38f60a22d3446c0db54ae119a","modified":1509721097000},{"_id":"source/_posts/React-Native-快速學習自我挑戰-Day5.md","hash":"d6e01a7d36ffb27acd142787110787f04101ef25","modified":1509721097000},{"_id":"source/_posts/React-Native-快速學習自我挑戰-Day6.md","hash":"1ff6fca983cba63dc0e2cf7ec34d1f8ff6088e4b","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day1.md","hash":"5874389ad53ca5f4ff6cec866af5b574acd04eb7","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day10.md","hash":"a0dc475949416718fb79134da711dd98b29c1b51","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day11.md","hash":"b6fb1f6c827c08377ea58b27aa13d4dfa88985bb","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day12.md","hash":"3fadfb0e8330dc5a72ac68f5f1f63c2e059da3a2","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day2.md","hash":"e34b52c454efff101ac869ddfa12a20152730cf9","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day3.md","hash":"da13c7f602423ada4d477df3990d79890c9e0993","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day4.md","hash":"0f7329d626b6d3d4aaf276a3ccfa45e3135001ef","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day5.md","hash":"bb8356ac55a1832a6c583db10078300702e947c5","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day6.md","hash":"91c4fdf78922f20c5a03b151590d2175e9e4541f","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day7.md","hash":"8d9c48242ac313451317cd259afd66f314594340","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day8.md","hash":"dd65ad4ed1807db618d313ea8977da2a26bb37b8","modified":1509721097000},{"_id":"source/_posts/React快速學習自我挑戰-Day9.md","hash":"72e2a53aadd4e1b7f1a0cbc5a3d05fddd0c0372a","modified":1509721097000},{"_id":"source/_posts/The-connection-of-people-in-the-age-of-information.md","hash":"9f79c269c35b68decaea2d1addea0db0e02258e2","modified":1509721329000},{"_id":"source/_posts/Train-to-Busan-屍速列車-劇透.md","hash":"5fde26770daa1d2da3129e2d7546e619fdf4bbd1","modified":1509721329000},{"_id":"source/_posts/UI-網頁設計快速學習自我挑戰-Day1.md","hash":"3f1353d5df4e2c3268f3ae5d60fe1df12b5203d0","modified":1510301105000},{"_id":"source/_posts/Wordpress-處理中文檔名上傳.md","hash":"eb84c02d1757f1081e0db7df44cc5f9ebf6e3824","modified":1509721329000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day1.md","hash":"6416389963aca25ebc556da171cdfd6a96d1b2a3","modified":1509721097000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day2.md","hash":"cfeba01f19f0aa5b30d93aab062e951b8bfb0486","modified":1509721097000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day3.md","hash":"296937e61682bcf3fc813a844efbe5064e11d7a0","modified":1509721097000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day4.md","hash":"98bb7bd658cc96155a543ac689791b29f8d2fb15","modified":1509721097000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day5.md","hash":"22ce908531a77dc1de9737a89b254f31e9886830","modified":1509721097000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day6.md","hash":"5958b8fa9c3dabe7587cbe4ab3628d835d5c2e79","modified":1509721097000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day7.md","hash":"707f4867819c0b020ae728751fdd49bc41c1262f","modified":1509721097000},{"_id":"source/_posts/docker-快速學習自我挑戰-Day8.md","hash":"30871bab20cda137b69104dfc558161a02331df3","modified":1509721097000},{"_id":"source/_posts/hello-world.md","hash":"d9741835e391da2229673ea7af4679d3cb13d53d","modified":1509804420000},{"_id":"source/_posts/在hexo使用emoji.md","hash":"4df954a201ce7f73b5377da930f120f5daab12b0","modified":1509721329000},{"_id":"source/_posts/提高生產效率：適應、改善、執行.md","hash":"6f62cc40ed49b09a99974ee66dfe24415c4a1f9a","modified":1509721097000},{"_id":"source/_posts/筆記規則-重點摘要.md","hash":"332a5efab02653fa944d464d36a2ee858ff3f9cd","modified":1509721329000},{"_id":"source/_posts/華碩Win8電腦USB開機.md","hash":"2fc0903cde7d3eef435a938525c87deac3b3ed3c","modified":1509721329000},{"_id":"themes/hueman/languages/ca.yml","hash":"d082e6f9e7615556b8f6c5f1286f0db8a0db195e","modified":1488686341000},{"_id":"themes/hueman/languages/en.yml","hash":"3416fee358d869e6abf0cca695edf8386349053f","modified":1488686341000},{"_id":"themes/hueman/languages/es.yml","hash":"97191c8ab7ce5334369d96f6e53a6d365a2057b1","modified":1488686341000},{"_id":"themes/hueman/languages/fr.yml","hash":"0624f8f7532f1312caaf4f8d498aab69c80a92f2","modified":1488686341000},{"_id":"themes/hueman/languages/id.yml","hash":"03e45cf88b69e657a340362e18668e443ddaae47","modified":1488686341000},{"_id":"themes/hueman/languages/hu.yml","hash":"5dd987ad5f33748bcba1d9a7eb78c1800b7c8bed","modified":1488686341000},{"_id":"themes/hueman/languages/ja.yml","hash":"56f3af0bf5cc56f9f7bf24fe5cb881a6a1b34e7b","modified":1488686341000},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"6f9539673e08d66866bb210b78863ef68023f991","modified":1488686341000},{"_id":"themes/hueman/languages/ru.yml","hash":"99f111b39f867d421ff4cb859dd1deb26caa382e","modified":1488686341000},{"_id":"themes/hueman/languages/tr.yml","hash":"003cb50200eba865d57e5c53925636f1a5ec0a70","modified":1488686341000},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"05737aa022a007b97034a9d9fc80e606d5a25598","modified":1488686341000},{"_id":"themes/hueman/languages/vi.yml","hash":"edeb4492a08af458fe958dc4d48101c96750b159","modified":1488686341000},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1488686341000},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"bae978712962e6f071995320a31004281eef4caf","modified":1479180156000},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1488686341000},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1488686341000},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1488686341000},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1488686341000},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1488686341000},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1488686341000},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1488686341000},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1488686341000},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1488686341000},{"_id":"themes/hueman/source/.DS_Store","hash":"9c9ecf7aa2136cc1d35f45c694c831ad33cfa968","modified":1510306512000},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"eeecd28eaa9c2f221111eada3fcdbdeec062a3eb","modified":1488905326000},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1488686341000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1488686341000},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"297bafb472b4c637cfd39fde1cbab36a08b4839c","modified":1509686481000},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"1ecc5ba82ae4236da7635a58d4584fd67f6f1fc3","modified":1488686341000},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1488686341000},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"305aa07646ab03e00d8239a811f4ec6f75751e1e","modified":1488686341000},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1488686341000},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1488686341000},{"_id":"themes/hueman/layout/common/article.ejs","hash":"bcb1e4ccb099ce116e172f4b35cef0af0c2c129a","modified":1488686341000},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"da7b0f6692cd931bddd6068922e9cd1b918509b8","modified":1488905470000},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"0c19606844e881e32d3600eb452e349373a617e2","modified":1501303264000},{"_id":"themes/hueman/layout/common/head.ejs","hash":"09270f090d1299f26b7284aa539946e5a58ffe8d","modified":1488905422000},{"_id":"themes/hueman/layout/common/header.ejs","hash":"4dbb53393c3ebef01088592babf135d2f6559f47","modified":1488686341000},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1488686341000},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"745666ee78b714aa34d8774a005a0598261ec349","modified":1488686341000},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"3ee280d4847f2cde7d450e298f917b10b9c5d507","modified":1488686341000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1488686341000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1488686341000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1488686341000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"52552496d83d032702f9fc40da8d62894dc51dae","modified":1488686341000},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1488686341000},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1488686341000},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1488686341000},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1488686341000},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1488686341000},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1488686341000},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1488686341000},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1488686341000},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1488686341000},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1488686341000},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1488686341000},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1488686341000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1488686341000},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1488686341000},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1488686341000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1488686341000},{"_id":"themes/hueman/source/css/_extend.styl","hash":"2860d503b68ae81ea7675c82c6e63873e0c9e761","modified":1488686341000},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1488686341000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"ce03de3658b55b5f90bb4dd18679be18ec38acaa","modified":1488686341000},{"_id":"themes/hueman/source/css/style.styl","hash":"b76d43839bda01ee791e71093f009ad2c8b093b2","modified":1488686341000},{"_id":"themes/hueman/source/images/Connection.jpg","hash":"e7833f33a3d88ff23b4664e2ee0b7160b81de183","modified":1472891887000},{"_id":"themes/hueman/source/images/MolecularMedicine.jpg","hash":"7f257339e55f28d7a38fa5c08aa59ae275c872bc","modified":1473830873000},{"_id":"themes/hueman/source/images/.DS_Store","hash":"5d307af9244b2e61c07f5259e82a6b1ea68cd443","modified":1509831858000},{"_id":"themes/hueman/source/css/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1509818123000},{"_id":"themes/hueman/source/images/PottedPlant.jpg","hash":"94e62414e103428a158878ec8c7c74c82c8686a4","modified":1474523155000},{"_id":"themes/hueman/source/images/TcmadrForgetpasswordPage.png","hash":"c57cc49c77f80cf38cf537c4bd6d90fbce48f284","modified":1474588056000},{"_id":"themes/hueman/source/images/TcmadrLoginPage.png","hash":"19bd06c20bbb36aa4a11b59c6d74887f562e906b","modified":1474587632000},{"_id":"themes/hueman/source/images/TcmadrRegisterPage.png","hash":"0d26c0044f0624c160a11837e11f7b51a0416b3a","modified":1474587926000},{"_id":"themes/hueman/source/images/atom.jpg","hash":"54cb1cc4657c05459506a5867e1e38ff08963542","modified":1473126081000},{"_id":"themes/hueman/source/images/github.jpg","hash":"46f500c5be9ee4b1a1488ba09de7ef82562c6378","modified":1479365334000},{"_id":"themes/hueman/source/images/hello_world.png","hash":"7abf6b0805eceb7131a39f558dc13af3e6122ece","modified":1472650453000},{"_id":"themes/hueman/source/images/javascript.jpg","hash":"8382d69254d3dac426e355931d764daa0715a269","modified":1478153481000},{"_id":"themes/hueman/source/images/logo.png","hash":"c9af01938247347f4a01de4d5627ce190f8435b0","modified":1472484842000},{"_id":"themes/hueman/source/images/php_mysql_array.jpg","hash":"c9cc6e41237a527d08b8816faea24e663a6df627","modified":1480571109000},{"_id":"themes/hueman/source/images/line.jpg","hash":"43511dc67d2fee35650b54485aa7ed3e45eec549","modified":1479972336000},{"_id":"themes/hueman/source/images/notebook.jpeg","hash":"936a5f665578cea52ace24aefeb1c7df62d87ff8","modified":1484274237000},{"_id":"themes/hueman/source/images/tcmadr_inside_page.png","hash":"71bbdd30e6b74eeb50f9b6574861f83b0606ec2f","modified":1474270950000},{"_id":"themes/hueman/source/images/tcmadr_procedure.png","hash":"68c62977a8871f3db6fbe7f46a9c49df8762adc6","modified":1474270952000},{"_id":"themes/hueman/source/images/tcmadr_login_page.png","hash":"ba7d8132be04a099f6a81c55bfad8eb9386586b5","modified":1474270951000},{"_id":"themes/hueman/source/images/thesis.jpg","hash":"c69b90c6e33caac322c87760b09fd7ef5543f60c","modified":1474519495000},{"_id":"themes/hueman/source/images/vincent.ico","hash":"094bc640d315befac3370776fd4a66ac26217e09","modified":1472484705000},{"_id":"themes/hueman/source/images/wechat.png","hash":"a172effc55ab77e8a505cdb2becc6ad3f0910f49","modified":1479972338000},{"_id":"themes/hueman/source/images/wordpress.png","hash":"f34cf410ea4c3c4e9ceb426cf2471f3e8cb30994","modified":1488615985000},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1488686341000},{"_id":"themes/hueman/source/js/main.js","hash":"ebe5a326605ab655155235c532b54a78a0662988","modified":1488686341000},{"_id":"themes/hueman/source/images/Mechanic＿Resurrection.jpg","hash":"d58287bc231f4130ed1f18ce3c2be549ab7de34b","modified":1473388334000},{"_id":"themes/hueman/source/images/emoji.png","hash":"05a12ebd1fd21d79d793abd22e28a2011736f588","modified":1473819658000},{"_id":"themes/hueman/layout/common/post/category.ejs","hash":"f47522c059d3b4d721ce501203c05f94a285c0b5","modified":1488686341000},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"2d090d33cbd23129d63a0ba768a03d717399d9c5","modified":1488686341000},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1488686341000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1488686341000},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"a364204d7152adf6c7522b6568990437e8308d1f","modified":1488686341000},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1488686341000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"0d836e162fc5b933a0844945d8f9a7f33393bc62","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"57048232f7741e635b6c069ed30b59a581b25f49","modified":1488688324000},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1488686341000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"f4ed23cfe2a53c5792786c5b01cc475032bfe0bb","modified":1488766125000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1488686341000},{"_id":"themes/hueman/source/css/images/logo.png","hash":"c9af01938247347f4a01de4d5627ce190f8435b0","modified":1472484842000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1488686341000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1488686341000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1488686341000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1488686341000},{"_id":"themes/hueman/source/images/header_background.jpg","hash":"dba955b39749ad2f4e15413c9681b3b06727cc89","modified":1472484705000},{"_id":"themes/hueman/source/images/hellojs.jpg","hash":"64225a0660679134081c98ed6ec5d21db27825f8","modified":1472562042000},{"_id":"themes/hueman/source/images/learning/.DS_Store","hash":"6faa6e32917e58c7434fd2742a4b457fd3e15954","modified":1511322207118},{"_id":"themes/hueman/source/images/technique/MacEnvironment.jpg","hash":"552682278be00d1cabb8602be763f779d366aa1c","modified":1505308232000},{"_id":"themes/hueman/source/images/train_to_busan.jpg","hash":"56a3fcbac6e0d354c7e8ee21120c5873d0df7718","modified":1473830357000},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1488686341000},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1488686341000},{"_id":"themes/hueman/source/images/herbal.jpg","hash":"3c341b7d25b812e00ac2f96b758e5646cd8171f2","modified":1474339055000},{"_id":"themes/hueman/source/images/asus.png","hash":"45143d26b827b061bc9d83212fa058976ee5e860","modified":1472931101000},{"_id":"themes/hueman/source/images/learning/htmlcss/HtmlCssDay2.jpg","hash":"4ce96182dedf178acdabccd1b203cec0045daaed","modified":1511064044475},{"_id":"themes/hueman/source/images/learning/docker/dockerday1.png","hash":"683867314be64a3828102d90287b6f38f418b3aa","modified":1500749905000},{"_id":"themes/hueman/source/images/learning/jenkins/jenkinsday1.png","hash":"13d12bfbd2fd496b69329ff5d29e873809336b3c","modified":1504367971000},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday3.png","hash":"97c15ad61c6eda82fba0ce6b72d6bddf6cfdde8c","modified":1502570791000},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday4.jpg","hash":"c44ef400152e1d42b13e062c8dc5c243d1bb1020","modified":1503469561000},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday5.png","hash":"0542224880b332af39084f1155340694adc7519f","modified":1503506945000},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday6.png","hash":"6331071f1fe39ae79effd032b43aee8cb75827f4","modified":1503970786000},{"_id":"themes/hueman/source/images/learning/nodejsII/NodejsIIDay02.png","hash":"2bd06020fa4ad08d0fad0a6d88977fa522e9ebd4","modified":1510306477000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday1.png","hash":"ec56826a9dcddeed1278be5162e80ded054e63e3","modified":1496936102000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday10.jpg","hash":"7334d7184d28d8084a631e6e8084c38c58e1994d","modified":1507394408000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday12.jpg","hash":"c81d39efc25b7228805dccfaa4db01638aa2b81a","modified":1507942251000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday2.jpg","hash":"cd9642a658da988a40b7bcaa229d06824a82a0df","modified":1497190063000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday3.jpg","hash":"4e5ec40ce914c26691c9ef7ddea4a677cfe8b606","modified":1497302685000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday6.png","hash":"fca7a3ab18c96d8ee6ca04ad26a8a766378b532c","modified":1505400630000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday7.png","hash":"235ed76f367c9ff7aca487da06e2ff62a9c533a0","modified":1505649318000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday8.png","hash":"eaa9ab2b11d143299df4473ca14dfa63a193d1a9","modified":1505755778000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday9.png","hash":"0159d27cea03c89b0e357ffe45e4f00db42673f6","modified":1506550590000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday1.jpg","hash":"83f8131a62aa9413f1c708d087dc4fd76bad7b73","modified":1492715027000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday12.png","hash":"4a6e82c94b5a987184e34b1afd9be4e34f2881d7","modified":1494452772000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday11.jpg","hash":"32d64ede7ad12bea0a555fc2750ee64d8682fa07","modified":1494013370000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday13.jpg","hash":"f96386b10681d2c6ca3232b093e0bcb81e7191b5","modified":1494529590000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday17.png","hash":"130b144d559c2bacc954c5823d36acf004f50f35","modified":1495905667000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday15.png","hash":"a46d82e1b04781d839f20b7f81da840ff02a3e54","modified":1495714130000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday16.jpg","hash":"7f2dfabc073465cea057e5ee057fdb42d36d7a40","modified":1495772546000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday18.png","hash":"bcddaa6d74624bff6e14c9022e1c2338074abc9c","modified":1496044829000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday19.jpg","hash":"4ef99e673507dc44560aac950a2c6eac12911c1a","modified":1496077004000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday20.png","hash":"40b687a92d0000d577b4b7781466ffcaf8452be9","modified":1496216756000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday2.png","hash":"d4df1b4ca58c6a69f72e5da8d1da23aa27be1bc5","modified":1492935206000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday3.jpg","hash":"64a0d3a87e4f45929bfe79ab737b34e4e1c93b90","modified":1493017992000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday22.jpg","hash":"5d240d380c1c73c6acdef2d6e09ef6c18834184e","modified":1496646203000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday4.jpg","hash":"820099406ffa90a1500f109a25b74bc7b16f2c05","modified":1493097242000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday6.jpg","hash":"b3784d18ab8879ad0a338980a740ab85f9570fd8","modified":1493523108000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday8.png","hash":"89c3d5520bf345b16dd9adf7f95bccddb1648171","modified":1493708239000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday9.png","hash":"f1e3fa79b2abc87ee0b4155b9615632cbee12687","modified":1493708389000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday5.jpeg","hash":"a8c876505945c019a735d4ee8876f90a9441fd35","modified":1493259658000},{"_id":"themes/hueman/source/images/learning/react/react.png","hash":"aca322f5f9de6c8e92cd23f46109518c17015016","modified":1488718769000},{"_id":"themes/hueman/source/images/learning/react/reactday10.jpg","hash":"f448ba4c58eb8aaab2c3f2a36beddaa06f7b4972","modified":1490149099000},{"_id":"themes/hueman/source/images/learning/react/reactday11.png","hash":"d021b019b598323a94b6fe234acca686a08183b1","modified":1490855812000},{"_id":"themes/hueman/source/images/learning/react/reactday4.jpg","hash":"9b92f857e538f36ad5fb7856058054addb566a8c","modified":1489026283000},{"_id":"themes/hueman/source/images/learning/react/reactday3.png","hash":"ac0c27c12e73e16b4e8fbb4d54869f2176962bf1","modified":1488901453000},{"_id":"themes/hueman/source/images/learning/react/reactday5.jpg","hash":"57a556609f0497409a12f74e03e5b22ca3a8be47","modified":1489028447000},{"_id":"themes/hueman/source/images/learning/react/reactday6.png","hash":"9295c59f7c7258af4a5dfaa102ab3abc2af3168e","modified":1489122116000},{"_id":"themes/hueman/source/images/learning/react/reactday7.png","hash":"7dd62df3d6e75123eb5359952163dcbe0618ae42","modified":1489234484000},{"_id":"themes/hueman/source/images/learning/react/reactday8.jpg","hash":"caf5ce23e26b6088f2238dbd90f2c104e9c479a7","modified":1489416944000},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday1.png","hash":"d78da45b4b488c5b299eb8a06590283467f7de1b","modified":1501757321000},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday5.png","hash":"afe041954a0d35d37dc22142dbcbf303810a5281","modified":1503045505000},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday4.jpg","hash":"ea77c47c58e1dc8a889ac155f75cacbf1947d545","modified":1502228523000},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday6.png","hash":"541b11e9eab481539342e38d046e5f180033061a","modified":1503143598000},{"_id":"themes/hueman/source/images/learning/ui/UIDay1.png","hash":"a95d37ca20edc3a7aacfe275869b7bdeaefc5692","modified":1510219912000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1488686341000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1488686341000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1488686341000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1488686341000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1488686341000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1488686341000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1488686341000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1488686341000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1488686341000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1488686341000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1488686341000},{"_id":"themes/hueman/source/images/tcmadr2.png","hash":"3572587f8d61c0a547c064cca89a0463b131eb90","modified":1474535804000},{"_id":"themes/hueman/source/images/learning/htmlcss/HtmlCssDay1.jpg","hash":"550207ba7147f35f274546d618e49a37312cb644","modified":1509831710000},{"_id":"themes/hueman/source/images/learning/docker/dockerday5.jpg","hash":"14ad036066cb3f4bc520f4f31f02d73f5494011f","modified":1501303181000},{"_id":"themes/hueman/source/images/learning/docker/dockerday4.png","hash":"15d5aca8ab8eb22e77deb88877f91ffa300f1420","modified":1501227092000},{"_id":"themes/hueman/source/images/learning/docker/dockerday6.png","hash":"1b9b3e1341011e1c7b1d87d79b8ee9da832218f5","modified":1501361164000},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday2.png","hash":"2f21fefdc36c226e183ed4ea0789d68aa6a26011","modified":1502484122000},{"_id":"themes/hueman/source/images/learning/kubernetes/kubernetesday1.png","hash":"97e3e01dc2d82fa833fc1da9ddb0fd7e531925ac","modified":1502348852000},{"_id":"themes/hueman/source/images/learning/nodejsII/NodejsIIDay01.png","hash":"953d7b71457be8aeb4d2e84191b848f1a5a4849a","modified":1509612192000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday5.jpg","hash":"d37d14bd851dc287a96a127bfff4726a6f5a684c","modified":1497410610000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday14.jpg","hash":"1d1eb12e60ff75ce812d136c84fbd1c8a91e6d95","modified":1494691649000},{"_id":"themes/hueman/source/images/learning/productivity/productivity.jpg","hash":"5aaeb08b9cffad22794af7f64719fec139ca446c","modified":1504165391000},{"_id":"themes/hueman/source/images/learning/react/reactday12.jpg","hash":"a48b9cc25652ea2d4f0df418615d8afa4e767931","modified":1491202331000},{"_id":"themes/hueman/source/images/learning/react/reactday2.png","hash":"6f04fdf524365b4055dd71ddbf25bfb1e9391066","modified":1488766357000},{"_id":"themes/hueman/source/images/learning/react/reactday9.jpg","hash":"a57dc93f0234ad91520c51ca7ae101c0026f228b","modified":1489493827000},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday3.jpg","hash":"5d45d32eaf5b4ef174c97c672dd9e4578369c194","modified":1502184547000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488686341000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488686341000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488686341000},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1488686341000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488686341000},{"_id":"themes/hueman/source/images/header_background_grey.jpg","hash":"78aaa6b6838f71471739e49405fd73f19851218d","modified":1472484705000},{"_id":"themes/hueman/source/images/learning/docker/dockerday3.png","hash":"1532cdc2dad42004c4fec96d8ec5618ee10576d7","modified":1500989736000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday4.jpg","hash":"e011b2c3d4eb3fd25c22f16b0ab8ac74266be9ab","modified":1497358108000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday10.png","hash":"649021f1a38104f3586aa367da5e84ee6b30dabd","modified":1493887193000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday7.jpeg","hash":"501e7c25653719a96c4b26bbfd32dc56c306ce32","modified":1493565589000},{"_id":"themes/hueman/source/images/learning/reactNative/reactnativeday2.png","hash":"e3ca9d3b0afd4e3a57f2f6b2a7a55c86babc6060","modified":1501865009000},{"_id":"themes/hueman/source/images/tcmadr.png","hash":"e50d5ca257fc8f49b4201aa9d7eeac445b458765","modified":1474007764000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488686341000},{"_id":"themes/hueman/source/images/learning/htmlcss/box-sizing.png","hash":"3e94e1d8c62fa7c16bd1fbfaa330ff5f810c4169","modified":1510058552000},{"_id":"themes/hueman/source/images/learning/htmlcss/css-model.png","hash":"5b477b75c68ffa71e3401c5e64cbf6e0c9ea9589","modified":1510057696000},{"_id":"themes/hueman/source/images/learning/docker/Bret Fisher_Docker.jpg","hash":"a50bafca37e7551f83c292e3a15b48ffb8f77cbe","modified":1501706988000},{"_id":"themes/hueman/source/images/learning/docker/dockerday2.png","hash":"525bb8ed9427828fd5395da768fdfa19e6676538","modified":1500880286000},{"_id":"themes/hueman/source/images/learning/kubernetes/Edward Viaene_Kubernetes.jpg","hash":"4b542dcf8e0b6ee1f401169862d1c3f7fbaa411c","modified":1504178938000},{"_id":"themes/hueman/source/images/learning/laravel/EdwinDiaz_Laravel.jpg","hash":"515fbad3441517f3aed981e668e5803928e27a11","modified":1504179011000},{"_id":"themes/hueman/source/images/learning/laravel/laravelday21.png","hash":"5c3003019485d9313b61e05083d20630eafe6838","modified":1496307525000},{"_id":"themes/hueman/source/images/learning/productivity/Doru Catana_Productivity.jpg","hash":"0c7ef5be46f79ac1ba6ca38cebcfa9e8ce2ffa1d","modified":1504178944000},{"_id":"themes/hueman/source/images/learning/docker/dockerday7.png","hash":"4439fc08918a85d7bc57afcdc4a9680cf967afe5","modified":1501411364000},{"_id":"themes/hueman/source/images/learning/docker/dockerday8.png","hash":"5122190598fbf58c648ccf753e080cfc6464778a","modified":1501651841000},{"_id":"themes/hueman/source/images/learning/nodejs/nodejsday11.jpeg","hash":"60263ec9f9dc7444ec90e32e82ea01f492ccd5f7","modified":1507590891000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488686341000},{"_id":"themes/hueman/source/images/HellojsCertification.jpg","hash":"96363c4e1be786453ddd0a9940e76f1afcd3bbfe","modified":1473197206000},{"_id":"themes/hueman/source/images/tcm.png","hash":"b7bcbe8c5437c5bb79989875a5361553d1f6dead","modified":1473386918000},{"_id":"public/content.json","hash":"8fb8f8b3635f3eb0c19ecc91b1ea76d0035ffc11","modified":1511761707039},{"_id":"public/about/index.html","hash":"81124207373d781dbb75125ae54fe299c6a3dc47","modified":1511761709515},{"_id":"public/2017/11/19/HTML5-CSS3-快速學習自我挑戰-Day2/index.html","hash":"eb919696b38d516b1ed0ba4f411b1fb9abb4d623","modified":1511761709515},{"_id":"public/2017/11/10/Nodejs-II-快速學習自我挑戰-Day2/index.html","hash":"f093f7b31831cbcfbd59489ee1e96c64ad929b2f","modified":1511761709515},{"_id":"public/2017/11/09/UI-網頁設計快速學習自我挑戰-Day1/index.html","hash":"34508fe4f3eb68ddf1aed95b190b35ddea295e8d","modified":1511761709516},{"_id":"public/2017/11/04/HTML5-CSS3-快速學習自我挑戰-Day1/index.html","hash":"f532eb0a782dd011ef732fb00ab6f781216aa0d4","modified":1511761709516},{"_id":"public/2017/11/02/Nodejs-II-快速學習自我挑戰-Day1/index.html","hash":"3715338372595e18e09c2f8913c9286ad5176a13","modified":1511761709516},{"_id":"public/2017/10/14/Nodejs-快速學習自我挑戰-Day12/index.html","hash":"02e85dc8c0b97906e9cd2c7c1e0651cec0de13d4","modified":1511761709516},{"_id":"public/2017/10/10/Nodejs-快速學習自我挑戰-Day11/index.html","hash":"3878c7b094663ea8c69df813962332da68942f35","modified":1511761709516},{"_id":"public/2017/10/08/Nodejs-快速學習自我挑戰-Day10/index.html","hash":"a8621cffa07b06770a911140a439c5e4b15f4dfa","modified":1511761709516},{"_id":"public/2017/09/28/Nodejs-快速學習自我挑戰-Day9/index.html","hash":"ffe763971a1001428021d14e843e0f7a3bb42e9a","modified":1511761709516},{"_id":"public/2017/09/19/Nodejs-快速學習自我挑戰-Day8/index.html","hash":"b853bf88459c104b62e216341b452d72c7551a04","modified":1511761709516},{"_id":"public/2017/09/17/Nodejs-快速學習自我挑戰-Day7/index.html","hash":"0755378797388c8cb731457400f756d5cc8083db","modified":1511761709516},{"_id":"public/2017/09/15/Nodejs-快速學習自我挑戰-Day6/index.html","hash":"582be8c8e87ae4729424baf2797bf60e51072275","modified":1511761709516},{"_id":"public/2017/09/14/Nodejs-快速學習自我挑戰-Day5/index.html","hash":"50033a2720c1699f3857dbe39cdf5ea6ccb0bc81","modified":1511761709516},{"_id":"public/2017/09/13/Mac-開發環境建置/index.html","hash":"d0d50d3029b743ea6e4ded228ec1fd06f9cad834","modified":1511761709516},{"_id":"public/2017/09/02/Jenkins-快速學習自我挑戰-Day1/index.html","hash":"2274dc561d27b41119f45f83bac38ccfe8acb25c","modified":1511761709516},{"_id":"public/2017/08/31/提高生產效率：適應、改善、執行/index.html","hash":"e1636558e28a955738dab3d93fe13a7622c6f36e","modified":1511761709516},{"_id":"public/2017/08/29/Kubernetes-快速學習自我挑戰-Day6/index.html","hash":"e5b98545137769029804072348e7c9d197eb95c0","modified":1511761709516},{"_id":"public/2017/08/22/Kubernetes-快速學習自我挑戰-Day5/index.html","hash":"adb55d266949a4c7c5d50a6ccad9cfa3e40f6f3e","modified":1511761709516},{"_id":"public/2017/08/20/Kubernetes-快速學習自我挑戰-Day4/index.html","hash":"9d5028bf056396cc751658a24b6b8f8553137941","modified":1511761709517},{"_id":"public/2017/08/18/React-Native-快速學習自我挑戰-Day6/index.html","hash":"ccbd0e5ce52bf8f65f82ff13cf3845d3f6c68f6b","modified":1511761709517},{"_id":"public/2017/08/17/React-Native-快速學習自我挑戰-Day5/index.html","hash":"04e2f382f1b68d28cff932adc9c28e5784ccde1f","modified":1511761709517},{"_id":"public/2017/08/16/React-Native-快速學習自我挑戰-Day4/index.html","hash":"72553db1f069c5f8da08fe66338885763bd16b7b","modified":1511761709517},{"_id":"public/2017/08/15/Kubernetes-快速學習自我挑戰-Day3/index.html","hash":"5da58d435902e2bd4f1e19a4de39512e19626e3c","modified":1511761709517},{"_id":"public/2017/08/11/Kubernetes-快速學習自我挑戰-Day2/index.html","hash":"1681b2ba7b455b4273808d2577eda7563f2f7474","modified":1511761709517},{"_id":"public/2017/08/10/Kubernetes-快速學習自我挑戰-Day1/index.html","hash":"21a6d386b583bc3c82445c84c9d8cbf0b3c6e4d1","modified":1511761709517},{"_id":"public/2017/08/08/React-Native-快速學習自我挑戰-Day3/index.html","hash":"b5bbb340dc7353911bf9ed79fc11f75719bfda29","modified":1511761709517},{"_id":"public/2017/08/05/React-Native-快速學習自我挑戰-Day2/index.html","hash":"cb41dc0aa215a894f11f474c0a1f3ceac01e1d55","modified":1511761709517},{"_id":"public/2017/08/03/React-Native-快速學習自我挑戰-Day1/index.html","hash":"98a1bc35d6776abe04dccf2f9f4c651a50cbe8e1","modified":1511761709517},{"_id":"public/2017/08/02/docker-快速學習自我挑戰-Day8/index.html","hash":"74637e4a0cefd589194a47578b48a5eaa83805df","modified":1511761709517},{"_id":"public/2017/08/01/docker-快速學習自我挑戰-Day7/index.html","hash":"ce6395a3df59a601087687336ef5d1d0f85fddf2","modified":1511761709517},{"_id":"public/2017/07/30/docker-快速學習自我挑戰-Day6/index.html","hash":"625234a7a3b7ca77c4c3c0bb89c2c59eb37f15ab","modified":1511761709517},{"_id":"public/2017/07/29/docker-快速學習自我挑戰-Day5/index.html","hash":"463889571959bb46fad5f64bab1ad74fcb6d1685","modified":1511761709517},{"_id":"public/2017/07/28/docker-快速學習自我挑戰-Day4/index.html","hash":"9a5e66831fbcfd4bdad2b18873f76c24cb37e2d9","modified":1511761709517},{"_id":"public/2017/07/26/docker-快速學習自我挑戰-Day3/index.html","hash":"c09cc05f8d9f3058dd4957fb0bb84d9f76b97a76","modified":1511761709517},{"_id":"public/2017/07/24/docker-快速學習自我挑戰-Day2/index.html","hash":"7431bf0cef414cca6d2e76119a21a8864404512b","modified":1511761709517},{"_id":"public/2017/07/23/docker-快速學習自我挑戰-Day1/index.html","hash":"199ec4c1641db39d2466b47c66910bc2c8109c98","modified":1511761709518},{"_id":"public/2017/06/13/Nodejs-快速學習自我挑戰-Day4/index.html","hash":"8d2bb701436518a9f9dee08917e8b18e74703a00","modified":1511761709518},{"_id":"public/2017/06/12/Nodejs-快速學習自我挑戰-Day3/index.html","hash":"7a2162a9a38308dcdbf87b4533cf946b36ad795b","modified":1511761709518},{"_id":"public/2017/06/11/Nodejs-快速學習自我挑戰-Day2/index.html","hash":"b2773268213202024f479a5ee1eb443e0d85f94b","modified":1511761709518},{"_id":"public/2017/06/10/Nodejs-快速學習自我挑戰-Day1/index.html","hash":"f49f8dc394dee2555f8788dc3349bdd9839d656c","modified":1511761709518},{"_id":"public/2017/06/01/Lavarel-快速學習自我挑戰-Day22/index.html","hash":"79921ce8864cdf8aa3a6eaab1c809c06394407b7","modified":1511761709518},{"_id":"public/2017/05/31/Lavarel-快速學習自我挑戰-Day21/index.html","hash":"280e2ec420059c12fc76506e26b0a984e3bf0b77","modified":1511761709518},{"_id":"public/2017/05/30/Lavarel-快速學習自我挑戰-Day20/index.html","hash":"c15678e3ed9a5938427c57b75fa1252baba0ab06","modified":1511761709518},{"_id":"public/2017/05/29/Lavarel-快速學習自我挑戰-Day19/index.html","hash":"5a898d7d7840b14dbdf5cf0f8d1112b0f8490697","modified":1511761709518},{"_id":"public/2017/05/28/Lavarel-快速學習自我挑戰-Day18/index.html","hash":"2cd9bfce4e48e996557c4621abb2b5b7a46e9f9d","modified":1511761709518},{"_id":"public/2017/05/27/Lavarel-快速學習自我挑戰-Day17/index.html","hash":"e49ed4ea3edcef3ed74a7fafb1c0b4eaa348d3b6","modified":1511761709518},{"_id":"public/2017/05/26/Lavarel-快速學習自我挑戰-Day16/index.html","hash":"3b943148e4aa352ed049419348e6aa12c734699c","modified":1511761709518},{"_id":"public/2017/05/25/Lavarel-快速學習自我挑戰-Day15/index.html","hash":"7a26aea63d6602f70d1b844529102ecf6fd080ef","modified":1511761709518},{"_id":"public/2017/05/05/Lavarel-快速學習自我挑戰-Day14/index.html","hash":"cf21123032771a85dfbeafcde7f49348c4d71bfb","modified":1511761709518},{"_id":"public/2017/05/04/Lavarel-快速學習自我挑戰-Day13/index.html","hash":"7b0998539c6d4b854346c6f28d1086deae9e1582","modified":1511761709518},{"_id":"public/2017/05/03/Lavarel-快速學習自我挑戰-Day12/index.html","hash":"2ebcc4f6695c85e4eb546976fbd24ffa7a8ff041","modified":1511761709518},{"_id":"public/2017/05/02/Lavarel-快速學習自我挑戰-Day11/index.html","hash":"dd8fbbe089a16ce40f3a77e1e0dbedf957594b3a","modified":1511761709518},{"_id":"public/2017/05/01/Lavarel-快速學習自我挑戰-Day10/index.html","hash":"3eab012bcd9392226469b39faaaf9e1d3590d3f7","modified":1511761709518},{"_id":"public/2017/04/30/Lavarel-快速學習自我挑戰-Day9/index.html","hash":"f886f17fd47dfb58a7fc0dea4008cf1a7af9f165","modified":1511761709519},{"_id":"public/2017/04/29/Lavarel-快速學習自我挑戰-Day8/index.html","hash":"13ac979e0e4345e317741da0e310eea3d436f59e","modified":1511761709519},{"_id":"public/2017/04/28/Lavarel-快速學習自我挑戰-Day7/index.html","hash":"aff9d4ba65dd453335a8cef47e574833196b2bb9","modified":1511761709519},{"_id":"public/2017/04/27/Lavarel-快速學習自我挑戰-Day6/index.html","hash":"693a3e3c90df5f48be3cdece7414e32e5b9f8f5c","modified":1511761709519},{"_id":"public/2017/04/26/Lavarel-快速學習自我挑戰-Day5/index.html","hash":"15d20bf362ce041375c54f226b7c89db8f002a81","modified":1511761709519},{"_id":"public/2017/04/25/Lavarel-快速學習自我挑戰-Day4/index.html","hash":"a72b653a5fbe58fa17aa89d375507d74d3e840b3","modified":1511761709519},{"_id":"public/2017/04/24/Lavarel-快速學習自我挑戰-Day3/index.html","hash":"7e244f7fc1596bb7e5a0352b3fb26742f97607c1","modified":1511761709519},{"_id":"public/2017/04/23/Lavarel-快速學習自我挑戰-Day2/index.html","hash":"cf8410a2d7ab1132ec131f4c03e37b557d7069fc","modified":1511761709519},{"_id":"public/2017/04/22/Lavarel-快速學習自我挑戰-Day1/index.html","hash":"2a48d8826913c389f8d5d3453f86ab804a7616fd","modified":1511761709519},{"_id":"public/2017/04/03/React快速學習自我挑戰-Day12/index.html","hash":"5ed3da9db5eef2a5e093303c1343a3cbd39774f3","modified":1511761709519},{"_id":"public/2017/03/30/React快速學習自我挑戰-Day11/index.html","hash":"57d60da7a4a3c0c7509db0f37afd6cafbd061518","modified":1511761709519},{"_id":"public/2017/03/22/React快速學習自我挑戰-Day10/index.html","hash":"4f6ce7758c0fd9bbefb3d4aab2430a97caabffe3","modified":1511761709519},{"_id":"public/2017/03/14/React快速學習自我挑戰-Day9/index.html","hash":"4cc12b3dbdfcec1c604965353663a20c9622e532","modified":1511761709519},{"_id":"public/2017/03/13/React快速學習自我挑戰-Day8/index.html","hash":"4b0505068484fe885b0e9e0f2d544c572b60b229","modified":1511761709519},{"_id":"public/2017/03/11/React快速學習自我挑戰-Day7/index.html","hash":"fcd208a95b1e965a5075ae7e420ebf7cfa2eb0e4","modified":1511761709519},{"_id":"public/2017/03/10/React快速學習自我挑戰-Day6/index.html","hash":"0f3971f3355bb9e74dcd4613b799522bb53a8ba1","modified":1511761709519},{"_id":"public/2017/03/09/React快速學習自我挑戰-Day5/index.html","hash":"6f7d124393fec37c0f37973ae9a3718acabf7e07","modified":1511761709519},{"_id":"public/2017/03/08/React快速學習自我挑戰-Day4/index.html","hash":"01b35e6ae9e92c56d4bc80ae30fcb9e8ed2c9784","modified":1511761709519},{"_id":"public/2017/03/07/React快速學習自我挑戰-Day3/index.html","hash":"6d3b69dffaa7430a42eabaf5630a5446bdf02a96","modified":1511761709519},{"_id":"public/2017/03/06/React快速學習自我挑戰-Day2/index.html","hash":"9dd405f4e4ef64cc0915b90f769565ef5fadc520","modified":1511761709519},{"_id":"public/2017/03/05/React快速學習自我挑戰-Day1/index.html","hash":"5e6875cf131877d8f514cd9b43bc216fec8859f2","modified":1511761709519},{"_id":"public/2017/03/04/Wordpress-處理中文檔名上傳/index.html","hash":"4b59f4b4d7ec6fbf42f9344b7abf7f69b25b6109","modified":1511761709519},{"_id":"public/2017/01/13/筆記規則-重點摘要/index.html","hash":"a285cd475d6436e0012f21cc5e1138602d68ded2","modified":1511761709519},{"_id":"public/2016/12/01/PHP-multiple-select-寫入資料庫的方法/index.html","hash":"ac562b3bafb02a43052c7af9b24c9c19162e1686","modified":1511761709520},{"_id":"public/2016/11/17/Github-Pushed-Commit-Delete-Redraw/index.html","hash":"b693d67acd156d6a06eb9257f8f12db0ff7f7f7a","modified":1511761709520},{"_id":"public/2016/11/05/JavaScript用AJAX的方式獲得時間/index.html","hash":"d2ca09f3489b079f0f6f3df32042e4e9b8a4e0b4","modified":1511761709520},{"_id":"public/2016/09/17/In-fact-life-is-a-kind-of-strong/index.html","hash":"4b542dd551915a2617a10324fa4e558f0189aa9b","modified":1511761709520},{"_id":"public/2016/09/11/在hexo使用emoji/index.html","hash":"a476adb31c03573da8a65443e2342e3469ceb285","modified":1511761709520},{"_id":"public/2016/09/10/Train-to-Busan-屍速列車-劇透/index.html","hash":"deb76187fe813d5e547586bf9521d74e0be86d84","modified":1511761709520},{"_id":"public/2016/09/09/Mechanic: Resurrection (極速秒殺2) - 劇透/index.html","hash":"b0f582481472a6ae7e3bc6f5912aee6f71e81a00","modified":1511761709520},{"_id":"public/2016/09/06/Hello-JS-從零開始的React-Native開發/index.html","hash":"c3c5a7e1393b7243360c5f70c9e7d9d3db317ac6","modified":1511761709520},{"_id":"public/2016/09/04/華碩Win8電腦USB開機/index.html","hash":"992fae5a31e15fc4b670d91f4845f1d609e55424","modified":1511761709520},{"_id":"public/2016/09/03/The-connection-of-people-in-the-age-of-information/index.html","hash":"1006a54138cb084908ebf05635dc3f592e00d7f2","modified":1511761709520},{"_id":"public/2016/09/02/hello-world/index.html","hash":"d4a303fb326c2d48ee195fa742ef4ea4676ffc1e","modified":1511761709520},{"_id":"public/2016/08/30/HelloJS專案開發提議/index.html","hash":"aefb1c14e04d5b0ffceb0eafa8bf87aeaa6a11fb","modified":1511761709520},{"_id":"public/archives/index.html","hash":"2fbb81a1ef37581cb43b5541da46d744c14823d6","modified":1511761709520},{"_id":"public/archives/page/2/index.html","hash":"e10f1be59af6c332b357c2412808d3cdbbbeabeb","modified":1511761709520},{"_id":"public/archives/page/3/index.html","hash":"0c4aa414ead709a4a7c28e15b6f72eaac3b8d593","modified":1511761709520},{"_id":"public/archives/page/4/index.html","hash":"d55a1aebe4f9bd045878e11a292b44ccc5ef9a07","modified":1511761709520},{"_id":"public/archives/page/5/index.html","hash":"01cb691c93b386bb3094137be682bfa827c52345","modified":1511761709520},{"_id":"public/archives/page/6/index.html","hash":"7554ce19e4476b6314f611937a9f3b619b3e0f5d","modified":1511761709520},{"_id":"public/archives/page/7/index.html","hash":"07304335f3d6b1358604469ef5596f81b4f7d605","modified":1511761709520},{"_id":"public/archives/page/8/index.html","hash":"f04fbdc0500f344d12407a53dae6fea339ed404e","modified":1511761709520},{"_id":"public/archives/page/9/index.html","hash":"abc90cc44770e57c9b3d44925af24bb92a2786ea","modified":1511761709520},{"_id":"public/archives/2016/index.html","hash":"084436255634bb9464f5e53640a15a1014ffde61","modified":1511761709520},{"_id":"public/archives/2016/page/2/index.html","hash":"9c597b5f1eb9b1b2347ef9e9dd1a54cc7ee8e61d","modified":1511761709521},{"_id":"public/archives/2016/08/index.html","hash":"7743cd405746c7f4f38c813f103a80097114a59c","modified":1511761709521},{"_id":"public/archives/2016/09/index.html","hash":"09732b43397cd86c2a7339ac819e9b4eefcc38e2","modified":1511761709521},{"_id":"public/archives/2016/11/index.html","hash":"f1a69ef960e004d3a0f9495324fa4e824ce2a684","modified":1511761709521},{"_id":"public/archives/2016/12/index.html","hash":"b27927275ffd2407bafdc14b0886363c7c0fbb65","modified":1511761709521},{"_id":"public/archives/2017/index.html","hash":"cd82ec5c6b9942a36d04e9cbe861ea266c988463","modified":1511761709521},{"_id":"public/archives/2017/page/2/index.html","hash":"7e934a97d078c4a445c1101415e1ec19070c3f7f","modified":1511761709521},{"_id":"public/archives/2017/page/3/index.html","hash":"3245211679b155a2f7f27c48e516bba672c1582b","modified":1511761709521},{"_id":"public/archives/2017/page/4/index.html","hash":"7beab6d813c907564fb103a332d5a9b89a0083ca","modified":1511761709521},{"_id":"public/archives/2017/page/5/index.html","hash":"c8bfd162b0486032138341d30d8e50717b4d604c","modified":1511761709521},{"_id":"public/archives/2017/page/6/index.html","hash":"3f5b7167d7c8440ae2aef9067917f3aff905b10a","modified":1511761709521},{"_id":"public/archives/2017/page/7/index.html","hash":"8f7df91dad7ce6d88b6341222c7479edb3340647","modified":1511761709521},{"_id":"public/archives/2017/page/8/index.html","hash":"f4eebab58d5023cd348d2277ee8beb773b9277fc","modified":1511761709521},{"_id":"public/archives/2017/01/index.html","hash":"02f802951671ebfbcf5cd5f404de76820132ce36","modified":1511761709521},{"_id":"public/archives/2017/03/index.html","hash":"4d99557009bcca8235ed7f8a2543008e85515fd0","modified":1511761709521},{"_id":"public/archives/2017/03/page/2/index.html","hash":"5502c794e4b5822d803597f78c22e18652dbb7af","modified":1511761709521},{"_id":"public/archives/2017/04/index.html","hash":"5fb93b206da1beece97c0958588362af6445c359","modified":1511761709521},{"_id":"public/archives/2017/05/index.html","hash":"4f8ee938368484df96558d29e294c877b1583ed3","modified":1511761709521},{"_id":"public/archives/2017/05/page/2/index.html","hash":"678bb3462e52efff500db60610d367161adcf94c","modified":1511761709521},{"_id":"public/archives/2017/06/index.html","hash":"7efc94de3c60dfe21b7352d34661052e37aeea0b","modified":1511761709521},{"_id":"public/archives/2017/07/index.html","hash":"d09c81536db03a5baa076c7f61c3707cdc3b3173","modified":1511761709521},{"_id":"public/archives/2017/08/index.html","hash":"61a87406acd94f817120f86df94cda6eaf5866f6","modified":1511761709521},{"_id":"public/archives/2017/08/page/2/index.html","hash":"798a56ac6858acf86da79024169303bad6635220","modified":1511761709522},{"_id":"public/archives/2017/09/index.html","hash":"af6a769a4a3e17b6872e8ad76f84164e7f3839f5","modified":1511761709522},{"_id":"public/archives/2017/10/index.html","hash":"05bb4d4ab0cd08b5c9c2ce1963a4ab9b8a84f2c2","modified":1511761709522},{"_id":"public/archives/2017/11/index.html","hash":"b26351a9ea804fa4cda225097922d4bb906fa00d","modified":1511761709522},{"_id":"public/index.html","hash":"9287d054381006143e541a924daac31021560b1d","modified":1511761709522},{"_id":"public/page/2/index.html","hash":"87a684dc6e1fa7e5eae5549befbb1184c212a8ad","modified":1511761709522},{"_id":"public/page/3/index.html","hash":"e9c9a256c73f796e8d4b989c56b4e90c410f7101","modified":1511761709522},{"_id":"public/page/4/index.html","hash":"7c4365c1d633046c00f069388e597571d4e04d16","modified":1511761709522},{"_id":"public/page/5/index.html","hash":"cdf1c62a4e4550a2d95f56f5ef61f31d21d27de0","modified":1511761709522},{"_id":"public/page/6/index.html","hash":"da550f32291a9ed4caeaaa45a673189819f93ef2","modified":1511761709522},{"_id":"public/page/7/index.html","hash":"0b61a39896774eb4d13f60f2e7692faacc87a08e","modified":1511761709522},{"_id":"public/page/8/index.html","hash":"3a0ee483502d3db011656be32266bb26edad02da","modified":1511761709522},{"_id":"public/page/9/index.html","hash":"19e3ec22d88d74bc595e55d22bb02d6ab42d88d2","modified":1511761709522},{"_id":"public/categories/技術分享/index.html","hash":"970f9a14583e5598ab5f6f253adaddfb8dba72bf","modified":1511761709522},{"_id":"public/categories/學習歷程/index.html","hash":"2847a28318a74d89fdb807e04056f4569f49f4ba","modified":1511761709522},{"_id":"public/categories/學習歷程/page/2/index.html","hash":"228f5eb3d3a712a8bfa9161738eb6f5e08b23812","modified":1511761709522},{"_id":"public/categories/學習歷程/page/3/index.html","hash":"29c5815df9b2e25ac9d07ceffb61b0c9f3cdfbd0","modified":1511761709522},{"_id":"public/categories/學習歷程/page/4/index.html","hash":"ae93241433d46e72158d43b82191807136321b2d","modified":1511761709522},{"_id":"public/categories/學習歷程/page/5/index.html","hash":"cfffc2d26b556490021db573515b68db0691c78c","modified":1511761709522},{"_id":"public/categories/學習歷程/page/6/index.html","hash":"e8654841162295d465fa4f6c7462fbd6021a8eb8","modified":1511761709522},{"_id":"public/categories/學習歷程/page/7/index.html","hash":"1914cd195b7b93989a0c30ef284536062450107a","modified":1511761709522},{"_id":"public/categories/學習歷程/page/8/index.html","hash":"b4a0f057546fa16ccb641f0ca2c101a04f57e538","modified":1511761709522},{"_id":"public/categories/生活記事/index.html","hash":"30faed4899e466b910e4b1e21ec5dbf2e7547729","modified":1511761709523},{"_id":"public/categories/英文寫作/index.html","hash":"e66bd6c725386b952e88e870d2ea839a7ab01bf6","modified":1511761709523},{"_id":"public/categories/閱讀賞析/index.html","hash":"bb404fd8f3b44e4a040805dea577672a63007434","modified":1511761709523},{"_id":"public/tags/HTML/index.html","hash":"f4b38b646aea76c4b026daa1e81d740abb8cc0b4","modified":1511761709523},{"_id":"public/tags/CSS/index.html","hash":"1690cce99abd8547a3591d8087034e85c4cd18e4","modified":1511761709523},{"_id":"public/tags/UX/index.html","hash":"cca1395bb4571544271c7a70a1212959f41cd7b0","modified":1511761709523},{"_id":"public/tags/Kubernetes/index.html","hash":"c33dd71b706a1969ba3b9560ea986aaa9f0f5ec7","modified":1511761709523},{"_id":"public/tags/Jenkins/index.html","hash":"736ab0e7159d9d651ea0020f41bcfb620cca36e0","modified":1511761709523},{"_id":"public/tags/Laravel/index.html","hash":"69b2315d226a8a2fb645ad7566a0e6ed119b255d","modified":1511761709523},{"_id":"public/tags/Laravel/page/2/index.html","hash":"cd65d9b46836bd3b50697644ce1be1465c8bac39","modified":1511761709523},{"_id":"public/tags/Laravel/page/3/index.html","hash":"9b927048539d60e51db4f0f22682addaaa7e0306","modified":1511761709523},{"_id":"public/tags/Mac/index.html","hash":"8cfbd4c30402f0c8ad144fe0ab878726247af36c","modified":1511761709523},{"_id":"public/tags/Nodejs/index.html","hash":"f6158edef9db4c42bc14288aba4b704dab4fcac0","modified":1511761709523},{"_id":"public/tags/Nodejs/page/2/index.html","hash":"cdda13c775d913e895140825e5505761acd8da67","modified":1511761709523},{"_id":"public/tags/React-Native/index.html","hash":"000573a6c126a69b91033b24bd1fb6f4f498936d","modified":1511761709523},{"_id":"public/tags/React/index.html","hash":"79c4f6adb66eb7b7faf5faac052c573dc3ea98ab","modified":1511761709523},{"_id":"public/tags/React/page/2/index.html","hash":"435a8d54ca3d18a1a1fb9d66e23e843a7bde8f76","modified":1511761709523},{"_id":"public/tags/UI/index.html","hash":"42f59bf811032f745cc4efb59f87f4720174a778","modified":1511761709523},{"_id":"public/tags/Illustrator/index.html","hash":"a6e75c058f44786bbb4e185f829e02326a28ab3a","modified":1511761709523},{"_id":"public/tags/Docker/index.html","hash":"5156724ddbb4e19e5939c7e1ff1351730881cc3f","modified":1511761709523},{"_id":"public/tags/Productivity/index.html","hash":"efccc10ed4c60c7f670eb1d8f5b61e1328cc9919","modified":1511761709523},{"_id":"public/images/Connection.jpg","hash":"e7833f33a3d88ff23b4664e2ee0b7160b81de183","modified":1511761709536},{"_id":"public/images/MolecularMedicine.jpg","hash":"7f257339e55f28d7a38fa5c08aa59ae275c872bc","modified":1511761709536},{"_id":"public/images/TcmadrForgetpasswordPage.png","hash":"c57cc49c77f80cf38cf537c4bd6d90fbce48f284","modified":1511761709536},{"_id":"public/images/PottedPlant.jpg","hash":"94e62414e103428a158878ec8c7c74c82c8686a4","modified":1511761709537},{"_id":"public/images/TcmadrLoginPage.png","hash":"19bd06c20bbb36aa4a11b59c6d74887f562e906b","modified":1511761709537},{"_id":"public/images/TcmadrRegisterPage.png","hash":"0d26c0044f0624c160a11837e11f7b51a0416b3a","modified":1511761709537},{"_id":"public/images/atom.jpg","hash":"54cb1cc4657c05459506a5867e1e38ff08963542","modified":1511761709537},{"_id":"public/images/hello_world.png","hash":"7abf6b0805eceb7131a39f558dc13af3e6122ece","modified":1511761709537},{"_id":"public/images/github.jpg","hash":"46f500c5be9ee4b1a1488ba09de7ef82562c6378","modified":1511761709537},{"_id":"public/images/javascript.jpg","hash":"8382d69254d3dac426e355931d764daa0715a269","modified":1511761709537},{"_id":"public/images/logo.png","hash":"c9af01938247347f4a01de4d5627ce190f8435b0","modified":1511761709537},{"_id":"public/images/php_mysql_array.jpg","hash":"c9cc6e41237a527d08b8816faea24e663a6df627","modified":1511761709537},{"_id":"public/images/line.jpg","hash":"43511dc67d2fee35650b54485aa7ed3e45eec549","modified":1511761709537},{"_id":"public/images/notebook.jpeg","hash":"936a5f665578cea52ace24aefeb1c7df62d87ff8","modified":1511761709537},{"_id":"public/images/tcmadr_procedure.png","hash":"68c62977a8871f3db6fbe7f46a9c49df8762adc6","modified":1511761709537},{"_id":"public/images/tcmadr_login_page.png","hash":"ba7d8132be04a099f6a81c55bfad8eb9386586b5","modified":1511761709537},{"_id":"public/images/vincent.ico","hash":"094bc640d315befac3370776fd4a66ac26217e09","modified":1511761709537},{"_id":"public/images/tcmadr_inside_page.png","hash":"71bbdd30e6b74eeb50f9b6574861f83b0606ec2f","modified":1511761709537},{"_id":"public/images/thesis.jpg","hash":"c69b90c6e33caac322c87760b09fd7ef5543f60c","modified":1511761709537},{"_id":"public/images/wechat.png","hash":"a172effc55ab77e8a505cdb2becc6ad3f0910f49","modified":1511761709537},{"_id":"public/images/wordpress.png","hash":"f34cf410ea4c3c4e9ceb426cf2471f3e8cb30994","modified":1511761709537},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1511761709537},{"_id":"public/css/images/logo.png","hash":"c9af01938247347f4a01de4d5627ce190f8435b0","modified":1511761709537},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1511761709537},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1511761709537},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1511761709537},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1511761709538},{"_id":"public/images/technique/MacEnvironment.jpg","hash":"552682278be00d1cabb8602be763f779d366aa1c","modified":1511761709538},{"_id":"public/images/learning/htmlcss/HtmlCssDay2.jpg","hash":"4ce96182dedf178acdabccd1b203cec0045daaed","modified":1511761709538},{"_id":"public/images/learning/docker/dockerday1.png","hash":"683867314be64a3828102d90287b6f38f418b3aa","modified":1511761709538},{"_id":"public/images/learning/jenkins/jenkinsday1.png","hash":"13d12bfbd2fd496b69329ff5d29e873809336b3c","modified":1511761709538},{"_id":"public/images/learning/kubernetes/kubernetesday4.jpg","hash":"c44ef400152e1d42b13e062c8dc5c243d1bb1020","modified":1511761709538},{"_id":"public/images/learning/kubernetes/kubernetesday3.png","hash":"97c15ad61c6eda82fba0ce6b72d6bddf6cfdde8c","modified":1511761709538},{"_id":"public/images/learning/kubernetes/kubernetesday5.png","hash":"0542224880b332af39084f1155340694adc7519f","modified":1511761709538},{"_id":"public/images/learning/kubernetes/kubernetesday6.png","hash":"6331071f1fe39ae79effd032b43aee8cb75827f4","modified":1511761709538},{"_id":"public/images/learning/nodejsII/NodejsIIDay02.png","hash":"2bd06020fa4ad08d0fad0a6d88977fa522e9ebd4","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday1.png","hash":"ec56826a9dcddeed1278be5162e80ded054e63e3","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday12.jpg","hash":"c81d39efc25b7228805dccfaa4db01638aa2b81a","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday10.jpg","hash":"7334d7184d28d8084a631e6e8084c38c58e1994d","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday2.jpg","hash":"cd9642a658da988a40b7bcaa229d06824a82a0df","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday3.jpg","hash":"4e5ec40ce914c26691c9ef7ddea4a677cfe8b606","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday6.png","hash":"fca7a3ab18c96d8ee6ca04ad26a8a766378b532c","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday7.png","hash":"235ed76f367c9ff7aca487da06e2ff62a9c533a0","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday8.png","hash":"eaa9ab2b11d143299df4473ca14dfa63a193d1a9","modified":1511761709538},{"_id":"public/images/learning/nodejs/nodejsday9.png","hash":"0159d27cea03c89b0e357ffe45e4f00db42673f6","modified":1511761709538},{"_id":"public/images/learning/laravel/laravelday1.jpg","hash":"83f8131a62aa9413f1c708d087dc4fd76bad7b73","modified":1511761709538},{"_id":"public/images/learning/laravel/laravelday12.png","hash":"4a6e82c94b5a987184e34b1afd9be4e34f2881d7","modified":1511761709538},{"_id":"public/images/learning/laravel/laravelday11.jpg","hash":"32d64ede7ad12bea0a555fc2750ee64d8682fa07","modified":1511761709538},{"_id":"public/images/learning/laravel/laravelday13.jpg","hash":"f96386b10681d2c6ca3232b093e0bcb81e7191b5","modified":1511761709538},{"_id":"public/images/learning/laravel/laravelday17.png","hash":"130b144d559c2bacc954c5823d36acf004f50f35","modified":1511761709538},{"_id":"public/images/learning/laravel/laravelday15.png","hash":"a46d82e1b04781d839f20b7f81da840ff02a3e54","modified":1511761709538},{"_id":"public/images/learning/laravel/laravelday16.jpg","hash":"7f2dfabc073465cea057e5ee057fdb42d36d7a40","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday18.png","hash":"bcddaa6d74624bff6e14c9022e1c2338074abc9c","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday19.jpg","hash":"4ef99e673507dc44560aac950a2c6eac12911c1a","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday20.png","hash":"40b687a92d0000d577b4b7781466ffcaf8452be9","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday2.png","hash":"d4df1b4ca58c6a69f72e5da8d1da23aa27be1bc5","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday3.jpg","hash":"64a0d3a87e4f45929bfe79ab737b34e4e1c93b90","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday22.jpg","hash":"5d240d380c1c73c6acdef2d6e09ef6c18834184e","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday4.jpg","hash":"820099406ffa90a1500f109a25b74bc7b16f2c05","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday6.jpg","hash":"b3784d18ab8879ad0a338980a740ab85f9570fd8","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday8.png","hash":"89c3d5520bf345b16dd9adf7f95bccddb1648171","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday9.png","hash":"f1e3fa79b2abc87ee0b4155b9615632cbee12687","modified":1511761709539},{"_id":"public/images/learning/laravel/laravelday5.jpeg","hash":"a8c876505945c019a735d4ee8876f90a9441fd35","modified":1511761709539},{"_id":"public/images/learning/react/react.png","hash":"aca322f5f9de6c8e92cd23f46109518c17015016","modified":1511761709539},{"_id":"public/images/learning/react/reactday10.jpg","hash":"f448ba4c58eb8aaab2c3f2a36beddaa06f7b4972","modified":1511761709539},{"_id":"public/images/learning/react/reactday11.png","hash":"d021b019b598323a94b6fe234acca686a08183b1","modified":1511761709539},{"_id":"public/images/learning/react/reactday4.jpg","hash":"9b92f857e538f36ad5fb7856058054addb566a8c","modified":1511761709539},{"_id":"public/images/learning/react/reactday3.png","hash":"ac0c27c12e73e16b4e8fbb4d54869f2176962bf1","modified":1511761709539},{"_id":"public/images/learning/react/reactday5.jpg","hash":"57a556609f0497409a12f74e03e5b22ca3a8be47","modified":1511761709539},{"_id":"public/images/learning/react/reactday6.png","hash":"9295c59f7c7258af4a5dfaa102ab3abc2af3168e","modified":1511761709539},{"_id":"public/images/learning/react/reactday7.png","hash":"7dd62df3d6e75123eb5359952163dcbe0618ae42","modified":1511761709540},{"_id":"public/images/learning/react/reactday8.jpg","hash":"caf5ce23e26b6088f2238dbd90f2c104e9c479a7","modified":1511761709540},{"_id":"public/images/learning/reactNative/reactnativeday1.png","hash":"d78da45b4b488c5b299eb8a06590283467f7de1b","modified":1511761709540},{"_id":"public/images/learning/reactNative/reactnativeday5.png","hash":"afe041954a0d35d37dc22142dbcbf303810a5281","modified":1511761709540},{"_id":"public/images/learning/reactNative/reactnativeday4.jpg","hash":"ea77c47c58e1dc8a889ac155f75cacbf1947d545","modified":1511761709540},{"_id":"public/images/learning/reactNative/reactnativeday6.png","hash":"541b11e9eab481539342e38d046e5f180033061a","modified":1511761709540},{"_id":"public/images/learning/ui/UIDay1.png","hash":"a95d37ca20edc3a7aacfe275869b7bdeaefc5692","modified":1511761709540},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1511761709540},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1511761709540},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1511761709540},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1511761709540},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1511761709540},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1511761709540},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1511761709540},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1511761709540},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1511761709540},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1511761709540},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1511761709541},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1511761709541},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1511761709541},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1511761709541},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1511761709541},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1511761709541},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1511761709541},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1511761709541},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1511761709541},{"_id":"public/images/Mechanic＿Resurrection.jpg","hash":"d58287bc231f4130ed1f18ce3c2be549ab7de34b","modified":1511761710064},{"_id":"public/images/emoji.png","hash":"05a12ebd1fd21d79d793abd22e28a2011736f588","modified":1511761710066},{"_id":"public/images/learning/docker/dockerday4.png","hash":"15d5aca8ab8eb22e77deb88877f91ffa300f1420","modified":1511761710067},{"_id":"public/images/learning/kubernetes/kubernetesday2.png","hash":"2f21fefdc36c226e183ed4ea0789d68aa6a26011","modified":1511761710067},{"_id":"public/images/learning/htmlcss/HtmlCssDay1.jpg","hash":"550207ba7147f35f274546d618e49a37312cb644","modified":1511761710067},{"_id":"public/images/learning/docker/dockerday6.png","hash":"1b9b3e1341011e1c7b1d87d79b8ee9da832218f5","modified":1511761710067},{"_id":"public/images/learning/kubernetes/kubernetesday1.png","hash":"97e3e01dc2d82fa833fc1da9ddb0fd7e531925ac","modified":1511761710068},{"_id":"public/images/learning/nodejs/nodejsday5.jpg","hash":"d37d14bd851dc287a96a127bfff4726a6f5a684c","modified":1511761710068},{"_id":"public/images/learning/docker/dockerday5.jpg","hash":"14ad036066cb3f4bc520f4f31f02d73f5494011f","modified":1511761710068},{"_id":"public/images/learning/laravel/laravelday14.jpg","hash":"1d1eb12e60ff75ce812d136c84fbd1c8a91e6d95","modified":1511761710068},{"_id":"public/images/learning/nodejsII/NodejsIIDay01.png","hash":"953d7b71457be8aeb4d2e84191b848f1a5a4849a","modified":1511761710068},{"_id":"public/images/learning/productivity/productivity.jpg","hash":"5aaeb08b9cffad22794af7f64719fec139ca446c","modified":1511761710068},{"_id":"public/images/learning/react/reactday12.jpg","hash":"a48b9cc25652ea2d4f0df418615d8afa4e767931","modified":1511761710068},{"_id":"public/images/learning/react/reactday2.png","hash":"6f04fdf524365b4055dd71ddbf25bfb1e9391066","modified":1511761710068},{"_id":"public/images/learning/react/reactday9.jpg","hash":"a57dc93f0234ad91520c51ca7ae101c0026f228b","modified":1511761710068},{"_id":"public/images/learning/reactNative/reactnativeday3.jpg","hash":"5d45d32eaf5b4ef174c97c672dd9e4578369c194","modified":1511761710068},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1511761710068},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1511761710068},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1511761710069},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1511761710069},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1511761710080},{"_id":"public/js/main.js","hash":"ebe5a326605ab655155235c532b54a78a0662988","modified":1511761710080},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1511761710080},{"_id":"public/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1511761710080},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1511761710080},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1511761710080},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1511761710080},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1511761710080},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1511761710081},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1511761710081},{"_id":"public/css/style.css","hash":"0ccbf90a9f028c1bd5a52879b56890623227287a","modified":1511761710081},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1511761710081},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1511761710081},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1511761710082},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1511761710082},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1511761710082},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1511761710082},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1511761710082},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1511761710082},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1511761710082},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1511761710082},{"_id":"public/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1511761710082},{"_id":"public/images/header_background.jpg","hash":"dba955b39749ad2f4e15413c9681b3b06727cc89","modified":1511761710082},{"_id":"public/images/hellojs.jpg","hash":"64225a0660679134081c98ed6ec5d21db27825f8","modified":1511761710082},{"_id":"public/images/train_to_busan.jpg","hash":"56a3fcbac6e0d354c7e8ee21120c5873d0df7718","modified":1511761710082},{"_id":"public/images/learning/docker/dockerday3.png","hash":"1532cdc2dad42004c4fec96d8ec5618ee10576d7","modified":1511761710082},{"_id":"public/images/learning/nodejs/nodejsday4.jpg","hash":"e011b2c3d4eb3fd25c22f16b0ab8ac74266be9ab","modified":1511761710082},{"_id":"public/images/learning/laravel/laravelday10.png","hash":"649021f1a38104f3586aa367da5e84ee6b30dabd","modified":1511761710082},{"_id":"public/images/learning/laravel/laravelday7.jpeg","hash":"501e7c25653719a96c4b26bbfd32dc56c306ce32","modified":1511761710082},{"_id":"public/images/learning/reactNative/reactnativeday2.png","hash":"e3ca9d3b0afd4e3a57f2f6b2a7a55c86babc6060","modified":1511761710082},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1511761710083},{"_id":"public/images/herbal.jpg","hash":"3c341b7d25b812e00ac2f96b758e5646cd8171f2","modified":1511761710090},{"_id":"public/images/learning/htmlcss/box-sizing.png","hash":"3e94e1d8c62fa7c16bd1fbfaa330ff5f810c4169","modified":1511761710090},{"_id":"public/images/learning/htmlcss/css-model.png","hash":"5b477b75c68ffa71e3401c5e64cbf6e0c9ea9589","modified":1511761710090},{"_id":"public/images/learning/docker/Bret Fisher_Docker.jpg","hash":"a50bafca37e7551f83c292e3a15b48ffb8f77cbe","modified":1511761710090},{"_id":"public/images/learning/docker/dockerday2.png","hash":"525bb8ed9427828fd5395da768fdfa19e6676538","modified":1511761710090},{"_id":"public/images/learning/kubernetes/Edward Viaene_Kubernetes.jpg","hash":"4b542dcf8e0b6ee1f401169862d1c3f7fbaa411c","modified":1511761710091},{"_id":"public/images/learning/laravel/laravelday21.png","hash":"5c3003019485d9313b61e05083d20630eafe6838","modified":1511761710091},{"_id":"public/images/learning/laravel/EdwinDiaz_Laravel.jpg","hash":"515fbad3441517f3aed981e668e5803928e27a11","modified":1511761710091},{"_id":"public/images/learning/productivity/Doru Catana_Productivity.jpg","hash":"0c7ef5be46f79ac1ba6ca38cebcfa9e8ce2ffa1d","modified":1511761710091},{"_id":"public/images/asus.png","hash":"45143d26b827b061bc9d83212fa058976ee5e860","modified":1511761710099},{"_id":"public/images/tcmadr2.png","hash":"3572587f8d61c0a547c064cca89a0463b131eb90","modified":1511761710099},{"_id":"public/images/learning/docker/dockerday7.png","hash":"4439fc08918a85d7bc57afcdc4a9680cf967afe5","modified":1511761710099},{"_id":"public/images/learning/docker/dockerday8.png","hash":"5122190598fbf58c648ccf753e080cfc6464778a","modified":1511761710106},{"_id":"public/images/learning/nodejs/nodejsday11.jpeg","hash":"60263ec9f9dc7444ec90e32e82ea01f492ccd5f7","modified":1511761710106},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1511761710107},{"_id":"public/images/header_background_grey.jpg","hash":"78aaa6b6838f71471739e49405fd73f19851218d","modified":1511761710153},{"_id":"public/images/tcmadr.png","hash":"e50d5ca257fc8f49b4201aa9d7eeac445b458765","modified":1511761710153},{"_id":"public/images/HellojsCertification.jpg","hash":"96363c4e1be786453ddd0a9940e76f1afcd3bbfe","modified":1511761710272},{"_id":"public/images/tcm.png","hash":"b7bcbe8c5437c5bb79989875a5361553d1f6dead","modified":1511761710272}],"Category":[{"name":"技術分享","_id":"cjahrvww400037ifarra5jrx4"},{"name":"學習歷程","_id":"cjahrvww800087ifaiskeo2c7"},{"name":"生活記事","_id":"cjahrvwwd000i7ifa0p47542x"},{"name":"英文寫作","_id":"cjahrvwwj000w7ifa14yjo8bk"},{"name":"閱讀賞析","_id":"cjahrvwxd00387ifagsbpwznq"}],"Data":[],"Page":[{"title":"關於","date":"2016-08-30T11:17:58.000Z","_content":"\n#### _自我介紹（Self-Introduction）_\n我叫王霆瑄（Vincent），\n來自台中，熱愛**閱讀**、**運動**和**旅行**，\n對於新鮮的事物更是愛不釋手。\n\n***\n\n##### 我的座右銘\n> 你若成功了\n&emsp;放屁都有道理\n你若失敗了\n&emsp;再有道理都是屁\n\n***\n\n##### 我的誕生\n公元一九九四年，夏天。\n傍晚。細濛濛的小雨從天而降，在路燈外緣交織成一團濕淋淋的光幕。醫院內，手術房裡本是一陣沉悶的氣息，交雜著汗水，但娃娃的哭鬧聲撕裂了這陣寂靜，取而代之的是喜悅和更多的歡樂的氛圍，一個新生命的誕生，他將用雙眼來見識這個世界，用雙手去探索這個生命。\n***\n\n#### _學歷（Educational Background）_\nNational Taichung University of Science and Technology（國立臺中科技大學）\nComputer Science and Information Engineering, M.S.（資訊工程研究所）\nChina Medical University（中國醫藥大學）\nDepartment of Traditional Chinese Medicine, M.S.（中國醫學研究所）\nAsia University（亞洲大學）\nDepartment of Foreign Languages and Literature, B.A.（外國語文學系）\n***\n\n#### _聯繫我（Contact Ｍe）_\n| WeChat的好友：  | LINE的好友： |\n|:-------------: |:---------------:|\n| <img src=\"/images/wechat.png\"> | <img src=\"/images/line.jpg\"> |\n\n寫信給我：<vincent@fishboneapps.com>\nFacebook私訊敲我：[Facebook個人頁面](https://www.facebook.com/VincentTingSyuanWang)\n","source":"about/index.md","raw":"---\ntitle: 關於\ndate: 2016-08-30 19:17:58\n---\n\n#### _自我介紹（Self-Introduction）_\n我叫王霆瑄（Vincent），\n來自台中，熱愛**閱讀**、**運動**和**旅行**，\n對於新鮮的事物更是愛不釋手。\n\n***\n\n##### 我的座右銘\n> 你若成功了\n&emsp;放屁都有道理\n你若失敗了\n&emsp;再有道理都是屁\n\n***\n\n##### 我的誕生\n公元一九九四年，夏天。\n傍晚。細濛濛的小雨從天而降，在路燈外緣交織成一團濕淋淋的光幕。醫院內，手術房裡本是一陣沉悶的氣息，交雜著汗水，但娃娃的哭鬧聲撕裂了這陣寂靜，取而代之的是喜悅和更多的歡樂的氛圍，一個新生命的誕生，他將用雙眼來見識這個世界，用雙手去探索這個生命。\n***\n\n#### _學歷（Educational Background）_\nNational Taichung University of Science and Technology（國立臺中科技大學）\nComputer Science and Information Engineering, M.S.（資訊工程研究所）\nChina Medical University（中國醫藥大學）\nDepartment of Traditional Chinese Medicine, M.S.（中國醫學研究所）\nAsia University（亞洲大學）\nDepartment of Foreign Languages and Literature, B.A.（外國語文學系）\n***\n\n#### _聯繫我（Contact Ｍe）_\n| WeChat的好友：  | LINE的好友： |\n|:-------------: |:---------------:|\n| <img src=\"/images/wechat.png\"> | <img src=\"/images/line.jpg\"> |\n\n寫信給我：<vincent@fishboneapps.com>\nFacebook私訊敲我：[Facebook個人頁面](https://www.facebook.com/VincentTingSyuanWang)\n","updated":"2017-11-03T15:26:37.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjahrvwvz00007ifa7c4boldt","content":"<h4><em>自我介紹（Self-Introduction）</em></h4>\n<p>我叫王霆瑄（Vincent），<br>\n來自台中，熱愛<strong>閱讀</strong>、<strong>運動</strong>和<strong>旅行</strong>，<br>\n對於新鮮的事物更是愛不釋手。</p>\n<hr>\n<h5>我的座右銘</h5>\n<blockquote>\n<p>你若成功了<br>\n 放屁都有道理<br>\n你若失敗了<br>\n 再有道理都是屁</p>\n</blockquote>\n<hr>\n<h5>我的誕生</h5>\n<p>公元一九九四年，夏天。<br>\n傍晚。細濛濛的小雨從天而降，在路燈外緣交織成一團濕淋淋的光幕。醫院內，手術房裡本是一陣沉悶的氣息，交雜著汗水，但娃娃的哭鬧聲撕裂了這陣寂靜，取而代之的是喜悅和更多的歡樂的氛圍，一個新生命的誕生，他將用雙眼來見識這個世界，用雙手去探索這個生命。</p>\n<hr>\n<h4><em>學歷（Educational Background）</em></h4>\n<p>National Taichung University of Science and Technology（國立臺中科技大學）<br>\nComputer Science and Information Engineering, M.S.（資訊工程研究所）<br>\nChina Medical University（中國醫藥大學）<br>\nDepartment of Traditional Chinese Medicine, M.S.（中國醫學研究所）<br>\nAsia University（亞洲大學）<br>\nDepartment of Foreign Languages and Literature, B.A.（外國語文學系）</p>\n<hr>\n<h4><em>聯繫我（Contact Ｍe）</em></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">WeChat的好友：</th>\n<th style=\"text-align:center\">LINE的好友：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/wechat.png\"></td>\n<td style=\"text-align:center\"><img src=\"/images/line.jpg\"></td>\n</tr>\n</tbody>\n</table>\n<p>寫信給我：<a href=\"mailto:vincent@fishboneapps.com\" target=\"_blank\" rel=\"external\">vincent@fishboneapps.com</a><br>\nFacebook私訊敲我：<a href=\"https://www.facebook.com/VincentTingSyuanWang\" target=\"_blank\" rel=\"external\">Facebook個人頁面</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4><em>自我介紹（Self-Introduction）</em></h4>\n<p>我叫王霆瑄（Vincent），<br>\n來自台中，熱愛<strong>閱讀</strong>、<strong>運動</strong>和<strong>旅行</strong>，<br>\n對於新鮮的事物更是愛不釋手。</p>\n<hr>\n<h5>我的座右銘</h5>\n<blockquote>\n<p>你若成功了<br>\n 放屁都有道理<br>\n你若失敗了<br>\n 再有道理都是屁</p>\n</blockquote>\n<hr>\n<h5>我的誕生</h5>\n<p>公元一九九四年，夏天。<br>\n傍晚。細濛濛的小雨從天而降，在路燈外緣交織成一團濕淋淋的光幕。醫院內，手術房裡本是一陣沉悶的氣息，交雜著汗水，但娃娃的哭鬧聲撕裂了這陣寂靜，取而代之的是喜悅和更多的歡樂的氛圍，一個新生命的誕生，他將用雙眼來見識這個世界，用雙手去探索這個生命。</p>\n<hr>\n<h4><em>學歷（Educational Background）</em></h4>\n<p>National Taichung University of Science and Technology（國立臺中科技大學）<br>\nComputer Science and Information Engineering, M.S.（資訊工程研究所）<br>\nChina Medical University（中國醫藥大學）<br>\nDepartment of Traditional Chinese Medicine, M.S.（中國醫學研究所）<br>\nAsia University（亞洲大學）<br>\nDepartment of Foreign Languages and Literature, B.A.（外國語文學系）</p>\n<hr>\n<h4><em>聯繫我（Contact Ｍe）</em></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">WeChat的好友：</th>\n<th style=\"text-align:center\">LINE的好友：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"/images/wechat.png\"></td>\n<td style=\"text-align:center\"><img src=\"/images/line.jpg\"></td>\n</tr>\n</tbody>\n</table>\n<p>寫信給我：<a href=\"mailto:vincent@fishboneapps.com\" target=\"_blank\" rel=\"external\">vincent@fishboneapps.com</a><br>\nFacebook私訊敲我：<a href=\"https://www.facebook.com/VincentTingSyuanWang\" target=\"_blank\" rel=\"external\">Facebook個人頁面</a></p>\n"}],"Post":[{"title":"Github Pushed Commit Delete (Redraw)","thumbnail":["/images/github.jpg"],"date":"2016-11-17T06:47:14.000Z","_content":"<img src=\"/images/github.jpg\">\n\n***\n#### 如果 Commit 之後並 Push 到遠端，想要在本地端用 CI 去 Delete/Redraw，就可以用以下方法。\n1. 如果要刪除倒數第一個 Commit，用以下方法。\n```\ngit reset --hard HEAD^\ngit push -f\n```\n2. 如果要刪除倒數二個 Commit，用以下方法。\n```\ngit reset --hard HEAD^^\ngit push -f\n```\n","source":"_posts/Github-Pushed-Commit-Delete-Redraw.md","raw":"---\ntitle: Github Pushed Commit Delete (Redraw)\nthumbnail:\n  - /images/github.jpg\ndate: 2016-11-17 14:47:14\ncategories: 技術分享\ntags:\n---\n<img src=\"/images/github.jpg\">\n\n***\n#### 如果 Commit 之後並 Push 到遠端，想要在本地端用 CI 去 Delete/Redraw，就可以用以下方法。\n1. 如果要刪除倒數第一個 Commit，用以下方法。\n```\ngit reset --hard HEAD^\ngit push -f\n```\n2. 如果要刪除倒數二個 Commit，用以下方法。\n```\ngit reset --hard HEAD^^\ngit push -f\n```\n","slug":"Github-Pushed-Commit-Delete-Redraw","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvww000017ifa2j10oqn5","content":"<img src=\"/images/github.jpg\">\n<hr>\n<h4>如果 Commit 之後並 Push 到遠端，想要在本地端用 CI 去 Delete/Redraw，就可以用以下方法。</h4>\n<ol>\n<li>如果要刪除倒數第一個 Commit，用以下方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard HEAD^</div><div class=\"line\">git push -f</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果要刪除倒數二個 Commit，用以下方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard HEAD^^</div><div class=\"line\">git push -f</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/github.jpg\">\n<hr>\n<h4>如果 Commit 之後並 Push 到遠端，想要在本地端用 CI 去 Delete/Redraw，就可以用以下方法。</h4>\n<ol>\n<li>如果要刪除倒數第一個 Commit，用以下方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard HEAD^</div><div class=\"line\">git push -f</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果要刪除倒數二個 Commit，用以下方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard HEAD^^</div><div class=\"line\">git push -f</div></pre></td></tr></table></figure>\n"},{"title":"HTML5+CSS3 快速學習自我挑戰 Day1","thumbnail":["/images/learning/htmlcss/HtmlCssDay1.jpg"],"date":"2017-11-03T21:39:50.000Z","_content":"<img src=\"/images/learning/htmlcss/HtmlCssDay1.jpg\">\n\n***\n### 課程介紹\n#### 學習內容\n1. 動手做 HTML5、CSS3 和 jQuery\n2. 製作七步驟，從草稿到完整的有功能且優化的網站\n3. 簡單使用網站設計原則和訣竅\n4. 如何取得且使用很棒的圖片、文字和圖標，全部免費\n5. Responsive 網頁設計，讓不同的大小畫面都漂亮\n6. 如何使用 jQuery 製作非常酷的動畫\n7. 如何優化網站\n8. 課程主要分為四部分\n    - 網站設計基礎\n    - 基礎 HTML 和 CSS\n    - 用被應用在真實世界的七步驟完成很酷的網站\n    - 優化網站\n### 開始使用 HTML\n#### 什麼是 HTML\n1. HTML = Hyper Text Markup Language\n2. HTML 檔案用 HTML 標籤來寫 `<h1> <p> <a>`\n3. 標籤用來包裝元素的開始和結束 `<tagname>content</tagname>`\n#### HTML 架構\n1. HTML 裡面由 head 和 body 組成，在檔案開頭要宣告檔案類型\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title></title>\n    </head>\n    <body>\n    </body>\n</html>\n```\n#### 填滿架構\n1. [Lorem Ipsum 產生器](https://www.lipsum.com/)\n2. 常用 HTML 標籤\n    - `<p></p>` 段落\n    - `<strong></strong>` 粗體\n    - `<em></em>` 斜體\n    - `<u></u>` 底線\n    - `<br>` 換行\n#### 圖片和屬性\n1. [隨機產生人像](https://randomuser.me/)\n2. 引入圖片 `<img src=\"logo.jpg\" alt=\"The HTML5 logo\">`\n#### 超連結\n1. 超連結文字\n`<a href=\"https://www.udemy.com\" target=\"_blank\">Link to Udemy</a>`\n2. 超連結圖片\n`<a href=\"logo.jpg\" target=\"_blank\">HTML logo</a>`\n### CSS 格式\n#### 開始使用 CSS\n1. CSS = Cascading Style Sheets\n2. CSS 定義 HTML 要長什麼樣子\n3. HTML 是內容，CSS 是樣式\n4. CSS 可以寫的地方\n    - 加在 HTML tag 裡面\n    - 加在 HTML 檔案裡面\n    - 把 CSS code 放在外部檔案\n5. 新增 style.css，然後在 index.html 引入\n`<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">`\n#### 開始讓網頁變漂亮\n1. 修改 style.css 檔案\n```\nbody {\n    font-family: Helvetica Neue, Arial;\n    font-size: 18px;\n}\n\nh1, h2 {\n    color: green;\n\n}\n\nh1 {\n    font-size: 40px;\n}\n\nh2 {\n    font-size: 25px;\n}\n\np {\n    font-size: 18px;\n    text-align: justify;\n}\n```\n#### 顏色\n1. RGB #RRGGBB 每個顏色最小 0，最大 ff\n2. 要有透明度，則採用 rgba\n#### Classes 和 IDs\n1. id 只能用一次，用 # 表示\n2. 在 sytle.css 新增 class\n```\n.main-text {\n    text-align: justify;\n}\n\n.author-text {\n    font-size: 22px;\n}\n```\n3. 把前段的的 `<p>` 改成 `<p class=\"main-text\">`，作者的 `<p>` 改成 `<p class=\"author-text\">`\n#### CSS box model\n1. Box model 分為四部分\n    - Content：文字，圖片..等等\n    - Padding：在 Content 內部的透明區域，在 box 裡面\n    - Border：在 Padding 和 Content 的外面\n    - Margin：Boxes 之間的距離\n<img src=\"/images/learning/htmlcss/css-model.png\">\n2. Box-sizing：CSS 同樣也可以定義整個 box width 和 Height，而不只有 Content\n<img src=\"/images/learning/htmlcss/box-sizing.png\">\n3. 在 HTML，有 block 元素和 inline 元素，包含 Heading 和 Paragraph 都是 block 元素，而圖片，粗體和連結都屬於 inline 元素，inline 元素你只能設定它的 height 或是它的 width\n4. 在 style.css 設定元素\n```\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n```\n5. 設定 h1 `margin-bottom: 20px;` h2 `margin-bottom: 10px;` .main-text `margin-bottom: 20px;`\n#### 建立一個簡單的版面編排\n1. 新增網頁架構\n```\n<div class=\"container\">\n    <div class=\"blog-post\">\n        內文\n    </div>\n\n    <div class=\"other-posts\">\n        右邊選單欄\n    </div>\n\n    <div class=\"clearfix\"></div>\n\n    <div class=\"author-box\">\n        作者欄\n    </div>\n</div>\n```\n2. clearfix 處理換 row 的問題，margin 的值是 `top right bottom left`，float 是強制靠左，讓元素整合在一起\n```\n.clearfix:after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\n.container {\n    width: 1140px;\n    margin: 20px auto 0 auto;\n}\n\n.blog-post {\n    width: 75%;\n    float: left;\n    padding-right: 30px;\n}\n\n.other-posts {\n    width: 25%;\n    float: left;\n}\n\n.author-box {\n    padding-top: 20px;\n    border-top: 1px solid #333;\n}\n```\n#### 擦亮我們的 blog post\n1. 把 html logo 放到內文第二部分，然後側邊選單欄新增內容\n```\n<div class=\"other-posts\">\n    <div class=\"other\">\n        The first other blog post\n    </div>\n    <div class=\"other\">\n        Yet another blog post\n    </div>\n    <div class=\"other\">\n        The best blog post ever: read this!\n    </div>\n</div>\n```\n2. 調整側邊欄的間距，作者欄的圖片大小且變成圓形，然後讓作者區塊的文字平行對齊\n```\n.author-text {\n    font-size: 22px;\n    float: left;\n    margin-top: 30px;\n    margin-left: 10px;\n}\n\n.other {\n    margin-bottom: 40px;\n}\n\n.author-box img {\n    height: 100px;\n    width: 100px;\n    border-radius: 50%;\n    float: left;\n}\n\n.blog-post img {\n    height: 150px;\n    width: auto;\n\n}\n```\n#### Relative 和 Absolute\n1. 在 blog post 內文第一部分標題後面新增日期 `<p class=\"date\">Nov 11th, 2017</p>`\n2. 在 .blog-post 的 class 下的 position 設為 relative\n```\n.blog-post {\n    ...\n    position: relative;\n}\n```\n3. 在 .date 的 position 設為 absolute 並調整間距\n```\n.date {\n    position: absolute;\n    top: 10px;\n    right: 30px;\n}\n```\n#### 開始使用 Chrome Developer Tools\n1. Windows F12 開啟，Mac Command + Option + I","source":"_posts/HTML5-CSS3-快速學習自我挑戰-Day1.md","raw":"---\ntitle: HTML5+CSS3 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/htmlcss/HtmlCssDay1.jpg\ndate: 2017-11-04 05:39:50\ncategories: 學習歷程\ntags: \n    - HTML\n    - CSS\n---\n<img src=\"/images/learning/htmlcss/HtmlCssDay1.jpg\">\n\n***\n### 課程介紹\n#### 學習內容\n1. 動手做 HTML5、CSS3 和 jQuery\n2. 製作七步驟，從草稿到完整的有功能且優化的網站\n3. 簡單使用網站設計原則和訣竅\n4. 如何取得且使用很棒的圖片、文字和圖標，全部免費\n5. Responsive 網頁設計，讓不同的大小畫面都漂亮\n6. 如何使用 jQuery 製作非常酷的動畫\n7. 如何優化網站\n8. 課程主要分為四部分\n    - 網站設計基礎\n    - 基礎 HTML 和 CSS\n    - 用被應用在真實世界的七步驟完成很酷的網站\n    - 優化網站\n### 開始使用 HTML\n#### 什麼是 HTML\n1. HTML = Hyper Text Markup Language\n2. HTML 檔案用 HTML 標籤來寫 `<h1> <p> <a>`\n3. 標籤用來包裝元素的開始和結束 `<tagname>content</tagname>`\n#### HTML 架構\n1. HTML 裡面由 head 和 body 組成，在檔案開頭要宣告檔案類型\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title></title>\n    </head>\n    <body>\n    </body>\n</html>\n```\n#### 填滿架構\n1. [Lorem Ipsum 產生器](https://www.lipsum.com/)\n2. 常用 HTML 標籤\n    - `<p></p>` 段落\n    - `<strong></strong>` 粗體\n    - `<em></em>` 斜體\n    - `<u></u>` 底線\n    - `<br>` 換行\n#### 圖片和屬性\n1. [隨機產生人像](https://randomuser.me/)\n2. 引入圖片 `<img src=\"logo.jpg\" alt=\"The HTML5 logo\">`\n#### 超連結\n1. 超連結文字\n`<a href=\"https://www.udemy.com\" target=\"_blank\">Link to Udemy</a>`\n2. 超連結圖片\n`<a href=\"logo.jpg\" target=\"_blank\">HTML logo</a>`\n### CSS 格式\n#### 開始使用 CSS\n1. CSS = Cascading Style Sheets\n2. CSS 定義 HTML 要長什麼樣子\n3. HTML 是內容，CSS 是樣式\n4. CSS 可以寫的地方\n    - 加在 HTML tag 裡面\n    - 加在 HTML 檔案裡面\n    - 把 CSS code 放在外部檔案\n5. 新增 style.css，然後在 index.html 引入\n`<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">`\n#### 開始讓網頁變漂亮\n1. 修改 style.css 檔案\n```\nbody {\n    font-family: Helvetica Neue, Arial;\n    font-size: 18px;\n}\n\nh1, h2 {\n    color: green;\n\n}\n\nh1 {\n    font-size: 40px;\n}\n\nh2 {\n    font-size: 25px;\n}\n\np {\n    font-size: 18px;\n    text-align: justify;\n}\n```\n#### 顏色\n1. RGB #RRGGBB 每個顏色最小 0，最大 ff\n2. 要有透明度，則採用 rgba\n#### Classes 和 IDs\n1. id 只能用一次，用 # 表示\n2. 在 sytle.css 新增 class\n```\n.main-text {\n    text-align: justify;\n}\n\n.author-text {\n    font-size: 22px;\n}\n```\n3. 把前段的的 `<p>` 改成 `<p class=\"main-text\">`，作者的 `<p>` 改成 `<p class=\"author-text\">`\n#### CSS box model\n1. Box model 分為四部分\n    - Content：文字，圖片..等等\n    - Padding：在 Content 內部的透明區域，在 box 裡面\n    - Border：在 Padding 和 Content 的外面\n    - Margin：Boxes 之間的距離\n<img src=\"/images/learning/htmlcss/css-model.png\">\n2. Box-sizing：CSS 同樣也可以定義整個 box width 和 Height，而不只有 Content\n<img src=\"/images/learning/htmlcss/box-sizing.png\">\n3. 在 HTML，有 block 元素和 inline 元素，包含 Heading 和 Paragraph 都是 block 元素，而圖片，粗體和連結都屬於 inline 元素，inline 元素你只能設定它的 height 或是它的 width\n4. 在 style.css 設定元素\n```\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n```\n5. 設定 h1 `margin-bottom: 20px;` h2 `margin-bottom: 10px;` .main-text `margin-bottom: 20px;`\n#### 建立一個簡單的版面編排\n1. 新增網頁架構\n```\n<div class=\"container\">\n    <div class=\"blog-post\">\n        內文\n    </div>\n\n    <div class=\"other-posts\">\n        右邊選單欄\n    </div>\n\n    <div class=\"clearfix\"></div>\n\n    <div class=\"author-box\">\n        作者欄\n    </div>\n</div>\n```\n2. clearfix 處理換 row 的問題，margin 的值是 `top right bottom left`，float 是強制靠左，讓元素整合在一起\n```\n.clearfix:after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\n.container {\n    width: 1140px;\n    margin: 20px auto 0 auto;\n}\n\n.blog-post {\n    width: 75%;\n    float: left;\n    padding-right: 30px;\n}\n\n.other-posts {\n    width: 25%;\n    float: left;\n}\n\n.author-box {\n    padding-top: 20px;\n    border-top: 1px solid #333;\n}\n```\n#### 擦亮我們的 blog post\n1. 把 html logo 放到內文第二部分，然後側邊選單欄新增內容\n```\n<div class=\"other-posts\">\n    <div class=\"other\">\n        The first other blog post\n    </div>\n    <div class=\"other\">\n        Yet another blog post\n    </div>\n    <div class=\"other\">\n        The best blog post ever: read this!\n    </div>\n</div>\n```\n2. 調整側邊欄的間距，作者欄的圖片大小且變成圓形，然後讓作者區塊的文字平行對齊\n```\n.author-text {\n    font-size: 22px;\n    float: left;\n    margin-top: 30px;\n    margin-left: 10px;\n}\n\n.other {\n    margin-bottom: 40px;\n}\n\n.author-box img {\n    height: 100px;\n    width: 100px;\n    border-radius: 50%;\n    float: left;\n}\n\n.blog-post img {\n    height: 150px;\n    width: auto;\n\n}\n```\n#### Relative 和 Absolute\n1. 在 blog post 內文第一部分標題後面新增日期 `<p class=\"date\">Nov 11th, 2017</p>`\n2. 在 .blog-post 的 class 下的 position 設為 relative\n```\n.blog-post {\n    ...\n    position: relative;\n}\n```\n3. 在 .date 的 position 設為 absolute 並調整間距\n```\n.date {\n    position: absolute;\n    top: 10px;\n    right: 30px;\n}\n```\n#### 開始使用 Chrome Developer Tools\n1. Windows F12 開啟，Mac Command + Option + I","slug":"HTML5-CSS3-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-08T15:54:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvww200027ifamv5ud8jg","content":"<img src=\"/images/learning/htmlcss/HtmlCssDay1.jpg\">\n<hr>\n<h3>課程介紹</h3>\n<h4>學習內容</h4>\n<ol>\n<li>動手做 HTML5、CSS3 和 jQuery</li>\n<li>製作七步驟，從草稿到完整的有功能且優化的網站</li>\n<li>簡單使用網站設計原則和訣竅</li>\n<li>如何取得且使用很棒的圖片、文字和圖標，全部免費</li>\n<li>Responsive 網頁設計，讓不同的大小畫面都漂亮</li>\n<li>如何使用 jQuery 製作非常酷的動畫</li>\n<li>如何優化網站</li>\n<li>課程主要分為四部分\n<ul>\n<li>網站設計基礎</li>\n<li>基礎 HTML 和 CSS</li>\n<li>用被應用在真實世界的七步驟完成很酷的網站</li>\n<li>優化網站</li>\n</ul>\n</li>\n</ol>\n<h3>開始使用 HTML</h3>\n<h4>什麼是 HTML</h4>\n<ol>\n<li>HTML = Hyper Text Markup Language</li>\n<li>HTML 檔案用 HTML 標籤來寫 <code>&lt;h1&gt; &lt;p&gt; &lt;a&gt;</code></li>\n<li>標籤用來包裝元素的開始和結束 <code>&lt;tagname&gt;content&lt;/tagname&gt;</code></li>\n</ol>\n<h4>HTML 架構</h4>\n<ol>\n<li>HTML 裡面由 head 和 body 組成，在檔案開頭要宣告檔案類型</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h4>填滿架構</h4>\n<ol>\n<li><a href=\"https://www.lipsum.com/\" target=\"_blank\" rel=\"external\">Lorem Ipsum 產生器</a></li>\n<li>常用 HTML 標籤\n<ul>\n<li><code>&lt;p&gt;&lt;/p&gt;</code> 段落</li>\n<li><code>&lt;strong&gt;&lt;/strong&gt;</code> 粗體</li>\n<li><code>&lt;em&gt;&lt;/em&gt;</code> 斜體</li>\n<li><code>&lt;u&gt;&lt;/u&gt;</code> 底線</li>\n<li><code>&lt;br&gt;</code> 換行</li>\n</ul>\n</li>\n</ol>\n<h4>圖片和屬性</h4>\n<ol>\n<li><a href=\"https://randomuser.me/\" target=\"_blank\" rel=\"external\">隨機產生人像</a></li>\n<li>引入圖片 <code>&lt;img src=&quot;logo.jpg&quot; alt=&quot;The HTML5 logo&quot;&gt;</code></li>\n</ol>\n<h4>超連結</h4>\n<ol>\n<li>超連結文字<br>\n<code>&lt;a href=&quot;https://www.udemy.com&quot; target=&quot;_blank&quot;&gt;Link to Udemy&lt;/a&gt;</code></li>\n<li>超連結圖片<br>\n<code>&lt;a href=&quot;logo.jpg&quot; target=&quot;_blank&quot;&gt;HTML logo&lt;/a&gt;</code></li>\n</ol>\n<h3>CSS 格式</h3>\n<h4>開始使用 CSS</h4>\n<ol>\n<li>CSS = Cascading Style Sheets</li>\n<li>CSS 定義 HTML 要長什麼樣子</li>\n<li>HTML 是內容，CSS 是樣式</li>\n<li>CSS 可以寫的地方\n<ul>\n<li>加在 HTML tag 裡面</li>\n<li>加在 HTML 檔案裡面</li>\n<li>把 CSS code 放在外部檔案</li>\n</ul>\n</li>\n<li>新增 style.css，然後在 index.html 引入<br>\n<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</code></li>\n</ol>\n<h4>開始讓網頁變漂亮</h4>\n<ol>\n<li>修改 style.css 檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    font-family: Helvetica Neue, Arial;</div><div class=\"line\">    font-size: 18px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1, h2 &#123;</div><div class=\"line\">    color: green;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1 &#123;</div><div class=\"line\">    font-size: 40px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h2 &#123;</div><div class=\"line\">    font-size: 25px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p &#123;</div><div class=\"line\">    font-size: 18px;</div><div class=\"line\">    text-align: justify;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>顏色</h4>\n<ol>\n<li>RGB #RRGGBB 每個顏色最小 0，最大 ff</li>\n<li>要有透明度，則採用 rgba</li>\n</ol>\n<h4>Classes 和 IDs</h4>\n<ol>\n<li>id 只能用一次，用 # 表示</li>\n<li>在 sytle.css 新增 class</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.main-text &#123;</div><div class=\"line\">    text-align: justify;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-text &#123;</div><div class=\"line\">    font-size: 22px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>把前段的的 <code>&lt;p&gt;</code> 改成 <code>&lt;p class=&quot;main-text&quot;&gt;</code>，作者的 <code>&lt;p&gt;</code> 改成 <code>&lt;p class=&quot;author-text&quot;&gt;</code></li>\n</ol>\n<h4>CSS box model</h4>\n<ol>\n<li>Box model 分為四部分\n<ul>\n<li>Content：文字，圖片…等等</li>\n<li>Padding：在 Content 內部的透明區域，在 box 裡面</li>\n<li>Border：在 Padding 和 Content 的外面</li>\n<li>Margin：Boxes 之間的距離<br>\n<img src=\"/images/learning/htmlcss/css-model.png\"></li>\n</ul>\n</li>\n<li>Box-sizing：CSS 同樣也可以定義整個 box width 和 Height，而不只有 Content<br>\n<img src=\"/images/learning/htmlcss/box-sizing.png\"></li>\n<li>在 HTML，有 block 元素和 inline 元素，包含 Heading 和 Paragraph 都是 block 元素，而圖片，粗體和連結都屬於 inline 元素，inline 元素你只能設定它的 height 或是它的 width</li>\n<li>在 style.css 設定元素</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>設定 h1 <code>margin-bottom: 20px;</code> h2 <code>margin-bottom: 10px;</code> .main-text <code>margin-bottom: 20px;</code></li>\n</ol>\n<h4>建立一個簡單的版面編排</h4>\n<ol>\n<li>新增網頁架構</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;blog-post&quot;&gt;</div><div class=\"line\">        內文</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;other-posts&quot;&gt;</div><div class=\"line\">        右邊選單欄</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;author-box&quot;&gt;</div><div class=\"line\">        作者欄</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>clearfix 處理換 row 的問題，margin 的值是 <code>top right bottom left</code>，float 是強制靠左，讓元素整合在一起</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">    content: &quot;&quot;;</div><div class=\"line\">    display: table;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.container &#123;</div><div class=\"line\">    width: 1140px;</div><div class=\"line\">    margin: 20px auto 0 auto;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blog-post &#123;</div><div class=\"line\">    width: 75%;</div><div class=\"line\">    float: left;</div><div class=\"line\">    padding-right: 30px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.other-posts &#123;</div><div class=\"line\">    width: 25%;</div><div class=\"line\">    float: left;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-box &#123;</div><div class=\"line\">    padding-top: 20px;</div><div class=\"line\">    border-top: 1px solid #333;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>擦亮我們的 blog post</h4>\n<ol>\n<li>把 html logo 放到內文第二部分，然後側邊選單欄新增內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;other-posts&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;other&quot;&gt;</div><div class=\"line\">        The first other blog post</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;other&quot;&gt;</div><div class=\"line\">        Yet another blog post</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;other&quot;&gt;</div><div class=\"line\">        The best blog post ever: read this!</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>調整側邊欄的間距，作者欄的圖片大小且變成圓形，然後讓作者區塊的文字平行對齊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">.author-text &#123;</div><div class=\"line\">    font-size: 22px;</div><div class=\"line\">    float: left;</div><div class=\"line\">    margin-top: 30px;</div><div class=\"line\">    margin-left: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.other &#123;</div><div class=\"line\">    margin-bottom: 40px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-box img &#123;</div><div class=\"line\">    height: 100px;</div><div class=\"line\">    width: 100px;</div><div class=\"line\">    border-radius: 50%;</div><div class=\"line\">    float: left;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blog-post img &#123;</div><div class=\"line\">    height: 150px;</div><div class=\"line\">    width: auto;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Relative 和 Absolute</h4>\n<ol>\n<li>在 blog post 內文第一部分標題後面新增日期 <code>&lt;p class=&quot;date&quot;&gt;Nov 11th, 2017&lt;/p&gt;</code></li>\n<li>在 .blog-post 的 class 下的 position 設為 relative</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.blog-post &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 .date 的 position 設為 absolute 並調整間距</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.date &#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    top: 10px;</div><div class=\"line\">    right: 30px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>開始使用 Chrome Developer Tools</h4>\n<ol>\n<li>Windows F12 開啟，Mac Command + Option + I</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/htmlcss/HtmlCssDay1.jpg\">\n<hr>\n<h3>課程介紹</h3>\n<h4>學習內容</h4>\n<ol>\n<li>動手做 HTML5、CSS3 和 jQuery</li>\n<li>製作七步驟，從草稿到完整的有功能且優化的網站</li>\n<li>簡單使用網站設計原則和訣竅</li>\n<li>如何取得且使用很棒的圖片、文字和圖標，全部免費</li>\n<li>Responsive 網頁設計，讓不同的大小畫面都漂亮</li>\n<li>如何使用 jQuery 製作非常酷的動畫</li>\n<li>如何優化網站</li>\n<li>課程主要分為四部分\n<ul>\n<li>網站設計基礎</li>\n<li>基礎 HTML 和 CSS</li>\n<li>用被應用在真實世界的七步驟完成很酷的網站</li>\n<li>優化網站</li>\n</ul>\n</li>\n</ol>\n<h3>開始使用 HTML</h3>\n<h4>什麼是 HTML</h4>\n<ol>\n<li>HTML = Hyper Text Markup Language</li>\n<li>HTML 檔案用 HTML 標籤來寫 <code>&lt;h1&gt; &lt;p&gt; &lt;a&gt;</code></li>\n<li>標籤用來包裝元素的開始和結束 <code>&lt;tagname&gt;content&lt;/tagname&gt;</code></li>\n</ol>\n<h4>HTML 架構</h4>\n<ol>\n<li>HTML 裡面由 head 和 body 組成，在檔案開頭要宣告檔案類型</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h4>填滿架構</h4>\n<ol>\n<li><a href=\"https://www.lipsum.com/\" target=\"_blank\" rel=\"external\">Lorem Ipsum 產生器</a></li>\n<li>常用 HTML 標籤\n<ul>\n<li><code>&lt;p&gt;&lt;/p&gt;</code> 段落</li>\n<li><code>&lt;strong&gt;&lt;/strong&gt;</code> 粗體</li>\n<li><code>&lt;em&gt;&lt;/em&gt;</code> 斜體</li>\n<li><code>&lt;u&gt;&lt;/u&gt;</code> 底線</li>\n<li><code>&lt;br&gt;</code> 換行</li>\n</ul>\n</li>\n</ol>\n<h4>圖片和屬性</h4>\n<ol>\n<li><a href=\"https://randomuser.me/\" target=\"_blank\" rel=\"external\">隨機產生人像</a></li>\n<li>引入圖片 <code>&lt;img src=&quot;logo.jpg&quot; alt=&quot;The HTML5 logo&quot;&gt;</code></li>\n</ol>\n<h4>超連結</h4>\n<ol>\n<li>超連結文字<br>\n<code>&lt;a href=&quot;https://www.udemy.com&quot; target=&quot;_blank&quot;&gt;Link to Udemy&lt;/a&gt;</code></li>\n<li>超連結圖片<br>\n<code>&lt;a href=&quot;logo.jpg&quot; target=&quot;_blank&quot;&gt;HTML logo&lt;/a&gt;</code></li>\n</ol>\n<h3>CSS 格式</h3>\n<h4>開始使用 CSS</h4>\n<ol>\n<li>CSS = Cascading Style Sheets</li>\n<li>CSS 定義 HTML 要長什麼樣子</li>\n<li>HTML 是內容，CSS 是樣式</li>\n<li>CSS 可以寫的地方\n<ul>\n<li>加在 HTML tag 裡面</li>\n<li>加在 HTML 檔案裡面</li>\n<li>把 CSS code 放在外部檔案</li>\n</ul>\n</li>\n<li>新增 style.css，然後在 index.html 引入<br>\n<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</code></li>\n</ol>\n<h4>開始讓網頁變漂亮</h4>\n<ol>\n<li>修改 style.css 檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    font-family: Helvetica Neue, Arial;</div><div class=\"line\">    font-size: 18px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1, h2 &#123;</div><div class=\"line\">    color: green;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1 &#123;</div><div class=\"line\">    font-size: 40px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h2 &#123;</div><div class=\"line\">    font-size: 25px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p &#123;</div><div class=\"line\">    font-size: 18px;</div><div class=\"line\">    text-align: justify;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>顏色</h4>\n<ol>\n<li>RGB #RRGGBB 每個顏色最小 0，最大 ff</li>\n<li>要有透明度，則採用 rgba</li>\n</ol>\n<h4>Classes 和 IDs</h4>\n<ol>\n<li>id 只能用一次，用 # 表示</li>\n<li>在 sytle.css 新增 class</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.main-text &#123;</div><div class=\"line\">    text-align: justify;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-text &#123;</div><div class=\"line\">    font-size: 22px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>把前段的的 <code>&lt;p&gt;</code> 改成 <code>&lt;p class=&quot;main-text&quot;&gt;</code>，作者的 <code>&lt;p&gt;</code> 改成 <code>&lt;p class=&quot;author-text&quot;&gt;</code></li>\n</ol>\n<h4>CSS box model</h4>\n<ol>\n<li>Box model 分為四部分\n<ul>\n<li>Content：文字，圖片…等等</li>\n<li>Padding：在 Content 內部的透明區域，在 box 裡面</li>\n<li>Border：在 Padding 和 Content 的外面</li>\n<li>Margin：Boxes 之間的距離<br>\n<img src=\"/images/learning/htmlcss/css-model.png\"></li>\n</ul>\n</li>\n<li>Box-sizing：CSS 同樣也可以定義整個 box width 和 Height，而不只有 Content<br>\n<img src=\"/images/learning/htmlcss/box-sizing.png\"></li>\n<li>在 HTML，有 block 元素和 inline 元素，包含 Heading 和 Paragraph 都是 block 元素，而圖片，粗體和連結都屬於 inline 元素，inline 元素你只能設定它的 height 或是它的 width</li>\n<li>在 style.css 設定元素</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>設定 h1 <code>margin-bottom: 20px;</code> h2 <code>margin-bottom: 10px;</code> .main-text <code>margin-bottom: 20px;</code></li>\n</ol>\n<h4>建立一個簡單的版面編排</h4>\n<ol>\n<li>新增網頁架構</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;blog-post&quot;&gt;</div><div class=\"line\">        內文</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;other-posts&quot;&gt;</div><div class=\"line\">        右邊選單欄</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;author-box&quot;&gt;</div><div class=\"line\">        作者欄</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>clearfix 處理換 row 的問題，margin 的值是 <code>top right bottom left</code>，float 是強制靠左，讓元素整合在一起</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">    content: &quot;&quot;;</div><div class=\"line\">    display: table;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.container &#123;</div><div class=\"line\">    width: 1140px;</div><div class=\"line\">    margin: 20px auto 0 auto;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blog-post &#123;</div><div class=\"line\">    width: 75%;</div><div class=\"line\">    float: left;</div><div class=\"line\">    padding-right: 30px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.other-posts &#123;</div><div class=\"line\">    width: 25%;</div><div class=\"line\">    float: left;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-box &#123;</div><div class=\"line\">    padding-top: 20px;</div><div class=\"line\">    border-top: 1px solid #333;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>擦亮我們的 blog post</h4>\n<ol>\n<li>把 html logo 放到內文第二部分，然後側邊選單欄新增內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;other-posts&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;other&quot;&gt;</div><div class=\"line\">        The first other blog post</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;other&quot;&gt;</div><div class=\"line\">        Yet another blog post</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;other&quot;&gt;</div><div class=\"line\">        The best blog post ever: read this!</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>調整側邊欄的間距，作者欄的圖片大小且變成圓形，然後讓作者區塊的文字平行對齊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">.author-text &#123;</div><div class=\"line\">    font-size: 22px;</div><div class=\"line\">    float: left;</div><div class=\"line\">    margin-top: 30px;</div><div class=\"line\">    margin-left: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.other &#123;</div><div class=\"line\">    margin-bottom: 40px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-box img &#123;</div><div class=\"line\">    height: 100px;</div><div class=\"line\">    width: 100px;</div><div class=\"line\">    border-radius: 50%;</div><div class=\"line\">    float: left;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blog-post img &#123;</div><div class=\"line\">    height: 150px;</div><div class=\"line\">    width: auto;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Relative 和 Absolute</h4>\n<ol>\n<li>在 blog post 內文第一部分標題後面新增日期 <code>&lt;p class=&quot;date&quot;&gt;Nov 11th, 2017&lt;/p&gt;</code></li>\n<li>在 .blog-post 的 class 下的 position 設為 relative</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.blog-post &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 .date 的 position 設為 absolute 並調整間距</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.date &#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    top: 10px;</div><div class=\"line\">    right: 30px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>開始使用 Chrome Developer Tools</h4>\n<ol>\n<li>Windows F12 開啟，Mac Command + Option + I</li>\n</ol>\n"},{"title":"HTML5+CSS3 快速學習自我挑戰 Day2","thumbnail":["/images/learning/htmlcss/HtmlCssDay2.jpg"],"date":"2017-11-19T03:59:13.000Z","_content":"<img src=\"/images/learning/htmlcss/HtmlCssDay2.jpg\">\n\n***\n### 網站設計基礎\n#### 網站設計介紹\n1. **設計師**創造網頁的樣式和感覺，**開發者**則根據設計師的樣稿使用 HTML、CSS、JavaScript 建立網頁\n#### 字體\n1. 字體是一種藝術和排列技術，讓書面語言可閱讀且美觀\n2. 對 body text 使用 15px - 20px 的字體大小\n3. 對 Headlines 使用大的字體\n4. 使用 120% - 150% 的行距 (Line Spacing)\n5. 每行 45 到 90 字\n6. 使用正確的字體\n    - Sans-serif：中立、乾淨、簡單、現代化網站\n    - Serif：傳統目的、說故事、長篇幅的閱讀\n7. [Google Fonts](https://fonts.google.com/)\n8. 在 Google Fonts 裡面很棒的 Sans-serif 字體：Open Sans、Lato、Raleway、Monsterrat、PT Sans\n9. 在 Google Fonts 裡面很棒的 Serif 字體：Cardo、Merriweather、PT Serif\n9. 如何**選擇**字體？\n    - 對網站選擇一個反映你想要得視覺和感覺的字體\n    - 決定：Sans-serif 或 Serif？\n    - 使用好字體\n    - 只使用那一種 typeface\n#### 像專家一樣使用顏色\n1. 只使用一種基底顏色 (Base Color)，Base Color 就是除了黑色、白色和灰色階的顏色\n2. 如果想要使用更多顏色，請使用工具\n    - [Flat UI colors](https://flatuicolors.com/) 是一種幫助選擇 Base Color 的好工具\n    - Color Wheel Tool 可以幫助混合多種顏色，可以使用 Adobe Color CC\n3. 使用顏色來吸引注意力\n4. 絕不要在設計使用黑色\n5. 明智地選擇顏色\n    - 紅色：力量、熱情、力氣、興奮，亮色系更有活力、暗色系更有力量且優雅\n    - 橘色：可以吸引注意力但不會壓過紅色，它代表鼓舞和創意，橘色還跟友善、信心和勇氣有關聯\n    - 黃色：是一種有活力且給予一種快樂和生動活潑的感覺，它還跟好奇心、智慧和明亮...等等有關聯\n    - 綠色：是一種和諧、自然、生活和健康的顏色，它還時常跟錢有關聯，在設計裡面，綠色還可以有平衡和協調的效果\n    - 藍色：代表耐心、和平、信任和穩定，它是特別有吸引力的顏色，尤其是對男生，它跟專業、信任和榮譽，這也是為什麼大型的 Socail Media 都使用藍色\n    - 紫色：傳統上跟權力、高貴和富有有關連，在設計裡面，紫色可以給予一種智慧、高貴、奢華和神秘的感覺\n    - 粉紅色：表達浪漫、主動、關心、和平和感情...等等\n    - 咖啡色：代表放鬆和信心，它本身表示質樸、自然、持久、舒適和依賴感\n#### 使用圖片\n1. 在圖片上直接放置文字\n    - 這種做法只有在圖片很黑且文字是白色的時候有用，否則在圖片和文字之間會沒有足夠的對比\n2. 覆蓋圖片 (Overlay the Image)\n    - 使用顏色漸層也可以達到驚人的效果\n3. 把文字放在 Box 裡面\n    - 白色加上一些透明度可以做到，也可以把 Box 弄成黑色或是其它顏色\n    - 只要保持創意就可以了\n4. 模糊圖片 (Blur the Image)\n    - 文字要在所有螢幕解析度底下，保持在圖片模糊的部分\n5. The Floor Fade\n    - 從上到下的漸層褪色的技術，幾乎沒有注意到，但是仍然可以改善閱讀性\n    - 如果想要在圖片下方放置文字，這是一種很好的方法\n#### 使用 Icon\n1. 如果正確使用的話，可以提供非常好的使用者體驗；反之，如果用不好的話，會造成使用者的困惑\n2. 使用 Icon 來做條列式的功能/步驟\n3. 對動作和連結使用 Icons\n    - Icons 應該要可辨識\n    - Label Your Icons (就是在圖標後方放置文字)\n4. Icons 不應該成為焦點\n5. 盡可能使用 ICON FONTS\n#### Spacing 和版面編排\n1. White Space 就是創建乾淨和簡單的關鍵\n2. 使用 White Space\n    - 在元素之間放置 White Space\n    - 在元素群組之間放置 White Space\n    - 在網站區塊之間放置 White Space\n    - 但是不要太誇張\n3. 定義階層\n    - White Space 描述了在網頁元素之間的隱形關係\n    - 定義你想要讓觀眾先看到哪個部分\n    - 建立一個對應內容訊息的 Flow，它導引使用者從一個元素到下一個元素\n    - 使用 White Space 來建立 Flow\n#### 使用者體驗介紹\n1. **使用者體驗**是一個產品的介紹，看起來如何和感覺\n2. **使用者體驗**是和這一個產品的整體經驗，它包含使用者介面，但是也要有整個產品的全面觀\n3. 引用賈伯斯，功能是最重要的\n> It's not just what it looks like and feels like. Design is how it works\n> \\- Steve Jobs\n4. 可以把使用者體驗想成使用者目標和商業目標，使用者體驗設計師需要整理這些目標，當使用者達到他們的目的之後，商業也會受益，舉例來說，一個網站如果提供免費的電子書來交換使用者的 Email，使用者的目標就是學習電子書的內容，而你的目標就是取得使用者的 Email，所以你就可以在之後賣東西給他們，最後，你要確定你的設計可以做最好的工作來達到這兩個目標\n#### 獲取靈感：令人驚嘆的網站設計的秘密材料\n1. 使用其它網站當作靈感，來看其他領導設計師們怎麼**做正確的事情**\n    - 收集你喜歡的設計\n    - 試圖了解關於它們的每一樣東西\n    - 為什麼它們看起來很好？\n    - 這些網站有什麼共通點？\n    - 如何使用 HTML 和 CSS 來建立？\n2. 像藝術家一般的**竊取**\n### 殺手級的網站\n#### 七步驟完成完整有功能的網站\n1. 定義你的專案\n    - 確認專案目標\n    - 確認你的客群\n    - 在心裡用你的目標和客群來設計\n2. 規劃全部\n    - 規劃內容：文字、圖片、影片、Icons...等等\n    - 開始思考視覺分層結構 (Visail Hierarchy)\n    - 定義導覽列 (Navigation)\n    - 如果是比較大型的專案，要定義網站架構\n3. 在設計之前，畫出 Ideas 的草稿\n    - 獲得靈感和思考你的設計\n    - 把 ideas 從腦中拿出來：在設計之前，畫出 Ideas 的草稿\n    - 盡可能的畫出更多草稿，但是不要把花太多時間把它弄得太完美\n    - 在沒有任何想要建立的 ideas 之前，不要開始設計\n4. 設計和開發你的網站\n    - 使用 Guidelines 和 Tips 設計你的網站\n    - 使用 HTML 和 CSS：在瀏覽器設計\n    - 使用草稿、內容和從 123 步驟做的計畫性的決定\n    - 這一步驟是建立網站最大的一步驟，但是：所有的步驟都很重要\n5. 還沒完成 - 優化\n    - 優化表現：網站速度\n    - 搜尋引擎優化 (SEO)\n6. 發佈你得傑作\n    - 所有你需要的就是開啟一個網站伺服器，它可以 host 你的網站且傳送到全世界\n7. 網站維護\n    - 發佈不是最後的事情\n    - 觀察你的使用者表現和在必要的情況下修改你的網站\n    - 定期更新你的內容：blog\n#### 讓七步驟付諸行動\n1. 步驟一：\n    - **專案目標**：顯示 Omnifood 做的事情，如何運作和他們所營業的地點，然後讓人註冊申請訂閱項目\n    - **客群**：沒有時間煮飯或不喜歡煮飯的忙碌人\n2. 步驟二：\n    - 單頁網頁內容包含 Omnifood 提供的資訊和簡單的 navigation (導覽列)\n    - **內容**：Omnifood 提供的文字文件和套圖\n    - **Navigation (導覽列)**：也是由 Omnifood 提供的文字文件\n3. 步驟三：畫草稿\n4. 步驟四：\n    - 顏色：橘色\n    - 字體：LATO，字體有半圓角，給這個字型溫暖的感覺，當使用強壯的結構會提供穩定和嚴謹，根據這個字體的設計師，這個字體是男性也是女性，嚴謹但友善，且有夏天的感覺\n#### 第一個開發步驟\n1. 新增以下目錄結構\n```\n- resources\n    - css\n        -img\n    - js\n    - img\n    - data\n- vendors\n    - css\n    - js\n    - fonts\n- index.html\n```\n2. 下載 [Normalize.css](https://necolas.github.io/normalize.css/)，放到 vendors/css\n3. 修改 index.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"resources/css/normalize.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"resources/css/style.css\">\n        <link href=\"https://fonts.googleapis.com/css?family=Lato:100,300,300i,400\" rel=\"stylesheet\">\n        <title>Omnifood</title>\n    </head>\n    <body>\n        <h1>Omnifood</h1>\n    </body>\n</html>\n```\n4. 修改 resources/css/style.css，text-rendering 用最完美的方式讓字體載入\n```\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: #fff;\n    color: #555;\n    font-family: 'Lato', 'Arial', sans-serif;\n    font-weight: 300;\n    font-size: 20px;\n    text-rendering: optimizeLegibility;\n}\n```\n#### 為響應式設計設置 fluid grid\n1. 三個響應式的方法\n    - Fluid Grid：所有的版面編排元素都使用相對單位，像是百分比而不是像是像素這種絕對單位\n    - Flexible Images：也是使用相對單位\n    - Media Queries：允許我們在不同瀏覽器寬度選擇不同的 CSS 樣式規格\n2. 把 grid.css 放到 vendors/css\n3. [響應式設計官方網站](http://www.responsivegridsystem.com/)\n4. 在 index.html 引入 grid.css `<link rel=\"stylesheet\" type=\"text/css\" href=\"vendors/css/grid.css\">`\n5. 在 style.css 新增 row\n```\n.row {\n    max-width: 1140px;\n    margin: 0 auto;\n}\n```\n6. 在 index.html 最外層包上 row\n```\n<div class=\"row\">\n    <h1>Omnifood</h1>\n</div>\n```\n#### 建立 header\n1. 在 index.html 新增 header\n```\n<header>\n    <div class=\"hero-text-box\">\n        <h1>Goodbye junk food. Hello super healthy meals.</h1>\n        <a href=\"#\">I'm hungry</a>\n        <a href=\"#\">Show me more</a>\n    </div>\n</header>\n```\n2. 在 style.css 加入以下\n```\nheader {\n    background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(img/hero.jpg) center;\n    background-size: cover;\n    height: 100vh;\n}\n\n.hero-text-box {\n    position: absolute;\n    width: 1140px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n\nh1 {\n    margin: 0;\n}\n```\n3. [選擇相近顏色的工具](http://www.0to255.com/)\n4. 在 style.css 的 h1 做修改\n```\nh1 {\n    margin-top: 0;\n    margin-bottom: 20px;\n    color: #fff;\n    font-size: 240%;\n    font-weight: 300;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    word-spacing: 4px;\n}\n```\n5. 在 index.html 的 h1 加 `<br>` 斷行，且在 button 加上兩個 attribute\n```\n<div class=\"hero-text-box\">\n    <h1>Goodbye junk food.<br>Hello super healthy meals.</h1>\n    <a class=\"btn btn-full\" href=\"#\">I'm hungry</a>\n    <a class=\"btn btn-ghost\" href=\"#\">Show me more</a>\n</div>\n```\n6. 在 style.css 新增 button 樣式，link 是連結，visited 是被點擊過的連結，hover 是滑鼠放到該元素上的動作，active 則是點擊該元素的動作\n```\n.btn:link,\n.btn:visited {\n    display: inline-block;\n    padding: 10px 30px;\n    font-weight: 300;\n    text-decoration: none;\n    border-radius: 200px;\n    transition: background-color 0.2s, border 0.2s, color 0.2s;\n}\n\n.btn-full:link,\n.btn-full:visited {\n    background-color: #e67e22;\n    border: 1px solid #e67e22;\n    color: #fff;\n    margin-right: 15px;\n}\n\n.btn-ghost:link,\n.btn-ghost:visited {\n    border: 1px solid #e67e22;\n    color: #e67e22;\n}\n\n.btn:hover,\n.btn:active {\n    background-color: #cf6d17;\n}\n\n.btn-full:hover,\n.btn-full:active {\n    border: 1px solid #cf6d17;\n}\n\n.btn-ghost:hover,\n.btn-ghost:active {\n    border: 1px solid #cf6d17;\n    color: #fff;\n}\n```\n7. 在 index.html 的 body 下面新增 navigation\n```\n<nav>\n    <div class=\"row\">\n        <img src=\"resources/img/logo-white.png\" alt=\"Omnifood logo\" class=\"logo\">\n        <ul class=\"main-nav\">\n            <li><a href=\"#\">Food delivery</a></li>\n            <li><a href=\"#\">How it works</a></li>\n            <li><a href=\"#\">Our cities</a></li>\n            <li><a href=\"#\">Sign up</a></li>\n        </ul>\n    </div>\n</nav>\n```\n8. 在 style.css 新增 navigation 樣式\n```\n.logo {\n    height: 100px;\n    width: auto;\n    float: left;\n    margin-top: 20px;\n}\n\n.main-nav {\n    float: right;\n    list-style: none;\n    margin-top: 55px;\n}\n\n.main-nav li {\n    display: inline-block;\n    margin-left: 40px;\n}\n\n.main-nav li a:link,\n.main-nav li a:visited {\n    padding: 8px 0;\n    color: #fff;\n    text-decoration: none;\n    text-transform: uppercase;\n    font-size: 90%;\n    border-bottom: 2px solid transparent;\n    transition: border-bottom 0.2s;\n}\n\n.main-nav li a:hover,\n.main-nav li a:active {\n    border-bottom: 2px solid #e67e22;\n}\n```\n9. 在 style.css 加上一些註解，註解的樣式如下\n```\n/* ----------------------------------------------------- */\n/* BASIC SETUP */\n/* ----------------------------------------------------- */\n```","source":"_posts/HTML5-CSS3-快速學習自我挑戰-Day2.md","raw":"---\ntitle: HTML5+CSS3 快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/htmlcss/HtmlCssDay2.jpg\ndate: 2017-11-19 11:59:13\ncategories: 學習歷程\ntags: \n    - HTML\n    - CSS\n    - UX\n---\n<img src=\"/images/learning/htmlcss/HtmlCssDay2.jpg\">\n\n***\n### 網站設計基礎\n#### 網站設計介紹\n1. **設計師**創造網頁的樣式和感覺，**開發者**則根據設計師的樣稿使用 HTML、CSS、JavaScript 建立網頁\n#### 字體\n1. 字體是一種藝術和排列技術，讓書面語言可閱讀且美觀\n2. 對 body text 使用 15px - 20px 的字體大小\n3. 對 Headlines 使用大的字體\n4. 使用 120% - 150% 的行距 (Line Spacing)\n5. 每行 45 到 90 字\n6. 使用正確的字體\n    - Sans-serif：中立、乾淨、簡單、現代化網站\n    - Serif：傳統目的、說故事、長篇幅的閱讀\n7. [Google Fonts](https://fonts.google.com/)\n8. 在 Google Fonts 裡面很棒的 Sans-serif 字體：Open Sans、Lato、Raleway、Monsterrat、PT Sans\n9. 在 Google Fonts 裡面很棒的 Serif 字體：Cardo、Merriweather、PT Serif\n9. 如何**選擇**字體？\n    - 對網站選擇一個反映你想要得視覺和感覺的字體\n    - 決定：Sans-serif 或 Serif？\n    - 使用好字體\n    - 只使用那一種 typeface\n#### 像專家一樣使用顏色\n1. 只使用一種基底顏色 (Base Color)，Base Color 就是除了黑色、白色和灰色階的顏色\n2. 如果想要使用更多顏色，請使用工具\n    - [Flat UI colors](https://flatuicolors.com/) 是一種幫助選擇 Base Color 的好工具\n    - Color Wheel Tool 可以幫助混合多種顏色，可以使用 Adobe Color CC\n3. 使用顏色來吸引注意力\n4. 絕不要在設計使用黑色\n5. 明智地選擇顏色\n    - 紅色：力量、熱情、力氣、興奮，亮色系更有活力、暗色系更有力量且優雅\n    - 橘色：可以吸引注意力但不會壓過紅色，它代表鼓舞和創意，橘色還跟友善、信心和勇氣有關聯\n    - 黃色：是一種有活力且給予一種快樂和生動活潑的感覺，它還跟好奇心、智慧和明亮...等等有關聯\n    - 綠色：是一種和諧、自然、生活和健康的顏色，它還時常跟錢有關聯，在設計裡面，綠色還可以有平衡和協調的效果\n    - 藍色：代表耐心、和平、信任和穩定，它是特別有吸引力的顏色，尤其是對男生，它跟專業、信任和榮譽，這也是為什麼大型的 Socail Media 都使用藍色\n    - 紫色：傳統上跟權力、高貴和富有有關連，在設計裡面，紫色可以給予一種智慧、高貴、奢華和神秘的感覺\n    - 粉紅色：表達浪漫、主動、關心、和平和感情...等等\n    - 咖啡色：代表放鬆和信心，它本身表示質樸、自然、持久、舒適和依賴感\n#### 使用圖片\n1. 在圖片上直接放置文字\n    - 這種做法只有在圖片很黑且文字是白色的時候有用，否則在圖片和文字之間會沒有足夠的對比\n2. 覆蓋圖片 (Overlay the Image)\n    - 使用顏色漸層也可以達到驚人的效果\n3. 把文字放在 Box 裡面\n    - 白色加上一些透明度可以做到，也可以把 Box 弄成黑色或是其它顏色\n    - 只要保持創意就可以了\n4. 模糊圖片 (Blur the Image)\n    - 文字要在所有螢幕解析度底下，保持在圖片模糊的部分\n5. The Floor Fade\n    - 從上到下的漸層褪色的技術，幾乎沒有注意到，但是仍然可以改善閱讀性\n    - 如果想要在圖片下方放置文字，這是一種很好的方法\n#### 使用 Icon\n1. 如果正確使用的話，可以提供非常好的使用者體驗；反之，如果用不好的話，會造成使用者的困惑\n2. 使用 Icon 來做條列式的功能/步驟\n3. 對動作和連結使用 Icons\n    - Icons 應該要可辨識\n    - Label Your Icons (就是在圖標後方放置文字)\n4. Icons 不應該成為焦點\n5. 盡可能使用 ICON FONTS\n#### Spacing 和版面編排\n1. White Space 就是創建乾淨和簡單的關鍵\n2. 使用 White Space\n    - 在元素之間放置 White Space\n    - 在元素群組之間放置 White Space\n    - 在網站區塊之間放置 White Space\n    - 但是不要太誇張\n3. 定義階層\n    - White Space 描述了在網頁元素之間的隱形關係\n    - 定義你想要讓觀眾先看到哪個部分\n    - 建立一個對應內容訊息的 Flow，它導引使用者從一個元素到下一個元素\n    - 使用 White Space 來建立 Flow\n#### 使用者體驗介紹\n1. **使用者體驗**是一個產品的介紹，看起來如何和感覺\n2. **使用者體驗**是和這一個產品的整體經驗，它包含使用者介面，但是也要有整個產品的全面觀\n3. 引用賈伯斯，功能是最重要的\n> It's not just what it looks like and feels like. Design is how it works\n> \\- Steve Jobs\n4. 可以把使用者體驗想成使用者目標和商業目標，使用者體驗設計師需要整理這些目標，當使用者達到他們的目的之後，商業也會受益，舉例來說，一個網站如果提供免費的電子書來交換使用者的 Email，使用者的目標就是學習電子書的內容，而你的目標就是取得使用者的 Email，所以你就可以在之後賣東西給他們，最後，你要確定你的設計可以做最好的工作來達到這兩個目標\n#### 獲取靈感：令人驚嘆的網站設計的秘密材料\n1. 使用其它網站當作靈感，來看其他領導設計師們怎麼**做正確的事情**\n    - 收集你喜歡的設計\n    - 試圖了解關於它們的每一樣東西\n    - 為什麼它們看起來很好？\n    - 這些網站有什麼共通點？\n    - 如何使用 HTML 和 CSS 來建立？\n2. 像藝術家一般的**竊取**\n### 殺手級的網站\n#### 七步驟完成完整有功能的網站\n1. 定義你的專案\n    - 確認專案目標\n    - 確認你的客群\n    - 在心裡用你的目標和客群來設計\n2. 規劃全部\n    - 規劃內容：文字、圖片、影片、Icons...等等\n    - 開始思考視覺分層結構 (Visail Hierarchy)\n    - 定義導覽列 (Navigation)\n    - 如果是比較大型的專案，要定義網站架構\n3. 在設計之前，畫出 Ideas 的草稿\n    - 獲得靈感和思考你的設計\n    - 把 ideas 從腦中拿出來：在設計之前，畫出 Ideas 的草稿\n    - 盡可能的畫出更多草稿，但是不要把花太多時間把它弄得太完美\n    - 在沒有任何想要建立的 ideas 之前，不要開始設計\n4. 設計和開發你的網站\n    - 使用 Guidelines 和 Tips 設計你的網站\n    - 使用 HTML 和 CSS：在瀏覽器設計\n    - 使用草稿、內容和從 123 步驟做的計畫性的決定\n    - 這一步驟是建立網站最大的一步驟，但是：所有的步驟都很重要\n5. 還沒完成 - 優化\n    - 優化表現：網站速度\n    - 搜尋引擎優化 (SEO)\n6. 發佈你得傑作\n    - 所有你需要的就是開啟一個網站伺服器，它可以 host 你的網站且傳送到全世界\n7. 網站維護\n    - 發佈不是最後的事情\n    - 觀察你的使用者表現和在必要的情況下修改你的網站\n    - 定期更新你的內容：blog\n#### 讓七步驟付諸行動\n1. 步驟一：\n    - **專案目標**：顯示 Omnifood 做的事情，如何運作和他們所營業的地點，然後讓人註冊申請訂閱項目\n    - **客群**：沒有時間煮飯或不喜歡煮飯的忙碌人\n2. 步驟二：\n    - 單頁網頁內容包含 Omnifood 提供的資訊和簡單的 navigation (導覽列)\n    - **內容**：Omnifood 提供的文字文件和套圖\n    - **Navigation (導覽列)**：也是由 Omnifood 提供的文字文件\n3. 步驟三：畫草稿\n4. 步驟四：\n    - 顏色：橘色\n    - 字體：LATO，字體有半圓角，給這個字型溫暖的感覺，當使用強壯的結構會提供穩定和嚴謹，根據這個字體的設計師，這個字體是男性也是女性，嚴謹但友善，且有夏天的感覺\n#### 第一個開發步驟\n1. 新增以下目錄結構\n```\n- resources\n    - css\n        -img\n    - js\n    - img\n    - data\n- vendors\n    - css\n    - js\n    - fonts\n- index.html\n```\n2. 下載 [Normalize.css](https://necolas.github.io/normalize.css/)，放到 vendors/css\n3. 修改 index.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"resources/css/normalize.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"resources/css/style.css\">\n        <link href=\"https://fonts.googleapis.com/css?family=Lato:100,300,300i,400\" rel=\"stylesheet\">\n        <title>Omnifood</title>\n    </head>\n    <body>\n        <h1>Omnifood</h1>\n    </body>\n</html>\n```\n4. 修改 resources/css/style.css，text-rendering 用最完美的方式讓字體載入\n```\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: #fff;\n    color: #555;\n    font-family: 'Lato', 'Arial', sans-serif;\n    font-weight: 300;\n    font-size: 20px;\n    text-rendering: optimizeLegibility;\n}\n```\n#### 為響應式設計設置 fluid grid\n1. 三個響應式的方法\n    - Fluid Grid：所有的版面編排元素都使用相對單位，像是百分比而不是像是像素這種絕對單位\n    - Flexible Images：也是使用相對單位\n    - Media Queries：允許我們在不同瀏覽器寬度選擇不同的 CSS 樣式規格\n2. 把 grid.css 放到 vendors/css\n3. [響應式設計官方網站](http://www.responsivegridsystem.com/)\n4. 在 index.html 引入 grid.css `<link rel=\"stylesheet\" type=\"text/css\" href=\"vendors/css/grid.css\">`\n5. 在 style.css 新增 row\n```\n.row {\n    max-width: 1140px;\n    margin: 0 auto;\n}\n```\n6. 在 index.html 最外層包上 row\n```\n<div class=\"row\">\n    <h1>Omnifood</h1>\n</div>\n```\n#### 建立 header\n1. 在 index.html 新增 header\n```\n<header>\n    <div class=\"hero-text-box\">\n        <h1>Goodbye junk food. Hello super healthy meals.</h1>\n        <a href=\"#\">I'm hungry</a>\n        <a href=\"#\">Show me more</a>\n    </div>\n</header>\n```\n2. 在 style.css 加入以下\n```\nheader {\n    background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(img/hero.jpg) center;\n    background-size: cover;\n    height: 100vh;\n}\n\n.hero-text-box {\n    position: absolute;\n    width: 1140px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n\nh1 {\n    margin: 0;\n}\n```\n3. [選擇相近顏色的工具](http://www.0to255.com/)\n4. 在 style.css 的 h1 做修改\n```\nh1 {\n    margin-top: 0;\n    margin-bottom: 20px;\n    color: #fff;\n    font-size: 240%;\n    font-weight: 300;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    word-spacing: 4px;\n}\n```\n5. 在 index.html 的 h1 加 `<br>` 斷行，且在 button 加上兩個 attribute\n```\n<div class=\"hero-text-box\">\n    <h1>Goodbye junk food.<br>Hello super healthy meals.</h1>\n    <a class=\"btn btn-full\" href=\"#\">I'm hungry</a>\n    <a class=\"btn btn-ghost\" href=\"#\">Show me more</a>\n</div>\n```\n6. 在 style.css 新增 button 樣式，link 是連結，visited 是被點擊過的連結，hover 是滑鼠放到該元素上的動作，active 則是點擊該元素的動作\n```\n.btn:link,\n.btn:visited {\n    display: inline-block;\n    padding: 10px 30px;\n    font-weight: 300;\n    text-decoration: none;\n    border-radius: 200px;\n    transition: background-color 0.2s, border 0.2s, color 0.2s;\n}\n\n.btn-full:link,\n.btn-full:visited {\n    background-color: #e67e22;\n    border: 1px solid #e67e22;\n    color: #fff;\n    margin-right: 15px;\n}\n\n.btn-ghost:link,\n.btn-ghost:visited {\n    border: 1px solid #e67e22;\n    color: #e67e22;\n}\n\n.btn:hover,\n.btn:active {\n    background-color: #cf6d17;\n}\n\n.btn-full:hover,\n.btn-full:active {\n    border: 1px solid #cf6d17;\n}\n\n.btn-ghost:hover,\n.btn-ghost:active {\n    border: 1px solid #cf6d17;\n    color: #fff;\n}\n```\n7. 在 index.html 的 body 下面新增 navigation\n```\n<nav>\n    <div class=\"row\">\n        <img src=\"resources/img/logo-white.png\" alt=\"Omnifood logo\" class=\"logo\">\n        <ul class=\"main-nav\">\n            <li><a href=\"#\">Food delivery</a></li>\n            <li><a href=\"#\">How it works</a></li>\n            <li><a href=\"#\">Our cities</a></li>\n            <li><a href=\"#\">Sign up</a></li>\n        </ul>\n    </div>\n</nav>\n```\n8. 在 style.css 新增 navigation 樣式\n```\n.logo {\n    height: 100px;\n    width: auto;\n    float: left;\n    margin-top: 20px;\n}\n\n.main-nav {\n    float: right;\n    list-style: none;\n    margin-top: 55px;\n}\n\n.main-nav li {\n    display: inline-block;\n    margin-left: 40px;\n}\n\n.main-nav li a:link,\n.main-nav li a:visited {\n    padding: 8px 0;\n    color: #fff;\n    text-decoration: none;\n    text-transform: uppercase;\n    font-size: 90%;\n    border-bottom: 2px solid transparent;\n    transition: border-bottom 0.2s;\n}\n\n.main-nav li a:hover,\n.main-nav li a:active {\n    border-bottom: 2px solid #e67e22;\n}\n```\n9. 在 style.css 加上一些註解，註解的樣式如下\n```\n/* ----------------------------------------------------- */\n/* BASIC SETUP */\n/* ----------------------------------------------------- */\n```","slug":"HTML5-CSS3-快速學習自我挑戰-Day2","published":1,"updated":"2017-11-20T00:13:39.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvww500047ifa4oinhvmu","content":"<img src=\"/images/learning/htmlcss/HtmlCssDay2.jpg\">\n<hr>\n<h3>網站設計基礎</h3>\n<h4>網站設計介紹</h4>\n<ol>\n<li><strong>設計師</strong>創造網頁的樣式和感覺，<strong>開發者</strong>則根據設計師的樣稿使用 HTML、CSS、JavaScript 建立網頁</li>\n</ol>\n<h4>字體</h4>\n<ol>\n<li>字體是一種藝術和排列技術，讓書面語言可閱讀且美觀</li>\n<li>對 body text 使用 15px - 20px 的字體大小</li>\n<li>對 Headlines 使用大的字體</li>\n<li>使用 120% - 150% 的行距 (Line Spacing)</li>\n<li>每行 45 到 90 字</li>\n<li>使用正確的字體\n<ul>\n<li>Sans-serif：中立、乾淨、簡單、現代化網站</li>\n<li>Serif：傳統目的、說故事、長篇幅的閱讀</li>\n</ul>\n</li>\n<li><a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"external\">Google Fonts</a></li>\n<li>在 Google Fonts 裡面很棒的 Sans-serif 字體：Open Sans、Lato、Raleway、Monsterrat、PT Sans</li>\n<li>在 Google Fonts 裡面很棒的 Serif 字體：Cardo、Merriweather、PT Serif</li>\n<li>如何<strong>選擇</strong>字體？\n<ul>\n<li>對網站選擇一個反映你想要得視覺和感覺的字體</li>\n<li>決定：Sans-serif 或 Serif？</li>\n<li>使用好字體</li>\n<li>只使用那一種 typeface</li>\n</ul>\n</li>\n</ol>\n<h4>像專家一樣使用顏色</h4>\n<ol>\n<li>只使用一種基底顏色 (Base Color)，Base Color 就是除了黑色、白色和灰色階的顏色</li>\n<li>如果想要使用更多顏色，請使用工具\n<ul>\n<li><a href=\"https://flatuicolors.com/\" target=\"_blank\" rel=\"external\">Flat UI colors</a> 是一種幫助選擇 Base Color 的好工具</li>\n<li>Color Wheel Tool 可以幫助混合多種顏色，可以使用 Adobe Color CC</li>\n</ul>\n</li>\n<li>使用顏色來吸引注意力</li>\n<li>絕不要在設計使用黑色</li>\n<li>明智地選擇顏色\n<ul>\n<li>紅色：力量、熱情、力氣、興奮，亮色系更有活力、暗色系更有力量且優雅</li>\n<li>橘色：可以吸引注意力但不會壓過紅色，它代表鼓舞和創意，橘色還跟友善、信心和勇氣有關聯</li>\n<li>黃色：是一種有活力且給予一種快樂和生動活潑的感覺，它還跟好奇心、智慧和明亮…等等有關聯</li>\n<li>綠色：是一種和諧、自然、生活和健康的顏色，它還時常跟錢有關聯，在設計裡面，綠色還可以有平衡和協調的效果</li>\n<li>藍色：代表耐心、和平、信任和穩定，它是特別有吸引力的顏色，尤其是對男生，它跟專業、信任和榮譽，這也是為什麼大型的 Socail Media 都使用藍色</li>\n<li>紫色：傳統上跟權力、高貴和富有有關連，在設計裡面，紫色可以給予一種智慧、高貴、奢華和神秘的感覺</li>\n<li>粉紅色：表達浪漫、主動、關心、和平和感情…等等</li>\n<li>咖啡色：代表放鬆和信心，它本身表示質樸、自然、持久、舒適和依賴感</li>\n</ul>\n</li>\n</ol>\n<h4>使用圖片</h4>\n<ol>\n<li>在圖片上直接放置文字\n<ul>\n<li>這種做法只有在圖片很黑且文字是白色的時候有用，否則在圖片和文字之間會沒有足夠的對比</li>\n</ul>\n</li>\n<li>覆蓋圖片 (Overlay the Image)\n<ul>\n<li>使用顏色漸層也可以達到驚人的效果</li>\n</ul>\n</li>\n<li>把文字放在 Box 裡面\n<ul>\n<li>白色加上一些透明度可以做到，也可以把 Box 弄成黑色或是其它顏色</li>\n<li>只要保持創意就可以了</li>\n</ul>\n</li>\n<li>模糊圖片 (Blur the Image)\n<ul>\n<li>文字要在所有螢幕解析度底下，保持在圖片模糊的部分</li>\n</ul>\n</li>\n<li>The Floor Fade\n<ul>\n<li>從上到下的漸層褪色的技術，幾乎沒有注意到，但是仍然可以改善閱讀性</li>\n<li>如果想要在圖片下方放置文字，這是一種很好的方法</li>\n</ul>\n</li>\n</ol>\n<h4>使用 Icon</h4>\n<ol>\n<li>如果正確使用的話，可以提供非常好的使用者體驗；反之，如果用不好的話，會造成使用者的困惑</li>\n<li>使用 Icon 來做條列式的功能/步驟</li>\n<li>對動作和連結使用 Icons\n<ul>\n<li>Icons 應該要可辨識</li>\n<li>Label Your Icons (就是在圖標後方放置文字)</li>\n</ul>\n</li>\n<li>Icons 不應該成為焦點</li>\n<li>盡可能使用 ICON FONTS</li>\n</ol>\n<h4>Spacing 和版面編排</h4>\n<ol>\n<li>White Space 就是創建乾淨和簡單的關鍵</li>\n<li>使用 White Space\n<ul>\n<li>在元素之間放置 White Space</li>\n<li>在元素群組之間放置 White Space</li>\n<li>在網站區塊之間放置 White Space</li>\n<li>但是不要太誇張</li>\n</ul>\n</li>\n<li>定義階層\n<ul>\n<li>White Space 描述了在網頁元素之間的隱形關係</li>\n<li>定義你想要讓觀眾先看到哪個部分</li>\n<li>建立一個對應內容訊息的 Flow，它導引使用者從一個元素到下一個元素</li>\n<li>使用 White Space 來建立 Flow</li>\n</ul>\n</li>\n</ol>\n<h4>使用者體驗介紹</h4>\n<ol>\n<li><strong>使用者體驗</strong>是一個產品的介紹，看起來如何和感覺</li>\n<li><strong>使用者體驗</strong>是和這一個產品的整體經驗，它包含使用者介面，但是也要有整個產品的全面觀</li>\n<li>引用賈伯斯，功能是最重要的</li>\n</ol>\n<blockquote>\n<p>It’s not just what it looks like and feels like. Design is how it works<br>\n- Steve Jobs</p>\n</blockquote>\n<ol start=\"4\">\n<li>可以把使用者體驗想成使用者目標和商業目標，使用者體驗設計師需要整理這些目標，當使用者達到他們的目的之後，商業也會受益，舉例來說，一個網站如果提供免費的電子書來交換使用者的 Email，使用者的目標就是學習電子書的內容，而你的目標就是取得使用者的 Email，所以你就可以在之後賣東西給他們，最後，你要確定你的設計可以做最好的工作來達到這兩個目標</li>\n</ol>\n<h4>獲取靈感：令人驚嘆的網站設計的秘密材料</h4>\n<ol>\n<li>使用其它網站當作靈感，來看其他領導設計師們怎麼<strong>做正確的事情</strong>\n<ul>\n<li>收集你喜歡的設計</li>\n<li>試圖了解關於它們的每一樣東西</li>\n<li>為什麼它們看起來很好？</li>\n<li>這些網站有什麼共通點？</li>\n<li>如何使用 HTML 和 CSS 來建立？</li>\n</ul>\n</li>\n<li>像藝術家一般的<strong>竊取</strong></li>\n</ol>\n<h3>殺手級的網站</h3>\n<h4>七步驟完成完整有功能的網站</h4>\n<ol>\n<li>定義你的專案\n<ul>\n<li>確認專案目標</li>\n<li>確認你的客群</li>\n<li>在心裡用你的目標和客群來設計</li>\n</ul>\n</li>\n<li>規劃全部\n<ul>\n<li>規劃內容：文字、圖片、影片、Icons…等等</li>\n<li>開始思考視覺分層結構 (Visail Hierarchy)</li>\n<li>定義導覽列 (Navigation)</li>\n<li>如果是比較大型的專案，要定義網站架構</li>\n</ul>\n</li>\n<li>在設計之前，畫出 Ideas 的草稿\n<ul>\n<li>獲得靈感和思考你的設計</li>\n<li>把 ideas 從腦中拿出來：在設計之前，畫出 Ideas 的草稿</li>\n<li>盡可能的畫出更多草稿，但是不要把花太多時間把它弄得太完美</li>\n<li>在沒有任何想要建立的 ideas 之前，不要開始設計</li>\n</ul>\n</li>\n<li>設計和開發你的網站\n<ul>\n<li>使用 Guidelines 和 Tips 設計你的網站</li>\n<li>使用 HTML 和 CSS：在瀏覽器設計</li>\n<li>使用草稿、內容和從 123 步驟做的計畫性的決定</li>\n<li>這一步驟是建立網站最大的一步驟，但是：所有的步驟都很重要</li>\n</ul>\n</li>\n<li>還沒完成 - 優化\n<ul>\n<li>優化表現：網站速度</li>\n<li>搜尋引擎優化 (SEO)</li>\n</ul>\n</li>\n<li>發佈你得傑作\n<ul>\n<li>所有你需要的就是開啟一個網站伺服器，它可以 host 你的網站且傳送到全世界</li>\n</ul>\n</li>\n<li>網站維護\n<ul>\n<li>發佈不是最後的事情</li>\n<li>觀察你的使用者表現和在必要的情況下修改你的網站</li>\n<li>定期更新你的內容：blog</li>\n</ul>\n</li>\n</ol>\n<h4>讓七步驟付諸行動</h4>\n<ol>\n<li>步驟一：\n<ul>\n<li><strong>專案目標</strong>：顯示 Omnifood 做的事情，如何運作和他們所營業的地點，然後讓人註冊申請訂閱項目</li>\n<li><strong>客群</strong>：沒有時間煮飯或不喜歡煮飯的忙碌人</li>\n</ul>\n</li>\n<li>步驟二：\n<ul>\n<li>單頁網頁內容包含 Omnifood 提供的資訊和簡單的 navigation (導覽列)</li>\n<li><strong>內容</strong>：Omnifood 提供的文字文件和套圖</li>\n<li><strong>Navigation (導覽列)</strong>：也是由 Omnifood 提供的文字文件</li>\n</ul>\n</li>\n<li>步驟三：畫草稿</li>\n<li>步驟四：\n<ul>\n<li>顏色：橘色</li>\n<li>字體：LATO，字體有半圓角，給這個字型溫暖的感覺，當使用強壯的結構會提供穩定和嚴謹，根據這個字體的設計師，這個字體是男性也是女性，嚴謹但友善，且有夏天的感覺</li>\n</ul>\n</li>\n</ol>\n<h4>第一個開發步驟</h4>\n<ol>\n<li>新增以下目錄結構</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- resources</div><div class=\"line\">    - css</div><div class=\"line\">        -img</div><div class=\"line\">    - js</div><div class=\"line\">    - img</div><div class=\"line\">    - data</div><div class=\"line\">- vendors</div><div class=\"line\">    - css</div><div class=\"line\">    - js</div><div class=\"line\">    - fonts</div><div class=\"line\">- index.html</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>下載 <a href=\"https://necolas.github.io/normalize.css/\" target=\"_blank\" rel=\"external\">Normalize.css</a>，放到 vendors/css</li>\n<li>修改 index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;resources/css/normalize.css&quot;&gt;</div><div class=\"line\">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;resources/css/style.css&quot;&gt;</div><div class=\"line\">        &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lato:100,300,300i,400&quot; rel=&quot;stylesheet&quot;&gt;</div><div class=\"line\">        &lt;title&gt;Omnifood&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;h1&gt;Omnifood&lt;/h1&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 resources/css/style.css，text-rendering 用最完美的方式讓字體載入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">html &#123;</div><div class=\"line\">    background-color: #fff;</div><div class=\"line\">    color: #555;</div><div class=\"line\">    font-family: &apos;Lato&apos;, &apos;Arial&apos;, sans-serif;</div><div class=\"line\">    font-weight: 300;</div><div class=\"line\">    font-size: 20px;</div><div class=\"line\">    text-rendering: optimizeLegibility;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>為響應式設計設置 fluid grid</h4>\n<ol>\n<li>三個響應式的方法\n<ul>\n<li>Fluid Grid：所有的版面編排元素都使用相對單位，像是百分比而不是像是像素這種絕對單位</li>\n<li>Flexible Images：也是使用相對單位</li>\n<li>Media Queries：允許我們在不同瀏覽器寬度選擇不同的 CSS 樣式規格</li>\n</ul>\n</li>\n<li>把 grid.css 放到 vendors/css</li>\n<li><a href=\"http://www.responsivegridsystem.com/\" target=\"_blank\" rel=\"external\">響應式設計官方網站</a></li>\n<li>在 index.html 引入 grid.css <code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;vendors/css/grid.css&quot;&gt;</code></li>\n<li>在 style.css 新增 row</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.row &#123;</div><div class=\"line\">    max-width: 1140px;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 index.html 最外層包上 row</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Omnifood&lt;/h1&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>建立 header</h4>\n<ol>\n<li>在 index.html 新增 header</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">    &lt;div class=&quot;hero-text-box&quot;&gt;</div><div class=\"line\">        &lt;h1&gt;Goodbye junk food. Hello super healthy meals.&lt;/h1&gt;</div><div class=\"line\">        &lt;a href=&quot;#&quot;&gt;I&apos;m hungry&lt;/a&gt;</div><div class=\"line\">        &lt;a href=&quot;#&quot;&gt;Show me more&lt;/a&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/header&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 style.css 加入以下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">header &#123;</div><div class=\"line\">    background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(img/hero.jpg) center;</div><div class=\"line\">    background-size: cover;</div><div class=\"line\">    height: 100vh;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hero-text-box &#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    width: 1140px;</div><div class=\"line\">    top: 50%;</div><div class=\"line\">    left: 50%;</div><div class=\"line\">    transform: translate(-50%, -50%);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1 &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><a href=\"http://www.0to255.com/\" target=\"_blank\" rel=\"external\">選擇相近顏色的工具</a></li>\n<li>在 style.css 的 h1 做修改</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1 &#123;</div><div class=\"line\">    margin-top: 0;</div><div class=\"line\">    margin-bottom: 20px;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    font-size: 240%;</div><div class=\"line\">    font-weight: 300;</div><div class=\"line\">    text-transform: uppercase;</div><div class=\"line\">    letter-spacing: 1px;</div><div class=\"line\">    word-spacing: 4px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 index.html 的 h1 加 <code>&lt;br&gt;</code> 斷行，且在 button 加上兩個 attribute</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;hero-text-box&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Goodbye junk food.&lt;br&gt;Hello super healthy meals.&lt;/h1&gt;</div><div class=\"line\">    &lt;a class=&quot;btn btn-full&quot; href=&quot;#&quot;&gt;I&apos;m hungry&lt;/a&gt;</div><div class=\"line\">    &lt;a class=&quot;btn btn-ghost&quot; href=&quot;#&quot;&gt;Show me more&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 style.css 新增 button 樣式，link 是連結，visited 是被點擊過的連結，hover 是滑鼠放到該元素上的動作，active 則是點擊該元素的動作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">.btn:link,</div><div class=\"line\">.btn:visited &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 10px 30px;</div><div class=\"line\">    font-weight: 300;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">    border-radius: 200px;</div><div class=\"line\">    transition: background-color 0.2s, border 0.2s, color 0.2s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-full:link,</div><div class=\"line\">.btn-full:visited &#123;</div><div class=\"line\">    background-color: #e67e22;</div><div class=\"line\">    border: 1px solid #e67e22;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    margin-right: 15px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-ghost:link,</div><div class=\"line\">.btn-ghost:visited &#123;</div><div class=\"line\">    border: 1px solid #e67e22;</div><div class=\"line\">    color: #e67e22;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn:hover,</div><div class=\"line\">.btn:active &#123;</div><div class=\"line\">    background-color: #cf6d17;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-full:hover,</div><div class=\"line\">.btn-full:active &#123;</div><div class=\"line\">    border: 1px solid #cf6d17;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-ghost:hover,</div><div class=\"line\">.btn-ghost:active &#123;</div><div class=\"line\">    border: 1px solid #cf6d17;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 index.html 的 body 下面新增 navigation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;nav&gt;</div><div class=\"line\">    &lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">        &lt;img src=&quot;resources/img/logo-white.png&quot; alt=&quot;Omnifood logo&quot; class=&quot;logo&quot;&gt;</div><div class=\"line\">        &lt;ul class=&quot;main-nav&quot;&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Food delivery&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Our cities&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Sign up&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 style.css 新增 navigation 樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">.logo &#123;</div><div class=\"line\">    height: 100px;</div><div class=\"line\">    width: auto;</div><div class=\"line\">    float: left;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav &#123;</div><div class=\"line\">    float: right;</div><div class=\"line\">    list-style: none;</div><div class=\"line\">    margin-top: 55px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav li &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    margin-left: 40px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav li a:link,</div><div class=\"line\">.main-nav li a:visited &#123;</div><div class=\"line\">    padding: 8px 0;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">    text-transform: uppercase;</div><div class=\"line\">    font-size: 90%;</div><div class=\"line\">    border-bottom: 2px solid transparent;</div><div class=\"line\">    transition: border-bottom 0.2s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav li a:hover,</div><div class=\"line\">.main-nav li a:active &#123;</div><div class=\"line\">    border-bottom: 2px solid #e67e22;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 style.css 加上一些註解，註解的樣式如下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* ----------------------------------------------------- */</div><div class=\"line\">/* BASIC SETUP */</div><div class=\"line\">/* ----------------------------------------------------- */</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/htmlcss/HtmlCssDay2.jpg\">\n<hr>\n<h3>網站設計基礎</h3>\n<h4>網站設計介紹</h4>\n<ol>\n<li><strong>設計師</strong>創造網頁的樣式和感覺，<strong>開發者</strong>則根據設計師的樣稿使用 HTML、CSS、JavaScript 建立網頁</li>\n</ol>\n<h4>字體</h4>\n<ol>\n<li>字體是一種藝術和排列技術，讓書面語言可閱讀且美觀</li>\n<li>對 body text 使用 15px - 20px 的字體大小</li>\n<li>對 Headlines 使用大的字體</li>\n<li>使用 120% - 150% 的行距 (Line Spacing)</li>\n<li>每行 45 到 90 字</li>\n<li>使用正確的字體\n<ul>\n<li>Sans-serif：中立、乾淨、簡單、現代化網站</li>\n<li>Serif：傳統目的、說故事、長篇幅的閱讀</li>\n</ul>\n</li>\n<li><a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"external\">Google Fonts</a></li>\n<li>在 Google Fonts 裡面很棒的 Sans-serif 字體：Open Sans、Lato、Raleway、Monsterrat、PT Sans</li>\n<li>在 Google Fonts 裡面很棒的 Serif 字體：Cardo、Merriweather、PT Serif</li>\n<li>如何<strong>選擇</strong>字體？\n<ul>\n<li>對網站選擇一個反映你想要得視覺和感覺的字體</li>\n<li>決定：Sans-serif 或 Serif？</li>\n<li>使用好字體</li>\n<li>只使用那一種 typeface</li>\n</ul>\n</li>\n</ol>\n<h4>像專家一樣使用顏色</h4>\n<ol>\n<li>只使用一種基底顏色 (Base Color)，Base Color 就是除了黑色、白色和灰色階的顏色</li>\n<li>如果想要使用更多顏色，請使用工具\n<ul>\n<li><a href=\"https://flatuicolors.com/\" target=\"_blank\" rel=\"external\">Flat UI colors</a> 是一種幫助選擇 Base Color 的好工具</li>\n<li>Color Wheel Tool 可以幫助混合多種顏色，可以使用 Adobe Color CC</li>\n</ul>\n</li>\n<li>使用顏色來吸引注意力</li>\n<li>絕不要在設計使用黑色</li>\n<li>明智地選擇顏色\n<ul>\n<li>紅色：力量、熱情、力氣、興奮，亮色系更有活力、暗色系更有力量且優雅</li>\n<li>橘色：可以吸引注意力但不會壓過紅色，它代表鼓舞和創意，橘色還跟友善、信心和勇氣有關聯</li>\n<li>黃色：是一種有活力且給予一種快樂和生動活潑的感覺，它還跟好奇心、智慧和明亮…等等有關聯</li>\n<li>綠色：是一種和諧、自然、生活和健康的顏色，它還時常跟錢有關聯，在設計裡面，綠色還可以有平衡和協調的效果</li>\n<li>藍色：代表耐心、和平、信任和穩定，它是特別有吸引力的顏色，尤其是對男生，它跟專業、信任和榮譽，這也是為什麼大型的 Socail Media 都使用藍色</li>\n<li>紫色：傳統上跟權力、高貴和富有有關連，在設計裡面，紫色可以給予一種智慧、高貴、奢華和神秘的感覺</li>\n<li>粉紅色：表達浪漫、主動、關心、和平和感情…等等</li>\n<li>咖啡色：代表放鬆和信心，它本身表示質樸、自然、持久、舒適和依賴感</li>\n</ul>\n</li>\n</ol>\n<h4>使用圖片</h4>\n<ol>\n<li>在圖片上直接放置文字\n<ul>\n<li>這種做法只有在圖片很黑且文字是白色的時候有用，否則在圖片和文字之間會沒有足夠的對比</li>\n</ul>\n</li>\n<li>覆蓋圖片 (Overlay the Image)\n<ul>\n<li>使用顏色漸層也可以達到驚人的效果</li>\n</ul>\n</li>\n<li>把文字放在 Box 裡面\n<ul>\n<li>白色加上一些透明度可以做到，也可以把 Box 弄成黑色或是其它顏色</li>\n<li>只要保持創意就可以了</li>\n</ul>\n</li>\n<li>模糊圖片 (Blur the Image)\n<ul>\n<li>文字要在所有螢幕解析度底下，保持在圖片模糊的部分</li>\n</ul>\n</li>\n<li>The Floor Fade\n<ul>\n<li>從上到下的漸層褪色的技術，幾乎沒有注意到，但是仍然可以改善閱讀性</li>\n<li>如果想要在圖片下方放置文字，這是一種很好的方法</li>\n</ul>\n</li>\n</ol>\n<h4>使用 Icon</h4>\n<ol>\n<li>如果正確使用的話，可以提供非常好的使用者體驗；反之，如果用不好的話，會造成使用者的困惑</li>\n<li>使用 Icon 來做條列式的功能/步驟</li>\n<li>對動作和連結使用 Icons\n<ul>\n<li>Icons 應該要可辨識</li>\n<li>Label Your Icons (就是在圖標後方放置文字)</li>\n</ul>\n</li>\n<li>Icons 不應該成為焦點</li>\n<li>盡可能使用 ICON FONTS</li>\n</ol>\n<h4>Spacing 和版面編排</h4>\n<ol>\n<li>White Space 就是創建乾淨和簡單的關鍵</li>\n<li>使用 White Space\n<ul>\n<li>在元素之間放置 White Space</li>\n<li>在元素群組之間放置 White Space</li>\n<li>在網站區塊之間放置 White Space</li>\n<li>但是不要太誇張</li>\n</ul>\n</li>\n<li>定義階層\n<ul>\n<li>White Space 描述了在網頁元素之間的隱形關係</li>\n<li>定義你想要讓觀眾先看到哪個部分</li>\n<li>建立一個對應內容訊息的 Flow，它導引使用者從一個元素到下一個元素</li>\n<li>使用 White Space 來建立 Flow</li>\n</ul>\n</li>\n</ol>\n<h4>使用者體驗介紹</h4>\n<ol>\n<li><strong>使用者體驗</strong>是一個產品的介紹，看起來如何和感覺</li>\n<li><strong>使用者體驗</strong>是和這一個產品的整體經驗，它包含使用者介面，但是也要有整個產品的全面觀</li>\n<li>引用賈伯斯，功能是最重要的</li>\n</ol>\n<blockquote>\n<p>It’s not just what it looks like and feels like. Design is how it works<br>\n- Steve Jobs</p>\n</blockquote>\n<ol start=\"4\">\n<li>可以把使用者體驗想成使用者目標和商業目標，使用者體驗設計師需要整理這些目標，當使用者達到他們的目的之後，商業也會受益，舉例來說，一個網站如果提供免費的電子書來交換使用者的 Email，使用者的目標就是學習電子書的內容，而你的目標就是取得使用者的 Email，所以你就可以在之後賣東西給他們，最後，你要確定你的設計可以做最好的工作來達到這兩個目標</li>\n</ol>\n<h4>獲取靈感：令人驚嘆的網站設計的秘密材料</h4>\n<ol>\n<li>使用其它網站當作靈感，來看其他領導設計師們怎麼<strong>做正確的事情</strong>\n<ul>\n<li>收集你喜歡的設計</li>\n<li>試圖了解關於它們的每一樣東西</li>\n<li>為什麼它們看起來很好？</li>\n<li>這些網站有什麼共通點？</li>\n<li>如何使用 HTML 和 CSS 來建立？</li>\n</ul>\n</li>\n<li>像藝術家一般的<strong>竊取</strong></li>\n</ol>\n<h3>殺手級的網站</h3>\n<h4>七步驟完成完整有功能的網站</h4>\n<ol>\n<li>定義你的專案\n<ul>\n<li>確認專案目標</li>\n<li>確認你的客群</li>\n<li>在心裡用你的目標和客群來設計</li>\n</ul>\n</li>\n<li>規劃全部\n<ul>\n<li>規劃內容：文字、圖片、影片、Icons…等等</li>\n<li>開始思考視覺分層結構 (Visail Hierarchy)</li>\n<li>定義導覽列 (Navigation)</li>\n<li>如果是比較大型的專案，要定義網站架構</li>\n</ul>\n</li>\n<li>在設計之前，畫出 Ideas 的草稿\n<ul>\n<li>獲得靈感和思考你的設計</li>\n<li>把 ideas 從腦中拿出來：在設計之前，畫出 Ideas 的草稿</li>\n<li>盡可能的畫出更多草稿，但是不要把花太多時間把它弄得太完美</li>\n<li>在沒有任何想要建立的 ideas 之前，不要開始設計</li>\n</ul>\n</li>\n<li>設計和開發你的網站\n<ul>\n<li>使用 Guidelines 和 Tips 設計你的網站</li>\n<li>使用 HTML 和 CSS：在瀏覽器設計</li>\n<li>使用草稿、內容和從 123 步驟做的計畫性的決定</li>\n<li>這一步驟是建立網站最大的一步驟，但是：所有的步驟都很重要</li>\n</ul>\n</li>\n<li>還沒完成 - 優化\n<ul>\n<li>優化表現：網站速度</li>\n<li>搜尋引擎優化 (SEO)</li>\n</ul>\n</li>\n<li>發佈你得傑作\n<ul>\n<li>所有你需要的就是開啟一個網站伺服器，它可以 host 你的網站且傳送到全世界</li>\n</ul>\n</li>\n<li>網站維護\n<ul>\n<li>發佈不是最後的事情</li>\n<li>觀察你的使用者表現和在必要的情況下修改你的網站</li>\n<li>定期更新你的內容：blog</li>\n</ul>\n</li>\n</ol>\n<h4>讓七步驟付諸行動</h4>\n<ol>\n<li>步驟一：\n<ul>\n<li><strong>專案目標</strong>：顯示 Omnifood 做的事情，如何運作和他們所營業的地點，然後讓人註冊申請訂閱項目</li>\n<li><strong>客群</strong>：沒有時間煮飯或不喜歡煮飯的忙碌人</li>\n</ul>\n</li>\n<li>步驟二：\n<ul>\n<li>單頁網頁內容包含 Omnifood 提供的資訊和簡單的 navigation (導覽列)</li>\n<li><strong>內容</strong>：Omnifood 提供的文字文件和套圖</li>\n<li><strong>Navigation (導覽列)</strong>：也是由 Omnifood 提供的文字文件</li>\n</ul>\n</li>\n<li>步驟三：畫草稿</li>\n<li>步驟四：\n<ul>\n<li>顏色：橘色</li>\n<li>字體：LATO，字體有半圓角，給這個字型溫暖的感覺，當使用強壯的結構會提供穩定和嚴謹，根據這個字體的設計師，這個字體是男性也是女性，嚴謹但友善，且有夏天的感覺</li>\n</ul>\n</li>\n</ol>\n<h4>第一個開發步驟</h4>\n<ol>\n<li>新增以下目錄結構</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- resources</div><div class=\"line\">    - css</div><div class=\"line\">        -img</div><div class=\"line\">    - js</div><div class=\"line\">    - img</div><div class=\"line\">    - data</div><div class=\"line\">- vendors</div><div class=\"line\">    - css</div><div class=\"line\">    - js</div><div class=\"line\">    - fonts</div><div class=\"line\">- index.html</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>下載 <a href=\"https://necolas.github.io/normalize.css/\" target=\"_blank\" rel=\"external\">Normalize.css</a>，放到 vendors/css</li>\n<li>修改 index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;resources/css/normalize.css&quot;&gt;</div><div class=\"line\">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;resources/css/style.css&quot;&gt;</div><div class=\"line\">        &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lato:100,300,300i,400&quot; rel=&quot;stylesheet&quot;&gt;</div><div class=\"line\">        &lt;title&gt;Omnifood&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;h1&gt;Omnifood&lt;/h1&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 resources/css/style.css，text-rendering 用最完美的方式讓字體載入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">html &#123;</div><div class=\"line\">    background-color: #fff;</div><div class=\"line\">    color: #555;</div><div class=\"line\">    font-family: &apos;Lato&apos;, &apos;Arial&apos;, sans-serif;</div><div class=\"line\">    font-weight: 300;</div><div class=\"line\">    font-size: 20px;</div><div class=\"line\">    text-rendering: optimizeLegibility;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>為響應式設計設置 fluid grid</h4>\n<ol>\n<li>三個響應式的方法\n<ul>\n<li>Fluid Grid：所有的版面編排元素都使用相對單位，像是百分比而不是像是像素這種絕對單位</li>\n<li>Flexible Images：也是使用相對單位</li>\n<li>Media Queries：允許我們在不同瀏覽器寬度選擇不同的 CSS 樣式規格</li>\n</ul>\n</li>\n<li>把 grid.css 放到 vendors/css</li>\n<li><a href=\"http://www.responsivegridsystem.com/\" target=\"_blank\" rel=\"external\">響應式設計官方網站</a></li>\n<li>在 index.html 引入 grid.css <code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;vendors/css/grid.css&quot;&gt;</code></li>\n<li>在 style.css 新增 row</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.row &#123;</div><div class=\"line\">    max-width: 1140px;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 index.html 最外層包上 row</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Omnifood&lt;/h1&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>建立 header</h4>\n<ol>\n<li>在 index.html 新增 header</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">    &lt;div class=&quot;hero-text-box&quot;&gt;</div><div class=\"line\">        &lt;h1&gt;Goodbye junk food. Hello super healthy meals.&lt;/h1&gt;</div><div class=\"line\">        &lt;a href=&quot;#&quot;&gt;I&apos;m hungry&lt;/a&gt;</div><div class=\"line\">        &lt;a href=&quot;#&quot;&gt;Show me more&lt;/a&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/header&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 style.css 加入以下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">header &#123;</div><div class=\"line\">    background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(img/hero.jpg) center;</div><div class=\"line\">    background-size: cover;</div><div class=\"line\">    height: 100vh;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hero-text-box &#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    width: 1140px;</div><div class=\"line\">    top: 50%;</div><div class=\"line\">    left: 50%;</div><div class=\"line\">    transform: translate(-50%, -50%);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1 &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><a href=\"http://www.0to255.com/\" target=\"_blank\" rel=\"external\">選擇相近顏色的工具</a></li>\n<li>在 style.css 的 h1 做修改</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1 &#123;</div><div class=\"line\">    margin-top: 0;</div><div class=\"line\">    margin-bottom: 20px;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    font-size: 240%;</div><div class=\"line\">    font-weight: 300;</div><div class=\"line\">    text-transform: uppercase;</div><div class=\"line\">    letter-spacing: 1px;</div><div class=\"line\">    word-spacing: 4px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 index.html 的 h1 加 <code>&lt;br&gt;</code> 斷行，且在 button 加上兩個 attribute</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;hero-text-box&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Goodbye junk food.&lt;br&gt;Hello super healthy meals.&lt;/h1&gt;</div><div class=\"line\">    &lt;a class=&quot;btn btn-full&quot; href=&quot;#&quot;&gt;I&apos;m hungry&lt;/a&gt;</div><div class=\"line\">    &lt;a class=&quot;btn btn-ghost&quot; href=&quot;#&quot;&gt;Show me more&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 style.css 新增 button 樣式，link 是連結，visited 是被點擊過的連結，hover 是滑鼠放到該元素上的動作，active 則是點擊該元素的動作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">.btn:link,</div><div class=\"line\">.btn:visited &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 10px 30px;</div><div class=\"line\">    font-weight: 300;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">    border-radius: 200px;</div><div class=\"line\">    transition: background-color 0.2s, border 0.2s, color 0.2s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-full:link,</div><div class=\"line\">.btn-full:visited &#123;</div><div class=\"line\">    background-color: #e67e22;</div><div class=\"line\">    border: 1px solid #e67e22;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    margin-right: 15px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-ghost:link,</div><div class=\"line\">.btn-ghost:visited &#123;</div><div class=\"line\">    border: 1px solid #e67e22;</div><div class=\"line\">    color: #e67e22;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn:hover,</div><div class=\"line\">.btn:active &#123;</div><div class=\"line\">    background-color: #cf6d17;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-full:hover,</div><div class=\"line\">.btn-full:active &#123;</div><div class=\"line\">    border: 1px solid #cf6d17;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-ghost:hover,</div><div class=\"line\">.btn-ghost:active &#123;</div><div class=\"line\">    border: 1px solid #cf6d17;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 index.html 的 body 下面新增 navigation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;nav&gt;</div><div class=\"line\">    &lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">        &lt;img src=&quot;resources/img/logo-white.png&quot; alt=&quot;Omnifood logo&quot; class=&quot;logo&quot;&gt;</div><div class=\"line\">        &lt;ul class=&quot;main-nav&quot;&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Food delivery&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Our cities&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Sign up&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 style.css 新增 navigation 樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">.logo &#123;</div><div class=\"line\">    height: 100px;</div><div class=\"line\">    width: auto;</div><div class=\"line\">    float: left;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav &#123;</div><div class=\"line\">    float: right;</div><div class=\"line\">    list-style: none;</div><div class=\"line\">    margin-top: 55px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav li &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    margin-left: 40px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav li a:link,</div><div class=\"line\">.main-nav li a:visited &#123;</div><div class=\"line\">    padding: 8px 0;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">    text-transform: uppercase;</div><div class=\"line\">    font-size: 90%;</div><div class=\"line\">    border-bottom: 2px solid transparent;</div><div class=\"line\">    transition: border-bottom 0.2s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.main-nav li a:hover,</div><div class=\"line\">.main-nav li a:active &#123;</div><div class=\"line\">    border-bottom: 2px solid #e67e22;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 style.css 加上一些註解，註解的樣式如下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* ----------------------------------------------------- */</div><div class=\"line\">/* BASIC SETUP */</div><div class=\"line\">/* ----------------------------------------------------- */</div></pre></td></tr></table></figure>"},{"title":"Hello! JS! - 從零開始的React Native開發","date":"2016-09-06T02:48:13.000Z","thumbnail":["/images/hellojs.jpg"],"_content":"> <strong>“If I have seen further it is by standing on the shoulders of giants.\"</strong>\n> <div style=\"float:right\"><strong>-Issac Newton</strong></div>\n> 「如果說我看得比別人遠，那是因為我站在巨人的肩上。」\n> <div style=\"float:right\">– 牛頓</div>\n\n<img src=\"/images/hellojs.jpg\" alt=\"HelloJS全端開發即戰力班\">\n\n---\n\n### 序\n&emsp;&emsp;2016年暑假，我在[創科資訊(Trunk Studio)](https://www.facebook.com/trunk.studio.tw)學習JS的部署與開發，在上課之前，我只學過html、CSS、jQuery，還有一些很偷懶的黑魔法，像是Bootstrap、WordPress theme。然而，很早之前就聽過JS的開發才是主流，苦於不知道如何開始，這次很開心能來上這樣的課程，除了認識很多很棒的人(未來有機會的合作夥伴們)，當然最重要的是能站在一堆超級講師們的肩膀上學習，我想用獲益良多來形容著實是不夠形容這種程式能力的提升，只可會意，不可言喻。\n以下記錄我學習到的東西：\n* Atom (本來用sublime的，除了Atom很漂亮之外，外掛的使用也更為簡單)\n* Git Command (本來使用Source Tree，後來發現原來Command Line這麼簡單，神秘黑魔法啊！)\n* Git Pages &amp; Heroku (免費的網站實作好地方)\n* Markdown語法 (必學的語法，簡單且實用)\n* Hexo (超級的棒網誌框架)\n* TDD (目前還不太會用，不過有略懂略懂)\n* Facebook API (串接Facebook的服務)\n* sails.js (使用過express的框架，實作上蠻類似的，具體上有什麼不同，還需要我多多練習)\n* Scss (有效率且大架構的CSS部署就要用上它囉！)\n* Babel (ES6、ES5的轉換超好用)\n* React (JavaScript的函式庫，100%的Client Rendering)\n* React Native (可以同時實作iOS和Android App，而且有很多模組可以使用，還有很多Documentation要閱讀)\n***\n\n### Hexo\n&emsp;&emsp;特別提到Hexo就是因為目前這個網站是用Hexo開發的，佈景主題採用[ppoffice的Hueman](https://github.com/ppoffice/hexo-theme-hueman)，從Header到Footer，我都嘗試去修改，反覆的trial之後，讓我更了解Hexo的整個架構，很有趣的是，一開始我還不知道要把檔案上傳到master分支，直接Deploy上去gh-pages，結果檔案不見了，還以為直接git clone下來可以使用了，才驚覺原來檔案不一樣，深深地學了一課。\n***\n\n### React Native\n&emsp;&emsp;React Native最吸引人不外乎就是可以同時開發iOS和Android App，也正是吸引我來上這個課程的原因，過程中，講師都有很耐心地講解，重要的觀念也會重複提醒，雖然目前還沒有實際作品可以上線，最大的問題在於自己能力仍然需要提升，但是這樣前導式的教學相信未來的開發有很大的幫助，過程中，我們也實作了一些簡單的功能，發掘React Native的無限可能，也讓我正式確定它就是我想學的JS框架。\n***\n\n### 後記\n1. 八週超級充實的課程，我都沒有錯過！太棒了！\n2. 很高興認識Kent、Max、一村、鄒大大、黑盒子...還有一堆叫不出名字但是卻很Nice的人（請原諒我的金魚腦XD）\n3. 最後的結訓證書！！！\n\n<img src=\"/images/HellojsCertification.jpg\" alt=\"HelloJS結訓證書\">\n","source":"_posts/Hello-JS-從零開始的React-Native開發.md","raw":"---\ntitle: Hello! JS! - 從零開始的React Native開發\ndate: 2016-09-06 10:48:13\ncategories: 生活記事\ntags:\nthumbnail:\n  - /images/hellojs.jpg\n---\n> <strong>“If I have seen further it is by standing on the shoulders of giants.\"</strong>\n> <div style=\"float:right\"><strong>-Issac Newton</strong></div>\n> 「如果說我看得比別人遠，那是因為我站在巨人的肩上。」\n> <div style=\"float:right\">– 牛頓</div>\n\n<img src=\"/images/hellojs.jpg\" alt=\"HelloJS全端開發即戰力班\">\n\n---\n\n### 序\n&emsp;&emsp;2016年暑假，我在[創科資訊(Trunk Studio)](https://www.facebook.com/trunk.studio.tw)學習JS的部署與開發，在上課之前，我只學過html、CSS、jQuery，還有一些很偷懶的黑魔法，像是Bootstrap、WordPress theme。然而，很早之前就聽過JS的開發才是主流，苦於不知道如何開始，這次很開心能來上這樣的課程，除了認識很多很棒的人(未來有機會的合作夥伴們)，當然最重要的是能站在一堆超級講師們的肩膀上學習，我想用獲益良多來形容著實是不夠形容這種程式能力的提升，只可會意，不可言喻。\n以下記錄我學習到的東西：\n* Atom (本來用sublime的，除了Atom很漂亮之外，外掛的使用也更為簡單)\n* Git Command (本來使用Source Tree，後來發現原來Command Line這麼簡單，神秘黑魔法啊！)\n* Git Pages &amp; Heroku (免費的網站實作好地方)\n* Markdown語法 (必學的語法，簡單且實用)\n* Hexo (超級的棒網誌框架)\n* TDD (目前還不太會用，不過有略懂略懂)\n* Facebook API (串接Facebook的服務)\n* sails.js (使用過express的框架，實作上蠻類似的，具體上有什麼不同，還需要我多多練習)\n* Scss (有效率且大架構的CSS部署就要用上它囉！)\n* Babel (ES6、ES5的轉換超好用)\n* React (JavaScript的函式庫，100%的Client Rendering)\n* React Native (可以同時實作iOS和Android App，而且有很多模組可以使用，還有很多Documentation要閱讀)\n***\n\n### Hexo\n&emsp;&emsp;特別提到Hexo就是因為目前這個網站是用Hexo開發的，佈景主題採用[ppoffice的Hueman](https://github.com/ppoffice/hexo-theme-hueman)，從Header到Footer，我都嘗試去修改，反覆的trial之後，讓我更了解Hexo的整個架構，很有趣的是，一開始我還不知道要把檔案上傳到master分支，直接Deploy上去gh-pages，結果檔案不見了，還以為直接git clone下來可以使用了，才驚覺原來檔案不一樣，深深地學了一課。\n***\n\n### React Native\n&emsp;&emsp;React Native最吸引人不外乎就是可以同時開發iOS和Android App，也正是吸引我來上這個課程的原因，過程中，講師都有很耐心地講解，重要的觀念也會重複提醒，雖然目前還沒有實際作品可以上線，最大的問題在於自己能力仍然需要提升，但是這樣前導式的教學相信未來的開發有很大的幫助，過程中，我們也實作了一些簡單的功能，發掘React Native的無限可能，也讓我正式確定它就是我想學的JS框架。\n***\n\n### 後記\n1. 八週超級充實的課程，我都沒有錯過！太棒了！\n2. 很高興認識Kent、Max、一村、鄒大大、黑盒子...還有一堆叫不出名字但是卻很Nice的人（請原諒我的金魚腦XD）\n3. 最後的結訓證書！！！\n\n<img src=\"/images/HellojsCertification.jpg\" alt=\"HelloJS結訓證書\">\n","slug":"Hello-JS-從零開始的React-Native開發","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvww600067ifa7allllp3","content":"<blockquote>\n<p><strong>“If I have seen further it is by standing on the shoulders of giants.&quot;</strong></p>\n<div style=\"float:right\"><strong>-Issac Newton</strong></div>\n「如果說我看得比別人遠，那是因為我站在巨人的肩上。」\n<div style=\"float:right\">– 牛頓</div>\n</blockquote>\n<img src=\"/images/hellojs.jpg\" alt=\"HelloJS全端開發即戰力班\">\n<hr>\n<h3>序</h3>\n<p>  2016年暑假，我在<a href=\"https://www.facebook.com/trunk.studio.tw\" target=\"_blank\" rel=\"external\">創科資訊(Trunk Studio)</a>學習JS的部署與開發，在上課之前，我只學過html、CSS、jQuery，還有一些很偷懶的黑魔法，像是Bootstrap、WordPress theme。然而，很早之前就聽過JS的開發才是主流，苦於不知道如何開始，這次很開心能來上這樣的課程，除了認識很多很棒的人(未來有機會的合作夥伴們)，當然最重要的是能站在一堆超級講師們的肩膀上學習，我想用獲益良多來形容著實是不夠形容這種程式能力的提升，只可會意，不可言喻。<br>\n以下記錄我學習到的東西：</p>\n<ul>\n<li>Atom (本來用sublime的，除了Atom很漂亮之外，外掛的使用也更為簡單)</li>\n<li>Git Command (本來使用Source Tree，後來發現原來Command Line這麼簡單，神秘黑魔法啊！)</li>\n<li>Git Pages &amp; Heroku (免費的網站實作好地方)</li>\n<li>Markdown語法 (必學的語法，簡單且實用)</li>\n<li>Hexo (超級的棒網誌框架)</li>\n<li>TDD (目前還不太會用，不過有略懂略懂)</li>\n<li>Facebook API (串接Facebook的服務)</li>\n<li>sails.js (使用過express的框架，實作上蠻類似的，具體上有什麼不同，還需要我多多練習)</li>\n<li>Scss (有效率且大架構的CSS部署就要用上它囉！)</li>\n<li>Babel (ES6、ES5的轉換超好用)</li>\n<li>React (JavaScript的函式庫，100%的Client Rendering)</li>\n<li>React Native (可以同時實作iOS和Android App，而且有很多模組可以使用，還有很多Documentation要閱讀)</li>\n</ul>\n<hr>\n<h3>Hexo</h3>\n<p>  特別提到Hexo就是因為目前這個網站是用Hexo開發的，佈景主題採用<a href=\"https://github.com/ppoffice/hexo-theme-hueman\" target=\"_blank\" rel=\"external\">ppoffice的Hueman</a>，從Header到Footer，我都嘗試去修改，反覆的trial之後，讓我更了解Hexo的整個架構，很有趣的是，一開始我還不知道要把檔案上傳到master分支，直接Deploy上去gh-pages，結果檔案不見了，還以為直接git clone下來可以使用了，才驚覺原來檔案不一樣，深深地學了一課。</p>\n<hr>\n<h3>React Native</h3>\n<p>  React Native最吸引人不外乎就是可以同時開發iOS和Android App，也正是吸引我來上這個課程的原因，過程中，講師都有很耐心地講解，重要的觀念也會重複提醒，雖然目前還沒有實際作品可以上線，最大的問題在於自己能力仍然需要提升，但是這樣前導式的教學相信未來的開發有很大的幫助，過程中，我們也實作了一些簡單的功能，發掘React Native的無限可能，也讓我正式確定它就是我想學的JS框架。</p>\n<hr>\n<h3>後記</h3>\n<ol>\n<li>八週超級充實的課程，我都沒有錯過！太棒了！</li>\n<li>很高興認識Kent、Max、一村、鄒大大、黑盒子…還有一堆叫不出名字但是卻很Nice的人（請原諒我的金魚腦XD）</li>\n<li>最後的結訓證書！！！</li>\n</ol>\n<img src=\"/images/HellojsCertification.jpg\" alt=\"HelloJS結訓證書\">\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>“If I have seen further it is by standing on the shoulders of giants.&quot;</strong></p>\n<div style=\"float:right\"><strong>-Issac Newton</strong></div>\n「如果說我看得比別人遠，那是因為我站在巨人的肩上。」\n<div style=\"float:right\">– 牛頓</div>\n</blockquote>\n<img src=\"/images/hellojs.jpg\" alt=\"HelloJS全端開發即戰力班\">\n<hr>\n<h3>序</h3>\n<p>  2016年暑假，我在<a href=\"https://www.facebook.com/trunk.studio.tw\" target=\"_blank\" rel=\"external\">創科資訊(Trunk Studio)</a>學習JS的部署與開發，在上課之前，我只學過html、CSS、jQuery，還有一些很偷懶的黑魔法，像是Bootstrap、WordPress theme。然而，很早之前就聽過JS的開發才是主流，苦於不知道如何開始，這次很開心能來上這樣的課程，除了認識很多很棒的人(未來有機會的合作夥伴們)，當然最重要的是能站在一堆超級講師們的肩膀上學習，我想用獲益良多來形容著實是不夠形容這種程式能力的提升，只可會意，不可言喻。<br>\n以下記錄我學習到的東西：</p>\n<ul>\n<li>Atom (本來用sublime的，除了Atom很漂亮之外，外掛的使用也更為簡單)</li>\n<li>Git Command (本來使用Source Tree，後來發現原來Command Line這麼簡單，神秘黑魔法啊！)</li>\n<li>Git Pages &amp; Heroku (免費的網站實作好地方)</li>\n<li>Markdown語法 (必學的語法，簡單且實用)</li>\n<li>Hexo (超級的棒網誌框架)</li>\n<li>TDD (目前還不太會用，不過有略懂略懂)</li>\n<li>Facebook API (串接Facebook的服務)</li>\n<li>sails.js (使用過express的框架，實作上蠻類似的，具體上有什麼不同，還需要我多多練習)</li>\n<li>Scss (有效率且大架構的CSS部署就要用上它囉！)</li>\n<li>Babel (ES6、ES5的轉換超好用)</li>\n<li>React (JavaScript的函式庫，100%的Client Rendering)</li>\n<li>React Native (可以同時實作iOS和Android App，而且有很多模組可以使用，還有很多Documentation要閱讀)</li>\n</ul>\n<hr>\n<h3>Hexo</h3>\n<p>  特別提到Hexo就是因為目前這個網站是用Hexo開發的，佈景主題採用<a href=\"https://github.com/ppoffice/hexo-theme-hueman\" target=\"_blank\" rel=\"external\">ppoffice的Hueman</a>，從Header到Footer，我都嘗試去修改，反覆的trial之後，讓我更了解Hexo的整個架構，很有趣的是，一開始我還不知道要把檔案上傳到master分支，直接Deploy上去gh-pages，結果檔案不見了，還以為直接git clone下來可以使用了，才驚覺原來檔案不一樣，深深地學了一課。</p>\n<hr>\n<h3>React Native</h3>\n<p>  React Native最吸引人不外乎就是可以同時開發iOS和Android App，也正是吸引我來上這個課程的原因，過程中，講師都有很耐心地講解，重要的觀念也會重複提醒，雖然目前還沒有實際作品可以上線，最大的問題在於自己能力仍然需要提升，但是這樣前導式的教學相信未來的開發有很大的幫助，過程中，我們也實作了一些簡單的功能，發掘React Native的無限可能，也讓我正式確定它就是我想學的JS框架。</p>\n<hr>\n<h3>後記</h3>\n<ol>\n<li>八週超級充實的課程，我都沒有錯過！太棒了！</li>\n<li>很高興認識Kent、Max、一村、鄒大大、黑盒子…還有一堆叫不出名字但是卻很Nice的人（請原諒我的金魚腦XD）</li>\n<li>最後的結訓證書！！！</li>\n</ol>\n<img src=\"/images/HellojsCertification.jpg\" alt=\"HelloJS結訓證書\">\n"},{"title":"HelloJS專案開發提議","date":"2016-08-30T12:55:48.000Z","thumbnail":["/images/hellojs.jpg"],"_content":"<img src=\"/images/hellojs.jpg\">\n(1) PokeHunt\n最近看到新聞，很多人玩寶可夢掉下懸崖、誤觸地雷區、甚至是在路上被車撞，我覺得我們是不是可以做一個偵測系統？大家有什麼方法可以提供一下？目前暫時只是概念性的解決問題，如果大家決定做這個就來討論一下細節。\n\n(2) 翻轉文學聊天室\n在我大學時期有做一個[翻轉文學的網站](http://flipliterature.tw)，我想說來做一點延伸，就是做聊天室、有全體的，還有同學個別對個別的，還有像是github issue一樣的討論區塊，這個我目前有些規劃，如果大家對即時條天有興趣我們可以做這個，這個的架構我就比較清楚要怎麼做，較好上手。\n\n(3) 中草藥不良反應通報系統\n這是目前我在中國醫藥大學想做的專案，現在有很多中草藥的通報系統，但是目前卻沒有手機板的，而且填寫複雜，架構基本上已經定案，因為他有固定格式。\n因為我們學校跟衛生福利部的關係非常好，如果這個App有開發完成，我會盡力爭取上線，未來如果順利上線，可以跟政府申請一筆經費，看能不能跟大家來做大的？\n","source":"_posts/HelloJS專案開發提議.md","raw":"---\ntitle: HelloJS專案開發提議\ndate: 2016-08-30 20:55:48\ncategories: 生活記事\ntags:\nthumbnail:\n  - /images/hellojs.jpg\n---\n<img src=\"/images/hellojs.jpg\">\n(1) PokeHunt\n最近看到新聞，很多人玩寶可夢掉下懸崖、誤觸地雷區、甚至是在路上被車撞，我覺得我們是不是可以做一個偵測系統？大家有什麼方法可以提供一下？目前暫時只是概念性的解決問題，如果大家決定做這個就來討論一下細節。\n\n(2) 翻轉文學聊天室\n在我大學時期有做一個[翻轉文學的網站](http://flipliterature.tw)，我想說來做一點延伸，就是做聊天室、有全體的，還有同學個別對個別的，還有像是github issue一樣的討論區塊，這個我目前有些規劃，如果大家對即時條天有興趣我們可以做這個，這個的架構我就比較清楚要怎麼做，較好上手。\n\n(3) 中草藥不良反應通報系統\n這是目前我在中國醫藥大學想做的專案，現在有很多中草藥的通報系統，但是目前卻沒有手機板的，而且填寫複雜，架構基本上已經定案，因為他有固定格式。\n因為我們學校跟衛生福利部的關係非常好，如果這個App有開發完成，我會盡力爭取上線，未來如果順利上線，可以跟政府申請一筆經費，看能不能跟大家來做大的？\n","slug":"HelloJS專案開發提議","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvww700077ifagn52d6wb","content":"<img src=\"/images/hellojs.jpg\">\n(1) PokeHunt\n最近看到新聞，很多人玩寶可夢掉下懸崖、誤觸地雷區、甚至是在路上被車撞，我覺得我們是不是可以做一個偵測系統？大家有什麼方法可以提供一下？目前暫時只是概念性的解決問題，如果大家決定做這個就來討論一下細節。\n<p>(2) 翻轉文學聊天室<br>\n在我大學時期有做一個<a href=\"http://flipliterature.tw\" target=\"_blank\" rel=\"external\">翻轉文學的網站</a>，我想說來做一點延伸，就是做聊天室、有全體的，還有同學個別對個別的，還有像是github issue一樣的討論區塊，這個我目前有些規劃，如果大家對即時條天有興趣我們可以做這個，這個的架構我就比較清楚要怎麼做，較好上手。</p>\n<p>(3) 中草藥不良反應通報系統<br>\n這是目前我在中國醫藥大學想做的專案，現在有很多中草藥的通報系統，但是目前卻沒有手機板的，而且填寫複雜，架構基本上已經定案，因為他有固定格式。<br>\n因為我們學校跟衛生福利部的關係非常好，如果這個App有開發完成，我會盡力爭取上線，未來如果順利上線，可以跟政府申請一筆經費，看能不能跟大家來做大的？</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/hellojs.jpg\">\n(1) PokeHunt\n最近看到新聞，很多人玩寶可夢掉下懸崖、誤觸地雷區、甚至是在路上被車撞，我覺得我們是不是可以做一個偵測系統？大家有什麼方法可以提供一下？目前暫時只是概念性的解決問題，如果大家決定做這個就來討論一下細節。\n<p>(2) 翻轉文學聊天室<br>\n在我大學時期有做一個<a href=\"http://flipliterature.tw\" target=\"_blank\" rel=\"external\">翻轉文學的網站</a>，我想說來做一點延伸，就是做聊天室、有全體的，還有同學個別對個別的，還有像是github issue一樣的討論區塊，這個我目前有些規劃，如果大家對即時條天有興趣我們可以做這個，這個的架構我就比較清楚要怎麼做，較好上手。</p>\n<p>(3) 中草藥不良反應通報系統<br>\n這是目前我在中國醫藥大學想做的專案，現在有很多中草藥的通報系統，但是目前卻沒有手機板的，而且填寫複雜，架構基本上已經定案，因為他有固定格式。<br>\n因為我們學校跟衛生福利部的關係非常好，如果這個App有開發完成，我會盡力爭取上線，未來如果順利上線，可以跟政府申請一筆經費，看能不能跟大家來做大的？</p>\n"},{"title":"In fact, life is a kind of strong","thumbnail":["/images/PottedPlant.jpg"],"date":"2016-09-17T05:45:46.000Z","_content":"<img src=\"/images/PottedPlant.jpg\">\n\n***\n&emsp;&emsp;Because of the rainy days, I didn’t go to visit the potted plants on the balcony for several days. Today, I went out to look and I feel surprised. One of them had been in critical conditions and leaves covered the ground. However, an unknown plant grow lush at it side and swayed proudly in the wind. One kind of sadness instantly came up from my mind. I blamed my carelessness, but also lamented the fragile of potted plants. I urgently watered the potted plants, but I don’t know why I couldn’t eradicate that unknown alien plant.\n&emsp;&emsp;What kind of conditions could make this life? Due to the lack of attention from me, my potted plants are gradually lost luster. However, it seized this gap and thrived itself. Yes, if I concerned in place, it might be removed when it was inconspicuous. After all, that is my potted plants world, this life didn’t belong to here will be eventually destroy the crafted beauty. But just a few days effort, it was no fear of lack of water and hold the opportunity to put itself look as tall as potted plants.\n&emsp;&emsp;I looked on the potted plants in the verge of death, but also looked at that unknown plant. I was suddenly enlightened in the sadness and moved emotion: In fact, life is a kind of strong.\n&emsp;&emsp;Isn’t it? Plant did it, life is also much better than this!\n&emsp;&emsp;Life can be born, because the mother and baby are all strong.\n&emsp;&emsp;Life comes from the strong. Life is inseparable from the strong.\n&emsp;&emsp;Every day we are dependent with the strong. I think, if you can choose, no one wants to have pain, willing to be sad, even to be toil. But from the birth, we are inevitably deal with some ailment or even illness. Everyone wants to expose under the sun when woke up every day, listen to songs and see the sights every day. However, we haven’t be willing to get up by parent’s call since we were in small age. Then do the things we need to do, reading or working. These all rely on the strong.\n&emsp;&emsp;There are no pure land on earth which can make us arbitrary. There is always a distance between dreams and realities. If the environment is unsatisfactory; if we are in sick and forsaken by lover; if life is too gloomy. Strong, it is the support of life.\n&emsp;&emsp;We must be use the strong to face the tedious every day and stimulate the neglected and injured soul. The strong is necessary in life. It is the pillar of the spirit and the faith to across obstacles.\n&emsp;&emsp;The unknown plant of the potted plants use the strong to touch me. I would leave it and have no regrets, because it let me understand thoroughly: in fact, life is a kind of strong.\n","source":"_posts/In-fact-life-is-a-kind-of-strong.md","raw":"---\ntitle: 'In fact, life is a kind of strong'\nthumbnail:\n  - /images/PottedPlant.jpg\ndate: 2016-09-17 13:45:46\ncategories: 英文寫作\ntags:\n---\n<img src=\"/images/PottedPlant.jpg\">\n\n***\n&emsp;&emsp;Because of the rainy days, I didn’t go to visit the potted plants on the balcony for several days. Today, I went out to look and I feel surprised. One of them had been in critical conditions and leaves covered the ground. However, an unknown plant grow lush at it side and swayed proudly in the wind. One kind of sadness instantly came up from my mind. I blamed my carelessness, but also lamented the fragile of potted plants. I urgently watered the potted plants, but I don’t know why I couldn’t eradicate that unknown alien plant.\n&emsp;&emsp;What kind of conditions could make this life? Due to the lack of attention from me, my potted plants are gradually lost luster. However, it seized this gap and thrived itself. Yes, if I concerned in place, it might be removed when it was inconspicuous. After all, that is my potted plants world, this life didn’t belong to here will be eventually destroy the crafted beauty. But just a few days effort, it was no fear of lack of water and hold the opportunity to put itself look as tall as potted plants.\n&emsp;&emsp;I looked on the potted plants in the verge of death, but also looked at that unknown plant. I was suddenly enlightened in the sadness and moved emotion: In fact, life is a kind of strong.\n&emsp;&emsp;Isn’t it? Plant did it, life is also much better than this!\n&emsp;&emsp;Life can be born, because the mother and baby are all strong.\n&emsp;&emsp;Life comes from the strong. Life is inseparable from the strong.\n&emsp;&emsp;Every day we are dependent with the strong. I think, if you can choose, no one wants to have pain, willing to be sad, even to be toil. But from the birth, we are inevitably deal with some ailment or even illness. Everyone wants to expose under the sun when woke up every day, listen to songs and see the sights every day. However, we haven’t be willing to get up by parent’s call since we were in small age. Then do the things we need to do, reading or working. These all rely on the strong.\n&emsp;&emsp;There are no pure land on earth which can make us arbitrary. There is always a distance between dreams and realities. If the environment is unsatisfactory; if we are in sick and forsaken by lover; if life is too gloomy. Strong, it is the support of life.\n&emsp;&emsp;We must be use the strong to face the tedious every day and stimulate the neglected and injured soul. The strong is necessary in life. It is the pillar of the spirit and the faith to across obstacles.\n&emsp;&emsp;The unknown plant of the potted plants use the strong to touch me. I would leave it and have no regrets, because it let me understand thoroughly: in fact, life is a kind of strong.\n","slug":"In-fact-life-is-a-kind-of-strong","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvww800097ifaavgsbhip","content":"<img src=\"/images/PottedPlant.jpg\">\n<hr>\n<p>  Because of the rainy days, I didn’t go to visit the potted plants on the balcony for several days. Today, I went out to look and I feel surprised. One of them had been in critical conditions and leaves covered the ground. However, an unknown plant grow lush at it side and swayed proudly in the wind. One kind of sadness instantly came up from my mind. I blamed my carelessness, but also lamented the fragile of potted plants. I urgently watered the potted plants, but I don’t know why I couldn’t eradicate that unknown alien plant.<br>\n  What kind of conditions could make this life? Due to the lack of attention from me, my potted plants are gradually lost luster. However, it seized this gap and thrived itself. Yes, if I concerned in place, it might be removed when it was inconspicuous. After all, that is my potted plants world, this life didn’t belong to here will be eventually destroy the crafted beauty. But just a few days effort, it was no fear of lack of water and hold the opportunity to put itself look as tall as potted plants.<br>\n  I looked on the potted plants in the verge of death, but also looked at that unknown plant. I was suddenly enlightened in the sadness and moved emotion: In fact, life is a kind of strong.<br>\n  Isn’t it? Plant did it, life is also much better than this!<br>\n  Life can be born, because the mother and baby are all strong.<br>\n  Life comes from the strong. Life is inseparable from the strong.<br>\n  Every day we are dependent with the strong. I think, if you can choose, no one wants to have pain, willing to be sad, even to be toil. But from the birth, we are inevitably deal with some ailment or even illness. Everyone wants to expose under the sun when woke up every day, listen to songs and see the sights every day. However, we haven’t be willing to get up by parent’s call since we were in small age. Then do the things we need to do, reading or working. These all rely on the strong.<br>\n  There are no pure land on earth which can make us arbitrary. There is always a distance between dreams and realities. If the environment is unsatisfactory; if we are in sick and forsaken by lover; if life is too gloomy. Strong, it is the support of life.<br>\n  We must be use the strong to face the tedious every day and stimulate the neglected and injured soul. The strong is necessary in life. It is the pillar of the spirit and the faith to across obstacles.<br>\n  The unknown plant of the potted plants use the strong to touch me. I would leave it and have no regrets, because it let me understand thoroughly: in fact, life is a kind of strong.</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/PottedPlant.jpg\">\n<hr>\n<p>  Because of the rainy days, I didn’t go to visit the potted plants on the balcony for several days. Today, I went out to look and I feel surprised. One of them had been in critical conditions and leaves covered the ground. However, an unknown plant grow lush at it side and swayed proudly in the wind. One kind of sadness instantly came up from my mind. I blamed my carelessness, but also lamented the fragile of potted plants. I urgently watered the potted plants, but I don’t know why I couldn’t eradicate that unknown alien plant.<br>\n  What kind of conditions could make this life? Due to the lack of attention from me, my potted plants are gradually lost luster. However, it seized this gap and thrived itself. Yes, if I concerned in place, it might be removed when it was inconspicuous. After all, that is my potted plants world, this life didn’t belong to here will be eventually destroy the crafted beauty. But just a few days effort, it was no fear of lack of water and hold the opportunity to put itself look as tall as potted plants.<br>\n  I looked on the potted plants in the verge of death, but also looked at that unknown plant. I was suddenly enlightened in the sadness and moved emotion: In fact, life is a kind of strong.<br>\n  Isn’t it? Plant did it, life is also much better than this!<br>\n  Life can be born, because the mother and baby are all strong.<br>\n  Life comes from the strong. Life is inseparable from the strong.<br>\n  Every day we are dependent with the strong. I think, if you can choose, no one wants to have pain, willing to be sad, even to be toil. But from the birth, we are inevitably deal with some ailment or even illness. Everyone wants to expose under the sun when woke up every day, listen to songs and see the sights every day. However, we haven’t be willing to get up by parent’s call since we were in small age. Then do the things we need to do, reading or working. These all rely on the strong.<br>\n  There are no pure land on earth which can make us arbitrary. There is always a distance between dreams and realities. If the environment is unsatisfactory; if we are in sick and forsaken by lover; if life is too gloomy. Strong, it is the support of life.<br>\n  We must be use the strong to face the tedious every day and stimulate the neglected and injured soul. The strong is necessary in life. It is the pillar of the spirit and the faith to across obstacles.<br>\n  The unknown plant of the potted plants use the strong to touch me. I would leave it and have no regrets, because it let me understand thoroughly: in fact, life is a kind of strong.</p>\n"},{"title":"JavaScript用AJAX的方式獲得時間","thumbnail":["/images/javascript.jpg"],"date":"2016-11-05T15:22:31.000Z","_content":"<img src=\"/images/javascript.jpg\">\n\n***\n1. 新增一個js的檔案，將以下程式碼複製貼上\n```\nvar xmlHttp;\nfunction srvTime(){\ntry {\n  //FF, Opera, Safari, Chrome\n  xmlHttp = new XMLHttpRequest();\n}\ncatch (err1) {\n  //IE\n  try {\n    xmlHttp = new ActiveXObject('Msxml2.XMLHTTP');\n  }\n  catch (err2) {\n    try {\n      xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n    catch (eerr3) {\n      //AJAX not supported, use CPU time.\n      alert(\"AJAX not supported\");\n    }\n  }\n}\nxmlHttp.open('HEAD',window.location.href.toString(),false);\nxmlHttp.setRequestHeader(\"Content-Type\", \"text/html\");\nxmlHttp.send('');\nreturn xmlHttp.getResponseHeader(\"Date\");\n}\n\nvar st = srvTime();\nvar date = new Date(st);\n```\n2. 新增時間\n```\nvar localTime = new Date();\n```\n","source":"_posts/JavaScript用AJAX的方式獲得時間.md","raw":"---\ntitle: JavaScript用AJAX的方式獲得時間\nthumbnail:\n  - /images/javascript.jpg\ndate: 2016-11-05 23:22:31\ncategories: 技術分享\ntags:\n---\n<img src=\"/images/javascript.jpg\">\n\n***\n1. 新增一個js的檔案，將以下程式碼複製貼上\n```\nvar xmlHttp;\nfunction srvTime(){\ntry {\n  //FF, Opera, Safari, Chrome\n  xmlHttp = new XMLHttpRequest();\n}\ncatch (err1) {\n  //IE\n  try {\n    xmlHttp = new ActiveXObject('Msxml2.XMLHTTP');\n  }\n  catch (err2) {\n    try {\n      xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n    catch (eerr3) {\n      //AJAX not supported, use CPU time.\n      alert(\"AJAX not supported\");\n    }\n  }\n}\nxmlHttp.open('HEAD',window.location.href.toString(),false);\nxmlHttp.setRequestHeader(\"Content-Type\", \"text/html\");\nxmlHttp.send('');\nreturn xmlHttp.getResponseHeader(\"Date\");\n}\n\nvar st = srvTime();\nvar date = new Date(st);\n```\n2. 新增時間\n```\nvar localTime = new Date();\n```\n","slug":"JavaScript用AJAX的方式獲得時間","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvww9000b7ifa48kffu51","content":"<img src=\"/images/javascript.jpg\">\n<hr>\n<ol>\n<li>新增一個js的檔案，將以下程式碼複製貼上</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xmlHttp;</div><div class=\"line\">function srvTime()&#123;</div><div class=\"line\">try &#123;</div><div class=\"line\">  //FF, Opera, Safari, Chrome</div><div class=\"line\">  xmlHttp = new XMLHttpRequest();</div><div class=\"line\">&#125;</div><div class=\"line\">catch (err1) &#123;</div><div class=\"line\">  //IE</div><div class=\"line\">  try &#123;</div><div class=\"line\">    xmlHttp = new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  catch (err2) &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">      xmlHttp = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    catch (eerr3) &#123;</div><div class=\"line\">      //AJAX not supported, use CPU time.</div><div class=\"line\">      alert(&quot;AJAX not supported&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">xmlHttp.open(&apos;HEAD&apos;,window.location.href.toString(),false);</div><div class=\"line\">xmlHttp.setRequestHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);</div><div class=\"line\">xmlHttp.send(&apos;&apos;);</div><div class=\"line\">return xmlHttp.getResponseHeader(&quot;Date&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var st = srvTime();</div><div class=\"line\">var date = new Date(st);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增時間</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var localTime = new Date();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/javascript.jpg\">\n<hr>\n<ol>\n<li>新增一個js的檔案，將以下程式碼複製貼上</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xmlHttp;</div><div class=\"line\">function srvTime()&#123;</div><div class=\"line\">try &#123;</div><div class=\"line\">  //FF, Opera, Safari, Chrome</div><div class=\"line\">  xmlHttp = new XMLHttpRequest();</div><div class=\"line\">&#125;</div><div class=\"line\">catch (err1) &#123;</div><div class=\"line\">  //IE</div><div class=\"line\">  try &#123;</div><div class=\"line\">    xmlHttp = new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  catch (err2) &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">      xmlHttp = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    catch (eerr3) &#123;</div><div class=\"line\">      //AJAX not supported, use CPU time.</div><div class=\"line\">      alert(&quot;AJAX not supported&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">xmlHttp.open(&apos;HEAD&apos;,window.location.href.toString(),false);</div><div class=\"line\">xmlHttp.setRequestHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);</div><div class=\"line\">xmlHttp.send(&apos;&apos;);</div><div class=\"line\">return xmlHttp.getResponseHeader(&quot;Date&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var st = srvTime();</div><div class=\"line\">var date = new Date(st);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增時間</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var localTime = new Date();</div></pre></td></tr></table></figure>\n"},{"title":"Kubernetes 快速學習自我挑戰 Day1","thumbnail":["/images/learning/kubernetes/kubernetesday1.png"],"date":"2017-08-10T07:02:09.000Z","_content":"<img src=\"/images/learning/kubernetes/kubernetesday1.png\">\n\n***\n### Kubernetes 觀念簡介\n#### 什麼是 Kubernetes\n1. Kubernetes 是一個開源的 **orchestration** system (編排系統)，提供給 Docker containers 做使用\n    - 它可以讓你在機器的 cluster 中規劃 **containers**\n    - 你可以在一台機器上面跑**很多 containers**\n    - 你可以運行 long running **services** (像是網頁應用程式)\n    - Kubernetes 會**控管**這些 container 的狀態\n        - 可以在特定 nodes 上啟動 container\n        - 當 container 被砍的時候，會再重啟一個 container\n        - 可以將 containers 從一個 node 移到另外一個 node\n2. 跟只有手動運行一些 docker containers 在一個 host 上不同的是，Kubernetes 是一個將會為你管控 container 的平台\n3. Kubernetes clusters 可以從一個 node 開始到數千個 nodes\n4. 其他有名的 docker orchestrators：\n    - Docker Swarm\n    - Mesos\n##### Kubernetes 的優點\n1. 你可以在任何地方運行 **Kubernetes**\n    - On-premise (自有資料中心)\n    - 公開 (Google cloud, AWS)\n    - 混合：公開和私有\n2. 高度模組化\n3. 開源\n4. 非常好的社群\n5. Google 支援\n#### Container 簡介\n1. Docker 是最受歡迎的 container 軟體\n    - Docker 的另外一個方案是 rkt，同樣也可以與 Kubernetes 一同運行\n2. Dokcer **Engine**\n    - The Docker runtime\n    - 讓 docker images 運行的軟體\n3. Docker Hub\n    - 用來儲存和取得 docker images 的線上服務\n    - 同樣也允許你線上**建立 docker** images\n##### Docker 的優點\n1. **獨立**：使用所有的 dependencies 來 ship binary\n    - 不需要運行在自己的機器上，不過不能用在產品化\n2. 在 Dev、QA和產品化環境更加**接近**，因為使用同樣的 binary\n3. Docker 讓開發團隊可以**更加快速**的 ship\n4. 你可以運行完全一樣的 docker image 在筆電、資料中心虛擬機和雲端主機供應商\n5. Docker 對作業系統級的分離使用 Linux Containers (一個核心特色) \n#### Kubernetes 設定\n1. Kubernetes 應該要可以在**任何地方**運行\n2. 但是，對於雲端供應商，像是 AWS 和 GCE，還是有很多**整合**要做\n    - 像是 **Volumes** 和 **外部 Load Balances** 只能運行在**被支援**的雲端供應商\n3. 會先使用 **minikube** 來快速讓本機單一機器用 Kubernetes cluster 運行起來\n4. 接下來會用 **kops** 在 AWS 上把一個 cluster 運行起來\n    - kops 是可以被用來運行高可用型的 **產品化 cluster**\n5. 使用自己的實驗室是有可能的(而且高度建議)\n  - 使用 AWS 免費方案 (給你 t2.micro's 750 小時/月)\n      - [https://aws.amazon.com](https://aws.amazon.com)\n  - 使用本地機器\n      - 使用 [minikube](https://github.com/kubernetes/minikube)\n  - 使用 Digital Ocean\n#### 使用 minikube 在本地端設定\n1. **Minikube** 是一個讓 Kubernetes 在本地端運行變簡單的工具\n2. Minikube 運行單一 node Kubernetes cluster 在 Linux VM 裡面\n3. 它的目標用戶是那些想要拿來測試或是用它來開發的人\n4. 它不能運行在產品化的 cluster，它是一個沒有高可用性的單一 node 機器\n5. 它可以運行在 **Windows**、**Linux** 和 **MacOS**\n6. 你會需要安裝 **虛擬化軟體** 才能運行 minikube\n    - Virtualbox 是免費的且可以[直接下載](https://www.virtualbox.org/)\n7. [下載 minikube](https://github.com/kubernetes/minikube)\n8. 啟動你的 cluster 只要(在 shell/terminal/powershell)輸入 `minikube start`\n#### 安裝 minikube\n1. [安裝最新版本的 minikube](https://github.com/kubernetes/minikube/releases)\n2. 安裝完成之後，啟動 minikube `minikube start`\n3. [安裝 kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n4. `chmod +x kubectl && sudo mv kubectl /usr/local/bin/`\n5. `kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080`\n6. `kubectl expose development hello-minikube --type=NodePort`\n7. `minikube service hello-minikube --url`\n8. `minikube stop`\n#### Kops 介紹\n1. 設置 Kubernetes 在 AWS 上面，可以使用叫做 **kops** 的工具\n    - kops 代表 **Kubernetes Operations**\n2. 這個工具允許你做產品化等級的 Kubernetes **安裝**、**升級**和**管理**\n3. 另外，還有一個叫做 kube-up sh 的**傳統**工具\n    - 這是一個用來建立 cluster 的簡易工具，但現在已經停止維護，它不能用來建立一個產品化準備的環境\n4. Kops 只能運行在 Mac/Linux\n5. 如果你使用 windows，你必須要先啟動虛擬機\n6. 可以使用 Vagrant 來快速建立一個 Linux box\n7. 下載 [Virtualbox](https://virtualbox.org) 和 [Vagrant](https://vagrantup.com)，兩個都需要\n8. 下載完之後，建立一個新的虛擬機，然後直接在 cmd/powershell 新增以下指令\n```\nmkdir ubuntu\ncd ubuntu\nvagrant init ubuntu/xenial64\nvagrant up\n```\n#### 準備 Kops 安裝\n1. 完成上面的步驟\n2. `vagrant ssh-config` 檢視 ssh 狀態\n3. `vagrant ssh` 即可登入虛擬機\n4. `puttygen putty` 在 windows 上可以使用 putty 來登入\n#### 為 Kops 安裝準備 AWS\n1. [Kops Github](https://github.com/kubernetes/kops)\n2. `brew update && brew install kops`\n3. `wget https://github.com/kubernetes/kops/releases/download/1.7.0/kops-linux-amd64`\n4. `chmod +x kops-linux-amd64` 新增執行權限\n5. `mv kops-linux-amd64 /usr/local/bin/kops` 移動 kops\n6. `apt-get update && apt-get install python-pip -y`\n7. `pip install awscli`\n    - MacOS 上的 bug 處理 `sudo -H pip install awscli --upgrade --ignore-installed six`\n8. 進入 AWS，選擇服務 IAM (Identity and Access Management)，選擇左列選單 Users，選擇 Add User，命名為 kops，下面選項 Programmatic access 要打勾，下個步驟選擇 AdministratorAccess，完成設定。\n9. `aws configure`\n10. `ls -ahl ~/.aws/` 檢視 aws credentials\n11. 設定完 IAM 之後，回到服務，選擇 S3，新增 bucket，名稱設定為 kops-state-b429b，最後一個是亂數，因為名稱要是唯一的，地區的選擇要去 [cloudping](http://www.cloudping.info/) 看哪個最快，選擇最快的就可以了，接下來直接按到完成。\n12. 接下來要設定 DNS，選擇服務 Route53，選擇 DNS management 的 Get Started Now，選擇 Create Hosted Zone，打入自己所擁有的網域，名稱設為 kubernetes，最後到自己的 Domain 主機商那邊設定 DNS。\n#### 使用 kops 進行 AWS Cluster 設定\n1. [安裝 kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n2. ` curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl` 下載最新版的 kubectl\n3. `chmod +x ./kubectl`\n4. `sudo mv ./kubectl /usr/local/bin/kubectl`\n5. `ssh-keygen -f .ssh/id_rsa` 新增 ssh-key\n6. `kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com`\n7. `kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d`\n8. `cat .kube/config`\n9. `kubectl get node`\n10. `kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080`\n11. `kubectl expose deployment hello-minikube --type=NodePort`\n12. `kubectl get service`，檢查 port\n13. 開啟 Services 的 VPC，點選 Security Groups，點選 master.<自己的 domain>，點選 Inbound Rules，新增 Custom TCP rule，將剛剛取得的 port 貼上、source 設定為 0.0.0.0/0。\n14. 進去 api.kubernetes.<自己的 domain>：剛剛的 port，就可以看到內容了\n15. 如果要刪除 instance `kops delete cluster --name kubernetes.appsoliloquy.com --state=s3://kops-state-b429d`","source":"_posts/Kubernetes-快速學習自我挑戰-Day1.md","raw":"---\ntitle: Kubernetes 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/kubernetes/kubernetesday1.png\ndate: 2017-08-10 15:02:09\ncategories: 學習歷程\ntags: Kubernetes\n---\n<img src=\"/images/learning/kubernetes/kubernetesday1.png\">\n\n***\n### Kubernetes 觀念簡介\n#### 什麼是 Kubernetes\n1. Kubernetes 是一個開源的 **orchestration** system (編排系統)，提供給 Docker containers 做使用\n    - 它可以讓你在機器的 cluster 中規劃 **containers**\n    - 你可以在一台機器上面跑**很多 containers**\n    - 你可以運行 long running **services** (像是網頁應用程式)\n    - Kubernetes 會**控管**這些 container 的狀態\n        - 可以在特定 nodes 上啟動 container\n        - 當 container 被砍的時候，會再重啟一個 container\n        - 可以將 containers 從一個 node 移到另外一個 node\n2. 跟只有手動運行一些 docker containers 在一個 host 上不同的是，Kubernetes 是一個將會為你管控 container 的平台\n3. Kubernetes clusters 可以從一個 node 開始到數千個 nodes\n4. 其他有名的 docker orchestrators：\n    - Docker Swarm\n    - Mesos\n##### Kubernetes 的優點\n1. 你可以在任何地方運行 **Kubernetes**\n    - On-premise (自有資料中心)\n    - 公開 (Google cloud, AWS)\n    - 混合：公開和私有\n2. 高度模組化\n3. 開源\n4. 非常好的社群\n5. Google 支援\n#### Container 簡介\n1. Docker 是最受歡迎的 container 軟體\n    - Docker 的另外一個方案是 rkt，同樣也可以與 Kubernetes 一同運行\n2. Dokcer **Engine**\n    - The Docker runtime\n    - 讓 docker images 運行的軟體\n3. Docker Hub\n    - 用來儲存和取得 docker images 的線上服務\n    - 同樣也允許你線上**建立 docker** images\n##### Docker 的優點\n1. **獨立**：使用所有的 dependencies 來 ship binary\n    - 不需要運行在自己的機器上，不過不能用在產品化\n2. 在 Dev、QA和產品化環境更加**接近**，因為使用同樣的 binary\n3. Docker 讓開發團隊可以**更加快速**的 ship\n4. 你可以運行完全一樣的 docker image 在筆電、資料中心虛擬機和雲端主機供應商\n5. Docker 對作業系統級的分離使用 Linux Containers (一個核心特色) \n#### Kubernetes 設定\n1. Kubernetes 應該要可以在**任何地方**運行\n2. 但是，對於雲端供應商，像是 AWS 和 GCE，還是有很多**整合**要做\n    - 像是 **Volumes** 和 **外部 Load Balances** 只能運行在**被支援**的雲端供應商\n3. 會先使用 **minikube** 來快速讓本機單一機器用 Kubernetes cluster 運行起來\n4. 接下來會用 **kops** 在 AWS 上把一個 cluster 運行起來\n    - kops 是可以被用來運行高可用型的 **產品化 cluster**\n5. 使用自己的實驗室是有可能的(而且高度建議)\n  - 使用 AWS 免費方案 (給你 t2.micro's 750 小時/月)\n      - [https://aws.amazon.com](https://aws.amazon.com)\n  - 使用本地機器\n      - 使用 [minikube](https://github.com/kubernetes/minikube)\n  - 使用 Digital Ocean\n#### 使用 minikube 在本地端設定\n1. **Minikube** 是一個讓 Kubernetes 在本地端運行變簡單的工具\n2. Minikube 運行單一 node Kubernetes cluster 在 Linux VM 裡面\n3. 它的目標用戶是那些想要拿來測試或是用它來開發的人\n4. 它不能運行在產品化的 cluster，它是一個沒有高可用性的單一 node 機器\n5. 它可以運行在 **Windows**、**Linux** 和 **MacOS**\n6. 你會需要安裝 **虛擬化軟體** 才能運行 minikube\n    - Virtualbox 是免費的且可以[直接下載](https://www.virtualbox.org/)\n7. [下載 minikube](https://github.com/kubernetes/minikube)\n8. 啟動你的 cluster 只要(在 shell/terminal/powershell)輸入 `minikube start`\n#### 安裝 minikube\n1. [安裝最新版本的 minikube](https://github.com/kubernetes/minikube/releases)\n2. 安裝完成之後，啟動 minikube `minikube start`\n3. [安裝 kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n4. `chmod +x kubectl && sudo mv kubectl /usr/local/bin/`\n5. `kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080`\n6. `kubectl expose development hello-minikube --type=NodePort`\n7. `minikube service hello-minikube --url`\n8. `minikube stop`\n#### Kops 介紹\n1. 設置 Kubernetes 在 AWS 上面，可以使用叫做 **kops** 的工具\n    - kops 代表 **Kubernetes Operations**\n2. 這個工具允許你做產品化等級的 Kubernetes **安裝**、**升級**和**管理**\n3. 另外，還有一個叫做 kube-up sh 的**傳統**工具\n    - 這是一個用來建立 cluster 的簡易工具，但現在已經停止維護，它不能用來建立一個產品化準備的環境\n4. Kops 只能運行在 Mac/Linux\n5. 如果你使用 windows，你必須要先啟動虛擬機\n6. 可以使用 Vagrant 來快速建立一個 Linux box\n7. 下載 [Virtualbox](https://virtualbox.org) 和 [Vagrant](https://vagrantup.com)，兩個都需要\n8. 下載完之後，建立一個新的虛擬機，然後直接在 cmd/powershell 新增以下指令\n```\nmkdir ubuntu\ncd ubuntu\nvagrant init ubuntu/xenial64\nvagrant up\n```\n#### 準備 Kops 安裝\n1. 完成上面的步驟\n2. `vagrant ssh-config` 檢視 ssh 狀態\n3. `vagrant ssh` 即可登入虛擬機\n4. `puttygen putty` 在 windows 上可以使用 putty 來登入\n#### 為 Kops 安裝準備 AWS\n1. [Kops Github](https://github.com/kubernetes/kops)\n2. `brew update && brew install kops`\n3. `wget https://github.com/kubernetes/kops/releases/download/1.7.0/kops-linux-amd64`\n4. `chmod +x kops-linux-amd64` 新增執行權限\n5. `mv kops-linux-amd64 /usr/local/bin/kops` 移動 kops\n6. `apt-get update && apt-get install python-pip -y`\n7. `pip install awscli`\n    - MacOS 上的 bug 處理 `sudo -H pip install awscli --upgrade --ignore-installed six`\n8. 進入 AWS，選擇服務 IAM (Identity and Access Management)，選擇左列選單 Users，選擇 Add User，命名為 kops，下面選項 Programmatic access 要打勾，下個步驟選擇 AdministratorAccess，完成設定。\n9. `aws configure`\n10. `ls -ahl ~/.aws/` 檢視 aws credentials\n11. 設定完 IAM 之後，回到服務，選擇 S3，新增 bucket，名稱設定為 kops-state-b429b，最後一個是亂數，因為名稱要是唯一的，地區的選擇要去 [cloudping](http://www.cloudping.info/) 看哪個最快，選擇最快的就可以了，接下來直接按到完成。\n12. 接下來要設定 DNS，選擇服務 Route53，選擇 DNS management 的 Get Started Now，選擇 Create Hosted Zone，打入自己所擁有的網域，名稱設為 kubernetes，最後到自己的 Domain 主機商那邊設定 DNS。\n#### 使用 kops 進行 AWS Cluster 設定\n1. [安裝 kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n2. ` curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl` 下載最新版的 kubectl\n3. `chmod +x ./kubectl`\n4. `sudo mv ./kubectl /usr/local/bin/kubectl`\n5. `ssh-keygen -f .ssh/id_rsa` 新增 ssh-key\n6. `kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com`\n7. `kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d`\n8. `cat .kube/config`\n9. `kubectl get node`\n10. `kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080`\n11. `kubectl expose deployment hello-minikube --type=NodePort`\n12. `kubectl get service`，檢查 port\n13. 開啟 Services 的 VPC，點選 Security Groups，點選 master.<自己的 domain>，點選 Inbound Rules，新增 Custom TCP rule，將剛剛取得的 port 貼上、source 設定為 0.0.0.0/0。\n14. 進去 api.kubernetes.<自己的 domain>：剛剛的 port，就可以看到內容了\n15. 如果要刪除 instance `kops delete cluster --name kubernetes.appsoliloquy.com --state=s3://kops-state-b429d`","slug":"Kubernetes-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwb000e7ifa08ins291","content":"<img src=\"/images/learning/kubernetes/kubernetesday1.png\">\n<hr>\n<h3>Kubernetes 觀念簡介</h3>\n<h4>什麼是 Kubernetes</h4>\n<ol>\n<li>Kubernetes 是一個開源的 <strong>orchestration</strong> system (編排系統)，提供給 Docker containers 做使用\n<ul>\n<li>它可以讓你在機器的 cluster 中規劃 <strong>containers</strong></li>\n<li>你可以在一台機器上面跑<strong>很多 containers</strong></li>\n<li>你可以運行 long running <strong>services</strong> (像是網頁應用程式)</li>\n<li>Kubernetes 會<strong>控管</strong>這些 container 的狀態\n<ul>\n<li>可以在特定 nodes 上啟動 container</li>\n<li>當 container 被砍的時候，會再重啟一個 container</li>\n<li>可以將 containers 從一個 node 移到另外一個 node</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>跟只有手動運行一些 docker containers 在一個 host 上不同的是，Kubernetes 是一個將會為你管控 container 的平台</li>\n<li>Kubernetes clusters 可以從一個 node 開始到數千個 nodes</li>\n<li>其他有名的 docker orchestrators：\n<ul>\n<li>Docker Swarm</li>\n<li>Mesos</li>\n</ul>\n</li>\n</ol>\n<h5>Kubernetes 的優點</h5>\n<ol>\n<li>你可以在任何地方運行 <strong>Kubernetes</strong>\n<ul>\n<li>On-premise (自有資料中心)</li>\n<li>公開 (Google cloud, AWS)</li>\n<li>混合：公開和私有</li>\n</ul>\n</li>\n<li>高度模組化</li>\n<li>開源</li>\n<li>非常好的社群</li>\n<li>Google 支援</li>\n</ol>\n<h4>Container 簡介</h4>\n<ol>\n<li>Docker 是最受歡迎的 container 軟體\n<ul>\n<li>Docker 的另外一個方案是 rkt，同樣也可以與 Kubernetes 一同運行</li>\n</ul>\n</li>\n<li>Dokcer <strong>Engine</strong>\n<ul>\n<li>The Docker runtime</li>\n<li>讓 docker images 運行的軟體</li>\n</ul>\n</li>\n<li>Docker Hub\n<ul>\n<li>用來儲存和取得 docker images 的線上服務</li>\n<li>同樣也允許你線上<strong>建立 docker</strong> images</li>\n</ul>\n</li>\n</ol>\n<h5>Docker 的優點</h5>\n<ol>\n<li><strong>獨立</strong>：使用所有的 dependencies 來 ship binary\n<ul>\n<li>不需要運行在自己的機器上，不過不能用在產品化</li>\n</ul>\n</li>\n<li>在 Dev、QA和產品化環境更加<strong>接近</strong>，因為使用同樣的 binary</li>\n<li>Docker 讓開發團隊可以<strong>更加快速</strong>的 ship</li>\n<li>你可以運行完全一樣的 docker image 在筆電、資料中心虛擬機和雲端主機供應商</li>\n<li>Docker 對作業系統級的分離使用 Linux Containers (一個核心特色)</li>\n</ol>\n<h4>Kubernetes 設定</h4>\n<ol>\n<li>Kubernetes 應該要可以在<strong>任何地方</strong>運行</li>\n<li>但是，對於雲端供應商，像是 AWS 和 GCE，還是有很多<strong>整合</strong>要做\n<ul>\n<li>像是 <strong>Volumes</strong> 和 <strong>外部 Load Balances</strong> 只能運行在<strong>被支援</strong>的雲端供應商</li>\n</ul>\n</li>\n<li>會先使用 <strong>minikube</strong> 來快速讓本機單一機器用 Kubernetes cluster 運行起來</li>\n<li>接下來會用 <strong>kops</strong> 在 AWS 上把一個 cluster 運行起來\n<ul>\n<li>kops 是可以被用來運行高可用型的 <strong>產品化 cluster</strong></li>\n</ul>\n</li>\n<li>使用自己的實驗室是有可能的(而且高度建議)</li>\n</ol>\n<ul>\n<li>使用 AWS 免費方案 (給你 t2.micro’s 750 小時/月)\n<ul>\n<li><a href=\"https://aws.amazon.com\" target=\"_blank\" rel=\"external\">https://aws.amazon.com</a></li>\n</ul>\n</li>\n<li>使用本地機器\n<ul>\n<li>使用 <a href=\"https://github.com/kubernetes/minikube\" target=\"_blank\" rel=\"external\">minikube</a></li>\n</ul>\n</li>\n<li>使用 Digital Ocean</li>\n</ul>\n<h4>使用 minikube 在本地端設定</h4>\n<ol>\n<li><strong>Minikube</strong> 是一個讓 Kubernetes 在本地端運行變簡單的工具</li>\n<li>Minikube 運行單一 node Kubernetes cluster 在 Linux VM 裡面</li>\n<li>它的目標用戶是那些想要拿來測試或是用它來開發的人</li>\n<li>它不能運行在產品化的 cluster，它是一個沒有高可用性的單一 node 機器</li>\n<li>它可以運行在 <strong>Windows</strong>、<strong>Linux</strong> 和 <strong>MacOS</strong></li>\n<li>你會需要安裝 <strong>虛擬化軟體</strong> 才能運行 minikube\n<ul>\n<li>Virtualbox 是免費的且可以<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">直接下載</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kubernetes/minikube\" target=\"_blank\" rel=\"external\">下載 minikube</a></li>\n<li>啟動你的 cluster 只要(在 shell/terminal/powershell)輸入 <code>minikube start</code></li>\n</ol>\n<h4>安裝 minikube</h4>\n<ol>\n<li><a href=\"https://github.com/kubernetes/minikube/releases\" target=\"_blank\" rel=\"external\">安裝最新版本的 minikube</a></li>\n<li>安裝完成之後，啟動 minikube <code>minikube start</code></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\" target=\"_blank\" rel=\"external\">安裝 kubectl</a></li>\n<li><code>chmod +x kubectl &amp;&amp; sudo mv kubectl /usr/local/bin/</code></li>\n<li><code>kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080</code></li>\n<li><code>kubectl expose development hello-minikube --type=NodePort</code></li>\n<li><code>minikube service hello-minikube --url</code></li>\n<li><code>minikube stop</code></li>\n</ol>\n<h4>Kops 介紹</h4>\n<ol>\n<li>設置 Kubernetes 在 AWS 上面，可以使用叫做 <strong>kops</strong> 的工具\n<ul>\n<li>kops 代表 <strong>Kubernetes Operations</strong></li>\n</ul>\n</li>\n<li>這個工具允許你做產品化等級的 Kubernetes <strong>安裝</strong>、<strong>升級</strong>和<strong>管理</strong></li>\n<li>另外，還有一個叫做 kube-up sh 的<strong>傳統</strong>工具\n<ul>\n<li>這是一個用來建立 cluster 的簡易工具，但現在已經停止維護，它不能用來建立一個產品化準備的環境</li>\n</ul>\n</li>\n<li>Kops 只能運行在 Mac/Linux</li>\n<li>如果你使用 windows，你必須要先啟動虛擬機</li>\n<li>可以使用 Vagrant 來快速建立一個 Linux box</li>\n<li>下載 <a href=\"https://virtualbox.org\" target=\"_blank\" rel=\"external\">Virtualbox</a> 和 <a href=\"https://vagrantup.com\" target=\"_blank\" rel=\"external\">Vagrant</a>，兩個都需要</li>\n<li>下載完之後，建立一個新的虛擬機，然後直接在 cmd/powershell 新增以下指令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ubuntu</div><div class=\"line\">cd ubuntu</div><div class=\"line\">vagrant init ubuntu/xenial64</div><div class=\"line\">vagrant up</div></pre></td></tr></table></figure>\n<h4>準備 Kops 安裝</h4>\n<ol>\n<li>完成上面的步驟</li>\n<li><code>vagrant ssh-config</code> 檢視 ssh 狀態</li>\n<li><code>vagrant ssh</code> 即可登入虛擬機</li>\n<li><code>puttygen putty</code> 在 windows 上可以使用 putty 來登入</li>\n</ol>\n<h4>為 Kops 安裝準備 AWS</h4>\n<ol>\n<li><a href=\"https://github.com/kubernetes/kops\" target=\"_blank\" rel=\"external\">Kops Github</a></li>\n<li><code>brew update &amp;&amp; brew install kops</code></li>\n<li><code>wget https://github.com/kubernetes/kops/releases/download/1.7.0/kops-linux-amd64</code></li>\n<li><code>chmod +x kops-linux-amd64</code> 新增執行權限</li>\n<li><code>mv kops-linux-amd64 /usr/local/bin/kops</code> 移動 kops</li>\n<li><code>apt-get update &amp;&amp; apt-get install python-pip -y</code></li>\n<li><code>pip install awscli</code>\n<ul>\n<li>MacOS 上的 bug 處理 <code>sudo -H pip install awscli --upgrade --ignore-installed six</code></li>\n</ul>\n</li>\n<li>進入 AWS，選擇服務 IAM (Identity and Access Management)，選擇左列選單 Users，選擇 Add User，命名為 kops，下面選項 Programmatic access 要打勾，下個步驟選擇 AdministratorAccess，完成設定。</li>\n<li><code>aws configure</code></li>\n<li><code>ls -ahl ~/.aws/</code> 檢視 aws credentials</li>\n<li>設定完 IAM 之後，回到服務，選擇 S3，新增 bucket，名稱設定為 kops-state-b429b，最後一個是亂數，因為名稱要是唯一的，地區的選擇要去 <a href=\"http://www.cloudping.info/\" target=\"_blank\" rel=\"external\">cloudping</a> 看哪個最快，選擇最快的就可以了，接下來直接按到完成。</li>\n<li>接下來要設定 DNS，選擇服務 Route53，選擇 DNS management 的 Get Started Now，選擇 Create Hosted Zone，打入自己所擁有的網域，名稱設為 kubernetes，最後到自己的 Domain 主機商那邊設定 DNS。</li>\n</ol>\n<h4>使用 kops 進行 AWS Cluster 設定</h4>\n<ol>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\" target=\"_blank\" rel=\"external\">安裝 kubectl</a></li>\n<li><code>curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl</code> 下載最新版的 kubectl</li>\n<li><code>chmod +x ./kubectl</code></li>\n<li><code>sudo mv ./kubectl /usr/local/bin/kubectl</code></li>\n<li><code>ssh-keygen -f .ssh/id_rsa</code> 新增 ssh-key</li>\n<li><code>kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com</code></li>\n<li><code>kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d</code></li>\n<li><code>cat .kube/config</code></li>\n<li><code>kubectl get node</code></li>\n<li><code>kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080</code></li>\n<li><code>kubectl expose deployment hello-minikube --type=NodePort</code></li>\n<li><code>kubectl get service</code>，檢查 port</li>\n<li>開啟 Services 的 VPC，點選 Security Groups，點選 master.&lt;自己的 domain&gt;，點選 Inbound Rules，新增 Custom TCP rule，將剛剛取得的 port 貼上、source 設定為 0.0.0.0/0。</li>\n<li>進去 api.kubernetes.&lt;自己的 domain&gt;：剛剛的 port，就可以看到內容了</li>\n<li>如果要刪除 instance <code>kops delete cluster --name kubernetes.appsoliloquy.com --state=s3://kops-state-b429d</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/kubernetes/kubernetesday1.png\">\n<hr>\n<h3>Kubernetes 觀念簡介</h3>\n<h4>什麼是 Kubernetes</h4>\n<ol>\n<li>Kubernetes 是一個開源的 <strong>orchestration</strong> system (編排系統)，提供給 Docker containers 做使用\n<ul>\n<li>它可以讓你在機器的 cluster 中規劃 <strong>containers</strong></li>\n<li>你可以在一台機器上面跑<strong>很多 containers</strong></li>\n<li>你可以運行 long running <strong>services</strong> (像是網頁應用程式)</li>\n<li>Kubernetes 會<strong>控管</strong>這些 container 的狀態\n<ul>\n<li>可以在特定 nodes 上啟動 container</li>\n<li>當 container 被砍的時候，會再重啟一個 container</li>\n<li>可以將 containers 從一個 node 移到另外一個 node</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>跟只有手動運行一些 docker containers 在一個 host 上不同的是，Kubernetes 是一個將會為你管控 container 的平台</li>\n<li>Kubernetes clusters 可以從一個 node 開始到數千個 nodes</li>\n<li>其他有名的 docker orchestrators：\n<ul>\n<li>Docker Swarm</li>\n<li>Mesos</li>\n</ul>\n</li>\n</ol>\n<h5>Kubernetes 的優點</h5>\n<ol>\n<li>你可以在任何地方運行 <strong>Kubernetes</strong>\n<ul>\n<li>On-premise (自有資料中心)</li>\n<li>公開 (Google cloud, AWS)</li>\n<li>混合：公開和私有</li>\n</ul>\n</li>\n<li>高度模組化</li>\n<li>開源</li>\n<li>非常好的社群</li>\n<li>Google 支援</li>\n</ol>\n<h4>Container 簡介</h4>\n<ol>\n<li>Docker 是最受歡迎的 container 軟體\n<ul>\n<li>Docker 的另外一個方案是 rkt，同樣也可以與 Kubernetes 一同運行</li>\n</ul>\n</li>\n<li>Dokcer <strong>Engine</strong>\n<ul>\n<li>The Docker runtime</li>\n<li>讓 docker images 運行的軟體</li>\n</ul>\n</li>\n<li>Docker Hub\n<ul>\n<li>用來儲存和取得 docker images 的線上服務</li>\n<li>同樣也允許你線上<strong>建立 docker</strong> images</li>\n</ul>\n</li>\n</ol>\n<h5>Docker 的優點</h5>\n<ol>\n<li><strong>獨立</strong>：使用所有的 dependencies 來 ship binary\n<ul>\n<li>不需要運行在自己的機器上，不過不能用在產品化</li>\n</ul>\n</li>\n<li>在 Dev、QA和產品化環境更加<strong>接近</strong>，因為使用同樣的 binary</li>\n<li>Docker 讓開發團隊可以<strong>更加快速</strong>的 ship</li>\n<li>你可以運行完全一樣的 docker image 在筆電、資料中心虛擬機和雲端主機供應商</li>\n<li>Docker 對作業系統級的分離使用 Linux Containers (一個核心特色)</li>\n</ol>\n<h4>Kubernetes 設定</h4>\n<ol>\n<li>Kubernetes 應該要可以在<strong>任何地方</strong>運行</li>\n<li>但是，對於雲端供應商，像是 AWS 和 GCE，還是有很多<strong>整合</strong>要做\n<ul>\n<li>像是 <strong>Volumes</strong> 和 <strong>外部 Load Balances</strong> 只能運行在<strong>被支援</strong>的雲端供應商</li>\n</ul>\n</li>\n<li>會先使用 <strong>minikube</strong> 來快速讓本機單一機器用 Kubernetes cluster 運行起來</li>\n<li>接下來會用 <strong>kops</strong> 在 AWS 上把一個 cluster 運行起來\n<ul>\n<li>kops 是可以被用來運行高可用型的 <strong>產品化 cluster</strong></li>\n</ul>\n</li>\n<li>使用自己的實驗室是有可能的(而且高度建議)</li>\n</ol>\n<ul>\n<li>使用 AWS 免費方案 (給你 t2.micro’s 750 小時/月)\n<ul>\n<li><a href=\"https://aws.amazon.com\" target=\"_blank\" rel=\"external\">https://aws.amazon.com</a></li>\n</ul>\n</li>\n<li>使用本地機器\n<ul>\n<li>使用 <a href=\"https://github.com/kubernetes/minikube\" target=\"_blank\" rel=\"external\">minikube</a></li>\n</ul>\n</li>\n<li>使用 Digital Ocean</li>\n</ul>\n<h4>使用 minikube 在本地端設定</h4>\n<ol>\n<li><strong>Minikube</strong> 是一個讓 Kubernetes 在本地端運行變簡單的工具</li>\n<li>Minikube 運行單一 node Kubernetes cluster 在 Linux VM 裡面</li>\n<li>它的目標用戶是那些想要拿來測試或是用它來開發的人</li>\n<li>它不能運行在產品化的 cluster，它是一個沒有高可用性的單一 node 機器</li>\n<li>它可以運行在 <strong>Windows</strong>、<strong>Linux</strong> 和 <strong>MacOS</strong></li>\n<li>你會需要安裝 <strong>虛擬化軟體</strong> 才能運行 minikube\n<ul>\n<li>Virtualbox 是免費的且可以<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">直接下載</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/kubernetes/minikube\" target=\"_blank\" rel=\"external\">下載 minikube</a></li>\n<li>啟動你的 cluster 只要(在 shell/terminal/powershell)輸入 <code>minikube start</code></li>\n</ol>\n<h4>安裝 minikube</h4>\n<ol>\n<li><a href=\"https://github.com/kubernetes/minikube/releases\" target=\"_blank\" rel=\"external\">安裝最新版本的 minikube</a></li>\n<li>安裝完成之後，啟動 minikube <code>minikube start</code></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\" target=\"_blank\" rel=\"external\">安裝 kubectl</a></li>\n<li><code>chmod +x kubectl &amp;&amp; sudo mv kubectl /usr/local/bin/</code></li>\n<li><code>kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080</code></li>\n<li><code>kubectl expose development hello-minikube --type=NodePort</code></li>\n<li><code>minikube service hello-minikube --url</code></li>\n<li><code>minikube stop</code></li>\n</ol>\n<h4>Kops 介紹</h4>\n<ol>\n<li>設置 Kubernetes 在 AWS 上面，可以使用叫做 <strong>kops</strong> 的工具\n<ul>\n<li>kops 代表 <strong>Kubernetes Operations</strong></li>\n</ul>\n</li>\n<li>這個工具允許你做產品化等級的 Kubernetes <strong>安裝</strong>、<strong>升級</strong>和<strong>管理</strong></li>\n<li>另外，還有一個叫做 kube-up sh 的<strong>傳統</strong>工具\n<ul>\n<li>這是一個用來建立 cluster 的簡易工具，但現在已經停止維護，它不能用來建立一個產品化準備的環境</li>\n</ul>\n</li>\n<li>Kops 只能運行在 Mac/Linux</li>\n<li>如果你使用 windows，你必須要先啟動虛擬機</li>\n<li>可以使用 Vagrant 來快速建立一個 Linux box</li>\n<li>下載 <a href=\"https://virtualbox.org\" target=\"_blank\" rel=\"external\">Virtualbox</a> 和 <a href=\"https://vagrantup.com\" target=\"_blank\" rel=\"external\">Vagrant</a>，兩個都需要</li>\n<li>下載完之後，建立一個新的虛擬機，然後直接在 cmd/powershell 新增以下指令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ubuntu</div><div class=\"line\">cd ubuntu</div><div class=\"line\">vagrant init ubuntu/xenial64</div><div class=\"line\">vagrant up</div></pre></td></tr></table></figure>\n<h4>準備 Kops 安裝</h4>\n<ol>\n<li>完成上面的步驟</li>\n<li><code>vagrant ssh-config</code> 檢視 ssh 狀態</li>\n<li><code>vagrant ssh</code> 即可登入虛擬機</li>\n<li><code>puttygen putty</code> 在 windows 上可以使用 putty 來登入</li>\n</ol>\n<h4>為 Kops 安裝準備 AWS</h4>\n<ol>\n<li><a href=\"https://github.com/kubernetes/kops\" target=\"_blank\" rel=\"external\">Kops Github</a></li>\n<li><code>brew update &amp;&amp; brew install kops</code></li>\n<li><code>wget https://github.com/kubernetes/kops/releases/download/1.7.0/kops-linux-amd64</code></li>\n<li><code>chmod +x kops-linux-amd64</code> 新增執行權限</li>\n<li><code>mv kops-linux-amd64 /usr/local/bin/kops</code> 移動 kops</li>\n<li><code>apt-get update &amp;&amp; apt-get install python-pip -y</code></li>\n<li><code>pip install awscli</code>\n<ul>\n<li>MacOS 上的 bug 處理 <code>sudo -H pip install awscli --upgrade --ignore-installed six</code></li>\n</ul>\n</li>\n<li>進入 AWS，選擇服務 IAM (Identity and Access Management)，選擇左列選單 Users，選擇 Add User，命名為 kops，下面選項 Programmatic access 要打勾，下個步驟選擇 AdministratorAccess，完成設定。</li>\n<li><code>aws configure</code></li>\n<li><code>ls -ahl ~/.aws/</code> 檢視 aws credentials</li>\n<li>設定完 IAM 之後，回到服務，選擇 S3，新增 bucket，名稱設定為 kops-state-b429b，最後一個是亂數，因為名稱要是唯一的，地區的選擇要去 <a href=\"http://www.cloudping.info/\" target=\"_blank\" rel=\"external\">cloudping</a> 看哪個最快，選擇最快的就可以了，接下來直接按到完成。</li>\n<li>接下來要設定 DNS，選擇服務 Route53，選擇 DNS management 的 Get Started Now，選擇 Create Hosted Zone，打入自己所擁有的網域，名稱設為 kubernetes，最後到自己的 Domain 主機商那邊設定 DNS。</li>\n</ol>\n<h4>使用 kops 進行 AWS Cluster 設定</h4>\n<ol>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\" target=\"_blank\" rel=\"external\">安裝 kubectl</a></li>\n<li><code>curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl</code> 下載最新版的 kubectl</li>\n<li><code>chmod +x ./kubectl</code></li>\n<li><code>sudo mv ./kubectl /usr/local/bin/kubectl</code></li>\n<li><code>ssh-keygen -f .ssh/id_rsa</code> 新增 ssh-key</li>\n<li><code>kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com</code></li>\n<li><code>kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d</code></li>\n<li><code>cat .kube/config</code></li>\n<li><code>kubectl get node</code></li>\n<li><code>kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080</code></li>\n<li><code>kubectl expose deployment hello-minikube --type=NodePort</code></li>\n<li><code>kubectl get service</code>，檢查 port</li>\n<li>開啟 Services 的 VPC，點選 Security Groups，點選 master.&lt;自己的 domain&gt;，點選 Inbound Rules，新增 Custom TCP rule，將剛剛取得的 port 貼上、source 設定為 0.0.0.0/0。</li>\n<li>進去 api.kubernetes.&lt;自己的 domain&gt;：剛剛的 port，就可以看到內容了</li>\n<li>如果要刪除 instance <code>kops delete cluster --name kubernetes.appsoliloquy.com --state=s3://kops-state-b429d</code></li>\n</ol>\n"},{"title":"Kubernetes 快速學習自我挑戰 Day2","thumbnail":["/images/learning/kubernetes/kubernetesday2.png"],"date":"2017-08-10T20:42:43.000Z","_content":"<img src=\"/images/learning/kubernetes/kubernetesday2.png\">\n\n***\n### Kubernetes 觀念簡介\n#### 建立 docker containers\n1. 建立 container，可以使用 Docker Engine\n2. 建立 Dockerfile 來執行就可以快速建立需要的 container\n3. Docker build 可以手動執行，也可以透過像是 **jenkins** 的 CI/CD 軟體\n#### 在 Kubernetes 上面運行應用程式\n1. 運行**新建立**的應用在新的 Kubernetes cluster\n2. 在我們要運行基於 image 之上的 container，我們需要創建 **pod definition**\n    - **一個 pod** 就是一個應用運行在 Kubernetes 上面\n    - 一個 pod 包含**一個或多個緊密耦合的容器**，如此一來可以形成一個應用\n        - 這些應用們可以輕易的使用本地 **port number** 跟其它應用溝通\n    - 我們的應用只包含一個 container\n3. 創建一個 pod\n    - 創建一個 pod-helloworld.yml 的檔案\n    - 使用 kubectl 在 kubernetes cluster 上面創建 pod\n4. 有用的命令\n    - kubectl get pod：取得所有在運行的 pods 的資訊\n    - kubectl describe pod <pod>：描述一個 pod\n    - kubectl expose pod <pod> --port=444 --name=fronted：公開一個 pod 的 port (創建一個新服務)\n    - kubectl port-forward <pod> 8080：Port 傳送公開的 pod port 到自己的本地機器\n    - kubectl attach <podname> -i：連接到特定 pod\n    - kubectl exec <pod> --command：執行一個命令在 pod 上面\n    - kubectl label pods <pod> myloable=awesome：新增一個標籤到 pod 上面\n    - kubectl run -i --tty busybox --image=busybox --restart=Never -- sh：在 pod 裡面運行一個 sh - 對除錯非常有用\n5. 先用 `minikube start` 運行 minikube，再用 `kubectl create -f first-app/helloworld.yml` 創建 pod\n6. `kubectl describe pod nodehelloworld.example.com`\n7. `kubectl port-forward nodehelloworld.example.com 8081:3000`\n8. `curl localhost:8081` 就可以看到服務運行了\n9. `kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehelloworld-service`\n10. `minikube service <Service Name> --url` 即可以取得服務的 url\n#### 有用的 kubectl commands\n1. `kubectl attach nodehelloworld.example.com` 連接 nodehelloworld.example.com\n2. `kubectl exec nodehelloworld.example.com -- ls /app` 在應用裡面執行命令\n3. `kubectl exec nodehelloworld.example.com -- touch /app/test.txt`\n4. `kubectl exec nodehelloworld.example.com -- ls /app`\n5. `kubectl describe service nodehelloworld-service`\n6. `kubectl run -i --tty busybox --image=busybox --restart=Never -- sh` 新增一個 box 來和 nodehellowrold-service 進行連線\n    - `telnet 172.17.0.4 3000`\n    - `GET /`\n#### 負載平衡服務\n1. 在真實的世界裡面，必須要可以從 cluster 的**外部**連線到應用\n2. 在 AWS 上面，可以輕鬆的新增 **外部負載平衡器(external Load Balancer)**\n3. 這個 AWS Load Balancer 將會路由到正確的 Kubernetes pod\n4. 其它雲端服務商沒有 Load Balancer，但是仍有其它解決方案\n    - 擁有 **haproxy/nginx** load balancer 在 cluster 之前\n    - 或是可以直接將 ports 公開\n#### AWS ELB LoadBalancer 服務\n1. `kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com`\n2. `kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d`\n3. `kubectl create -f first-app/helloworld.yml`\n4. `kubectl create -f first-app/helloworld-service.yml`\n5. 進去 EC2 的 Load Balancer，確認資料狀態。\n6. 進入 Route 53，新增 record，名稱設為 helloworld，Alias 設為 yes，Alias Target 設為 Loadbalancer，點選 create。\n7. 進入 helloworld.kubernetes.appsoliloquy.com. 就可以看到結果了\n### Kubernetes 基礎\n#### Node 架構\n1. Docker 裡面裝有 Pods，Pods 裡面裝有 containers\n2. container 之間可以簡單地互相溝通\n3. kubelet 用來管理 pods，在 container 之外，kube-proxy 負責和 iptable 溝通，如果 pod 有問題，它會更新 iptable 的規則\n#### Replication Controller\n1. 如果應用是 **stateless**，可以橫向的擴展\n    - Stateless 就是應用沒有 **state**，不需要**寫入**任何**本地檔案**/保存本地 sessions\n    - 所有傳統的資料庫(MySQL、Postgres)都是 **stateful**，它們都有資料庫檔案且不能分到多個 instances\n2. 大部分的**網頁應用**可以做成 stateless\n    - **Session 管理** 必須要在 container 之外完成\n    - 任何檔案需要被儲存的**都不能儲存在 container 的本機**\n3. 我們的範例應用是 **stateless**，如果相同的應用執行很多次，也不會改變它的 state\n4. 更多關於練習的資訊，請看 [12factor.net](https://12factor.net/)\n    - 或是看 **Learn DevOps**: Continuously delivering better software/scalig apps on-premise and in the cloud\n5. 後面會解釋如何使用 **volumes** 來運行 stateful 應用\n    - 這些 stateful 應用不能橫向擴展，但是可以在單一 container 裡面運行它們且**縱向擴展** (分配更多 CPU/記憶體/硬碟)\n6. Kubernetes 的擴展可以透過使用 **Replication Controller** 來完成\n7. Replication Controller 可以**確保**指定數量的 **pod relicas** 將會隨時運行\n8. 如果被 relica controller 創建出來的 pod 運行失敗、被刪除或是被終止，那麼 pod 就會自動被取代\n9. 如果你只想確保**一個 pod**是永遠運行的，甚至在重新開機之後，那麼使用 Replication Controller 是被推薦的\n    - 可以只與**一個 replica** 運行一個 Replication Controller\n    - 這樣可以確保 pod 總是處於運行狀態\n10. 在 YAML 裡面設定 kind 為 ReplicationController、spec 裡面的 replicas 設為 2，即可複製應用兩次\n#### Demo：Replication Controller\n1. `kubectl create -f replication-controller/helloworld-repl-controller.yml`\n2. `kubectl describe pod helloworld-controller-cwbbn` 複製其中的 controller 檢查狀態\n3. `kubectl scale --replicas=4 -f replication-controller/helloworld-repl-controller.yml` 擴展服務\n4. `kubectl get rc`\n5. `kubectl scale --replicas=1 rc/helloworld-controller`\n6. `kubectl delete rc/helloworld-controller`\n#### 部署\n1. **Replication Set** 是 Replication Controller 的下個世代\n2. 它支援一種新的 selector，這個 selector 可以做基於**過濾**的 selection，而**過濾**是根據 **sets of values**\n    - 例如：\"environment\" 不是 \"dev\" 就是 \"qa\"\n    - 不只根據 equality，就像是 Replication Controlller\n        - 例如 \"environment\" == \"dev\"\n3. 跟 Replication Controller 相比，**Replica Set** 是使用 Deployment object\n4. Kubernetes 裡的部署聲明允許讓應用做**部署**和**更新**\n5. 當使用 deployment object，你就定義了你的應用的 state\n    - Kubernetes 將會確保 clusters 符合你的 **desired** state\n6. 只使用 **replication controller** 或 **replication set** 可能會在部署應用的時候**很麻煩**\n    - **Deployment Obeject** 比較容易使用且有更多可能性\n7. 有 deployment object，你可以：\n    - **創建**一個 deployment(例如：部署一個應用)\n    - **更新**一個 deployment(例如：部署一個新版本)\n    - 可以做 **rolling updates**(零停機時間部署)\n    - **Roll back** 到上一版本\n    - **停止/恢復**一個 deployment(例如：只推出部分比例)\n8. 在 YAML 裡面設定 kind 為 Deployment\n9. 非常有用的命令：\n    - `kubectl get deployments`：取得現有的 deployments 資訊\n    - `kubectl get rs`：取得 replica sets 的資訊\n    - `kubectl get pods --show-labels`：取得 pods 且顯示連結到這些 pods 的 labels\n    - `kubectl rollout status deployment/helloworld-deployment`：取得 deployment 狀態\n    - `kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2`：運行 image label version 2 的 k8s-demo\n    - `kubectl edit deployment/helloworld-deployment`：編輯 deployment object\n    - `kubectl rollout status deployment/hellowrold-deployment`：取得 rollout 的狀態\n    - `kubectl rollout history deployment/helloworld-deployment`：取得 rollout 的歷史\n    - `kubectl rollout undo deployment/helloworld-deployment`：Rollback 到上一版本\n    - `kubectl rollout undo deployment/helloworld-deployment --to-revision=n`：Rollback 到任何版本\n#### Demo：部署\n1. `kubectl create -f deployment/helloworld.yml`\n2. `kubectl get deployments`\n3. `kubectl get rs`\n4. `kubectl get pods`\n5. `kubectl get pods --show-labels`\n6. `kubectl rollout status deployment/helloworld-deployment`\n7. `kubectl expose deployment helloworld-deployment --type=NodePort`\n8. `kubectl describe service helloworld-deployment`\n9. `minikube service helloworld-deployment --url`\n10. `kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2`\n11. `kubectl rollout status deployment/helloworld-deployment`\n12. `curl http://192.168.99.100:32635` curl 剛剛取得的 ip，就會發現變成 Helloworld v2\n13. `kubectl rollout history deployment/helloworld-deployment`\n14. `kubectl rollout undo deployment/helloworld-deployment`\n15. `kubectl rollout status deployment/helloworld-deployment`\n16. `kubectl edit deployment/helloworld-deployment`，在 spec 的 replica 下面新增 `revisionHistoryLimit: 100`\n17. `kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2`\n18. `kubectl rollout history deployment/helloworld-deployment`\n19. `kubectl rollout undo deployment/helloworld-deployment --to-revision=8`\n20. `kubectl rollout history deployment/helloworld-deployment`","source":"_posts/Kubernetes-快速學習自我挑戰-Day2.md","raw":"---\ntitle: Kubernetes 快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/kubernetes/kubernetesday2.png\ndate: 2017-08-11 04:42:43\ncategories: 學習歷程\ntags: Kubernetes\n---\n<img src=\"/images/learning/kubernetes/kubernetesday2.png\">\n\n***\n### Kubernetes 觀念簡介\n#### 建立 docker containers\n1. 建立 container，可以使用 Docker Engine\n2. 建立 Dockerfile 來執行就可以快速建立需要的 container\n3. Docker build 可以手動執行，也可以透過像是 **jenkins** 的 CI/CD 軟體\n#### 在 Kubernetes 上面運行應用程式\n1. 運行**新建立**的應用在新的 Kubernetes cluster\n2. 在我們要運行基於 image 之上的 container，我們需要創建 **pod definition**\n    - **一個 pod** 就是一個應用運行在 Kubernetes 上面\n    - 一個 pod 包含**一個或多個緊密耦合的容器**，如此一來可以形成一個應用\n        - 這些應用們可以輕易的使用本地 **port number** 跟其它應用溝通\n    - 我們的應用只包含一個 container\n3. 創建一個 pod\n    - 創建一個 pod-helloworld.yml 的檔案\n    - 使用 kubectl 在 kubernetes cluster 上面創建 pod\n4. 有用的命令\n    - kubectl get pod：取得所有在運行的 pods 的資訊\n    - kubectl describe pod <pod>：描述一個 pod\n    - kubectl expose pod <pod> --port=444 --name=fronted：公開一個 pod 的 port (創建一個新服務)\n    - kubectl port-forward <pod> 8080：Port 傳送公開的 pod port 到自己的本地機器\n    - kubectl attach <podname> -i：連接到特定 pod\n    - kubectl exec <pod> --command：執行一個命令在 pod 上面\n    - kubectl label pods <pod> myloable=awesome：新增一個標籤到 pod 上面\n    - kubectl run -i --tty busybox --image=busybox --restart=Never -- sh：在 pod 裡面運行一個 sh - 對除錯非常有用\n5. 先用 `minikube start` 運行 minikube，再用 `kubectl create -f first-app/helloworld.yml` 創建 pod\n6. `kubectl describe pod nodehelloworld.example.com`\n7. `kubectl port-forward nodehelloworld.example.com 8081:3000`\n8. `curl localhost:8081` 就可以看到服務運行了\n9. `kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehelloworld-service`\n10. `minikube service <Service Name> --url` 即可以取得服務的 url\n#### 有用的 kubectl commands\n1. `kubectl attach nodehelloworld.example.com` 連接 nodehelloworld.example.com\n2. `kubectl exec nodehelloworld.example.com -- ls /app` 在應用裡面執行命令\n3. `kubectl exec nodehelloworld.example.com -- touch /app/test.txt`\n4. `kubectl exec nodehelloworld.example.com -- ls /app`\n5. `kubectl describe service nodehelloworld-service`\n6. `kubectl run -i --tty busybox --image=busybox --restart=Never -- sh` 新增一個 box 來和 nodehellowrold-service 進行連線\n    - `telnet 172.17.0.4 3000`\n    - `GET /`\n#### 負載平衡服務\n1. 在真實的世界裡面，必須要可以從 cluster 的**外部**連線到應用\n2. 在 AWS 上面，可以輕鬆的新增 **外部負載平衡器(external Load Balancer)**\n3. 這個 AWS Load Balancer 將會路由到正確的 Kubernetes pod\n4. 其它雲端服務商沒有 Load Balancer，但是仍有其它解決方案\n    - 擁有 **haproxy/nginx** load balancer 在 cluster 之前\n    - 或是可以直接將 ports 公開\n#### AWS ELB LoadBalancer 服務\n1. `kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com`\n2. `kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d`\n3. `kubectl create -f first-app/helloworld.yml`\n4. `kubectl create -f first-app/helloworld-service.yml`\n5. 進去 EC2 的 Load Balancer，確認資料狀態。\n6. 進入 Route 53，新增 record，名稱設為 helloworld，Alias 設為 yes，Alias Target 設為 Loadbalancer，點選 create。\n7. 進入 helloworld.kubernetes.appsoliloquy.com. 就可以看到結果了\n### Kubernetes 基礎\n#### Node 架構\n1. Docker 裡面裝有 Pods，Pods 裡面裝有 containers\n2. container 之間可以簡單地互相溝通\n3. kubelet 用來管理 pods，在 container 之外，kube-proxy 負責和 iptable 溝通，如果 pod 有問題，它會更新 iptable 的規則\n#### Replication Controller\n1. 如果應用是 **stateless**，可以橫向的擴展\n    - Stateless 就是應用沒有 **state**，不需要**寫入**任何**本地檔案**/保存本地 sessions\n    - 所有傳統的資料庫(MySQL、Postgres)都是 **stateful**，它們都有資料庫檔案且不能分到多個 instances\n2. 大部分的**網頁應用**可以做成 stateless\n    - **Session 管理** 必須要在 container 之外完成\n    - 任何檔案需要被儲存的**都不能儲存在 container 的本機**\n3. 我們的範例應用是 **stateless**，如果相同的應用執行很多次，也不會改變它的 state\n4. 更多關於練習的資訊，請看 [12factor.net](https://12factor.net/)\n    - 或是看 **Learn DevOps**: Continuously delivering better software/scalig apps on-premise and in the cloud\n5. 後面會解釋如何使用 **volumes** 來運行 stateful 應用\n    - 這些 stateful 應用不能橫向擴展，但是可以在單一 container 裡面運行它們且**縱向擴展** (分配更多 CPU/記憶體/硬碟)\n6. Kubernetes 的擴展可以透過使用 **Replication Controller** 來完成\n7. Replication Controller 可以**確保**指定數量的 **pod relicas** 將會隨時運行\n8. 如果被 relica controller 創建出來的 pod 運行失敗、被刪除或是被終止，那麼 pod 就會自動被取代\n9. 如果你只想確保**一個 pod**是永遠運行的，甚至在重新開機之後，那麼使用 Replication Controller 是被推薦的\n    - 可以只與**一個 replica** 運行一個 Replication Controller\n    - 這樣可以確保 pod 總是處於運行狀態\n10. 在 YAML 裡面設定 kind 為 ReplicationController、spec 裡面的 replicas 設為 2，即可複製應用兩次\n#### Demo：Replication Controller\n1. `kubectl create -f replication-controller/helloworld-repl-controller.yml`\n2. `kubectl describe pod helloworld-controller-cwbbn` 複製其中的 controller 檢查狀態\n3. `kubectl scale --replicas=4 -f replication-controller/helloworld-repl-controller.yml` 擴展服務\n4. `kubectl get rc`\n5. `kubectl scale --replicas=1 rc/helloworld-controller`\n6. `kubectl delete rc/helloworld-controller`\n#### 部署\n1. **Replication Set** 是 Replication Controller 的下個世代\n2. 它支援一種新的 selector，這個 selector 可以做基於**過濾**的 selection，而**過濾**是根據 **sets of values**\n    - 例如：\"environment\" 不是 \"dev\" 就是 \"qa\"\n    - 不只根據 equality，就像是 Replication Controlller\n        - 例如 \"environment\" == \"dev\"\n3. 跟 Replication Controller 相比，**Replica Set** 是使用 Deployment object\n4. Kubernetes 裡的部署聲明允許讓應用做**部署**和**更新**\n5. 當使用 deployment object，你就定義了你的應用的 state\n    - Kubernetes 將會確保 clusters 符合你的 **desired** state\n6. 只使用 **replication controller** 或 **replication set** 可能會在部署應用的時候**很麻煩**\n    - **Deployment Obeject** 比較容易使用且有更多可能性\n7. 有 deployment object，你可以：\n    - **創建**一個 deployment(例如：部署一個應用)\n    - **更新**一個 deployment(例如：部署一個新版本)\n    - 可以做 **rolling updates**(零停機時間部署)\n    - **Roll back** 到上一版本\n    - **停止/恢復**一個 deployment(例如：只推出部分比例)\n8. 在 YAML 裡面設定 kind 為 Deployment\n9. 非常有用的命令：\n    - `kubectl get deployments`：取得現有的 deployments 資訊\n    - `kubectl get rs`：取得 replica sets 的資訊\n    - `kubectl get pods --show-labels`：取得 pods 且顯示連結到這些 pods 的 labels\n    - `kubectl rollout status deployment/helloworld-deployment`：取得 deployment 狀態\n    - `kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2`：運行 image label version 2 的 k8s-demo\n    - `kubectl edit deployment/helloworld-deployment`：編輯 deployment object\n    - `kubectl rollout status deployment/hellowrold-deployment`：取得 rollout 的狀態\n    - `kubectl rollout history deployment/helloworld-deployment`：取得 rollout 的歷史\n    - `kubectl rollout undo deployment/helloworld-deployment`：Rollback 到上一版本\n    - `kubectl rollout undo deployment/helloworld-deployment --to-revision=n`：Rollback 到任何版本\n#### Demo：部署\n1. `kubectl create -f deployment/helloworld.yml`\n2. `kubectl get deployments`\n3. `kubectl get rs`\n4. `kubectl get pods`\n5. `kubectl get pods --show-labels`\n6. `kubectl rollout status deployment/helloworld-deployment`\n7. `kubectl expose deployment helloworld-deployment --type=NodePort`\n8. `kubectl describe service helloworld-deployment`\n9. `minikube service helloworld-deployment --url`\n10. `kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2`\n11. `kubectl rollout status deployment/helloworld-deployment`\n12. `curl http://192.168.99.100:32635` curl 剛剛取得的 ip，就會發現變成 Helloworld v2\n13. `kubectl rollout history deployment/helloworld-deployment`\n14. `kubectl rollout undo deployment/helloworld-deployment`\n15. `kubectl rollout status deployment/helloworld-deployment`\n16. `kubectl edit deployment/helloworld-deployment`，在 spec 的 replica 下面新增 `revisionHistoryLimit: 100`\n17. `kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2`\n18. `kubectl rollout history deployment/helloworld-deployment`\n19. `kubectl rollout undo deployment/helloworld-deployment --to-revision=8`\n20. `kubectl rollout history deployment/helloworld-deployment`","slug":"Kubernetes-快速學習自我挑戰-Day2","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwc000g7ifapb19d0w8","content":"<img src=\"/images/learning/kubernetes/kubernetesday2.png\">\n<hr>\n<h3>Kubernetes 觀念簡介</h3>\n<h4>建立 docker containers</h4>\n<ol>\n<li>建立 container，可以使用 Docker Engine</li>\n<li>建立 Dockerfile 來執行就可以快速建立需要的 container</li>\n<li>Docker build 可以手動執行，也可以透過像是 <strong>jenkins</strong> 的 CI/CD 軟體</li>\n</ol>\n<h4>在 Kubernetes 上面運行應用程式</h4>\n<ol>\n<li>運行<strong>新建立</strong>的應用在新的 Kubernetes cluster</li>\n<li>在我們要運行基於 image 之上的 container，我們需要創建 <strong>pod definition</strong>\n<ul>\n<li><strong>一個 pod</strong> 就是一個應用運行在 Kubernetes 上面</li>\n<li>一個 pod 包含<strong>一個或多個緊密耦合的容器</strong>，如此一來可以形成一個應用\n<ul>\n<li>這些應用們可以輕易的使用本地 <strong>port number</strong> 跟其它應用溝通</li>\n</ul>\n</li>\n<li>我們的應用只包含一個 container</li>\n</ul>\n</li>\n<li>創建一個 pod\n<ul>\n<li>創建一個 pod-helloworld.yml 的檔案</li>\n<li>使用 kubectl 在 kubernetes cluster 上面創建 pod</li>\n</ul>\n</li>\n<li>有用的命令\n<ul>\n<li>kubectl get pod：取得所有在運行的 pods 的資訊</li>\n<li>kubectl describe pod <pod>：描述一個 pod</pod></li>\n<li>kubectl expose pod <pod> --port=444 --name=fronted：公開一個 pod 的 port (創建一個新服務)</pod></li>\n<li>kubectl port-forward <pod> 8080：Port 傳送公開的 pod port 到自己的本地機器</pod></li>\n<li>kubectl attach <podname> -i：連接到特定 pod</podname></li>\n<li>kubectl exec <pod> --command：執行一個命令在 pod 上面</pod></li>\n<li>kubectl label pods <pod> myloable=awesome：新增一個標籤到 pod 上面</pod></li>\n<li>kubectl run -i --tty busybox --image=busybox --restart=Never – sh：在 pod 裡面運行一個 sh - 對除錯非常有用</li>\n</ul>\n</li>\n<li>先用 <code>minikube start</code> 運行 minikube，再用 <code>kubectl create -f first-app/helloworld.yml</code> 創建 pod</li>\n<li><code>kubectl describe pod nodehelloworld.example.com</code></li>\n<li><code>kubectl port-forward nodehelloworld.example.com 8081:3000</code></li>\n<li><code>curl localhost:8081</code> 就可以看到服務運行了</li>\n<li><code>kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehelloworld-service</code></li>\n<li><code>minikube service &lt;Service Name&gt; --url</code> 即可以取得服務的 url</li>\n</ol>\n<h4>有用的 kubectl commands</h4>\n<ol>\n<li><code>kubectl attach nodehelloworld.example.com</code> 連接 <a href=\"http://nodehelloworld.example.com\" target=\"_blank\" rel=\"external\">nodehelloworld.example.com</a></li>\n<li><code>kubectl exec nodehelloworld.example.com -- ls /app</code> 在應用裡面執行命令</li>\n<li><code>kubectl exec nodehelloworld.example.com -- touch /app/test.txt</code></li>\n<li><code>kubectl exec nodehelloworld.example.com -- ls /app</code></li>\n<li><code>kubectl describe service nodehelloworld-service</code></li>\n<li><code>kubectl run -i --tty busybox --image=busybox --restart=Never -- sh</code> 新增一個 box 來和 nodehellowrold-service 進行連線\n<ul>\n<li><code>telnet 172.17.0.4 3000</code></li>\n<li><code>GET /</code></li>\n</ul>\n</li>\n</ol>\n<h4>負載平衡服務</h4>\n<ol>\n<li>在真實的世界裡面，必須要可以從 cluster 的<strong>外部</strong>連線到應用</li>\n<li>在 AWS 上面，可以輕鬆的新增 <strong>外部負載平衡器(external Load Balancer)</strong></li>\n<li>這個 AWS Load Balancer 將會路由到正確的 Kubernetes pod</li>\n<li>其它雲端服務商沒有 Load Balancer，但是仍有其它解決方案\n<ul>\n<li>擁有 <strong>haproxy/nginx</strong> load balancer 在 cluster 之前</li>\n<li>或是可以直接將 ports 公開</li>\n</ul>\n</li>\n</ol>\n<h4>AWS ELB LoadBalancer 服務</h4>\n<ol>\n<li><code>kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com</code></li>\n<li><code>kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d</code></li>\n<li><code>kubectl create -f first-app/helloworld.yml</code></li>\n<li><code>kubectl create -f first-app/helloworld-service.yml</code></li>\n<li>進去 EC2 的 Load Balancer，確認資料狀態。</li>\n<li>進入 Route 53，新增 record，名稱設為 helloworld，Alias 設為 yes，Alias Target 設為 Loadbalancer，點選 create。</li>\n<li>進入 <a href=\"http://helloworld.kubernetes.appsoliloquy.com\" target=\"_blank\" rel=\"external\">helloworld.kubernetes.appsoliloquy.com</a>. 就可以看到結果了</li>\n</ol>\n<h3>Kubernetes 基礎</h3>\n<h4>Node 架構</h4>\n<ol>\n<li>Docker 裡面裝有 Pods，Pods 裡面裝有 containers</li>\n<li>container 之間可以簡單地互相溝通</li>\n<li>kubelet 用來管理 pods，在 container 之外，kube-proxy 負責和 iptable 溝通，如果 pod 有問題，它會更新 iptable 的規則</li>\n</ol>\n<h4>Replication Controller</h4>\n<ol>\n<li>如果應用是 <strong>stateless</strong>，可以橫向的擴展\n<ul>\n<li>Stateless 就是應用沒有 <strong>state</strong>，不需要<strong>寫入</strong>任何<strong>本地檔案</strong>/保存本地 sessions</li>\n<li>所有傳統的資料庫(MySQL、Postgres)都是 <strong>stateful</strong>，它們都有資料庫檔案且不能分到多個 instances</li>\n</ul>\n</li>\n<li>大部分的<strong>網頁應用</strong>可以做成 stateless\n<ul>\n<li><strong>Session 管理</strong> 必須要在 container 之外完成</li>\n<li>任何檔案需要被儲存的<strong>都不能儲存在 container 的本機</strong></li>\n</ul>\n</li>\n<li>我們的範例應用是 <strong>stateless</strong>，如果相同的應用執行很多次，也不會改變它的 state</li>\n<li>更多關於練習的資訊，請看 <a href=\"https://12factor.net/\" target=\"_blank\" rel=\"external\">12factor.net</a>\n<ul>\n<li>或是看 <strong>Learn DevOps</strong>: Continuously delivering better software/scalig apps on-premise and in the cloud</li>\n</ul>\n</li>\n<li>後面會解釋如何使用 <strong>volumes</strong> 來運行 stateful 應用\n<ul>\n<li>這些 stateful 應用不能橫向擴展，但是可以在單一 container 裡面運行它們且<strong>縱向擴展</strong> (分配更多 CPU/記憶體/硬碟)</li>\n</ul>\n</li>\n<li>Kubernetes 的擴展可以透過使用 <strong>Replication Controller</strong> 來完成</li>\n<li>Replication Controller 可以<strong>確保</strong>指定數量的 <strong>pod relicas</strong> 將會隨時運行</li>\n<li>如果被 relica controller 創建出來的 pod 運行失敗、被刪除或是被終止，那麼 pod 就會自動被取代</li>\n<li>如果你只想確保<strong>一個 pod</strong>是永遠運行的，甚至在重新開機之後，那麼使用 Replication Controller 是被推薦的\n<ul>\n<li>可以只與<strong>一個 replica</strong> 運行一個 Replication Controller</li>\n<li>這樣可以確保 pod 總是處於運行狀態</li>\n</ul>\n</li>\n<li>在 YAML 裡面設定 kind 為 ReplicationController、spec 裡面的 replicas 設為 2，即可複製應用兩次</li>\n</ol>\n<h4>Demo：Replication Controller</h4>\n<ol>\n<li><code>kubectl create -f replication-controller/helloworld-repl-controller.yml</code></li>\n<li><code>kubectl describe pod helloworld-controller-cwbbn</code> 複製其中的 controller 檢查狀態</li>\n<li><code>kubectl scale --replicas=4 -f replication-controller/helloworld-repl-controller.yml</code> 擴展服務</li>\n<li><code>kubectl get rc</code></li>\n<li><code>kubectl scale --replicas=1 rc/helloworld-controller</code></li>\n<li><code>kubectl delete rc/helloworld-controller</code></li>\n</ol>\n<h4>部署</h4>\n<ol>\n<li><strong>Replication Set</strong> 是 Replication Controller 的下個世代</li>\n<li>它支援一種新的 selector，這個 selector 可以做基於<strong>過濾</strong>的 selection，而<strong>過濾</strong>是根據 <strong>sets of values</strong>\n<ul>\n<li>例如：“environment” 不是 “dev” 就是 “qa”</li>\n<li>不只根據 equality，就像是 Replication Controlller\n<ul>\n<li>例如 “environment” == “dev”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>跟 Replication Controller 相比，<strong>Replica Set</strong> 是使用 Deployment object</li>\n<li>Kubernetes 裡的部署聲明允許讓應用做<strong>部署</strong>和<strong>更新</strong></li>\n<li>當使用 deployment object，你就定義了你的應用的 state\n<ul>\n<li>Kubernetes 將會確保 clusters 符合你的 <strong>desired</strong> state</li>\n</ul>\n</li>\n<li>只使用 <strong>replication controller</strong> 或 <strong>replication set</strong> 可能會在部署應用的時候<strong>很麻煩</strong>\n<ul>\n<li><strong>Deployment Obeject</strong> 比較容易使用且有更多可能性</li>\n</ul>\n</li>\n<li>有 deployment object，你可以：\n<ul>\n<li><strong>創建</strong>一個 deployment(例如：部署一個應用)</li>\n<li><strong>更新</strong>一個 deployment(例如：部署一個新版本)</li>\n<li>可以做 <strong>rolling updates</strong>(零停機時間部署)</li>\n<li><strong>Roll back</strong> 到上一版本</li>\n<li><strong>停止/恢復</strong>一個 deployment(例如：只推出部分比例)</li>\n</ul>\n</li>\n<li>在 YAML 裡面設定 kind 為 Deployment</li>\n<li>非常有用的命令：\n<ul>\n<li><code>kubectl get deployments</code>：取得現有的 deployments 資訊</li>\n<li><code>kubectl get rs</code>：取得 replica sets 的資訊</li>\n<li><code>kubectl get pods --show-labels</code>：取得 pods 且顯示連結到這些 pods 的 labels</li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code>：取得 deployment 狀態</li>\n<li><code>kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2</code>：運行 image label version 2 的 k8s-demo</li>\n<li><code>kubectl edit deployment/helloworld-deployment</code>：編輯 deployment object</li>\n<li><code>kubectl rollout status deployment/hellowrold-deployment</code>：取得 rollout 的狀態</li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code>：取得 rollout 的歷史</li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment</code>：Rollback 到上一版本</li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment --to-revision=n</code>：Rollback 到任何版本</li>\n</ul>\n</li>\n</ol>\n<h4>Demo：部署</h4>\n<ol>\n<li><code>kubectl create -f deployment/helloworld.yml</code></li>\n<li><code>kubectl get deployments</code></li>\n<li><code>kubectl get rs</code></li>\n<li><code>kubectl get pods</code></li>\n<li><code>kubectl get pods --show-labels</code></li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code></li>\n<li><code>kubectl expose deployment helloworld-deployment --type=NodePort</code></li>\n<li><code>kubectl describe service helloworld-deployment</code></li>\n<li><code>minikube service helloworld-deployment --url</code></li>\n<li><code>kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2</code></li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code></li>\n<li><code>curl http://192.168.99.100:32635</code> curl 剛剛取得的 ip，就會發現變成 Helloworld v2</li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code></li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment</code></li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code></li>\n<li><code>kubectl edit deployment/helloworld-deployment</code>，在 spec 的 replica 下面新增 <code>revisionHistoryLimit: 100</code></li>\n<li><code>kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2</code></li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code></li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment --to-revision=8</code></li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/kubernetes/kubernetesday2.png\">\n<hr>\n<h3>Kubernetes 觀念簡介</h3>\n<h4>建立 docker containers</h4>\n<ol>\n<li>建立 container，可以使用 Docker Engine</li>\n<li>建立 Dockerfile 來執行就可以快速建立需要的 container</li>\n<li>Docker build 可以手動執行，也可以透過像是 <strong>jenkins</strong> 的 CI/CD 軟體</li>\n</ol>\n<h4>在 Kubernetes 上面運行應用程式</h4>\n<ol>\n<li>運行<strong>新建立</strong>的應用在新的 Kubernetes cluster</li>\n<li>在我們要運行基於 image 之上的 container，我們需要創建 <strong>pod definition</strong>\n<ul>\n<li><strong>一個 pod</strong> 就是一個應用運行在 Kubernetes 上面</li>\n<li>一個 pod 包含<strong>一個或多個緊密耦合的容器</strong>，如此一來可以形成一個應用\n<ul>\n<li>這些應用們可以輕易的使用本地 <strong>port number</strong> 跟其它應用溝通</li>\n</ul>\n</li>\n<li>我們的應用只包含一個 container</li>\n</ul>\n</li>\n<li>創建一個 pod\n<ul>\n<li>創建一個 pod-helloworld.yml 的檔案</li>\n<li>使用 kubectl 在 kubernetes cluster 上面創建 pod</li>\n</ul>\n</li>\n<li>有用的命令\n<ul>\n<li>kubectl get pod：取得所有在運行的 pods 的資訊</li>\n<li>kubectl describe pod <pod>：描述一個 pod</pod></li>\n<li>kubectl expose pod <pod> --port=444 --name=fronted：公開一個 pod 的 port (創建一個新服務)</pod></li>\n<li>kubectl port-forward <pod> 8080：Port 傳送公開的 pod port 到自己的本地機器</pod></li>\n<li>kubectl attach <podname> -i：連接到特定 pod</podname></li>\n<li>kubectl exec <pod> --command：執行一個命令在 pod 上面</pod></li>\n<li>kubectl label pods <pod> myloable=awesome：新增一個標籤到 pod 上面</pod></li>\n<li>kubectl run -i --tty busybox --image=busybox --restart=Never – sh：在 pod 裡面運行一個 sh - 對除錯非常有用</li>\n</ul>\n</li>\n<li>先用 <code>minikube start</code> 運行 minikube，再用 <code>kubectl create -f first-app/helloworld.yml</code> 創建 pod</li>\n<li><code>kubectl describe pod nodehelloworld.example.com</code></li>\n<li><code>kubectl port-forward nodehelloworld.example.com 8081:3000</code></li>\n<li><code>curl localhost:8081</code> 就可以看到服務運行了</li>\n<li><code>kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehelloworld-service</code></li>\n<li><code>minikube service &lt;Service Name&gt; --url</code> 即可以取得服務的 url</li>\n</ol>\n<h4>有用的 kubectl commands</h4>\n<ol>\n<li><code>kubectl attach nodehelloworld.example.com</code> 連接 <a href=\"http://nodehelloworld.example.com\" target=\"_blank\" rel=\"external\">nodehelloworld.example.com</a></li>\n<li><code>kubectl exec nodehelloworld.example.com -- ls /app</code> 在應用裡面執行命令</li>\n<li><code>kubectl exec nodehelloworld.example.com -- touch /app/test.txt</code></li>\n<li><code>kubectl exec nodehelloworld.example.com -- ls /app</code></li>\n<li><code>kubectl describe service nodehelloworld-service</code></li>\n<li><code>kubectl run -i --tty busybox --image=busybox --restart=Never -- sh</code> 新增一個 box 來和 nodehellowrold-service 進行連線\n<ul>\n<li><code>telnet 172.17.0.4 3000</code></li>\n<li><code>GET /</code></li>\n</ul>\n</li>\n</ol>\n<h4>負載平衡服務</h4>\n<ol>\n<li>在真實的世界裡面，必須要可以從 cluster 的<strong>外部</strong>連線到應用</li>\n<li>在 AWS 上面，可以輕鬆的新增 <strong>外部負載平衡器(external Load Balancer)</strong></li>\n<li>這個 AWS Load Balancer 將會路由到正確的 Kubernetes pod</li>\n<li>其它雲端服務商沒有 Load Balancer，但是仍有其它解決方案\n<ul>\n<li>擁有 <strong>haproxy/nginx</strong> load balancer 在 cluster 之前</li>\n<li>或是可以直接將 ports 公開</li>\n</ul>\n</li>\n</ol>\n<h4>AWS ELB LoadBalancer 服務</h4>\n<ol>\n<li><code>kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com</code></li>\n<li><code>kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d</code></li>\n<li><code>kubectl create -f first-app/helloworld.yml</code></li>\n<li><code>kubectl create -f first-app/helloworld-service.yml</code></li>\n<li>進去 EC2 的 Load Balancer，確認資料狀態。</li>\n<li>進入 Route 53，新增 record，名稱設為 helloworld，Alias 設為 yes，Alias Target 設為 Loadbalancer，點選 create。</li>\n<li>進入 <a href=\"http://helloworld.kubernetes.appsoliloquy.com\" target=\"_blank\" rel=\"external\">helloworld.kubernetes.appsoliloquy.com</a>. 就可以看到結果了</li>\n</ol>\n<h3>Kubernetes 基礎</h3>\n<h4>Node 架構</h4>\n<ol>\n<li>Docker 裡面裝有 Pods，Pods 裡面裝有 containers</li>\n<li>container 之間可以簡單地互相溝通</li>\n<li>kubelet 用來管理 pods，在 container 之外，kube-proxy 負責和 iptable 溝通，如果 pod 有問題，它會更新 iptable 的規則</li>\n</ol>\n<h4>Replication Controller</h4>\n<ol>\n<li>如果應用是 <strong>stateless</strong>，可以橫向的擴展\n<ul>\n<li>Stateless 就是應用沒有 <strong>state</strong>，不需要<strong>寫入</strong>任何<strong>本地檔案</strong>/保存本地 sessions</li>\n<li>所有傳統的資料庫(MySQL、Postgres)都是 <strong>stateful</strong>，它們都有資料庫檔案且不能分到多個 instances</li>\n</ul>\n</li>\n<li>大部分的<strong>網頁應用</strong>可以做成 stateless\n<ul>\n<li><strong>Session 管理</strong> 必須要在 container 之外完成</li>\n<li>任何檔案需要被儲存的<strong>都不能儲存在 container 的本機</strong></li>\n</ul>\n</li>\n<li>我們的範例應用是 <strong>stateless</strong>，如果相同的應用執行很多次，也不會改變它的 state</li>\n<li>更多關於練習的資訊，請看 <a href=\"https://12factor.net/\" target=\"_blank\" rel=\"external\">12factor.net</a>\n<ul>\n<li>或是看 <strong>Learn DevOps</strong>: Continuously delivering better software/scalig apps on-premise and in the cloud</li>\n</ul>\n</li>\n<li>後面會解釋如何使用 <strong>volumes</strong> 來運行 stateful 應用\n<ul>\n<li>這些 stateful 應用不能橫向擴展，但是可以在單一 container 裡面運行它們且<strong>縱向擴展</strong> (分配更多 CPU/記憶體/硬碟)</li>\n</ul>\n</li>\n<li>Kubernetes 的擴展可以透過使用 <strong>Replication Controller</strong> 來完成</li>\n<li>Replication Controller 可以<strong>確保</strong>指定數量的 <strong>pod relicas</strong> 將會隨時運行</li>\n<li>如果被 relica controller 創建出來的 pod 運行失敗、被刪除或是被終止，那麼 pod 就會自動被取代</li>\n<li>如果你只想確保<strong>一個 pod</strong>是永遠運行的，甚至在重新開機之後，那麼使用 Replication Controller 是被推薦的\n<ul>\n<li>可以只與<strong>一個 replica</strong> 運行一個 Replication Controller</li>\n<li>這樣可以確保 pod 總是處於運行狀態</li>\n</ul>\n</li>\n<li>在 YAML 裡面設定 kind 為 ReplicationController、spec 裡面的 replicas 設為 2，即可複製應用兩次</li>\n</ol>\n<h4>Demo：Replication Controller</h4>\n<ol>\n<li><code>kubectl create -f replication-controller/helloworld-repl-controller.yml</code></li>\n<li><code>kubectl describe pod helloworld-controller-cwbbn</code> 複製其中的 controller 檢查狀態</li>\n<li><code>kubectl scale --replicas=4 -f replication-controller/helloworld-repl-controller.yml</code> 擴展服務</li>\n<li><code>kubectl get rc</code></li>\n<li><code>kubectl scale --replicas=1 rc/helloworld-controller</code></li>\n<li><code>kubectl delete rc/helloworld-controller</code></li>\n</ol>\n<h4>部署</h4>\n<ol>\n<li><strong>Replication Set</strong> 是 Replication Controller 的下個世代</li>\n<li>它支援一種新的 selector，這個 selector 可以做基於<strong>過濾</strong>的 selection，而<strong>過濾</strong>是根據 <strong>sets of values</strong>\n<ul>\n<li>例如：“environment” 不是 “dev” 就是 “qa”</li>\n<li>不只根據 equality，就像是 Replication Controlller\n<ul>\n<li>例如 “environment” == “dev”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>跟 Replication Controller 相比，<strong>Replica Set</strong> 是使用 Deployment object</li>\n<li>Kubernetes 裡的部署聲明允許讓應用做<strong>部署</strong>和<strong>更新</strong></li>\n<li>當使用 deployment object，你就定義了你的應用的 state\n<ul>\n<li>Kubernetes 將會確保 clusters 符合你的 <strong>desired</strong> state</li>\n</ul>\n</li>\n<li>只使用 <strong>replication controller</strong> 或 <strong>replication set</strong> 可能會在部署應用的時候<strong>很麻煩</strong>\n<ul>\n<li><strong>Deployment Obeject</strong> 比較容易使用且有更多可能性</li>\n</ul>\n</li>\n<li>有 deployment object，你可以：\n<ul>\n<li><strong>創建</strong>一個 deployment(例如：部署一個應用)</li>\n<li><strong>更新</strong>一個 deployment(例如：部署一個新版本)</li>\n<li>可以做 <strong>rolling updates</strong>(零停機時間部署)</li>\n<li><strong>Roll back</strong> 到上一版本</li>\n<li><strong>停止/恢復</strong>一個 deployment(例如：只推出部分比例)</li>\n</ul>\n</li>\n<li>在 YAML 裡面設定 kind 為 Deployment</li>\n<li>非常有用的命令：\n<ul>\n<li><code>kubectl get deployments</code>：取得現有的 deployments 資訊</li>\n<li><code>kubectl get rs</code>：取得 replica sets 的資訊</li>\n<li><code>kubectl get pods --show-labels</code>：取得 pods 且顯示連結到這些 pods 的 labels</li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code>：取得 deployment 狀態</li>\n<li><code>kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2</code>：運行 image label version 2 的 k8s-demo</li>\n<li><code>kubectl edit deployment/helloworld-deployment</code>：編輯 deployment object</li>\n<li><code>kubectl rollout status deployment/hellowrold-deployment</code>：取得 rollout 的狀態</li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code>：取得 rollout 的歷史</li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment</code>：Rollback 到上一版本</li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment --to-revision=n</code>：Rollback 到任何版本</li>\n</ul>\n</li>\n</ol>\n<h4>Demo：部署</h4>\n<ol>\n<li><code>kubectl create -f deployment/helloworld.yml</code></li>\n<li><code>kubectl get deployments</code></li>\n<li><code>kubectl get rs</code></li>\n<li><code>kubectl get pods</code></li>\n<li><code>kubectl get pods --show-labels</code></li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code></li>\n<li><code>kubectl expose deployment helloworld-deployment --type=NodePort</code></li>\n<li><code>kubectl describe service helloworld-deployment</code></li>\n<li><code>minikube service helloworld-deployment --url</code></li>\n<li><code>kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2</code></li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code></li>\n<li><code>curl http://192.168.99.100:32635</code> curl 剛剛取得的 ip，就會發現變成 Helloworld v2</li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code></li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment</code></li>\n<li><code>kubectl rollout status deployment/helloworld-deployment</code></li>\n<li><code>kubectl edit deployment/helloworld-deployment</code>，在 spec 的 replica 下面新增 <code>revisionHistoryLimit: 100</code></li>\n<li><code>kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2</code></li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code></li>\n<li><code>kubectl rollout undo deployment/helloworld-deployment --to-revision=8</code></li>\n<li><code>kubectl rollout history deployment/helloworld-deployment</code></li>\n</ol>\n"},{"title":"Kubernetes 快速學習自我挑戰 Day3","thumbnail":["/images/learning/kubernetes/kubernetesday3.png"],"date":"2017-08-14T20:47:58.000Z","_content":"<img src=\"/images/learning/kubernetes/kubernetesday3.png\">\n\n***\n### Kubernetes 觀念簡介\n#### Service\n1. **Pods** 是非常**動態的**，它們在 Kubernetes 上面是來去自如的\n    - 當使用 **Replication Controller**，pods 在擴展的操作時是**被終止的**且再被創建的\n    - 當使用 **Deployments**，且在**更新** image 版本的時候，pods 會**被終止**且創建一個新的 pods 取代舊的\n2. 這就是為什麼 pods 不應該被直接存取，而是透過 **Service**\n3. 一個服務是在 \"mortal\" pods 和其它 **services** 或**終端使用者**之間的**邏輯橋樑**\n4. 當使用 \"kubectl expose\" 命令，就會為 pod 創建一個新的服務，如此一來它就可以被外部存取\n5. 創建一個服務會為 pod(s) 創建一個 endpoint\n    - **ClusterIP**：一個虛擬 ip 位址只能從 cluster 裡面被存取(這是預設)\n    - **NodePort**：在每一個 node 都使用一樣的 port，而且可以被外部存取\n    - **LoadBalancer**：LoadBalance 是由**雲端主機商**建立的，它會路由外部網路到每一個在 NodePort 上的 node (AWS 上的 ELB 服務)\n6. 以上所提到的選項可以使用的只有創建 **虛擬 IPs** 或 **ports**\n7. 它還有使用 **DNS 名稱**的可能性\n    - **ExternalName** 可以為 service 提供 DNS 名稱\n    - 例如：為 service discovery 使用 DNS\n    - 它只有在 **DNS add-on** 啟動的時候可以使用\n8. 筆記：預設的服務只能運行在 30000-32767 port 之間，但是可以在 kube-apiserver 的命令 argument 加上 --service-node-port-range= 來改變這種特性 (在 init scripts)\n#### Demo：Service\n1. `kubectl create -f first-app/helloworld.yml`\n2. `kubectl describe pod nodehelloworld.example.com`\n3. `cat first-app/helloworld-nodeport-service.yml`\n4. `kubectl create -f first-app/helloworld-nodeport-service.yml`\n5. `minikube service helloworld-service --url`\n6. `curl http://192.168.99.100:31001`\n7. `kubectl describe svc helloworld-service`\n8. `kubectl get svc`\n9. `kubectl delete svc helloworld-service`\n10. `kubectl create -f first-app/helloworld-nodeport-service.yml`\n11. `kubectl describe svc helloworld-service`，會發現 ip 不一樣了\n#### Labels\n1. Labels 是 key/value pairs，而且可以連接到 objects\n    - Labels 在 AWS 或其它雲端服務商裡就像 **tags** ，且用來標籤 resource\n2. 可以 **label** objects，例如 pod，要跟隨以下組織架構\n    - **Key**：environment - **Value**：dev/staging/qa/prod\n    - **Key**：department - **Value**：engineering/finance/marketing\n3. 在上一個範例，已經使用 label 來標籤 pods 了\n4. Labels **不是獨一無二**且可以增加**多重標籤**到一個 object 上面\n5. 一旦 labels 連結到 objects，就可以使用過濾器來縮小結果\n    - 這叫做 **Label Selectors**\n6. 使用 Label Selector 可以使用 **matching expressions** 來匹配 labels\n    - 例如：特定的 pod 只能運行在「environment」標籤上的 node 等同於 「development」\n    - 更複雜的匹配：「environment」必須要是「development」或「qa」\n7. 也可以用 labels 來標籤 **nodes**\n8. 一旦 nodes 被標籤，就可以使用 **label selector** 來讓 pods 只能運行在 **特定 nodes**\n9. 在特定設置的 nodes 上運行一個 pod 有必要的**兩步驟**\n    - 第一步驟要**標籤** node\n    - 第二步驟要新增一個 **nodeSelector** 到 pod 組態設定\n10. 第一步驟：新增一個或是多數 labels 到 nodes 上\n`kubectl label nodes node1 hardware=high-spec`\n`kubectl label nodes node2 hardware=low-spec`\n11. 第二步驟：新增一個使用這些 labels 的 pod\n#### Demo：使用 labels 的 Node Selector\n1. `cat deployment/helloworld-nodeselector.yml`\n2. `kubectl get nodes --show-labels`\n3. `kubectl create -f deployment/helloworld-nodeselector.yml`\n4. `kubectl get deployments`，這邊會發現新增出來的東西沒有 available\n5. `kubectl get pods`，會發現都在 pending\n6. `kubectl describe pod helloworld-deployment-4129182270-70sdz`，隨便選一個在 pending 的看內容，會發現錯誤在 MatchNodeSelector (1).\n7. `kubectl label nodes minikube hardware=high-spec`\n8. `kubectl get nodes --show-labels`，檢查是否有 hight-spec 的標籤\n9. `kubectl get pods`，就會發現全部啟動了\n10. `kubectl describe pod helloworld-deployment-4129182270-70sdz`，會看到 log 檔，發現啟動失敗，後來就可以啟動了\n#### Health checks\n1. 如果應用**壞掉了**，pod 和 container 仍然繼續運行，應用可能已經沒有再繼續運作了\n2. 如果要**偵測**和**解決**應用的問題，可以運行**health checks**\n3. 有以下兩種 health checks 可以執行\n    - 在 container **定期**執行 **command**\n    - 在 **URL** (HTTP)上定期檢查\n4. 在 Load balancer 後的典型的產品化應用應該要總是有用某種方法執行的 **health checks** 來確保應用的**可用性**和**彈性**\n5. 以下為 health checks 的範例\n```\nlivenessProbe:\n    httpGet:\n        paht: /\n        port: 3000\n    initailDelaySeconds: 15\n    timeoutSeconds: 30\n```\n#### Demo：Health checks\n1. `kubectl create -f deployment/helloworld-healthcheck.yml`\n2. `kubectl get pods`\n3. `kubectl describe pod helloworld-deployment-583969349-0m0p8`，會發現裡面有一個 Liveness 的選項\n4. `kubectl edit deployment/helloworld-deployment`，進去會看到 livenessProbe，可以進行編輯\n#### Secrets\n1. Secrets 提供一種在 Kubernetes 的方法，可以分配 **credentials**、**keys**、**passwords** 和 **\"secret\" data** 給 pods\n2. Kubernetes 自己本身也使用 Secrets 機制來提供 credentials 以存取內部 API\n3. 也可以使用**同樣的機制**來提供 secrets 給應用\n4. Secrets 是一種提供 secrets 的方法，Kubernetes 原生的\n    - 如果不想使用 Secrets，還是有**其它方法**可以讓 container 取得它的 secrets(例如：在應用裡使用 **external vault services**)\n5. Secrets 可以使用以下方式來使用\n    - 以**環境變數**的方法使用 Secrets\n    - 在 pod 裡以**檔案**的方式使用 Secrets\n        - 這個設定 **volumes** 一定要被掛接在 container 裡\n        - 在這個 volume 有**檔案** \n        - 可以被使用在 **dotenv** 檔案或應用可以直接閱讀檔案\n    - 使用 **external image** 來 pull secrets (從**private image registry**)\n6. 使用檔案來產生 secrets\n`echo -n \"root\" > ./username.txt`\n`echo -n \"password\" > ./password.txt`\n`kubectl create secret generic db-user-pass --from-file=./usernmae.txt --from-file=./password.txt`\n7. secreat 可以是 SSH key 或是 SSL 憑證\n`kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert=ssl-cert=mysslcert.crt`\n8. 使用 YAML 產生 secrets\n    - 使用 base64 產生 password 和 username\n    `echo -n \"root\" | base64`\n9. 完成創建 YAML 檔案，可以直接使用 kubectl 創建\n`kubectl create -f secrets-db-secret.yml`\n10. 可以創建 pods 並且 expose secrets 為環境變數\n`name: SECRET_USERNAME`\n11. 或者，也可以在檔案內提供 secrets\n```\nvolumeMount:\n-name: credvolume\n mountPath: /etc/creds\n readOnly: true\nvolumes:\n-name: credvolume\nsecret:\n secretName: db-secrets\n```\n#### Demo：使用 Volumes 的 Credentails\n1. `cat deployment/helloworld-secrets.yml`\n2. `kubectl create -f deployment/helloworld-secrets.yml`\n3. `cat deployment/helloworld-secrets-volumes.yml`\n4. `kubectl create -f deployment/helloworld-secrets-volumes.yml`\n5. `kubectl describe pod helloworld-deployment-292348803-34dq4`\n6. `kubectl exec helloworld-deployment-292348803-34dq4 -i -t -- /bin/bash`\n7. `cat /etc/creds/username`\n8. `cat /etc/creds/password`\n9. `mount`\n#### Demo：在 kubernetes 上運行 WordPress\n1. `cat wordpress/wordpress-secrets.yml`\n2. `cat wordpress/wordpress-single-deployment-no-volumes.yml`\n3. `kubectl create -f wordpress/wordpress-secrets.yml`\n4. `kubectl create -f wordpress/wordpress-single-deployment-no-volumes.yml`\n5. `kubectl get pods`\n6. `kubectl describe pod wordpress-deployment-2401615361-1j6rw`\n7. `cat wordpress/wordpress-service.yml`\n8. `kubectl create -f wordpress/wordpress-service.yml`\n9. `minikube service wordpress-service --url`\n10. `kubectl delete pod/wordpress-deployment-2401615361-1j6rw`\n11. `kubectl get pods`，刪除之後會發現 pod 依然還在\n#### Web UI\n1. Kubernetes 自帶 **Web UI**，可以取代 kubectl 指令\n2. 它可以用來\n    - cluster 上運行的應用**總覽**\n    - **創建**和**修改**個別 Kubernetes **資源**和**工作量**(像是 kubectl create 和 delete)\n    - 取得**資源狀態**的資訊(像是 kubectl describe pod)\n3. 一般來說，可以用 https://<kubernetes0master>/ui 來存取 kubernetes Web UI\n4. 如果不能存取(例如：部署類型沒有啟動功能)，可以手動安裝：\n`kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml`\n5. 如果被詢問密碼，可以用以下方式取得密碼\n`kubectl config view`\n6. 如果使用 minikube 可以使用下列命令啟動 dashboard\n`minikube dashboard`\n7. 如果想要知道 url\n`minikube dashboard --url`\n#### Demo：Web UI\n1. `minikube dashboard --url`","source":"_posts/Kubernetes-快速學習自我挑戰-Day3.md","raw":"---\ntitle: Kubernetes 快速學習自我挑戰 Day3\nthumbnail:\n  - /images/learning/kubernetes/kubernetesday3.png\ndate: 2017-08-15 04:47:58\ncategories: 學習歷程\ntags: Kubernetes\n---\n<img src=\"/images/learning/kubernetes/kubernetesday3.png\">\n\n***\n### Kubernetes 觀念簡介\n#### Service\n1. **Pods** 是非常**動態的**，它們在 Kubernetes 上面是來去自如的\n    - 當使用 **Replication Controller**，pods 在擴展的操作時是**被終止的**且再被創建的\n    - 當使用 **Deployments**，且在**更新** image 版本的時候，pods 會**被終止**且創建一個新的 pods 取代舊的\n2. 這就是為什麼 pods 不應該被直接存取，而是透過 **Service**\n3. 一個服務是在 \"mortal\" pods 和其它 **services** 或**終端使用者**之間的**邏輯橋樑**\n4. 當使用 \"kubectl expose\" 命令，就會為 pod 創建一個新的服務，如此一來它就可以被外部存取\n5. 創建一個服務會為 pod(s) 創建一個 endpoint\n    - **ClusterIP**：一個虛擬 ip 位址只能從 cluster 裡面被存取(這是預設)\n    - **NodePort**：在每一個 node 都使用一樣的 port，而且可以被外部存取\n    - **LoadBalancer**：LoadBalance 是由**雲端主機商**建立的，它會路由外部網路到每一個在 NodePort 上的 node (AWS 上的 ELB 服務)\n6. 以上所提到的選項可以使用的只有創建 **虛擬 IPs** 或 **ports**\n7. 它還有使用 **DNS 名稱**的可能性\n    - **ExternalName** 可以為 service 提供 DNS 名稱\n    - 例如：為 service discovery 使用 DNS\n    - 它只有在 **DNS add-on** 啟動的時候可以使用\n8. 筆記：預設的服務只能運行在 30000-32767 port 之間，但是可以在 kube-apiserver 的命令 argument 加上 --service-node-port-range= 來改變這種特性 (在 init scripts)\n#### Demo：Service\n1. `kubectl create -f first-app/helloworld.yml`\n2. `kubectl describe pod nodehelloworld.example.com`\n3. `cat first-app/helloworld-nodeport-service.yml`\n4. `kubectl create -f first-app/helloworld-nodeport-service.yml`\n5. `minikube service helloworld-service --url`\n6. `curl http://192.168.99.100:31001`\n7. `kubectl describe svc helloworld-service`\n8. `kubectl get svc`\n9. `kubectl delete svc helloworld-service`\n10. `kubectl create -f first-app/helloworld-nodeport-service.yml`\n11. `kubectl describe svc helloworld-service`，會發現 ip 不一樣了\n#### Labels\n1. Labels 是 key/value pairs，而且可以連接到 objects\n    - Labels 在 AWS 或其它雲端服務商裡就像 **tags** ，且用來標籤 resource\n2. 可以 **label** objects，例如 pod，要跟隨以下組織架構\n    - **Key**：environment - **Value**：dev/staging/qa/prod\n    - **Key**：department - **Value**：engineering/finance/marketing\n3. 在上一個範例，已經使用 label 來標籤 pods 了\n4. Labels **不是獨一無二**且可以增加**多重標籤**到一個 object 上面\n5. 一旦 labels 連結到 objects，就可以使用過濾器來縮小結果\n    - 這叫做 **Label Selectors**\n6. 使用 Label Selector 可以使用 **matching expressions** 來匹配 labels\n    - 例如：特定的 pod 只能運行在「environment」標籤上的 node 等同於 「development」\n    - 更複雜的匹配：「environment」必須要是「development」或「qa」\n7. 也可以用 labels 來標籤 **nodes**\n8. 一旦 nodes 被標籤，就可以使用 **label selector** 來讓 pods 只能運行在 **特定 nodes**\n9. 在特定設置的 nodes 上運行一個 pod 有必要的**兩步驟**\n    - 第一步驟要**標籤** node\n    - 第二步驟要新增一個 **nodeSelector** 到 pod 組態設定\n10. 第一步驟：新增一個或是多數 labels 到 nodes 上\n`kubectl label nodes node1 hardware=high-spec`\n`kubectl label nodes node2 hardware=low-spec`\n11. 第二步驟：新增一個使用這些 labels 的 pod\n#### Demo：使用 labels 的 Node Selector\n1. `cat deployment/helloworld-nodeselector.yml`\n2. `kubectl get nodes --show-labels`\n3. `kubectl create -f deployment/helloworld-nodeselector.yml`\n4. `kubectl get deployments`，這邊會發現新增出來的東西沒有 available\n5. `kubectl get pods`，會發現都在 pending\n6. `kubectl describe pod helloworld-deployment-4129182270-70sdz`，隨便選一個在 pending 的看內容，會發現錯誤在 MatchNodeSelector (1).\n7. `kubectl label nodes minikube hardware=high-spec`\n8. `kubectl get nodes --show-labels`，檢查是否有 hight-spec 的標籤\n9. `kubectl get pods`，就會發現全部啟動了\n10. `kubectl describe pod helloworld-deployment-4129182270-70sdz`，會看到 log 檔，發現啟動失敗，後來就可以啟動了\n#### Health checks\n1. 如果應用**壞掉了**，pod 和 container 仍然繼續運行，應用可能已經沒有再繼續運作了\n2. 如果要**偵測**和**解決**應用的問題，可以運行**health checks**\n3. 有以下兩種 health checks 可以執行\n    - 在 container **定期**執行 **command**\n    - 在 **URL** (HTTP)上定期檢查\n4. 在 Load balancer 後的典型的產品化應用應該要總是有用某種方法執行的 **health checks** 來確保應用的**可用性**和**彈性**\n5. 以下為 health checks 的範例\n```\nlivenessProbe:\n    httpGet:\n        paht: /\n        port: 3000\n    initailDelaySeconds: 15\n    timeoutSeconds: 30\n```\n#### Demo：Health checks\n1. `kubectl create -f deployment/helloworld-healthcheck.yml`\n2. `kubectl get pods`\n3. `kubectl describe pod helloworld-deployment-583969349-0m0p8`，會發現裡面有一個 Liveness 的選項\n4. `kubectl edit deployment/helloworld-deployment`，進去會看到 livenessProbe，可以進行編輯\n#### Secrets\n1. Secrets 提供一種在 Kubernetes 的方法，可以分配 **credentials**、**keys**、**passwords** 和 **\"secret\" data** 給 pods\n2. Kubernetes 自己本身也使用 Secrets 機制來提供 credentials 以存取內部 API\n3. 也可以使用**同樣的機制**來提供 secrets 給應用\n4. Secrets 是一種提供 secrets 的方法，Kubernetes 原生的\n    - 如果不想使用 Secrets，還是有**其它方法**可以讓 container 取得它的 secrets(例如：在應用裡使用 **external vault services**)\n5. Secrets 可以使用以下方式來使用\n    - 以**環境變數**的方法使用 Secrets\n    - 在 pod 裡以**檔案**的方式使用 Secrets\n        - 這個設定 **volumes** 一定要被掛接在 container 裡\n        - 在這個 volume 有**檔案** \n        - 可以被使用在 **dotenv** 檔案或應用可以直接閱讀檔案\n    - 使用 **external image** 來 pull secrets (從**private image registry**)\n6. 使用檔案來產生 secrets\n`echo -n \"root\" > ./username.txt`\n`echo -n \"password\" > ./password.txt`\n`kubectl create secret generic db-user-pass --from-file=./usernmae.txt --from-file=./password.txt`\n7. secreat 可以是 SSH key 或是 SSL 憑證\n`kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert=ssl-cert=mysslcert.crt`\n8. 使用 YAML 產生 secrets\n    - 使用 base64 產生 password 和 username\n    `echo -n \"root\" | base64`\n9. 完成創建 YAML 檔案，可以直接使用 kubectl 創建\n`kubectl create -f secrets-db-secret.yml`\n10. 可以創建 pods 並且 expose secrets 為環境變數\n`name: SECRET_USERNAME`\n11. 或者，也可以在檔案內提供 secrets\n```\nvolumeMount:\n-name: credvolume\n mountPath: /etc/creds\n readOnly: true\nvolumes:\n-name: credvolume\nsecret:\n secretName: db-secrets\n```\n#### Demo：使用 Volumes 的 Credentails\n1. `cat deployment/helloworld-secrets.yml`\n2. `kubectl create -f deployment/helloworld-secrets.yml`\n3. `cat deployment/helloworld-secrets-volumes.yml`\n4. `kubectl create -f deployment/helloworld-secrets-volumes.yml`\n5. `kubectl describe pod helloworld-deployment-292348803-34dq4`\n6. `kubectl exec helloworld-deployment-292348803-34dq4 -i -t -- /bin/bash`\n7. `cat /etc/creds/username`\n8. `cat /etc/creds/password`\n9. `mount`\n#### Demo：在 kubernetes 上運行 WordPress\n1. `cat wordpress/wordpress-secrets.yml`\n2. `cat wordpress/wordpress-single-deployment-no-volumes.yml`\n3. `kubectl create -f wordpress/wordpress-secrets.yml`\n4. `kubectl create -f wordpress/wordpress-single-deployment-no-volumes.yml`\n5. `kubectl get pods`\n6. `kubectl describe pod wordpress-deployment-2401615361-1j6rw`\n7. `cat wordpress/wordpress-service.yml`\n8. `kubectl create -f wordpress/wordpress-service.yml`\n9. `minikube service wordpress-service --url`\n10. `kubectl delete pod/wordpress-deployment-2401615361-1j6rw`\n11. `kubectl get pods`，刪除之後會發現 pod 依然還在\n#### Web UI\n1. Kubernetes 自帶 **Web UI**，可以取代 kubectl 指令\n2. 它可以用來\n    - cluster 上運行的應用**總覽**\n    - **創建**和**修改**個別 Kubernetes **資源**和**工作量**(像是 kubectl create 和 delete)\n    - 取得**資源狀態**的資訊(像是 kubectl describe pod)\n3. 一般來說，可以用 https://<kubernetes0master>/ui 來存取 kubernetes Web UI\n4. 如果不能存取(例如：部署類型沒有啟動功能)，可以手動安裝：\n`kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml`\n5. 如果被詢問密碼，可以用以下方式取得密碼\n`kubectl config view`\n6. 如果使用 minikube 可以使用下列命令啟動 dashboard\n`minikube dashboard`\n7. 如果想要知道 url\n`minikube dashboard --url`\n#### Demo：Web UI\n1. `minikube dashboard --url`","slug":"Kubernetes-快速學習自我挑戰-Day3","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwe000k7ifats26kzeb","content":"<img src=\"/images/learning/kubernetes/kubernetesday3.png\">\n<hr>\n<h3>Kubernetes 觀念簡介</h3>\n<h4>Service</h4>\n<ol>\n<li><strong>Pods</strong> 是非常<strong>動態的</strong>，它們在 Kubernetes 上面是來去自如的\n<ul>\n<li>當使用 <strong>Replication Controller</strong>，pods 在擴展的操作時是<strong>被終止的</strong>且再被創建的</li>\n<li>當使用 <strong>Deployments</strong>，且在<strong>更新</strong> image 版本的時候，pods 會<strong>被終止</strong>且創建一個新的 pods 取代舊的</li>\n</ul>\n</li>\n<li>這就是為什麼 pods 不應該被直接存取，而是透過 <strong>Service</strong></li>\n<li>一個服務是在 “mortal” pods 和其它 <strong>services</strong> 或<strong>終端使用者</strong>之間的<strong>邏輯橋樑</strong></li>\n<li>當使用 “kubectl expose” 命令，就會為 pod 創建一個新的服務，如此一來它就可以被外部存取</li>\n<li>創建一個服務會為 pod(s) 創建一個 endpoint\n<ul>\n<li><strong>ClusterIP</strong>：一個虛擬 ip 位址只能從 cluster 裡面被存取(這是預設)</li>\n<li><strong>NodePort</strong>：在每一個 node 都使用一樣的 port，而且可以被外部存取</li>\n<li><strong>LoadBalancer</strong>：LoadBalance 是由<strong>雲端主機商</strong>建立的，它會路由外部網路到每一個在 NodePort 上的 node (AWS 上的 ELB 服務)</li>\n</ul>\n</li>\n<li>以上所提到的選項可以使用的只有創建 <strong>虛擬 IPs</strong> 或 <strong>ports</strong></li>\n<li>它還有使用 <strong>DNS 名稱</strong>的可能性\n<ul>\n<li><strong>ExternalName</strong> 可以為 service 提供 DNS 名稱</li>\n<li>例如：為 service discovery 使用 DNS</li>\n<li>它只有在 <strong>DNS add-on</strong> 啟動的時候可以使用</li>\n</ul>\n</li>\n<li>筆記：預設的服務只能運行在 30000-32767 port 之間，但是可以在 kube-apiserver 的命令 argument 加上 --service-node-port-range= 來改變這種特性 (在 init scripts)</li>\n</ol>\n<h4>Demo：Service</h4>\n<ol>\n<li><code>kubectl create -f first-app/helloworld.yml</code></li>\n<li><code>kubectl describe pod nodehelloworld.example.com</code></li>\n<li><code>cat first-app/helloworld-nodeport-service.yml</code></li>\n<li><code>kubectl create -f first-app/helloworld-nodeport-service.yml</code></li>\n<li><code>minikube service helloworld-service --url</code></li>\n<li><code>curl http://192.168.99.100:31001</code></li>\n<li><code>kubectl describe svc helloworld-service</code></li>\n<li><code>kubectl get svc</code></li>\n<li><code>kubectl delete svc helloworld-service</code></li>\n<li><code>kubectl create -f first-app/helloworld-nodeport-service.yml</code></li>\n<li><code>kubectl describe svc helloworld-service</code>，會發現 ip 不一樣了</li>\n</ol>\n<h4>Labels</h4>\n<ol>\n<li>Labels 是 key/value pairs，而且可以連接到 objects\n<ul>\n<li>Labels 在 AWS 或其它雲端服務商裡就像 <strong>tags</strong> ，且用來標籤 resource</li>\n</ul>\n</li>\n<li>可以 <strong>label</strong> objects，例如 pod，要跟隨以下組織架構\n<ul>\n<li><strong>Key</strong>：environment - <strong>Value</strong>：dev/staging/qa/prod</li>\n<li><strong>Key</strong>：department - <strong>Value</strong>：engineering/finance/marketing</li>\n</ul>\n</li>\n<li>在上一個範例，已經使用 label 來標籤 pods 了</li>\n<li>Labels <strong>不是獨一無二</strong>且可以增加<strong>多重標籤</strong>到一個 object 上面</li>\n<li>一旦 labels 連結到 objects，就可以使用過濾器來縮小結果\n<ul>\n<li>這叫做 <strong>Label Selectors</strong></li>\n</ul>\n</li>\n<li>使用 Label Selector 可以使用 <strong>matching expressions</strong> 來匹配 labels\n<ul>\n<li>例如：特定的 pod 只能運行在「environment」標籤上的 node 等同於 「development」</li>\n<li>更複雜的匹配：「environment」必須要是「development」或「qa」</li>\n</ul>\n</li>\n<li>也可以用 labels 來標籤 <strong>nodes</strong></li>\n<li>一旦 nodes 被標籤，就可以使用 <strong>label selector</strong> 來讓 pods 只能運行在 <strong>特定 nodes</strong></li>\n<li>在特定設置的 nodes 上運行一個 pod 有必要的<strong>兩步驟</strong>\n<ul>\n<li>第一步驟要<strong>標籤</strong> node</li>\n<li>第二步驟要新增一個 <strong>nodeSelector</strong> 到 pod 組態設定</li>\n</ul>\n</li>\n<li>第一步驟：新增一個或是多數 labels 到 nodes 上<br>\n<code>kubectl label nodes node1 hardware=high-spec</code><br>\n<code>kubectl label nodes node2 hardware=low-spec</code></li>\n<li>第二步驟：新增一個使用這些 labels 的 pod</li>\n</ol>\n<h4>Demo：使用 labels 的 Node Selector</h4>\n<ol>\n<li><code>cat deployment/helloworld-nodeselector.yml</code></li>\n<li><code>kubectl get nodes --show-labels</code></li>\n<li><code>kubectl create -f deployment/helloworld-nodeselector.yml</code></li>\n<li><code>kubectl get deployments</code>，這邊會發現新增出來的東西沒有 available</li>\n<li><code>kubectl get pods</code>，會發現都在 pending</li>\n<li><code>kubectl describe pod helloworld-deployment-4129182270-70sdz</code>，隨便選一個在 pending 的看內容，會發現錯誤在 MatchNodeSelector (1).</li>\n<li><code>kubectl label nodes minikube hardware=high-spec</code></li>\n<li><code>kubectl get nodes --show-labels</code>，檢查是否有 hight-spec 的標籤</li>\n<li><code>kubectl get pods</code>，就會發現全部啟動了</li>\n<li><code>kubectl describe pod helloworld-deployment-4129182270-70sdz</code>，會看到 log 檔，發現啟動失敗，後來就可以啟動了</li>\n</ol>\n<h4>Health checks</h4>\n<ol>\n<li>如果應用<strong>壞掉了</strong>，pod 和 container 仍然繼續運行，應用可能已經沒有再繼續運作了</li>\n<li>如果要<strong>偵測</strong>和<strong>解決</strong>應用的問題，可以運行<strong>health checks</strong></li>\n<li>有以下兩種 health checks 可以執行\n<ul>\n<li>在 container <strong>定期</strong>執行 <strong>command</strong></li>\n<li>在 <strong>URL</strong> (HTTP)上定期檢查</li>\n</ul>\n</li>\n<li>在 Load balancer 後的典型的產品化應用應該要總是有用某種方法執行的 <strong>health checks</strong> 來確保應用的<strong>可用性</strong>和<strong>彈性</strong></li>\n<li>以下為 health checks 的範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">livenessProbe:</div><div class=\"line\">    httpGet:</div><div class=\"line\">        paht: /</div><div class=\"line\">        port: 3000</div><div class=\"line\">    initailDelaySeconds: 15</div><div class=\"line\">    timeoutSeconds: 30</div></pre></td></tr></table></figure>\n<h4>Demo：Health checks</h4>\n<ol>\n<li><code>kubectl create -f deployment/helloworld-healthcheck.yml</code></li>\n<li><code>kubectl get pods</code></li>\n<li><code>kubectl describe pod helloworld-deployment-583969349-0m0p8</code>，會發現裡面有一個 Liveness 的選項</li>\n<li><code>kubectl edit deployment/helloworld-deployment</code>，進去會看到 livenessProbe，可以進行編輯</li>\n</ol>\n<h4>Secrets</h4>\n<ol>\n<li>Secrets 提供一種在 Kubernetes 的方法，可以分配 <strong>credentials</strong>、<strong>keys</strong>、<strong>passwords</strong> 和 <strong>“secret” data</strong> 給 pods</li>\n<li>Kubernetes 自己本身也使用 Secrets 機制來提供 credentials 以存取內部 API</li>\n<li>也可以使用<strong>同樣的機制</strong>來提供 secrets 給應用</li>\n<li>Secrets 是一種提供 secrets 的方法，Kubernetes 原生的\n<ul>\n<li>如果不想使用 Secrets，還是有<strong>其它方法</strong>可以讓 container 取得它的 secrets(例如：在應用裡使用 <strong>external vault services</strong>)</li>\n</ul>\n</li>\n<li>Secrets 可以使用以下方式來使用\n<ul>\n<li>以<strong>環境變數</strong>的方法使用 Secrets</li>\n<li>在 pod 裡以<strong>檔案</strong>的方式使用 Secrets\n<ul>\n<li>這個設定 <strong>volumes</strong> 一定要被掛接在 container 裡</li>\n<li>在這個 volume 有<strong>檔案</strong></li>\n<li>可以被使用在 <strong>dotenv</strong> 檔案或應用可以直接閱讀檔案</li>\n</ul>\n</li>\n<li>使用 <strong>external image</strong> 來 pull secrets (從<strong>private image registry</strong>)</li>\n</ul>\n</li>\n<li>使用檔案來產生 secrets<br>\n<code>echo -n &quot;root&quot; &gt; ./username.txt</code><br>\n<code>echo -n &quot;password&quot; &gt; ./password.txt</code><br>\n<code>kubectl create secret generic db-user-pass --from-file=./usernmae.txt --from-file=./password.txt</code></li>\n<li>secreat 可以是 SSH key 或是 SSL 憑證<br>\n<code>kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert=ssl-cert=mysslcert.crt</code></li>\n<li>使用 YAML 產生 secrets\n<ul>\n<li>使用 base64 產生 password 和 username<br>\n<code>echo -n &quot;root&quot; | base64</code></li>\n</ul>\n</li>\n<li>完成創建 YAML 檔案，可以直接使用 kubectl 創建<br>\n<code>kubectl create -f secrets-db-secret.yml</code></li>\n<li>可以創建 pods 並且 expose secrets 為環境變數<br>\n<code>name: SECRET_USERNAME</code></li>\n<li>或者，也可以在檔案內提供 secrets</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">volumeMount:</div><div class=\"line\">-name: credvolume</div><div class=\"line\"> mountPath: /etc/creds</div><div class=\"line\"> readOnly: true</div><div class=\"line\">volumes:</div><div class=\"line\">-name: credvolume</div><div class=\"line\">secret:</div><div class=\"line\"> secretName: db-secrets</div></pre></td></tr></table></figure>\n<h4>Demo：使用 Volumes 的 Credentails</h4>\n<ol>\n<li><code>cat deployment/helloworld-secrets.yml</code></li>\n<li><code>kubectl create -f deployment/helloworld-secrets.yml</code></li>\n<li><code>cat deployment/helloworld-secrets-volumes.yml</code></li>\n<li><code>kubectl create -f deployment/helloworld-secrets-volumes.yml</code></li>\n<li><code>kubectl describe pod helloworld-deployment-292348803-34dq4</code></li>\n<li><code>kubectl exec helloworld-deployment-292348803-34dq4 -i -t -- /bin/bash</code></li>\n<li><code>cat /etc/creds/username</code></li>\n<li><code>cat /etc/creds/password</code></li>\n<li><code>mount</code></li>\n</ol>\n<h4>Demo：在 kubernetes 上運行 WordPress</h4>\n<ol>\n<li><code>cat wordpress/wordpress-secrets.yml</code></li>\n<li><code>cat wordpress/wordpress-single-deployment-no-volumes.yml</code></li>\n<li><code>kubectl create -f wordpress/wordpress-secrets.yml</code></li>\n<li><code>kubectl create -f wordpress/wordpress-single-deployment-no-volumes.yml</code></li>\n<li><code>kubectl get pods</code></li>\n<li><code>kubectl describe pod wordpress-deployment-2401615361-1j6rw</code></li>\n<li><code>cat wordpress/wordpress-service.yml</code></li>\n<li><code>kubectl create -f wordpress/wordpress-service.yml</code></li>\n<li><code>minikube service wordpress-service --url</code></li>\n<li><code>kubectl delete pod/wordpress-deployment-2401615361-1j6rw</code></li>\n<li><code>kubectl get pods</code>，刪除之後會發現 pod 依然還在</li>\n</ol>\n<h4>Web UI</h4>\n<ol>\n<li>Kubernetes 自帶 <strong>Web UI</strong>，可以取代 kubectl 指令</li>\n<li>它可以用來\n<ul>\n<li>cluster 上運行的應用<strong>總覽</strong></li>\n<li><strong>創建</strong>和<strong>修改</strong>個別 Kubernetes <strong>資源</strong>和<strong>工作量</strong>(像是 kubectl create 和 delete)</li>\n<li>取得<strong>資源狀態</strong>的資訊(像是 kubectl describe pod)</li>\n</ul>\n</li>\n<li>一般來說，可以用 https://<kubernetes0master>/ui 來存取 kubernetes Web UI</kubernetes0master></li>\n<li>如果不能存取(例如：部署類型沒有啟動功能)，可以手動安裝：<br>\n<code>kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml</code></li>\n<li>如果被詢問密碼，可以用以下方式取得密碼<br>\n<code>kubectl config view</code></li>\n<li>如果使用 minikube 可以使用下列命令啟動 dashboard<br>\n<code>minikube dashboard</code></li>\n<li>如果想要知道 url<br>\n<code>minikube dashboard --url</code></li>\n</ol>\n<h4>Demo：Web UI</h4>\n<ol>\n<li><code>minikube dashboard --url</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/kubernetes/kubernetesday3.png\">\n<hr>\n<h3>Kubernetes 觀念簡介</h3>\n<h4>Service</h4>\n<ol>\n<li><strong>Pods</strong> 是非常<strong>動態的</strong>，它們在 Kubernetes 上面是來去自如的\n<ul>\n<li>當使用 <strong>Replication Controller</strong>，pods 在擴展的操作時是<strong>被終止的</strong>且再被創建的</li>\n<li>當使用 <strong>Deployments</strong>，且在<strong>更新</strong> image 版本的時候，pods 會<strong>被終止</strong>且創建一個新的 pods 取代舊的</li>\n</ul>\n</li>\n<li>這就是為什麼 pods 不應該被直接存取，而是透過 <strong>Service</strong></li>\n<li>一個服務是在 “mortal” pods 和其它 <strong>services</strong> 或<strong>終端使用者</strong>之間的<strong>邏輯橋樑</strong></li>\n<li>當使用 “kubectl expose” 命令，就會為 pod 創建一個新的服務，如此一來它就可以被外部存取</li>\n<li>創建一個服務會為 pod(s) 創建一個 endpoint\n<ul>\n<li><strong>ClusterIP</strong>：一個虛擬 ip 位址只能從 cluster 裡面被存取(這是預設)</li>\n<li><strong>NodePort</strong>：在每一個 node 都使用一樣的 port，而且可以被外部存取</li>\n<li><strong>LoadBalancer</strong>：LoadBalance 是由<strong>雲端主機商</strong>建立的，它會路由外部網路到每一個在 NodePort 上的 node (AWS 上的 ELB 服務)</li>\n</ul>\n</li>\n<li>以上所提到的選項可以使用的只有創建 <strong>虛擬 IPs</strong> 或 <strong>ports</strong></li>\n<li>它還有使用 <strong>DNS 名稱</strong>的可能性\n<ul>\n<li><strong>ExternalName</strong> 可以為 service 提供 DNS 名稱</li>\n<li>例如：為 service discovery 使用 DNS</li>\n<li>它只有在 <strong>DNS add-on</strong> 啟動的時候可以使用</li>\n</ul>\n</li>\n<li>筆記：預設的服務只能運行在 30000-32767 port 之間，但是可以在 kube-apiserver 的命令 argument 加上 --service-node-port-range= 來改變這種特性 (在 init scripts)</li>\n</ol>\n<h4>Demo：Service</h4>\n<ol>\n<li><code>kubectl create -f first-app/helloworld.yml</code></li>\n<li><code>kubectl describe pod nodehelloworld.example.com</code></li>\n<li><code>cat first-app/helloworld-nodeport-service.yml</code></li>\n<li><code>kubectl create -f first-app/helloworld-nodeport-service.yml</code></li>\n<li><code>minikube service helloworld-service --url</code></li>\n<li><code>curl http://192.168.99.100:31001</code></li>\n<li><code>kubectl describe svc helloworld-service</code></li>\n<li><code>kubectl get svc</code></li>\n<li><code>kubectl delete svc helloworld-service</code></li>\n<li><code>kubectl create -f first-app/helloworld-nodeport-service.yml</code></li>\n<li><code>kubectl describe svc helloworld-service</code>，會發現 ip 不一樣了</li>\n</ol>\n<h4>Labels</h4>\n<ol>\n<li>Labels 是 key/value pairs，而且可以連接到 objects\n<ul>\n<li>Labels 在 AWS 或其它雲端服務商裡就像 <strong>tags</strong> ，且用來標籤 resource</li>\n</ul>\n</li>\n<li>可以 <strong>label</strong> objects，例如 pod，要跟隨以下組織架構\n<ul>\n<li><strong>Key</strong>：environment - <strong>Value</strong>：dev/staging/qa/prod</li>\n<li><strong>Key</strong>：department - <strong>Value</strong>：engineering/finance/marketing</li>\n</ul>\n</li>\n<li>在上一個範例，已經使用 label 來標籤 pods 了</li>\n<li>Labels <strong>不是獨一無二</strong>且可以增加<strong>多重標籤</strong>到一個 object 上面</li>\n<li>一旦 labels 連結到 objects，就可以使用過濾器來縮小結果\n<ul>\n<li>這叫做 <strong>Label Selectors</strong></li>\n</ul>\n</li>\n<li>使用 Label Selector 可以使用 <strong>matching expressions</strong> 來匹配 labels\n<ul>\n<li>例如：特定的 pod 只能運行在「environment」標籤上的 node 等同於 「development」</li>\n<li>更複雜的匹配：「environment」必須要是「development」或「qa」</li>\n</ul>\n</li>\n<li>也可以用 labels 來標籤 <strong>nodes</strong></li>\n<li>一旦 nodes 被標籤，就可以使用 <strong>label selector</strong> 來讓 pods 只能運行在 <strong>特定 nodes</strong></li>\n<li>在特定設置的 nodes 上運行一個 pod 有必要的<strong>兩步驟</strong>\n<ul>\n<li>第一步驟要<strong>標籤</strong> node</li>\n<li>第二步驟要新增一個 <strong>nodeSelector</strong> 到 pod 組態設定</li>\n</ul>\n</li>\n<li>第一步驟：新增一個或是多數 labels 到 nodes 上<br>\n<code>kubectl label nodes node1 hardware=high-spec</code><br>\n<code>kubectl label nodes node2 hardware=low-spec</code></li>\n<li>第二步驟：新增一個使用這些 labels 的 pod</li>\n</ol>\n<h4>Demo：使用 labels 的 Node Selector</h4>\n<ol>\n<li><code>cat deployment/helloworld-nodeselector.yml</code></li>\n<li><code>kubectl get nodes --show-labels</code></li>\n<li><code>kubectl create -f deployment/helloworld-nodeselector.yml</code></li>\n<li><code>kubectl get deployments</code>，這邊會發現新增出來的東西沒有 available</li>\n<li><code>kubectl get pods</code>，會發現都在 pending</li>\n<li><code>kubectl describe pod helloworld-deployment-4129182270-70sdz</code>，隨便選一個在 pending 的看內容，會發現錯誤在 MatchNodeSelector (1).</li>\n<li><code>kubectl label nodes minikube hardware=high-spec</code></li>\n<li><code>kubectl get nodes --show-labels</code>，檢查是否有 hight-spec 的標籤</li>\n<li><code>kubectl get pods</code>，就會發現全部啟動了</li>\n<li><code>kubectl describe pod helloworld-deployment-4129182270-70sdz</code>，會看到 log 檔，發現啟動失敗，後來就可以啟動了</li>\n</ol>\n<h4>Health checks</h4>\n<ol>\n<li>如果應用<strong>壞掉了</strong>，pod 和 container 仍然繼續運行，應用可能已經沒有再繼續運作了</li>\n<li>如果要<strong>偵測</strong>和<strong>解決</strong>應用的問題，可以運行<strong>health checks</strong></li>\n<li>有以下兩種 health checks 可以執行\n<ul>\n<li>在 container <strong>定期</strong>執行 <strong>command</strong></li>\n<li>在 <strong>URL</strong> (HTTP)上定期檢查</li>\n</ul>\n</li>\n<li>在 Load balancer 後的典型的產品化應用應該要總是有用某種方法執行的 <strong>health checks</strong> 來確保應用的<strong>可用性</strong>和<strong>彈性</strong></li>\n<li>以下為 health checks 的範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">livenessProbe:</div><div class=\"line\">    httpGet:</div><div class=\"line\">        paht: /</div><div class=\"line\">        port: 3000</div><div class=\"line\">    initailDelaySeconds: 15</div><div class=\"line\">    timeoutSeconds: 30</div></pre></td></tr></table></figure>\n<h4>Demo：Health checks</h4>\n<ol>\n<li><code>kubectl create -f deployment/helloworld-healthcheck.yml</code></li>\n<li><code>kubectl get pods</code></li>\n<li><code>kubectl describe pod helloworld-deployment-583969349-0m0p8</code>，會發現裡面有一個 Liveness 的選項</li>\n<li><code>kubectl edit deployment/helloworld-deployment</code>，進去會看到 livenessProbe，可以進行編輯</li>\n</ol>\n<h4>Secrets</h4>\n<ol>\n<li>Secrets 提供一種在 Kubernetes 的方法，可以分配 <strong>credentials</strong>、<strong>keys</strong>、<strong>passwords</strong> 和 <strong>“secret” data</strong> 給 pods</li>\n<li>Kubernetes 自己本身也使用 Secrets 機制來提供 credentials 以存取內部 API</li>\n<li>也可以使用<strong>同樣的機制</strong>來提供 secrets 給應用</li>\n<li>Secrets 是一種提供 secrets 的方法，Kubernetes 原生的\n<ul>\n<li>如果不想使用 Secrets，還是有<strong>其它方法</strong>可以讓 container 取得它的 secrets(例如：在應用裡使用 <strong>external vault services</strong>)</li>\n</ul>\n</li>\n<li>Secrets 可以使用以下方式來使用\n<ul>\n<li>以<strong>環境變數</strong>的方法使用 Secrets</li>\n<li>在 pod 裡以<strong>檔案</strong>的方式使用 Secrets\n<ul>\n<li>這個設定 <strong>volumes</strong> 一定要被掛接在 container 裡</li>\n<li>在這個 volume 有<strong>檔案</strong></li>\n<li>可以被使用在 <strong>dotenv</strong> 檔案或應用可以直接閱讀檔案</li>\n</ul>\n</li>\n<li>使用 <strong>external image</strong> 來 pull secrets (從<strong>private image registry</strong>)</li>\n</ul>\n</li>\n<li>使用檔案來產生 secrets<br>\n<code>echo -n &quot;root&quot; &gt; ./username.txt</code><br>\n<code>echo -n &quot;password&quot; &gt; ./password.txt</code><br>\n<code>kubectl create secret generic db-user-pass --from-file=./usernmae.txt --from-file=./password.txt</code></li>\n<li>secreat 可以是 SSH key 或是 SSL 憑證<br>\n<code>kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert=ssl-cert=mysslcert.crt</code></li>\n<li>使用 YAML 產生 secrets\n<ul>\n<li>使用 base64 產生 password 和 username<br>\n<code>echo -n &quot;root&quot; | base64</code></li>\n</ul>\n</li>\n<li>完成創建 YAML 檔案，可以直接使用 kubectl 創建<br>\n<code>kubectl create -f secrets-db-secret.yml</code></li>\n<li>可以創建 pods 並且 expose secrets 為環境變數<br>\n<code>name: SECRET_USERNAME</code></li>\n<li>或者，也可以在檔案內提供 secrets</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">volumeMount:</div><div class=\"line\">-name: credvolume</div><div class=\"line\"> mountPath: /etc/creds</div><div class=\"line\"> readOnly: true</div><div class=\"line\">volumes:</div><div class=\"line\">-name: credvolume</div><div class=\"line\">secret:</div><div class=\"line\"> secretName: db-secrets</div></pre></td></tr></table></figure>\n<h4>Demo：使用 Volumes 的 Credentails</h4>\n<ol>\n<li><code>cat deployment/helloworld-secrets.yml</code></li>\n<li><code>kubectl create -f deployment/helloworld-secrets.yml</code></li>\n<li><code>cat deployment/helloworld-secrets-volumes.yml</code></li>\n<li><code>kubectl create -f deployment/helloworld-secrets-volumes.yml</code></li>\n<li><code>kubectl describe pod helloworld-deployment-292348803-34dq4</code></li>\n<li><code>kubectl exec helloworld-deployment-292348803-34dq4 -i -t -- /bin/bash</code></li>\n<li><code>cat /etc/creds/username</code></li>\n<li><code>cat /etc/creds/password</code></li>\n<li><code>mount</code></li>\n</ol>\n<h4>Demo：在 kubernetes 上運行 WordPress</h4>\n<ol>\n<li><code>cat wordpress/wordpress-secrets.yml</code></li>\n<li><code>cat wordpress/wordpress-single-deployment-no-volumes.yml</code></li>\n<li><code>kubectl create -f wordpress/wordpress-secrets.yml</code></li>\n<li><code>kubectl create -f wordpress/wordpress-single-deployment-no-volumes.yml</code></li>\n<li><code>kubectl get pods</code></li>\n<li><code>kubectl describe pod wordpress-deployment-2401615361-1j6rw</code></li>\n<li><code>cat wordpress/wordpress-service.yml</code></li>\n<li><code>kubectl create -f wordpress/wordpress-service.yml</code></li>\n<li><code>minikube service wordpress-service --url</code></li>\n<li><code>kubectl delete pod/wordpress-deployment-2401615361-1j6rw</code></li>\n<li><code>kubectl get pods</code>，刪除之後會發現 pod 依然還在</li>\n</ol>\n<h4>Web UI</h4>\n<ol>\n<li>Kubernetes 自帶 <strong>Web UI</strong>，可以取代 kubectl 指令</li>\n<li>它可以用來\n<ul>\n<li>cluster 上運行的應用<strong>總覽</strong></li>\n<li><strong>創建</strong>和<strong>修改</strong>個別 Kubernetes <strong>資源</strong>和<strong>工作量</strong>(像是 kubectl create 和 delete)</li>\n<li>取得<strong>資源狀態</strong>的資訊(像是 kubectl describe pod)</li>\n</ul>\n</li>\n<li>一般來說，可以用 https://<kubernetes0master>/ui 來存取 kubernetes Web UI</kubernetes0master></li>\n<li>如果不能存取(例如：部署類型沒有啟動功能)，可以手動安裝：<br>\n<code>kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml</code></li>\n<li>如果被詢問密碼，可以用以下方式取得密碼<br>\n<code>kubectl config view</code></li>\n<li>如果使用 minikube 可以使用下列命令啟動 dashboard<br>\n<code>minikube dashboard</code></li>\n<li>如果想要知道 url<br>\n<code>minikube dashboard --url</code></li>\n</ol>\n<h4>Demo：Web UI</h4>\n<ol>\n<li><code>minikube dashboard --url</code></li>\n</ol>\n"},{"title":"Jenkins 快速學習自我挑戰 Day1","thumbnail":["/images/learning/jenkins/jenkinsday1.png"],"date":"2017-09-02T15:49:25.000Z","_content":"<img src=\"/images/learning/jenkins/jenkinsday1.png\">\n\n***\n### 介紹 Jenkins\n#### 課程介紹\n1. 目標\n    - 了解關鍵知識\n    - 使用 Jenkins 來設置自動建立\n    - 熟悉基礎 Jenkins\n    - 強烈的起始點\n2. 課程簡介\n    - 介紹 & 核心觀念\n    - 快速安裝\n    - Jenkins UI 概覽\n    - Jenkins 基礎 (自由型式工作)\n    - Maven 專案\n    - 超越基礎\n    - 結論 / Bonus\n#### 課程重點和方法\n1. 課程重點\n    - Mac OS X\n    - 初學者\n    - Java / Maven\n    - Git & Github\n    - Jenkins\n        - 相同的系統\n        - 簡單\n2. 課程方法\n    - 最少量的理論 / 核心觀念\n    - 一步一步實際練習範例\n    - 補充內容\n    - 影片：短且針對重點\n    - 暫停和跟隨\n    - 加入討論\n#### 什麼是 Jenkins？為什麼使用 Jenkins？\n1. 什麼是 Jenkins？\n    - 持續整合 / 建立 Server\n        - 自動軟體建立\n        - Orchestration\n    - 免費 (開源)\n        - 商業支援可用\n    - Powered by Java / Jetty\n        - WAR for Java Web Containers (像是 Tomcat)\n    - [Jenkins.io](https://jenkins.io/)\n2. 為什麼使用 Jenkins？\n    - 剛開始\n        - 手動的\n        - 每一個開發者\n    - 在自己的機器運作\n        - 不需要 Scale\n        - 非常危險\n    - 建立 Servers\n        - 監控改變\n        - 建立 code\n            - 自動地\n            - 定期地\n    - Jenkins\n        - 非常熱門\n        - 強大的\n        - 強壯的社群支持\n        - 極度有彈性的\n#### Jenkins 架構\n1. Host System 裡面會有用 Jetty (預設) 執行的 Container，Jetty 可以存取 JDK tools\n2. 會有一個叫做 service 的程式，他負責啟動、停止和監控 Jetty\n3. 而在 Container 裡面會執行 Jenkins，在 Jenkins 裡面則會放置 View (依照分組或目錄分類)，View 裡面會放置 Project，提供如何建立軟體的指引，Project 會把工作放到 View 外面的 Job Queue，最後由 Executor 來協助 Job Queue 完成\n### 快速安裝\n#### 快速安裝概覽\n1. 安裝流程\n    - 支援多個技能等級\n    - 快速安裝流程 (這一部分)\n    - 完整安裝流程 (Bonus)\n2. Mac OS X 或 mac OS\n    - 應該支援部多數最新版本\n3. Git\n    - Apple - Command Line Tools\n4. 任意文字編輯器\n    - TextMate 2 (包含教學)\n    - Atom\n    - Sublime\n5. Java Software Development Kit (JDK)\n6. Apache Maven 3\n7. Jenkins 2\n8. Mac OS Launch Daemon Service\n    - 啟動 / 暫停 / 重新啟動 Jenkins\n9. 安裝流程的文字教程\n    - 有些人比較喜歡這個方法\n#### Jenkins 快速安裝\n1. 安裝 [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n2. 在 .zshrc 加上這一行\n```\nexport JAVA_HOME=`/usr/libexec/java_home`\n```\n3. [下載 Maven](http://maven.apache.org/)，下載 tar.gz 版本\n4. 使用 Command Line 解壓縮\n`tar -xvzf apache-maven-3.5.0-bin.tar.gz`\n5. 在 .zshrc 加上這兩行\n```\nplugins=(mvn)\nexport MAVEN_HOME=~/Development/maven\nexport PATH=\"${PATH}:${MAVEN_HOME}/bin\"\n```\n6. [下載 LTS 版本](https://jenkins.io/download/)\n    - 安裝完成之後，可以在 http://localhost:8080 看到\n    - Service Daemon\n#### MacOS 上的 Jenkins 服務\n1. 重新啟動 Jenkins\n`http://localhost:8080/restart` \n2. unload 移除組態設定\n`sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist`\n3. load 會重新載入組態設定\n`sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist`","source":"_posts/Jenkins-快速學習自我挑戰-Day1.md","raw":"---\ntitle: Jenkins 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/jenkins/jenkinsday1.png\ndate: 2017-09-02 23:49:25\ncategories: 學習歷程\ntags: Jenkins\n---\n<img src=\"/images/learning/jenkins/jenkinsday1.png\">\n\n***\n### 介紹 Jenkins\n#### 課程介紹\n1. 目標\n    - 了解關鍵知識\n    - 使用 Jenkins 來設置自動建立\n    - 熟悉基礎 Jenkins\n    - 強烈的起始點\n2. 課程簡介\n    - 介紹 & 核心觀念\n    - 快速安裝\n    - Jenkins UI 概覽\n    - Jenkins 基礎 (自由型式工作)\n    - Maven 專案\n    - 超越基礎\n    - 結論 / Bonus\n#### 課程重點和方法\n1. 課程重點\n    - Mac OS X\n    - 初學者\n    - Java / Maven\n    - Git & Github\n    - Jenkins\n        - 相同的系統\n        - 簡單\n2. 課程方法\n    - 最少量的理論 / 核心觀念\n    - 一步一步實際練習範例\n    - 補充內容\n    - 影片：短且針對重點\n    - 暫停和跟隨\n    - 加入討論\n#### 什麼是 Jenkins？為什麼使用 Jenkins？\n1. 什麼是 Jenkins？\n    - 持續整合 / 建立 Server\n        - 自動軟體建立\n        - Orchestration\n    - 免費 (開源)\n        - 商業支援可用\n    - Powered by Java / Jetty\n        - WAR for Java Web Containers (像是 Tomcat)\n    - [Jenkins.io](https://jenkins.io/)\n2. 為什麼使用 Jenkins？\n    - 剛開始\n        - 手動的\n        - 每一個開發者\n    - 在自己的機器運作\n        - 不需要 Scale\n        - 非常危險\n    - 建立 Servers\n        - 監控改變\n        - 建立 code\n            - 自動地\n            - 定期地\n    - Jenkins\n        - 非常熱門\n        - 強大的\n        - 強壯的社群支持\n        - 極度有彈性的\n#### Jenkins 架構\n1. Host System 裡面會有用 Jetty (預設) 執行的 Container，Jetty 可以存取 JDK tools\n2. 會有一個叫做 service 的程式，他負責啟動、停止和監控 Jetty\n3. 而在 Container 裡面會執行 Jenkins，在 Jenkins 裡面則會放置 View (依照分組或目錄分類)，View 裡面會放置 Project，提供如何建立軟體的指引，Project 會把工作放到 View 外面的 Job Queue，最後由 Executor 來協助 Job Queue 完成\n### 快速安裝\n#### 快速安裝概覽\n1. 安裝流程\n    - 支援多個技能等級\n    - 快速安裝流程 (這一部分)\n    - 完整安裝流程 (Bonus)\n2. Mac OS X 或 mac OS\n    - 應該支援部多數最新版本\n3. Git\n    - Apple - Command Line Tools\n4. 任意文字編輯器\n    - TextMate 2 (包含教學)\n    - Atom\n    - Sublime\n5. Java Software Development Kit (JDK)\n6. Apache Maven 3\n7. Jenkins 2\n8. Mac OS Launch Daemon Service\n    - 啟動 / 暫停 / 重新啟動 Jenkins\n9. 安裝流程的文字教程\n    - 有些人比較喜歡這個方法\n#### Jenkins 快速安裝\n1. 安裝 [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n2. 在 .zshrc 加上這一行\n```\nexport JAVA_HOME=`/usr/libexec/java_home`\n```\n3. [下載 Maven](http://maven.apache.org/)，下載 tar.gz 版本\n4. 使用 Command Line 解壓縮\n`tar -xvzf apache-maven-3.5.0-bin.tar.gz`\n5. 在 .zshrc 加上這兩行\n```\nplugins=(mvn)\nexport MAVEN_HOME=~/Development/maven\nexport PATH=\"${PATH}:${MAVEN_HOME}/bin\"\n```\n6. [下載 LTS 版本](https://jenkins.io/download/)\n    - 安裝完成之後，可以在 http://localhost:8080 看到\n    - Service Daemon\n#### MacOS 上的 Jenkins 服務\n1. 重新啟動 Jenkins\n`http://localhost:8080/restart` \n2. unload 移除組態設定\n`sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist`\n3. load 會重新載入組態設定\n`sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist`","slug":"Jenkins-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwf000o7ifalpcw5v90","content":"<img src=\"/images/learning/jenkins/jenkinsday1.png\">\n<hr>\n<h3>介紹 Jenkins</h3>\n<h4>課程介紹</h4>\n<ol>\n<li>目標\n<ul>\n<li>了解關鍵知識</li>\n<li>使用 Jenkins 來設置自動建立</li>\n<li>熟悉基礎 Jenkins</li>\n<li>強烈的起始點</li>\n</ul>\n</li>\n<li>課程簡介\n<ul>\n<li>介紹 &amp; 核心觀念</li>\n<li>快速安裝</li>\n<li>Jenkins UI 概覽</li>\n<li>Jenkins 基礎 (自由型式工作)</li>\n<li>Maven 專案</li>\n<li>超越基礎</li>\n<li>結論 / Bonus</li>\n</ul>\n</li>\n</ol>\n<h4>課程重點和方法</h4>\n<ol>\n<li>課程重點\n<ul>\n<li>Mac OS X</li>\n<li>初學者</li>\n<li>Java / Maven</li>\n<li>Git &amp; Github</li>\n<li>Jenkins\n<ul>\n<li>相同的系統</li>\n<li>簡單</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>課程方法\n<ul>\n<li>最少量的理論 / 核心觀念</li>\n<li>一步一步實際練習範例</li>\n<li>補充內容</li>\n<li>影片：短且針對重點</li>\n<li>暫停和跟隨</li>\n<li>加入討論</li>\n</ul>\n</li>\n</ol>\n<h4>什麼是 Jenkins？為什麼使用 Jenkins？</h4>\n<ol>\n<li>什麼是 Jenkins？\n<ul>\n<li>持續整合 / 建立 Server\n<ul>\n<li>自動軟體建立</li>\n<li>Orchestration</li>\n</ul>\n</li>\n<li>免費 (開源)\n<ul>\n<li>商業支援可用</li>\n</ul>\n</li>\n<li>Powered by Java / Jetty\n<ul>\n<li>WAR for Java Web Containers (像是 Tomcat)</li>\n</ul>\n</li>\n<li><a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"external\">Jenkins.io</a></li>\n</ul>\n</li>\n<li>為什麼使用 Jenkins？\n<ul>\n<li>剛開始\n<ul>\n<li>手動的</li>\n<li>每一個開發者</li>\n</ul>\n</li>\n<li>在自己的機器運作\n<ul>\n<li>不需要 Scale</li>\n<li>非常危險</li>\n</ul>\n</li>\n<li>建立 Servers\n<ul>\n<li>監控改變</li>\n<li>建立 code\n<ul>\n<li>自動地</li>\n<li>定期地</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Jenkins\n<ul>\n<li>非常熱門</li>\n<li>強大的</li>\n<li>強壯的社群支持</li>\n<li>極度有彈性的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4>Jenkins 架構</h4>\n<ol>\n<li>Host System 裡面會有用 Jetty (預設) 執行的 Container，Jetty 可以存取 JDK tools</li>\n<li>會有一個叫做 service 的程式，他負責啟動、停止和監控 Jetty</li>\n<li>而在 Container 裡面會執行 Jenkins，在 Jenkins 裡面則會放置 View (依照分組或目錄分類)，View 裡面會放置 Project，提供如何建立軟體的指引，Project 會把工作放到 View 外面的 Job Queue，最後由 Executor 來協助 Job Queue 完成</li>\n</ol>\n<h3>快速安裝</h3>\n<h4>快速安裝概覽</h4>\n<ol>\n<li>安裝流程\n<ul>\n<li>支援多個技能等級</li>\n<li>快速安裝流程 (這一部分)</li>\n<li>完整安裝流程 (Bonus)</li>\n</ul>\n</li>\n<li>Mac OS X 或 mac OS\n<ul>\n<li>應該支援部多數最新版本</li>\n</ul>\n</li>\n<li>Git\n<ul>\n<li>Apple - Command Line Tools</li>\n</ul>\n</li>\n<li>任意文字編輯器\n<ul>\n<li>TextMate 2 (包含教學)</li>\n<li>Atom</li>\n<li>Sublime</li>\n</ul>\n</li>\n<li>Java Software Development Kit (JDK)</li>\n<li>Apache Maven 3</li>\n<li>Jenkins 2</li>\n<li>Mac OS Launch Daemon Service\n<ul>\n<li>啟動 / 暫停 / 重新啟動 Jenkins</li>\n</ul>\n</li>\n<li>安裝流程的文字教程\n<ul>\n<li>有些人比較喜歡這個方法</li>\n</ul>\n</li>\n</ol>\n<h4>Jenkins 快速安裝</h4>\n<ol>\n<li>安裝 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">JDK</a></li>\n<li>在 .zshrc 加上這一行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=`/usr/libexec/java_home`</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><a href=\"http://maven.apache.org/\" target=\"_blank\" rel=\"external\">下載 Maven</a>，下載 tar.gz 版本</li>\n<li>使用 Command Line 解壓縮<br>\n<code>tar -xvzf apache-maven-3.5.0-bin.tar.gz</code></li>\n<li>在 .zshrc 加上這兩行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins=(mvn)</div><div class=\"line\">export MAVEN_HOME=~/Development/maven</div><div class=\"line\">export PATH=&quot;$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin&quot;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"external\">下載 LTS 版本</a>\n<ul>\n<li>安裝完成之後，可以在 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"external\">http://localhost:8080</a> 看到</li>\n<li>Service Daemon</li>\n</ul>\n</li>\n</ol>\n<h4>MacOS 上的 Jenkins 服務</h4>\n<ol>\n<li>重新啟動 Jenkins<br>\n<code>http://localhost:8080/restart</code></li>\n<li>unload 移除組態設定<br>\n<code>sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</code></li>\n<li>load 會重新載入組態設定<br>\n<code>sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/jenkins/jenkinsday1.png\">\n<hr>\n<h3>介紹 Jenkins</h3>\n<h4>課程介紹</h4>\n<ol>\n<li>目標\n<ul>\n<li>了解關鍵知識</li>\n<li>使用 Jenkins 來設置自動建立</li>\n<li>熟悉基礎 Jenkins</li>\n<li>強烈的起始點</li>\n</ul>\n</li>\n<li>課程簡介\n<ul>\n<li>介紹 &amp; 核心觀念</li>\n<li>快速安裝</li>\n<li>Jenkins UI 概覽</li>\n<li>Jenkins 基礎 (自由型式工作)</li>\n<li>Maven 專案</li>\n<li>超越基礎</li>\n<li>結論 / Bonus</li>\n</ul>\n</li>\n</ol>\n<h4>課程重點和方法</h4>\n<ol>\n<li>課程重點\n<ul>\n<li>Mac OS X</li>\n<li>初學者</li>\n<li>Java / Maven</li>\n<li>Git &amp; Github</li>\n<li>Jenkins\n<ul>\n<li>相同的系統</li>\n<li>簡單</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>課程方法\n<ul>\n<li>最少量的理論 / 核心觀念</li>\n<li>一步一步實際練習範例</li>\n<li>補充內容</li>\n<li>影片：短且針對重點</li>\n<li>暫停和跟隨</li>\n<li>加入討論</li>\n</ul>\n</li>\n</ol>\n<h4>什麼是 Jenkins？為什麼使用 Jenkins？</h4>\n<ol>\n<li>什麼是 Jenkins？\n<ul>\n<li>持續整合 / 建立 Server\n<ul>\n<li>自動軟體建立</li>\n<li>Orchestration</li>\n</ul>\n</li>\n<li>免費 (開源)\n<ul>\n<li>商業支援可用</li>\n</ul>\n</li>\n<li>Powered by Java / Jetty\n<ul>\n<li>WAR for Java Web Containers (像是 Tomcat)</li>\n</ul>\n</li>\n<li><a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"external\">Jenkins.io</a></li>\n</ul>\n</li>\n<li>為什麼使用 Jenkins？\n<ul>\n<li>剛開始\n<ul>\n<li>手動的</li>\n<li>每一個開發者</li>\n</ul>\n</li>\n<li>在自己的機器運作\n<ul>\n<li>不需要 Scale</li>\n<li>非常危險</li>\n</ul>\n</li>\n<li>建立 Servers\n<ul>\n<li>監控改變</li>\n<li>建立 code\n<ul>\n<li>自動地</li>\n<li>定期地</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Jenkins\n<ul>\n<li>非常熱門</li>\n<li>強大的</li>\n<li>強壯的社群支持</li>\n<li>極度有彈性的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4>Jenkins 架構</h4>\n<ol>\n<li>Host System 裡面會有用 Jetty (預設) 執行的 Container，Jetty 可以存取 JDK tools</li>\n<li>會有一個叫做 service 的程式，他負責啟動、停止和監控 Jetty</li>\n<li>而在 Container 裡面會執行 Jenkins，在 Jenkins 裡面則會放置 View (依照分組或目錄分類)，View 裡面會放置 Project，提供如何建立軟體的指引，Project 會把工作放到 View 外面的 Job Queue，最後由 Executor 來協助 Job Queue 完成</li>\n</ol>\n<h3>快速安裝</h3>\n<h4>快速安裝概覽</h4>\n<ol>\n<li>安裝流程\n<ul>\n<li>支援多個技能等級</li>\n<li>快速安裝流程 (這一部分)</li>\n<li>完整安裝流程 (Bonus)</li>\n</ul>\n</li>\n<li>Mac OS X 或 mac OS\n<ul>\n<li>應該支援部多數最新版本</li>\n</ul>\n</li>\n<li>Git\n<ul>\n<li>Apple - Command Line Tools</li>\n</ul>\n</li>\n<li>任意文字編輯器\n<ul>\n<li>TextMate 2 (包含教學)</li>\n<li>Atom</li>\n<li>Sublime</li>\n</ul>\n</li>\n<li>Java Software Development Kit (JDK)</li>\n<li>Apache Maven 3</li>\n<li>Jenkins 2</li>\n<li>Mac OS Launch Daemon Service\n<ul>\n<li>啟動 / 暫停 / 重新啟動 Jenkins</li>\n</ul>\n</li>\n<li>安裝流程的文字教程\n<ul>\n<li>有些人比較喜歡這個方法</li>\n</ul>\n</li>\n</ol>\n<h4>Jenkins 快速安裝</h4>\n<ol>\n<li>安裝 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">JDK</a></li>\n<li>在 .zshrc 加上這一行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=`/usr/libexec/java_home`</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><a href=\"http://maven.apache.org/\" target=\"_blank\" rel=\"external\">下載 Maven</a>，下載 tar.gz 版本</li>\n<li>使用 Command Line 解壓縮<br>\n<code>tar -xvzf apache-maven-3.5.0-bin.tar.gz</code></li>\n<li>在 .zshrc 加上這兩行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins=(mvn)</div><div class=\"line\">export MAVEN_HOME=~/Development/maven</div><div class=\"line\">export PATH=&quot;$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin&quot;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"external\">下載 LTS 版本</a>\n<ul>\n<li>安裝完成之後，可以在 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"external\">http://localhost:8080</a> 看到</li>\n<li>Service Daemon</li>\n</ul>\n</li>\n</ol>\n<h4>MacOS 上的 Jenkins 服務</h4>\n<ol>\n<li>重新啟動 Jenkins<br>\n<code>http://localhost:8080/restart</code></li>\n<li>unload 移除組態設定<br>\n<code>sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</code></li>\n<li>load 會重新載入組態設定<br>\n<code>sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</code></li>\n</ol>\n"},{"title":"Kubernetes 快速學習自我挑戰 Day4","thumbnail":["/images/learning/kubernetes/kubernetesday4.jpg"],"date":"2017-08-20T06:27:44.000Z","_content":"<img src=\"/images/learning/kubernetes/kubernetesday4.jpg\">\n\n***\n### 進階的主題\n#### 深入 Service\n1. 在 Kubernets 1.3，DNS 是一個**內建**的 service 且會自動使用 addon 管理器啟動\n    - addon 在 **master node** 的 etc/kubernetes/addons **目錄**\n2. DNS 服務可以在 pod 裡面被使用，且**找到其它服務**運行在相同的 cluster 上\n3. **在一個 pod 中**的很多 containers 的架構不需要這種 service，因為它們可以**直接**互相**聯繫**\n    - 在相同 pod 中的 container 可以使用 **localhost:port**\n4. 為了要讓 DNS 可以運作，pod 需要 **Service Definition**\n#### Demo：深入 Service\n1. `cat service-discovery/secrets.yml`\n2. `kubectl create -f service-discovery/secrets.yml`\n3. `cat service-discovery/database.yml`\n4. `cat service-discovery/database-service.yml`\n5. `kubectl create -f service-discovery/database.yml`\n6. `kubectl create -f service-discovery/database-service.yml`\n7. `cat service-discovery/helloworld-db.yml`\n    - 這邊會發現 env 下的 value: database-service，因為在創建 database-service.yml 的 metadata name 也是使用這個名稱\n8. `kubectl create -f service-discovery/helloworld-db.yml`\n9. `kubectl create -f service-discovery/helloworld-db-service.yml`\n10. `minikube service helloworld-db-service --url`\n11. `kubectl get pods`\n12. 確認是否連線到資料庫\n`kubectl logs helloworld-deployment-2141920616-5bzp0`\n13. curl 剛剛取得的 ip\n`curl http://192.168.99.100:30888`\n14. `kubectl exec database -i -t -- mysql -u root -p` 密碼是 rootpassword\n15. `show databases;`\n16. `use helloworld`\n17. `show tables;`\n18. `select * from visits;`\n19. `\\q`\n20. `kubectl run -i --tty busybox --image=busybox --restart=Never -- sh`\n21. `nslookup helloworld-db-service`\n22. `nslookup database-service`\n23. `telnet helloworld-db-service 3000`\n24. `kubectl delete pod busybox`\n#### ConfigMap\n1. 設定參數不是秘密，可以放在 **ConfigMap**\n2. Input 是**重複的** key-value pairs\n3. ConfigMap **key-value pairs** 可以被 app 讀取，使用：\n    - **環境**變數\n    - 在 Pod 設定裡面的 **Container commandline arguments**\n    - 使用 **voulmes**\n4. ConfigMap 也可以包含 **full configuration** 檔案\n    - 例如：網頁伺服器的 config 檔案\n5. 這些檔案可以被使用 volumes 的方式**掛接**，而 volumes 正是 application 放置 config file 的地方\n6. 這樣的方法可以**輸入**配置設置到 containers 裡面，而不需要改變 container 本身\n7. 使用檔案產生 ConfigMap\n```\ndriver=jdbc\ndatabase=postgres\nlookandfeel=1\notherparams=xyz\nparam.with.hierarchy=xyz\nEOF\n```\n`kubectl create configmap app-config --from-file=app.properties`\n8. 可以使用 volume 來 expose ConfigMap 的方式創建 pod\n```\napiVersion: v1\nkind: Pod\nmetadata:\n    name: nodehelloworld.example.com\n    labels:\n        app: helloworld\nspec:\n    containers:\n    - name: k8s-demo\n      image: wardviaene/k8s-demo\n      ports:\n      - containerPort: 3000\n      volumeMounts:\n      - name: config-volume\n      // config 檔案會被存在 /ect/config/driver、/etc/config/param/with/hierarchy\n        mountPath: /etc/config\n      volumes:\n      - name: config-volume\n        configMap:\n          name: app-config\n```\n9. 可以使用環境變數來 expose ConfigMap 的方式創建 pod\n```\napiVersion: v1\nkind: Pod\nmetadata:\n    name: nodehelloworld.example.com\n    labels:\n        app: helloworld\nspec:\n    containers:\n    - name: k8s-demo\n      image: wardviaene/k8s-demo\n      ports:\n      - containerPort: 3000\n      env:\n          - name: DRIVER\n            valueFrom:\n              configMapKeyRef:\n                name: app-config\n                key: driver\n          - name: DATABASE\n          [...]\n```\n#### Demo：ConfigMap\n1. `cat configmap/reverseproxy.conf`\n2. `kubectl create configmap nginx-config --from-file=configmap/reverseproxy.conf`\n3. `kubectl get configmap`\n4. `kubectl get configmap nginx-config -o yaml`\n5. `cat configmap/nginx.yml`\n6. `kubectl create -f configmap/nginx.yml`\n7. `kubectl create -f configmap/nginx-service.yml`\n8. `minikube service helloworld-nginx-service --url`\n9. `curl http://192.168.99.100:31965 -vvv`\n10. `kubectl exec -i -t helloworld-nginx -c nginx -- bash`\n11. `ps x`\n12. `cat /etc/nginx/conf.d/reverseproxy.conf`\n#### Ingress Controller\n1. Ingress 是一個從 Kubernetes 1.1 之後可用的解決方案，用來允許 **inbound connections** 給 cluster\n2. 它是 external **Loadbalancer** 和 **nodePorts** 的替代方案\n    - Ingress 允許**簡單的 expose services**，如果 services 需要從 **cluster 外部** 存取\n3. 如果有 Ingress 就可以在 Kubernetes 運行自己的 **ingress controller** (基本上就是 loadbalancer) \n4. 有預設的 ingress controllers 可以使用，或是也可以**寫自己的** ingress controller\n5. 可以使用 ingress object 來創建 ingress rules\n```\napiVersion: extensions/v1beta1\nkind: ingress\nmetadata:\n    name: helloworld-rules\nspec:\n    rules:\n    - host: helloworld-v1.example.com\n      http:\n          paths:\n          - path: /\n            backend:\n                serviceName: helloworld-v1\n                servicePort: 80\n    - host: hellowrld-v2.example.com\n      http:\n          paths:\n          - path: /\n            backend:\n                serviceName: helloworld-v2\n                servicePort: 80\n```\n#### Demo：Ingress Controller\n1. `cat ingress/nginx-ingress-controller.yml`\n2. `cat ingress/ingress.yml`\n3. `kubectl create -f ingress/ingress.yml`\n4. `kubectl create -f ingress/nginx-ingress-controller.yml`\n5. `kubectl create -f ingress/echoservice.yml`\n6. `kubectl create -f ingress/helloworld-v1.yml`\n7. `kubectl create -f ingress/helloworld-v2.yml`\n8. helloworld-v2 和 v1 的差別在於 image 版本\n9. `minikube ip`\n10. `curl 192.168.99.100`\n11. `curl 192.168.99.100 -H 'Host: helloworld-v1.example.com'`\n12. `curl 192.168.99.100 -H 'Host: helloworld-v2.example.com'`\n13. `kubectl get svc`\n#### Volumes\n1. Kubernetes 裡面的 Volumes 用來**儲存 container 之外的 data**\n2. 當 container **停止**，所有在 container 裡面的資料會 **不見**\n    - 這正是為什麼我們一直執行 **stateless** 的 apps：apps 不會保留 **本地** state，但是會儲存它們的 state 到 **外部 service**\n        - 外部 Service 像是 database，快取伺服器 (例如：MySQL、AWS S3)\n3. Kubernetes 裡面的 Persistent Volumes 可以 **連接一個 volume** 到 container，而檔案會繼續**存在**就算 **container** 停止\n4. Volumes 可以使用不同的 **volume plugins** 來連接\n    - 本地 Volume\n    - AWS Cloud：EBS Storage\n    - Google Cloud：Google Disk\n    - 網路儲存空間：NFS、Cephfs\n    - Microsoft Cloud：Azure Disk\n5. 使用 Volumes 可以在 cluster 上部署 **application with state**\n    - 這些應用必須要在**本地檔案系統**讀/寫檔案，而且需要持續存在\n6. 可以運行 **MySQL** 資料庫且使用 persistent volumes\n    - 雖然這還沒準備好產品化\n    - Volumes 是 Kubernetes 在 2016 年 6 月發佈的，所以還很新，關於這個部分還需要多加**注意**\n7. 如果 **node 停止**運行，pod 會重新排程到另外一個 node，然後 volume 可以被連接到新的 node\n8. 使用 volumes 必須要先**創建 volume**\n9. 使用 volumes 必須要**創建**有 volume definition 的 **pod**\n#### Demo：Volumes\n1. `aws ec2 create-volume --size 10 --region ap-northeast-1 --availability-zone ap-northeast-1a --volume-type gp2`\n2. 把剛剛拿到的 VolumeId 貼近去 `vim volumes/helloworld-with-volume.yml`\n3. `kubectl create -f volumes/helloworld-with-volume.yml`\n4. `kubectl get pod`\n5. `kubectl describe pod helloworld-deployment-2277790027-3c1q2`\n6. `kubectl exec helloworld-deployment-2277790027-3c1q2 -i -t -- bash`\n7. `ls -ahl /myvol/`\n8. `echo 'test' > /myvol/myvol.txt`\n9. `echo 'test2' > /test.txt`\n10. `kubectl drain ip-172-20-49-46.ap-northeast-1.compute.internal --force`\n11. `kubectl get pod`\n12. `kubectl exec helloworld-deployment-2277790027-ll7w0 -i -t -- bash`\n13. `ls -ahl /myvol/myvol.txt`\n14. `ls -ahl /test.txt` => 這會找不到，因為沒有存在 volume，而是存在 container\n15. `kubectl delete -f volumes/helloworld-with-volume.yml`\n16. `aws ec2 delete-volume --volume-id vol-0ae6788e2541f0252 --region ap-northeast-1`","source":"_posts/Kubernetes-快速學習自我挑戰-Day4.md","raw":"---\ntitle: Kubernetes 快速學習自我挑戰 Day4\nthumbnail:\n  - /images/learning/kubernetes/kubernetesday4.jpg\ndate: 2017-08-20 14:27:44\ncategories: 學習歷程\ntags: Kubernetes\n---\n<img src=\"/images/learning/kubernetes/kubernetesday4.jpg\">\n\n***\n### 進階的主題\n#### 深入 Service\n1. 在 Kubernets 1.3，DNS 是一個**內建**的 service 且會自動使用 addon 管理器啟動\n    - addon 在 **master node** 的 etc/kubernetes/addons **目錄**\n2. DNS 服務可以在 pod 裡面被使用，且**找到其它服務**運行在相同的 cluster 上\n3. **在一個 pod 中**的很多 containers 的架構不需要這種 service，因為它們可以**直接**互相**聯繫**\n    - 在相同 pod 中的 container 可以使用 **localhost:port**\n4. 為了要讓 DNS 可以運作，pod 需要 **Service Definition**\n#### Demo：深入 Service\n1. `cat service-discovery/secrets.yml`\n2. `kubectl create -f service-discovery/secrets.yml`\n3. `cat service-discovery/database.yml`\n4. `cat service-discovery/database-service.yml`\n5. `kubectl create -f service-discovery/database.yml`\n6. `kubectl create -f service-discovery/database-service.yml`\n7. `cat service-discovery/helloworld-db.yml`\n    - 這邊會發現 env 下的 value: database-service，因為在創建 database-service.yml 的 metadata name 也是使用這個名稱\n8. `kubectl create -f service-discovery/helloworld-db.yml`\n9. `kubectl create -f service-discovery/helloworld-db-service.yml`\n10. `minikube service helloworld-db-service --url`\n11. `kubectl get pods`\n12. 確認是否連線到資料庫\n`kubectl logs helloworld-deployment-2141920616-5bzp0`\n13. curl 剛剛取得的 ip\n`curl http://192.168.99.100:30888`\n14. `kubectl exec database -i -t -- mysql -u root -p` 密碼是 rootpassword\n15. `show databases;`\n16. `use helloworld`\n17. `show tables;`\n18. `select * from visits;`\n19. `\\q`\n20. `kubectl run -i --tty busybox --image=busybox --restart=Never -- sh`\n21. `nslookup helloworld-db-service`\n22. `nslookup database-service`\n23. `telnet helloworld-db-service 3000`\n24. `kubectl delete pod busybox`\n#### ConfigMap\n1. 設定參數不是秘密，可以放在 **ConfigMap**\n2. Input 是**重複的** key-value pairs\n3. ConfigMap **key-value pairs** 可以被 app 讀取，使用：\n    - **環境**變數\n    - 在 Pod 設定裡面的 **Container commandline arguments**\n    - 使用 **voulmes**\n4. ConfigMap 也可以包含 **full configuration** 檔案\n    - 例如：網頁伺服器的 config 檔案\n5. 這些檔案可以被使用 volumes 的方式**掛接**，而 volumes 正是 application 放置 config file 的地方\n6. 這樣的方法可以**輸入**配置設置到 containers 裡面，而不需要改變 container 本身\n7. 使用檔案產生 ConfigMap\n```\ndriver=jdbc\ndatabase=postgres\nlookandfeel=1\notherparams=xyz\nparam.with.hierarchy=xyz\nEOF\n```\n`kubectl create configmap app-config --from-file=app.properties`\n8. 可以使用 volume 來 expose ConfigMap 的方式創建 pod\n```\napiVersion: v1\nkind: Pod\nmetadata:\n    name: nodehelloworld.example.com\n    labels:\n        app: helloworld\nspec:\n    containers:\n    - name: k8s-demo\n      image: wardviaene/k8s-demo\n      ports:\n      - containerPort: 3000\n      volumeMounts:\n      - name: config-volume\n      // config 檔案會被存在 /ect/config/driver、/etc/config/param/with/hierarchy\n        mountPath: /etc/config\n      volumes:\n      - name: config-volume\n        configMap:\n          name: app-config\n```\n9. 可以使用環境變數來 expose ConfigMap 的方式創建 pod\n```\napiVersion: v1\nkind: Pod\nmetadata:\n    name: nodehelloworld.example.com\n    labels:\n        app: helloworld\nspec:\n    containers:\n    - name: k8s-demo\n      image: wardviaene/k8s-demo\n      ports:\n      - containerPort: 3000\n      env:\n          - name: DRIVER\n            valueFrom:\n              configMapKeyRef:\n                name: app-config\n                key: driver\n          - name: DATABASE\n          [...]\n```\n#### Demo：ConfigMap\n1. `cat configmap/reverseproxy.conf`\n2. `kubectl create configmap nginx-config --from-file=configmap/reverseproxy.conf`\n3. `kubectl get configmap`\n4. `kubectl get configmap nginx-config -o yaml`\n5. `cat configmap/nginx.yml`\n6. `kubectl create -f configmap/nginx.yml`\n7. `kubectl create -f configmap/nginx-service.yml`\n8. `minikube service helloworld-nginx-service --url`\n9. `curl http://192.168.99.100:31965 -vvv`\n10. `kubectl exec -i -t helloworld-nginx -c nginx -- bash`\n11. `ps x`\n12. `cat /etc/nginx/conf.d/reverseproxy.conf`\n#### Ingress Controller\n1. Ingress 是一個從 Kubernetes 1.1 之後可用的解決方案，用來允許 **inbound connections** 給 cluster\n2. 它是 external **Loadbalancer** 和 **nodePorts** 的替代方案\n    - Ingress 允許**簡單的 expose services**，如果 services 需要從 **cluster 外部** 存取\n3. 如果有 Ingress 就可以在 Kubernetes 運行自己的 **ingress controller** (基本上就是 loadbalancer) \n4. 有預設的 ingress controllers 可以使用，或是也可以**寫自己的** ingress controller\n5. 可以使用 ingress object 來創建 ingress rules\n```\napiVersion: extensions/v1beta1\nkind: ingress\nmetadata:\n    name: helloworld-rules\nspec:\n    rules:\n    - host: helloworld-v1.example.com\n      http:\n          paths:\n          - path: /\n            backend:\n                serviceName: helloworld-v1\n                servicePort: 80\n    - host: hellowrld-v2.example.com\n      http:\n          paths:\n          - path: /\n            backend:\n                serviceName: helloworld-v2\n                servicePort: 80\n```\n#### Demo：Ingress Controller\n1. `cat ingress/nginx-ingress-controller.yml`\n2. `cat ingress/ingress.yml`\n3. `kubectl create -f ingress/ingress.yml`\n4. `kubectl create -f ingress/nginx-ingress-controller.yml`\n5. `kubectl create -f ingress/echoservice.yml`\n6. `kubectl create -f ingress/helloworld-v1.yml`\n7. `kubectl create -f ingress/helloworld-v2.yml`\n8. helloworld-v2 和 v1 的差別在於 image 版本\n9. `minikube ip`\n10. `curl 192.168.99.100`\n11. `curl 192.168.99.100 -H 'Host: helloworld-v1.example.com'`\n12. `curl 192.168.99.100 -H 'Host: helloworld-v2.example.com'`\n13. `kubectl get svc`\n#### Volumes\n1. Kubernetes 裡面的 Volumes 用來**儲存 container 之外的 data**\n2. 當 container **停止**，所有在 container 裡面的資料會 **不見**\n    - 這正是為什麼我們一直執行 **stateless** 的 apps：apps 不會保留 **本地** state，但是會儲存它們的 state 到 **外部 service**\n        - 外部 Service 像是 database，快取伺服器 (例如：MySQL、AWS S3)\n3. Kubernetes 裡面的 Persistent Volumes 可以 **連接一個 volume** 到 container，而檔案會繼續**存在**就算 **container** 停止\n4. Volumes 可以使用不同的 **volume plugins** 來連接\n    - 本地 Volume\n    - AWS Cloud：EBS Storage\n    - Google Cloud：Google Disk\n    - 網路儲存空間：NFS、Cephfs\n    - Microsoft Cloud：Azure Disk\n5. 使用 Volumes 可以在 cluster 上部署 **application with state**\n    - 這些應用必須要在**本地檔案系統**讀/寫檔案，而且需要持續存在\n6. 可以運行 **MySQL** 資料庫且使用 persistent volumes\n    - 雖然這還沒準備好產品化\n    - Volumes 是 Kubernetes 在 2016 年 6 月發佈的，所以還很新，關於這個部分還需要多加**注意**\n7. 如果 **node 停止**運行，pod 會重新排程到另外一個 node，然後 volume 可以被連接到新的 node\n8. 使用 volumes 必須要先**創建 volume**\n9. 使用 volumes 必須要**創建**有 volume definition 的 **pod**\n#### Demo：Volumes\n1. `aws ec2 create-volume --size 10 --region ap-northeast-1 --availability-zone ap-northeast-1a --volume-type gp2`\n2. 把剛剛拿到的 VolumeId 貼近去 `vim volumes/helloworld-with-volume.yml`\n3. `kubectl create -f volumes/helloworld-with-volume.yml`\n4. `kubectl get pod`\n5. `kubectl describe pod helloworld-deployment-2277790027-3c1q2`\n6. `kubectl exec helloworld-deployment-2277790027-3c1q2 -i -t -- bash`\n7. `ls -ahl /myvol/`\n8. `echo 'test' > /myvol/myvol.txt`\n9. `echo 'test2' > /test.txt`\n10. `kubectl drain ip-172-20-49-46.ap-northeast-1.compute.internal --force`\n11. `kubectl get pod`\n12. `kubectl exec helloworld-deployment-2277790027-ll7w0 -i -t -- bash`\n13. `ls -ahl /myvol/myvol.txt`\n14. `ls -ahl /test.txt` => 這會找不到，因為沒有存在 volume，而是存在 container\n15. `kubectl delete -f volumes/helloworld-with-volume.yml`\n16. `aws ec2 delete-volume --volume-id vol-0ae6788e2541f0252 --region ap-northeast-1`","slug":"Kubernetes-快速學習自我挑戰-Day4","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwh000r7ifahp1xw80e","content":"<img src=\"/images/learning/kubernetes/kubernetesday4.jpg\">\n<hr>\n<h3>進階的主題</h3>\n<h4>深入 Service</h4>\n<ol>\n<li>在 Kubernets 1.3，DNS 是一個<strong>內建</strong>的 service 且會自動使用 addon 管理器啟動\n<ul>\n<li>addon 在 <strong>master node</strong> 的 etc/kubernetes/addons <strong>目錄</strong></li>\n</ul>\n</li>\n<li>DNS 服務可以在 pod 裡面被使用，且<strong>找到其它服務</strong>運行在相同的 cluster 上</li>\n<li><strong>在一個 pod 中</strong>的很多 containers 的架構不需要這種 service，因為它們可以<strong>直接</strong>互相<strong>聯繫</strong>\n<ul>\n<li>在相同 pod 中的 container 可以使用 <strong>localhost:port</strong></li>\n</ul>\n</li>\n<li>為了要讓 DNS 可以運作，pod 需要 <strong>Service Definition</strong></li>\n</ol>\n<h4>Demo：深入 Service</h4>\n<ol>\n<li><code>cat service-discovery/secrets.yml</code></li>\n<li><code>kubectl create -f service-discovery/secrets.yml</code></li>\n<li><code>cat service-discovery/database.yml</code></li>\n<li><code>cat service-discovery/database-service.yml</code></li>\n<li><code>kubectl create -f service-discovery/database.yml</code></li>\n<li><code>kubectl create -f service-discovery/database-service.yml</code></li>\n<li><code>cat service-discovery/helloworld-db.yml</code>\n<ul>\n<li>這邊會發現 env 下的 value: database-service，因為在創建 database-service.yml 的 metadata name 也是使用這個名稱</li>\n</ul>\n</li>\n<li><code>kubectl create -f service-discovery/helloworld-db.yml</code></li>\n<li><code>kubectl create -f service-discovery/helloworld-db-service.yml</code></li>\n<li><code>minikube service helloworld-db-service --url</code></li>\n<li><code>kubectl get pods</code></li>\n<li>確認是否連線到資料庫<br>\n<code>kubectl logs helloworld-deployment-2141920616-5bzp0</code></li>\n<li>curl 剛剛取得的 ip<br>\n<code>curl http://192.168.99.100:30888</code></li>\n<li><code>kubectl exec database -i -t -- mysql -u root -p</code> 密碼是 rootpassword</li>\n<li><code>show databases;</code></li>\n<li><code>use helloworld</code></li>\n<li><code>show tables;</code></li>\n<li><code>select * from visits;</code></li>\n<li><code>\\q</code></li>\n<li><code>kubectl run -i --tty busybox --image=busybox --restart=Never -- sh</code></li>\n<li><code>nslookup helloworld-db-service</code></li>\n<li><code>nslookup database-service</code></li>\n<li><code>telnet helloworld-db-service 3000</code></li>\n<li><code>kubectl delete pod busybox</code></li>\n</ol>\n<h4>ConfigMap</h4>\n<ol>\n<li>設定參數不是秘密，可以放在 <strong>ConfigMap</strong></li>\n<li>Input 是<strong>重複的</strong> key-value pairs</li>\n<li>ConfigMap <strong>key-value pairs</strong> 可以被 app 讀取，使用：\n<ul>\n<li><strong>環境</strong>變數</li>\n<li>在 Pod 設定裡面的 <strong>Container commandline arguments</strong></li>\n<li>使用 <strong>voulmes</strong></li>\n</ul>\n</li>\n<li>ConfigMap 也可以包含 <strong>full configuration</strong> 檔案\n<ul>\n<li>例如：網頁伺服器的 config 檔案</li>\n</ul>\n</li>\n<li>這些檔案可以被使用 volumes 的方式<strong>掛接</strong>，而 volumes 正是 application 放置 config file 的地方</li>\n<li>這樣的方法可以<strong>輸入</strong>配置設置到 containers 裡面，而不需要改變 container 本身</li>\n<li>使用檔案產生 ConfigMap</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver=jdbc</div><div class=\"line\">database=postgres</div><div class=\"line\">lookandfeel=1</div><div class=\"line\">otherparams=xyz</div><div class=\"line\">param.with.hierarchy=xyz</div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<p><code>kubectl create configmap app-config --from-file=app.properties</code></p>\n<ol start=\"8\">\n<li>可以使用 volume 來 expose ConfigMap 的方式創建 pod</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: Pod</div><div class=\"line\">metadata:</div><div class=\"line\">    name: nodehelloworld.example.com</div><div class=\"line\">    labels:</div><div class=\"line\">        app: helloworld</div><div class=\"line\">spec:</div><div class=\"line\">    containers:</div><div class=\"line\">    - name: k8s-demo</div><div class=\"line\">      image: wardviaene/k8s-demo</div><div class=\"line\">      ports:</div><div class=\"line\">      - containerPort: 3000</div><div class=\"line\">      volumeMounts:</div><div class=\"line\">      - name: config-volume</div><div class=\"line\">      // config 檔案會被存在 /ect/config/driver、/etc/config/param/with/hierarchy</div><div class=\"line\">        mountPath: /etc/config</div><div class=\"line\">      volumes:</div><div class=\"line\">      - name: config-volume</div><div class=\"line\">        configMap:</div><div class=\"line\">          name: app-config</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>可以使用環境變數來 expose ConfigMap 的方式創建 pod</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: Pod</div><div class=\"line\">metadata:</div><div class=\"line\">    name: nodehelloworld.example.com</div><div class=\"line\">    labels:</div><div class=\"line\">        app: helloworld</div><div class=\"line\">spec:</div><div class=\"line\">    containers:</div><div class=\"line\">    - name: k8s-demo</div><div class=\"line\">      image: wardviaene/k8s-demo</div><div class=\"line\">      ports:</div><div class=\"line\">      - containerPort: 3000</div><div class=\"line\">      env:</div><div class=\"line\">          - name: DRIVER</div><div class=\"line\">            valueFrom:</div><div class=\"line\">              configMapKeyRef:</div><div class=\"line\">                name: app-config</div><div class=\"line\">                key: driver</div><div class=\"line\">          - name: DATABASE</div><div class=\"line\">          [...]</div></pre></td></tr></table></figure>\n<h4>Demo：ConfigMap</h4>\n<ol>\n<li><code>cat configmap/reverseproxy.conf</code></li>\n<li><code>kubectl create configmap nginx-config --from-file=configmap/reverseproxy.conf</code></li>\n<li><code>kubectl get configmap</code></li>\n<li><code>kubectl get configmap nginx-config -o yaml</code></li>\n<li><code>cat configmap/nginx.yml</code></li>\n<li><code>kubectl create -f configmap/nginx.yml</code></li>\n<li><code>kubectl create -f configmap/nginx-service.yml</code></li>\n<li><code>minikube service helloworld-nginx-service --url</code></li>\n<li><code>curl http://192.168.99.100:31965 -vvv</code></li>\n<li><code>kubectl exec -i -t helloworld-nginx -c nginx -- bash</code></li>\n<li><code>ps x</code></li>\n<li><code>cat /etc/nginx/conf.d/reverseproxy.conf</code></li>\n</ol>\n<h4>Ingress Controller</h4>\n<ol>\n<li>Ingress 是一個從 Kubernetes 1.1 之後可用的解決方案，用來允許 <strong>inbound connections</strong> 給 cluster</li>\n<li>它是 external <strong>Loadbalancer</strong> 和 <strong>nodePorts</strong> 的替代方案\n<ul>\n<li>Ingress 允許<strong>簡單的 expose services</strong>，如果 services 需要從 <strong>cluster 外部</strong> 存取</li>\n</ul>\n</li>\n<li>如果有 Ingress 就可以在 Kubernetes 運行自己的 <strong>ingress controller</strong> (基本上就是 loadbalancer)</li>\n<li>有預設的 ingress controllers 可以使用，或是也可以<strong>寫自己的</strong> ingress controller</li>\n<li>可以使用 ingress object 來創建 ingress rules</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: extensions/v1beta1</div><div class=\"line\">kind: ingress</div><div class=\"line\">metadata:</div><div class=\"line\">    name: helloworld-rules</div><div class=\"line\">spec:</div><div class=\"line\">    rules:</div><div class=\"line\">    - host: helloworld-v1.example.com</div><div class=\"line\">      http:</div><div class=\"line\">          paths:</div><div class=\"line\">          - path: /</div><div class=\"line\">            backend:</div><div class=\"line\">                serviceName: helloworld-v1</div><div class=\"line\">                servicePort: 80</div><div class=\"line\">    - host: hellowrld-v2.example.com</div><div class=\"line\">      http:</div><div class=\"line\">          paths:</div><div class=\"line\">          - path: /</div><div class=\"line\">            backend:</div><div class=\"line\">                serviceName: helloworld-v2</div><div class=\"line\">                servicePort: 80</div></pre></td></tr></table></figure>\n<h4>Demo：Ingress Controller</h4>\n<ol>\n<li><code>cat ingress/nginx-ingress-controller.yml</code></li>\n<li><code>cat ingress/ingress.yml</code></li>\n<li><code>kubectl create -f ingress/ingress.yml</code></li>\n<li><code>kubectl create -f ingress/nginx-ingress-controller.yml</code></li>\n<li><code>kubectl create -f ingress/echoservice.yml</code></li>\n<li><code>kubectl create -f ingress/helloworld-v1.yml</code></li>\n<li><code>kubectl create -f ingress/helloworld-v2.yml</code></li>\n<li>helloworld-v2 和 v1 的差別在於 image 版本</li>\n<li><code>minikube ip</code></li>\n<li><code>curl 192.168.99.100</code></li>\n<li><code>curl 192.168.99.100 -H 'Host: helloworld-v1.example.com'</code></li>\n<li><code>curl 192.168.99.100 -H 'Host: helloworld-v2.example.com'</code></li>\n<li><code>kubectl get svc</code></li>\n</ol>\n<h4>Volumes</h4>\n<ol>\n<li>Kubernetes 裡面的 Volumes 用來<strong>儲存 container 之外的 data</strong></li>\n<li>當 container <strong>停止</strong>，所有在 container 裡面的資料會 <strong>不見</strong>\n<ul>\n<li>這正是為什麼我們一直執行 <strong>stateless</strong> 的 apps：apps 不會保留 <strong>本地</strong> state，但是會儲存它們的 state 到 <strong>外部 service</strong>\n<ul>\n<li>外部 Service 像是 database，快取伺服器 (例如：MySQL、AWS S3)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Kubernetes 裡面的 Persistent Volumes 可以 <strong>連接一個 volume</strong> 到 container，而檔案會繼續<strong>存在</strong>就算 <strong>container</strong> 停止</li>\n<li>Volumes 可以使用不同的 <strong>volume plugins</strong> 來連接\n<ul>\n<li>本地 Volume</li>\n<li>AWS Cloud：EBS Storage</li>\n<li>Google Cloud：Google Disk</li>\n<li>網路儲存空間：NFS、Cephfs</li>\n<li>Microsoft Cloud：Azure Disk</li>\n</ul>\n</li>\n<li>使用 Volumes 可以在 cluster 上部署 <strong>application with state</strong>\n<ul>\n<li>這些應用必須要在<strong>本地檔案系統</strong>讀/寫檔案，而且需要持續存在</li>\n</ul>\n</li>\n<li>可以運行 <strong>MySQL</strong> 資料庫且使用 persistent volumes\n<ul>\n<li>雖然這還沒準備好產品化</li>\n<li>Volumes 是 Kubernetes 在 2016 年 6 月發佈的，所以還很新，關於這個部分還需要多加<strong>注意</strong></li>\n</ul>\n</li>\n<li>如果 <strong>node 停止</strong>運行，pod 會重新排程到另外一個 node，然後 volume 可以被連接到新的 node</li>\n<li>使用 volumes 必須要先<strong>創建 volume</strong></li>\n<li>使用 volumes 必須要<strong>創建</strong>有 volume definition 的 <strong>pod</strong></li>\n</ol>\n<h4>Demo：Volumes</h4>\n<ol>\n<li><code>aws ec2 create-volume --size 10 --region ap-northeast-1 --availability-zone ap-northeast-1a --volume-type gp2</code></li>\n<li>把剛剛拿到的 VolumeId 貼近去 <code>vim volumes/helloworld-with-volume.yml</code></li>\n<li><code>kubectl create -f volumes/helloworld-with-volume.yml</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl describe pod helloworld-deployment-2277790027-3c1q2</code></li>\n<li><code>kubectl exec helloworld-deployment-2277790027-3c1q2 -i -t -- bash</code></li>\n<li><code>ls -ahl /myvol/</code></li>\n<li><code>echo 'test' &gt; /myvol/myvol.txt</code></li>\n<li><code>echo 'test2' &gt; /test.txt</code></li>\n<li><code>kubectl drain ip-172-20-49-46.ap-northeast-1.compute.internal --force</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl exec helloworld-deployment-2277790027-ll7w0 -i -t -- bash</code></li>\n<li><code>ls -ahl /myvol/myvol.txt</code></li>\n<li><code>ls -ahl /test.txt</code> =&gt; 這會找不到，因為沒有存在 volume，而是存在 container</li>\n<li><code>kubectl delete -f volumes/helloworld-with-volume.yml</code></li>\n<li><code>aws ec2 delete-volume --volume-id vol-0ae6788e2541f0252 --region ap-northeast-1</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/kubernetes/kubernetesday4.jpg\">\n<hr>\n<h3>進階的主題</h3>\n<h4>深入 Service</h4>\n<ol>\n<li>在 Kubernets 1.3，DNS 是一個<strong>內建</strong>的 service 且會自動使用 addon 管理器啟動\n<ul>\n<li>addon 在 <strong>master node</strong> 的 etc/kubernetes/addons <strong>目錄</strong></li>\n</ul>\n</li>\n<li>DNS 服務可以在 pod 裡面被使用，且<strong>找到其它服務</strong>運行在相同的 cluster 上</li>\n<li><strong>在一個 pod 中</strong>的很多 containers 的架構不需要這種 service，因為它們可以<strong>直接</strong>互相<strong>聯繫</strong>\n<ul>\n<li>在相同 pod 中的 container 可以使用 <strong>localhost:port</strong></li>\n</ul>\n</li>\n<li>為了要讓 DNS 可以運作，pod 需要 <strong>Service Definition</strong></li>\n</ol>\n<h4>Demo：深入 Service</h4>\n<ol>\n<li><code>cat service-discovery/secrets.yml</code></li>\n<li><code>kubectl create -f service-discovery/secrets.yml</code></li>\n<li><code>cat service-discovery/database.yml</code></li>\n<li><code>cat service-discovery/database-service.yml</code></li>\n<li><code>kubectl create -f service-discovery/database.yml</code></li>\n<li><code>kubectl create -f service-discovery/database-service.yml</code></li>\n<li><code>cat service-discovery/helloworld-db.yml</code>\n<ul>\n<li>這邊會發現 env 下的 value: database-service，因為在創建 database-service.yml 的 metadata name 也是使用這個名稱</li>\n</ul>\n</li>\n<li><code>kubectl create -f service-discovery/helloworld-db.yml</code></li>\n<li><code>kubectl create -f service-discovery/helloworld-db-service.yml</code></li>\n<li><code>minikube service helloworld-db-service --url</code></li>\n<li><code>kubectl get pods</code></li>\n<li>確認是否連線到資料庫<br>\n<code>kubectl logs helloworld-deployment-2141920616-5bzp0</code></li>\n<li>curl 剛剛取得的 ip<br>\n<code>curl http://192.168.99.100:30888</code></li>\n<li><code>kubectl exec database -i -t -- mysql -u root -p</code> 密碼是 rootpassword</li>\n<li><code>show databases;</code></li>\n<li><code>use helloworld</code></li>\n<li><code>show tables;</code></li>\n<li><code>select * from visits;</code></li>\n<li><code>\\q</code></li>\n<li><code>kubectl run -i --tty busybox --image=busybox --restart=Never -- sh</code></li>\n<li><code>nslookup helloworld-db-service</code></li>\n<li><code>nslookup database-service</code></li>\n<li><code>telnet helloworld-db-service 3000</code></li>\n<li><code>kubectl delete pod busybox</code></li>\n</ol>\n<h4>ConfigMap</h4>\n<ol>\n<li>設定參數不是秘密，可以放在 <strong>ConfigMap</strong></li>\n<li>Input 是<strong>重複的</strong> key-value pairs</li>\n<li>ConfigMap <strong>key-value pairs</strong> 可以被 app 讀取，使用：\n<ul>\n<li><strong>環境</strong>變數</li>\n<li>在 Pod 設定裡面的 <strong>Container commandline arguments</strong></li>\n<li>使用 <strong>voulmes</strong></li>\n</ul>\n</li>\n<li>ConfigMap 也可以包含 <strong>full configuration</strong> 檔案\n<ul>\n<li>例如：網頁伺服器的 config 檔案</li>\n</ul>\n</li>\n<li>這些檔案可以被使用 volumes 的方式<strong>掛接</strong>，而 volumes 正是 application 放置 config file 的地方</li>\n<li>這樣的方法可以<strong>輸入</strong>配置設置到 containers 裡面，而不需要改變 container 本身</li>\n<li>使用檔案產生 ConfigMap</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver=jdbc</div><div class=\"line\">database=postgres</div><div class=\"line\">lookandfeel=1</div><div class=\"line\">otherparams=xyz</div><div class=\"line\">param.with.hierarchy=xyz</div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<p><code>kubectl create configmap app-config --from-file=app.properties</code></p>\n<ol start=\"8\">\n<li>可以使用 volume 來 expose ConfigMap 的方式創建 pod</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: Pod</div><div class=\"line\">metadata:</div><div class=\"line\">    name: nodehelloworld.example.com</div><div class=\"line\">    labels:</div><div class=\"line\">        app: helloworld</div><div class=\"line\">spec:</div><div class=\"line\">    containers:</div><div class=\"line\">    - name: k8s-demo</div><div class=\"line\">      image: wardviaene/k8s-demo</div><div class=\"line\">      ports:</div><div class=\"line\">      - containerPort: 3000</div><div class=\"line\">      volumeMounts:</div><div class=\"line\">      - name: config-volume</div><div class=\"line\">      // config 檔案會被存在 /ect/config/driver、/etc/config/param/with/hierarchy</div><div class=\"line\">        mountPath: /etc/config</div><div class=\"line\">      volumes:</div><div class=\"line\">      - name: config-volume</div><div class=\"line\">        configMap:</div><div class=\"line\">          name: app-config</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>可以使用環境變數來 expose ConfigMap 的方式創建 pod</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: Pod</div><div class=\"line\">metadata:</div><div class=\"line\">    name: nodehelloworld.example.com</div><div class=\"line\">    labels:</div><div class=\"line\">        app: helloworld</div><div class=\"line\">spec:</div><div class=\"line\">    containers:</div><div class=\"line\">    - name: k8s-demo</div><div class=\"line\">      image: wardviaene/k8s-demo</div><div class=\"line\">      ports:</div><div class=\"line\">      - containerPort: 3000</div><div class=\"line\">      env:</div><div class=\"line\">          - name: DRIVER</div><div class=\"line\">            valueFrom:</div><div class=\"line\">              configMapKeyRef:</div><div class=\"line\">                name: app-config</div><div class=\"line\">                key: driver</div><div class=\"line\">          - name: DATABASE</div><div class=\"line\">          [...]</div></pre></td></tr></table></figure>\n<h4>Demo：ConfigMap</h4>\n<ol>\n<li><code>cat configmap/reverseproxy.conf</code></li>\n<li><code>kubectl create configmap nginx-config --from-file=configmap/reverseproxy.conf</code></li>\n<li><code>kubectl get configmap</code></li>\n<li><code>kubectl get configmap nginx-config -o yaml</code></li>\n<li><code>cat configmap/nginx.yml</code></li>\n<li><code>kubectl create -f configmap/nginx.yml</code></li>\n<li><code>kubectl create -f configmap/nginx-service.yml</code></li>\n<li><code>minikube service helloworld-nginx-service --url</code></li>\n<li><code>curl http://192.168.99.100:31965 -vvv</code></li>\n<li><code>kubectl exec -i -t helloworld-nginx -c nginx -- bash</code></li>\n<li><code>ps x</code></li>\n<li><code>cat /etc/nginx/conf.d/reverseproxy.conf</code></li>\n</ol>\n<h4>Ingress Controller</h4>\n<ol>\n<li>Ingress 是一個從 Kubernetes 1.1 之後可用的解決方案，用來允許 <strong>inbound connections</strong> 給 cluster</li>\n<li>它是 external <strong>Loadbalancer</strong> 和 <strong>nodePorts</strong> 的替代方案\n<ul>\n<li>Ingress 允許<strong>簡單的 expose services</strong>，如果 services 需要從 <strong>cluster 外部</strong> 存取</li>\n</ul>\n</li>\n<li>如果有 Ingress 就可以在 Kubernetes 運行自己的 <strong>ingress controller</strong> (基本上就是 loadbalancer)</li>\n<li>有預設的 ingress controllers 可以使用，或是也可以<strong>寫自己的</strong> ingress controller</li>\n<li>可以使用 ingress object 來創建 ingress rules</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: extensions/v1beta1</div><div class=\"line\">kind: ingress</div><div class=\"line\">metadata:</div><div class=\"line\">    name: helloworld-rules</div><div class=\"line\">spec:</div><div class=\"line\">    rules:</div><div class=\"line\">    - host: helloworld-v1.example.com</div><div class=\"line\">      http:</div><div class=\"line\">          paths:</div><div class=\"line\">          - path: /</div><div class=\"line\">            backend:</div><div class=\"line\">                serviceName: helloworld-v1</div><div class=\"line\">                servicePort: 80</div><div class=\"line\">    - host: hellowrld-v2.example.com</div><div class=\"line\">      http:</div><div class=\"line\">          paths:</div><div class=\"line\">          - path: /</div><div class=\"line\">            backend:</div><div class=\"line\">                serviceName: helloworld-v2</div><div class=\"line\">                servicePort: 80</div></pre></td></tr></table></figure>\n<h4>Demo：Ingress Controller</h4>\n<ol>\n<li><code>cat ingress/nginx-ingress-controller.yml</code></li>\n<li><code>cat ingress/ingress.yml</code></li>\n<li><code>kubectl create -f ingress/ingress.yml</code></li>\n<li><code>kubectl create -f ingress/nginx-ingress-controller.yml</code></li>\n<li><code>kubectl create -f ingress/echoservice.yml</code></li>\n<li><code>kubectl create -f ingress/helloworld-v1.yml</code></li>\n<li><code>kubectl create -f ingress/helloworld-v2.yml</code></li>\n<li>helloworld-v2 和 v1 的差別在於 image 版本</li>\n<li><code>minikube ip</code></li>\n<li><code>curl 192.168.99.100</code></li>\n<li><code>curl 192.168.99.100 -H 'Host: helloworld-v1.example.com'</code></li>\n<li><code>curl 192.168.99.100 -H 'Host: helloworld-v2.example.com'</code></li>\n<li><code>kubectl get svc</code></li>\n</ol>\n<h4>Volumes</h4>\n<ol>\n<li>Kubernetes 裡面的 Volumes 用來<strong>儲存 container 之外的 data</strong></li>\n<li>當 container <strong>停止</strong>，所有在 container 裡面的資料會 <strong>不見</strong>\n<ul>\n<li>這正是為什麼我們一直執行 <strong>stateless</strong> 的 apps：apps 不會保留 <strong>本地</strong> state，但是會儲存它們的 state 到 <strong>外部 service</strong>\n<ul>\n<li>外部 Service 像是 database，快取伺服器 (例如：MySQL、AWS S3)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Kubernetes 裡面的 Persistent Volumes 可以 <strong>連接一個 volume</strong> 到 container，而檔案會繼續<strong>存在</strong>就算 <strong>container</strong> 停止</li>\n<li>Volumes 可以使用不同的 <strong>volume plugins</strong> 來連接\n<ul>\n<li>本地 Volume</li>\n<li>AWS Cloud：EBS Storage</li>\n<li>Google Cloud：Google Disk</li>\n<li>網路儲存空間：NFS、Cephfs</li>\n<li>Microsoft Cloud：Azure Disk</li>\n</ul>\n</li>\n<li>使用 Volumes 可以在 cluster 上部署 <strong>application with state</strong>\n<ul>\n<li>這些應用必須要在<strong>本地檔案系統</strong>讀/寫檔案，而且需要持續存在</li>\n</ul>\n</li>\n<li>可以運行 <strong>MySQL</strong> 資料庫且使用 persistent volumes\n<ul>\n<li>雖然這還沒準備好產品化</li>\n<li>Volumes 是 Kubernetes 在 2016 年 6 月發佈的，所以還很新，關於這個部分還需要多加<strong>注意</strong></li>\n</ul>\n</li>\n<li>如果 <strong>node 停止</strong>運行，pod 會重新排程到另外一個 node，然後 volume 可以被連接到新的 node</li>\n<li>使用 volumes 必須要先<strong>創建 volume</strong></li>\n<li>使用 volumes 必須要<strong>創建</strong>有 volume definition 的 <strong>pod</strong></li>\n</ol>\n<h4>Demo：Volumes</h4>\n<ol>\n<li><code>aws ec2 create-volume --size 10 --region ap-northeast-1 --availability-zone ap-northeast-1a --volume-type gp2</code></li>\n<li>把剛剛拿到的 VolumeId 貼近去 <code>vim volumes/helloworld-with-volume.yml</code></li>\n<li><code>kubectl create -f volumes/helloworld-with-volume.yml</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl describe pod helloworld-deployment-2277790027-3c1q2</code></li>\n<li><code>kubectl exec helloworld-deployment-2277790027-3c1q2 -i -t -- bash</code></li>\n<li><code>ls -ahl /myvol/</code></li>\n<li><code>echo 'test' &gt; /myvol/myvol.txt</code></li>\n<li><code>echo 'test2' &gt; /test.txt</code></li>\n<li><code>kubectl drain ip-172-20-49-46.ap-northeast-1.compute.internal --force</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl exec helloworld-deployment-2277790027-ll7w0 -i -t -- bash</code></li>\n<li><code>ls -ahl /myvol/myvol.txt</code></li>\n<li><code>ls -ahl /test.txt</code> =&gt; 這會找不到，因為沒有存在 volume，而是存在 container</li>\n<li><code>kubectl delete -f volumes/helloworld-with-volume.yml</code></li>\n<li><code>aws ec2 delete-volume --volume-id vol-0ae6788e2541f0252 --region ap-northeast-1</code></li>\n</ol>\n"},{"title":"Kubernetes 快速學習自我挑戰 Day5","thumbnail":["/images/learning/kubernetes/kubernetesday5.png"],"date":"2017-08-21T16:46:53.000Z","_content":"<img src=\"/images/learning/kubernetes/kubernetesday5.png\">\n\n***\n### 進階的主題\n#### Volumes Autoprovisioning\n1. Kubernetes plugins 可以**提供 storage**\n2. **AWS Plugin** 可以藉由在 AWS 創建 volumes 來**提供 storage**，但是要在 volume 連接到 node 之前才能做\n3. 這些可以使用 **StorageClass object** 來完成\n    - [Documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses)\n4. 使用 **auto provisioned volumes**，可以創建以下 yaml 檔案：\n    - storage.yml\n```\nkind: StorageClass\napiVersion: storage.k8s.io/v1beta1\nmetadata:\n  name: standard\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  type: gp2\n  zone: us-east-1\n```\n5. 這樣可以創建 volume 並宣告使用 **aws-ebs provisioner**\n6. Kubernetes 將會提供 type **gp2** 的 volume (一般用途 - SSD)\n7. 接下來，可以創建 volume 並宣告和指定容量\n    - my-volume.claim.yml\n```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: myclaim\n  annotations:\n    volume.beta.kubernetes.io/storage-class: \"standard\"\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 8Gi\n```\n8. 最後，可以使用 volume 來啟動 pod\n    - my-pod.yml\n```\nkind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\nspec:\n  containers:\n    - name: myfrontend\n      image: nginx\n      volumeMounts:\n      - mountPath: \"/var/www/html\"\n        name: mypd\n  volumes:\n    - name: mypd\n      persistentVolumeClaim:\n        claimName: myclaim\n```\n#### Demo：使用 Volumes 的 WordPress\n1. `cd wordpress-volumes` \n2. `cat storage.yml`\n3. `cat pv-claim.yml`\n4. `cat wordpress-db.yml`\n5. `cat wordpress-db-service.yml`\n6. `cat wordpress-secrets.yml`\n7. `cat wordpress-web.yml`\n8. `cat wordpress-web-service.yml`\n9. [查詢 AWS 服務區域](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region)\n`aws efs create-file-system --creation-token 1 --region ap-southeast-2`\n10. 找尋 SubnetId 和 SecurityGroups\n`aws ec2 describe-instances --region ap-southeast-2`\n11. `aws efs create-mount-target --file-system-id fs-518f6c68 --subnet-id subnet-5ed8c73a --security-groups sg-5154a737 --region ap-southeast-2`\n12. 修改倒數第二行的 server\n`vim wordpress-web.yml`\n13. `kubectl create -f storage.yml`\n14. `kubectl create -f pv-claim.yml`\n15. `kubectl create -f wordpress-secrets.yml`\n16. `kubectl create -f wordpress-db.yml`\n17. `kubectl create -f wordpress-db-service.yml`\n18. `kubectl get pvc`\n19. `kubectl get pod`\n20. `kubectl describe pod wordpress-db-8n665`\n21. `kubectl create -f wordpress-web.yml`\n22. `kubectl create -f wordpress-web-service.yml`\n23. 去 Route53 新增一個 DNS record - wordpress.<domain>，在 alias 的地方打勾，選擇剛剛建立的 LoadBalancer\n24. `kubectl edit deployment/wordpress-deployment` 把以下五行加到 35 行之後，把後面 env 縮排進去並刪除 -，完成之後就發現 wordpress 可以上傳圖片了\n```\n- command:\n  - bash\n  - -c\n  - chown www-data:www-data /var/www/html/wp-content/uploads && docker-entrypoint.sh apache2-foreground\n  env: \n  - name: \n```\n25. `kubectl get pod`\n26. 刪除所有的 pod，就會發現會全部自動重啟\n`kubectl delete pod wordpress-db-5cgvm`\n`kubectl delete pod/wordpress-deployment-1534735485-71kjs`\n`kubectl delete pod wordpress-deployment-1534735485-j74hb`\n27. `kubectl get pod`，再一次 get pod 就會發現 pod 全部重啟了\n28. `kubectl logs wordpress-deployment-1534735485-0wtxq`\n29. `kubectl exec wordpress-deployment-1534735485-0wtxq -i -t -- bash`\n30. `ls -ahl -R wp-content/uploads/` 會發現檔案都還在\n#### Pet Sets\n1. Pet Sets 是從 Kubernetes 1.3 之後開始的**新功能**\n2. 要執行 **stateful application** 需要：\n    - 一個**穩定的 pod hostname**(取代 podname-randomstring)\n        - 當一個 pod 有很多 instances，podname 需要有索引(例如：podname-1、podname-2、podname-3)\n    - 一個 **stateful app** 需要基於序號數(podname-**x**)或 hostname 的**多個**有 volumes 的 **pods**\n        - 目前**刪除**和/或**擴展**一個 **PetSet down**不會刪除跟 PetSet 有關連的 Volume\n3. 一個 PetSet 允許 stateful app 使用 **DNS** 找尋其它**同伴**\n    - Cassandra clusters、ElasticSearch clusters 使用 **DNS** 來找到其它 cluster 的 members\n    - 在 Pet Set 之中**一個**運行中的 **node** 叫做 **一個 Pet** (例如：Cassandra 中的一個 node)\n    - 舉例來說： 在 Kubernetes 上使用 Pet Sets 的五個 cassandra nodes，可以命名為 cassandra-1 到 cassandra-5\n    - 如果不使用 Pet Sets，可以用取得一個動態 hostname 的方式，而這個方式不能夠使用在設定檔，因為設定檔可以隨時修改名字\n4. 一個 PetSet 也允許 stateful app **排序啟動和關閉的 pets**：\n    - 取代隨機終止一個 Pet (app 中的一個 instance)，你會知道哪一個會不見\n    - 當在可以關閉之前，第一次需要從一個 node **倒出**資料的時候，這很有用\n5. 在 PetSets 依然還很多**未來工作**需要完成\n#### Daemon Sets\n1. Daemon Sets 確保 Kubernetes cluster 的**每一個 node** 運行相同的 pod 資源\n    - 如果你想要**確保**特定 pod 運行在每一個 Kubernetes node，這個非常有用\n2. 當一個 node **被新增**到 cluster，新的 pod 就會**自動**被啟動\n3. 同樣地，當一個 node **被移除**，pod 將不會在其它 node 進行**再排程**\n4. 典型的**應用例子**\n    - Logging aggregators\n    - Monitoring\n    - Load Balancers / Reverse Proxies / API Gateways\n    - 運行一個 daemon 在每一個 physical instance 只需要一個 instance\n#### 監控資源用量\n1. Heapster 能夠**監控 Container Cluster** 和**效能分析**\n2. 它提供了 Kubernetes 的監控平台\n3. 它是必要的，如果想要在 Kubernetes 使用 **pod auto-scaling**\n4. Heapster **透過 REST endpoint** 輸出 cluster metrics\n5. 可以與 Heapster 使用**不同的後端**\n    - 範例會使用 InfluxDB，但是其它像是 Google Cloud Monitoring/Logging 和 Kafka 也是可以的\n6. **Visualizations** (圖像) 可以使用 Grafana 表現\n    - Kubernetes 儀表板只要 monitoring 啟動就可以顯示圖表\n7. 所有的這些技術(Heapster、InfluxDB 和 Grafana)都可以在 pods 裡面啟動\n8. **YAML 檔案**可以在 [Heapster 的 github repository](https://github.com/kubernetes/heapster/tree/master/deploy/kube-config/influxdb) 被找到\n    - 在下載完 repository 之後，平台可以使用 addon system 或使用 kubectl create -f directory-with-yaml-files/ 來部署\n#### Demo：監控資源用量\n1. `git clone https://github.com/kubernetes/heapster.git`\n    - 後改用 [1.3 版本](https://github.com/kubernetes/heapster/releases)\n2. `cd heapster/deploy/kube-config/influxdb`\n3. `vim grafana.yaml`\n    - 把這行註解掉 `kubernetes.io/cluster-service: 'true'`\n4. `vim heapster.yaml`\n    - 把這行註解掉 `kubernetes.io/cluster-service: 'true'`\n5. `vim influxdb.yaml`\n    - 把這行註解掉 `kubernetes.io/cluster-service: 'true'`\n6. `cd ..`\n7. `kubectl create -f influxdb`\n8. `kubectl create -f kubernetes-course/deployment/helloworld.yml`\n9. `minikube service monitoring-grafana --namespace=kube-system --url`\n10. 進去 Grafana 之後，選擇左列選單，選擇 Sign In，然後就可以選擇 cluster 或是 pod 觀看目前的狀態\n#### Autoscaling\n1. Kubernetes 可以基於 metrics 來**自動 scale pods**\n2. Kubernetes 可以自動 scale 一個 Deployment、Replication Controller 或 ReplicaSet\n3. 在 Kubernetes 1.3 版本後，**根據 CPU 用量 scaling** 是可以使用的\n    - 有 alpha 的支持，基於 metrics 的 application 是可用的 (像是每秒取得或平均請求延遲)\n        - 要啟動這個，cluster 必須要設 env 變數裡面的 ENABLE\\_CUSTOM_METRICS 為 true 來啟動\n4. Autoscaling 會對目標 pods **定期取得**用量\n    - **預設是 30 秒**，可以在啟動 controller-manager 使用 `--horizontal-pod-autoscaler-sync-period` 來修改\n5. Autoscaling 會使用監控工具 **heapster** 來收集它們的 metrics 和決定如何 scaling\n    - Heapster 必須要在 autoscaling work 之前安裝並運行\n6. **例子**\n    - 運行一個 **200m** 的 **CPU 資源**請求的 **pod** 並在 **pod** 運行一個 **deployment**\n    - 200m = 200 millicpu (或是 200 millicores)\n    - 200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n        - 如果 node 是雙核心，它還是只有單核心的 20%\n    - 可以採用 CPU 用量為 50% 的 autoscaling (也就是 100m)\n    - 水平 Pod Autoscaling 可以增加/減少 pods 來維持目標 CPU 用量為 50%(或是 100m/在 pod 裡面一個核心10%)\n7. 測試 autoscaling\n```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hpa-example\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: hpa-example\n      spec:\n        containers:\n        - name: hpa-example\n          image: gcr.io/google_containers/hpa-example\n          ports:\n          - name: http-port\n            containerPort: 80\n          resources:\n            requests:\n              cpu: 200m\n```\n8. autoscaling specification 範例\n```\napiVersion: autoscaling/v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: hpa-example-autoscaler\nspec:\n  scaleTargetRef:\n    apiVersion: extensions/v1beta1\n    kind: Deployment\n    name: hpa-example\n  minReplicas: 1\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 50\n```\n#### Demo：Autoscaling\n1. `cat autoscaling/hpa-example.yml`\n2. `minikube stop`\n3. `minikube start --extra-config kubelet.EnableCustomMetrics=true`\n4. `kubectl create -f autoscaling/hpa-example.yml`\n5. `kubectl get hpa`\n6. `kubectl run -i --tty load-generator --image=busybox /bin/sh`\n7. `wget http://hpa-example.default.svc.cluster.local:31001`\n8. `cat index.html`\n9. `rm index.html`\n10. `while true; do wget -q -O- http://hpa-example.default.svc.cluster.local:31001; done`\n11. `kubectl get pod`，這時候可以看出他會建立很多個\n12. `kubectl get hpa` 觀看使用狀態","source":"_posts/Kubernetes-快速學習自我挑戰-Day5.md","raw":"---\ntitle: Kubernetes 快速學習自我挑戰 Day5\nthumbnail:\n  - /images/learning/kubernetes/kubernetesday5.png\ndate: 2017-08-22 00:46:53\ncategories: 學習歷程\ntags: Kubernetes\n---\n<img src=\"/images/learning/kubernetes/kubernetesday5.png\">\n\n***\n### 進階的主題\n#### Volumes Autoprovisioning\n1. Kubernetes plugins 可以**提供 storage**\n2. **AWS Plugin** 可以藉由在 AWS 創建 volumes 來**提供 storage**，但是要在 volume 連接到 node 之前才能做\n3. 這些可以使用 **StorageClass object** 來完成\n    - [Documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses)\n4. 使用 **auto provisioned volumes**，可以創建以下 yaml 檔案：\n    - storage.yml\n```\nkind: StorageClass\napiVersion: storage.k8s.io/v1beta1\nmetadata:\n  name: standard\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  type: gp2\n  zone: us-east-1\n```\n5. 這樣可以創建 volume 並宣告使用 **aws-ebs provisioner**\n6. Kubernetes 將會提供 type **gp2** 的 volume (一般用途 - SSD)\n7. 接下來，可以創建 volume 並宣告和指定容量\n    - my-volume.claim.yml\n```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: myclaim\n  annotations:\n    volume.beta.kubernetes.io/storage-class: \"standard\"\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 8Gi\n```\n8. 最後，可以使用 volume 來啟動 pod\n    - my-pod.yml\n```\nkind: Pod\napiVersion: v1\nmetadata:\n  name: mypod\nspec:\n  containers:\n    - name: myfrontend\n      image: nginx\n      volumeMounts:\n      - mountPath: \"/var/www/html\"\n        name: mypd\n  volumes:\n    - name: mypd\n      persistentVolumeClaim:\n        claimName: myclaim\n```\n#### Demo：使用 Volumes 的 WordPress\n1. `cd wordpress-volumes` \n2. `cat storage.yml`\n3. `cat pv-claim.yml`\n4. `cat wordpress-db.yml`\n5. `cat wordpress-db-service.yml`\n6. `cat wordpress-secrets.yml`\n7. `cat wordpress-web.yml`\n8. `cat wordpress-web-service.yml`\n9. [查詢 AWS 服務區域](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region)\n`aws efs create-file-system --creation-token 1 --region ap-southeast-2`\n10. 找尋 SubnetId 和 SecurityGroups\n`aws ec2 describe-instances --region ap-southeast-2`\n11. `aws efs create-mount-target --file-system-id fs-518f6c68 --subnet-id subnet-5ed8c73a --security-groups sg-5154a737 --region ap-southeast-2`\n12. 修改倒數第二行的 server\n`vim wordpress-web.yml`\n13. `kubectl create -f storage.yml`\n14. `kubectl create -f pv-claim.yml`\n15. `kubectl create -f wordpress-secrets.yml`\n16. `kubectl create -f wordpress-db.yml`\n17. `kubectl create -f wordpress-db-service.yml`\n18. `kubectl get pvc`\n19. `kubectl get pod`\n20. `kubectl describe pod wordpress-db-8n665`\n21. `kubectl create -f wordpress-web.yml`\n22. `kubectl create -f wordpress-web-service.yml`\n23. 去 Route53 新增一個 DNS record - wordpress.<domain>，在 alias 的地方打勾，選擇剛剛建立的 LoadBalancer\n24. `kubectl edit deployment/wordpress-deployment` 把以下五行加到 35 行之後，把後面 env 縮排進去並刪除 -，完成之後就發現 wordpress 可以上傳圖片了\n```\n- command:\n  - bash\n  - -c\n  - chown www-data:www-data /var/www/html/wp-content/uploads && docker-entrypoint.sh apache2-foreground\n  env: \n  - name: \n```\n25. `kubectl get pod`\n26. 刪除所有的 pod，就會發現會全部自動重啟\n`kubectl delete pod wordpress-db-5cgvm`\n`kubectl delete pod/wordpress-deployment-1534735485-71kjs`\n`kubectl delete pod wordpress-deployment-1534735485-j74hb`\n27. `kubectl get pod`，再一次 get pod 就會發現 pod 全部重啟了\n28. `kubectl logs wordpress-deployment-1534735485-0wtxq`\n29. `kubectl exec wordpress-deployment-1534735485-0wtxq -i -t -- bash`\n30. `ls -ahl -R wp-content/uploads/` 會發現檔案都還在\n#### Pet Sets\n1. Pet Sets 是從 Kubernetes 1.3 之後開始的**新功能**\n2. 要執行 **stateful application** 需要：\n    - 一個**穩定的 pod hostname**(取代 podname-randomstring)\n        - 當一個 pod 有很多 instances，podname 需要有索引(例如：podname-1、podname-2、podname-3)\n    - 一個 **stateful app** 需要基於序號數(podname-**x**)或 hostname 的**多個**有 volumes 的 **pods**\n        - 目前**刪除**和/或**擴展**一個 **PetSet down**不會刪除跟 PetSet 有關連的 Volume\n3. 一個 PetSet 允許 stateful app 使用 **DNS** 找尋其它**同伴**\n    - Cassandra clusters、ElasticSearch clusters 使用 **DNS** 來找到其它 cluster 的 members\n    - 在 Pet Set 之中**一個**運行中的 **node** 叫做 **一個 Pet** (例如：Cassandra 中的一個 node)\n    - 舉例來說： 在 Kubernetes 上使用 Pet Sets 的五個 cassandra nodes，可以命名為 cassandra-1 到 cassandra-5\n    - 如果不使用 Pet Sets，可以用取得一個動態 hostname 的方式，而這個方式不能夠使用在設定檔，因為設定檔可以隨時修改名字\n4. 一個 PetSet 也允許 stateful app **排序啟動和關閉的 pets**：\n    - 取代隨機終止一個 Pet (app 中的一個 instance)，你會知道哪一個會不見\n    - 當在可以關閉之前，第一次需要從一個 node **倒出**資料的時候，這很有用\n5. 在 PetSets 依然還很多**未來工作**需要完成\n#### Daemon Sets\n1. Daemon Sets 確保 Kubernetes cluster 的**每一個 node** 運行相同的 pod 資源\n    - 如果你想要**確保**特定 pod 運行在每一個 Kubernetes node，這個非常有用\n2. 當一個 node **被新增**到 cluster，新的 pod 就會**自動**被啟動\n3. 同樣地，當一個 node **被移除**，pod 將不會在其它 node 進行**再排程**\n4. 典型的**應用例子**\n    - Logging aggregators\n    - Monitoring\n    - Load Balancers / Reverse Proxies / API Gateways\n    - 運行一個 daemon 在每一個 physical instance 只需要一個 instance\n#### 監控資源用量\n1. Heapster 能夠**監控 Container Cluster** 和**效能分析**\n2. 它提供了 Kubernetes 的監控平台\n3. 它是必要的，如果想要在 Kubernetes 使用 **pod auto-scaling**\n4. Heapster **透過 REST endpoint** 輸出 cluster metrics\n5. 可以與 Heapster 使用**不同的後端**\n    - 範例會使用 InfluxDB，但是其它像是 Google Cloud Monitoring/Logging 和 Kafka 也是可以的\n6. **Visualizations** (圖像) 可以使用 Grafana 表現\n    - Kubernetes 儀表板只要 monitoring 啟動就可以顯示圖表\n7. 所有的這些技術(Heapster、InfluxDB 和 Grafana)都可以在 pods 裡面啟動\n8. **YAML 檔案**可以在 [Heapster 的 github repository](https://github.com/kubernetes/heapster/tree/master/deploy/kube-config/influxdb) 被找到\n    - 在下載完 repository 之後，平台可以使用 addon system 或使用 kubectl create -f directory-with-yaml-files/ 來部署\n#### Demo：監控資源用量\n1. `git clone https://github.com/kubernetes/heapster.git`\n    - 後改用 [1.3 版本](https://github.com/kubernetes/heapster/releases)\n2. `cd heapster/deploy/kube-config/influxdb`\n3. `vim grafana.yaml`\n    - 把這行註解掉 `kubernetes.io/cluster-service: 'true'`\n4. `vim heapster.yaml`\n    - 把這行註解掉 `kubernetes.io/cluster-service: 'true'`\n5. `vim influxdb.yaml`\n    - 把這行註解掉 `kubernetes.io/cluster-service: 'true'`\n6. `cd ..`\n7. `kubectl create -f influxdb`\n8. `kubectl create -f kubernetes-course/deployment/helloworld.yml`\n9. `minikube service monitoring-grafana --namespace=kube-system --url`\n10. 進去 Grafana 之後，選擇左列選單，選擇 Sign In，然後就可以選擇 cluster 或是 pod 觀看目前的狀態\n#### Autoscaling\n1. Kubernetes 可以基於 metrics 來**自動 scale pods**\n2. Kubernetes 可以自動 scale 一個 Deployment、Replication Controller 或 ReplicaSet\n3. 在 Kubernetes 1.3 版本後，**根據 CPU 用量 scaling** 是可以使用的\n    - 有 alpha 的支持，基於 metrics 的 application 是可用的 (像是每秒取得或平均請求延遲)\n        - 要啟動這個，cluster 必須要設 env 變數裡面的 ENABLE\\_CUSTOM_METRICS 為 true 來啟動\n4. Autoscaling 會對目標 pods **定期取得**用量\n    - **預設是 30 秒**，可以在啟動 controller-manager 使用 `--horizontal-pod-autoscaler-sync-period` 來修改\n5. Autoscaling 會使用監控工具 **heapster** 來收集它們的 metrics 和決定如何 scaling\n    - Heapster 必須要在 autoscaling work 之前安裝並運行\n6. **例子**\n    - 運行一個 **200m** 的 **CPU 資源**請求的 **pod** 並在 **pod** 運行一個 **deployment**\n    - 200m = 200 millicpu (或是 200 millicores)\n    - 200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n        - 如果 node 是雙核心，它還是只有單核心的 20%\n    - 可以採用 CPU 用量為 50% 的 autoscaling (也就是 100m)\n    - 水平 Pod Autoscaling 可以增加/減少 pods 來維持目標 CPU 用量為 50%(或是 100m/在 pod 裡面一個核心10%)\n7. 測試 autoscaling\n```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hpa-example\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: hpa-example\n      spec:\n        containers:\n        - name: hpa-example\n          image: gcr.io/google_containers/hpa-example\n          ports:\n          - name: http-port\n            containerPort: 80\n          resources:\n            requests:\n              cpu: 200m\n```\n8. autoscaling specification 範例\n```\napiVersion: autoscaling/v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: hpa-example-autoscaler\nspec:\n  scaleTargetRef:\n    apiVersion: extensions/v1beta1\n    kind: Deployment\n    name: hpa-example\n  minReplicas: 1\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 50\n```\n#### Demo：Autoscaling\n1. `cat autoscaling/hpa-example.yml`\n2. `minikube stop`\n3. `minikube start --extra-config kubelet.EnableCustomMetrics=true`\n4. `kubectl create -f autoscaling/hpa-example.yml`\n5. `kubectl get hpa`\n6. `kubectl run -i --tty load-generator --image=busybox /bin/sh`\n7. `wget http://hpa-example.default.svc.cluster.local:31001`\n8. `cat index.html`\n9. `rm index.html`\n10. `while true; do wget -q -O- http://hpa-example.default.svc.cluster.local:31001; done`\n11. `kubectl get pod`，這時候可以看出他會建立很多個\n12. `kubectl get hpa` 觀看使用狀態","slug":"Kubernetes-快速學習自我挑戰-Day5","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwi000u7ifadmswh3pb","content":"<img src=\"/images/learning/kubernetes/kubernetesday5.png\">\n<hr>\n<h3>進階的主題</h3>\n<h4>Volumes Autoprovisioning</h4>\n<ol>\n<li>Kubernetes plugins 可以<strong>提供 storage</strong></li>\n<li><strong>AWS Plugin</strong> 可以藉由在 AWS 創建 volumes 來<strong>提供 storage</strong>，但是要在 volume 連接到 node 之前才能做</li>\n<li>這些可以使用 <strong>StorageClass object</strong> 來完成\n<ul>\n<li><a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses\" target=\"_blank\" rel=\"external\">Documentation</a></li>\n</ul>\n</li>\n<li>使用 <strong>auto provisioned volumes</strong>，可以創建以下 yaml 檔案：\n<ul>\n<li>storage.yml</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">kind: StorageClass</div><div class=\"line\">apiVersion: storage.k8s.io/v1beta1</div><div class=\"line\">metadata:</div><div class=\"line\">  name: standard</div><div class=\"line\">provisioner: kubernetes.io/aws-ebs</div><div class=\"line\">parameters:</div><div class=\"line\">  type: gp2</div><div class=\"line\">  zone: us-east-1</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>這樣可以創建 volume 並宣告使用 <strong>aws-ebs provisioner</strong></li>\n<li>Kubernetes 將會提供 type <strong>gp2</strong> 的 volume (一般用途 - SSD)</li>\n<li>接下來，可以創建 volume 並宣告和指定容量\n<ul>\n<li>my-volume.claim.yml</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">kind: PersistentVolumeClaim</div><div class=\"line\">apiVersion: v1</div><div class=\"line\">metadata:</div><div class=\"line\">  name: myclaim</div><div class=\"line\">  annotations:</div><div class=\"line\">    volume.beta.kubernetes.io/storage-class: &quot;standard&quot;</div><div class=\"line\">spec:</div><div class=\"line\">  accessModes:</div><div class=\"line\">    - ReadWriteOnce</div><div class=\"line\">  resources:</div><div class=\"line\">    requests:</div><div class=\"line\">      storage: 8Gi</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>最後，可以使用 volume 來啟動 pod\n<ul>\n<li>my-pod.yml</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">kind: Pod</div><div class=\"line\">apiVersion: v1</div><div class=\"line\">metadata:</div><div class=\"line\">  name: mypod</div><div class=\"line\">spec:</div><div class=\"line\">  containers:</div><div class=\"line\">    - name: myfrontend</div><div class=\"line\">      image: nginx</div><div class=\"line\">      volumeMounts:</div><div class=\"line\">      - mountPath: &quot;/var/www/html&quot;</div><div class=\"line\">        name: mypd</div><div class=\"line\">  volumes:</div><div class=\"line\">    - name: mypd</div><div class=\"line\">      persistentVolumeClaim:</div><div class=\"line\">        claimName: myclaim</div></pre></td></tr></table></figure>\n<h4>Demo：使用 Volumes 的 WordPress</h4>\n<ol>\n<li><code>cd wordpress-volumes</code></li>\n<li><code>cat storage.yml</code></li>\n<li><code>cat pv-claim.yml</code></li>\n<li><code>cat wordpress-db.yml</code></li>\n<li><code>cat wordpress-db-service.yml</code></li>\n<li><code>cat wordpress-secrets.yml</code></li>\n<li><code>cat wordpress-web.yml</code></li>\n<li><code>cat wordpress-web-service.yml</code></li>\n<li><a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\" target=\"_blank\" rel=\"external\">查詢 AWS 服務區域</a><br>\n<code>aws efs create-file-system --creation-token 1 --region ap-southeast-2</code></li>\n<li>找尋 SubnetId 和 SecurityGroups<br>\n<code>aws ec2 describe-instances --region ap-southeast-2</code></li>\n<li><code>aws efs create-mount-target --file-system-id fs-518f6c68 --subnet-id subnet-5ed8c73a --security-groups sg-5154a737 --region ap-southeast-2</code></li>\n<li>修改倒數第二行的 server<br>\n<code>vim wordpress-web.yml</code></li>\n<li><code>kubectl create -f storage.yml</code></li>\n<li><code>kubectl create -f pv-claim.yml</code></li>\n<li><code>kubectl create -f wordpress-secrets.yml</code></li>\n<li><code>kubectl create -f wordpress-db.yml</code></li>\n<li><code>kubectl create -f wordpress-db-service.yml</code></li>\n<li><code>kubectl get pvc</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl describe pod wordpress-db-8n665</code></li>\n<li><code>kubectl create -f wordpress-web.yml</code></li>\n<li><code>kubectl create -f wordpress-web-service.yml</code></li>\n<li>去 Route53 新增一個 DNS record - wordpress.<domain>，在 alias 的地方打勾，選擇剛剛建立的 LoadBalancer</domain></li>\n<li><code>kubectl edit deployment/wordpress-deployment</code> 把以下五行加到 35 行之後，把後面 env 縮排進去並刪除 -，完成之後就發現 wordpress 可以上傳圖片了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- command:</div><div class=\"line\">  - bash</div><div class=\"line\">  - -c</div><div class=\"line\">  - chown www-data:www-data /var/www/html/wp-content/uploads &amp;&amp; docker-entrypoint.sh apache2-foreground</div><div class=\"line\">  env: </div><div class=\"line\">  - name:</div></pre></td></tr></table></figure>\n<ol start=\"25\">\n<li><code>kubectl get pod</code></li>\n<li>刪除所有的 pod，就會發現會全部自動重啟<br>\n<code>kubectl delete pod wordpress-db-5cgvm</code><br>\n<code>kubectl delete pod/wordpress-deployment-1534735485-71kjs</code><br>\n<code>kubectl delete pod wordpress-deployment-1534735485-j74hb</code></li>\n<li><code>kubectl get pod</code>，再一次 get pod 就會發現 pod 全部重啟了</li>\n<li><code>kubectl logs wordpress-deployment-1534735485-0wtxq</code></li>\n<li><code>kubectl exec wordpress-deployment-1534735485-0wtxq -i -t -- bash</code></li>\n<li><code>ls -ahl -R wp-content/uploads/</code> 會發現檔案都還在</li>\n</ol>\n<h4>Pet Sets</h4>\n<ol>\n<li>Pet Sets 是從 Kubernetes 1.3 之後開始的<strong>新功能</strong></li>\n<li>要執行 <strong>stateful application</strong> 需要：\n<ul>\n<li>一個<strong>穩定的 pod hostname</strong>(取代 podname-randomstring)\n<ul>\n<li>當一個 pod 有很多 instances，podname 需要有索引(例如：podname-1、podname-2、podname-3)</li>\n</ul>\n</li>\n<li>一個 <strong>stateful app</strong> 需要基於序號數(podname-<strong>x</strong>)或 hostname 的<strong>多個</strong>有 volumes 的 <strong>pods</strong>\n<ul>\n<li>目前<strong>刪除</strong>和/或<strong>擴展</strong>一個 <strong>PetSet down</strong>不會刪除跟 PetSet 有關連的 Volume</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一個 PetSet 允許 stateful app 使用 <strong>DNS</strong> 找尋其它<strong>同伴</strong>\n<ul>\n<li>Cassandra clusters、ElasticSearch clusters 使用 <strong>DNS</strong> 來找到其它 cluster 的 members</li>\n<li>在 Pet Set 之中<strong>一個</strong>運行中的 <strong>node</strong> 叫做 <strong>一個 Pet</strong> (例如：Cassandra 中的一個 node)</li>\n<li>舉例來說： 在 Kubernetes 上使用 Pet Sets 的五個 cassandra nodes，可以命名為 cassandra-1 到 cassandra-5</li>\n<li>如果不使用 Pet Sets，可以用取得一個動態 hostname 的方式，而這個方式不能夠使用在設定檔，因為設定檔可以隨時修改名字</li>\n</ul>\n</li>\n<li>一個 PetSet 也允許 stateful app <strong>排序啟動和關閉的 pets</strong>：\n<ul>\n<li>取代隨機終止一個 Pet (app 中的一個 instance)，你會知道哪一個會不見</li>\n<li>當在可以關閉之前，第一次需要從一個 node <strong>倒出</strong>資料的時候，這很有用</li>\n</ul>\n</li>\n<li>在 PetSets 依然還很多<strong>未來工作</strong>需要完成</li>\n</ol>\n<h4>Daemon Sets</h4>\n<ol>\n<li>Daemon Sets 確保 Kubernetes cluster 的<strong>每一個 node</strong> 運行相同的 pod 資源\n<ul>\n<li>如果你想要<strong>確保</strong>特定 pod 運行在每一個 Kubernetes node，這個非常有用</li>\n</ul>\n</li>\n<li>當一個 node <strong>被新增</strong>到 cluster，新的 pod 就會<strong>自動</strong>被啟動</li>\n<li>同樣地，當一個 node <strong>被移除</strong>，pod 將不會在其它 node 進行<strong>再排程</strong></li>\n<li>典型的<strong>應用例子</strong>\n<ul>\n<li>Logging aggregators</li>\n<li>Monitoring</li>\n<li>Load Balancers / Reverse Proxies / API Gateways</li>\n<li>運行一個 daemon 在每一個 physical instance 只需要一個 instance</li>\n</ul>\n</li>\n</ol>\n<h4>監控資源用量</h4>\n<ol>\n<li>Heapster 能夠<strong>監控 Container Cluster</strong> 和<strong>效能分析</strong></li>\n<li>它提供了 Kubernetes 的監控平台</li>\n<li>它是必要的，如果想要在 Kubernetes 使用 <strong>pod auto-scaling</strong></li>\n<li>Heapster <strong>透過 REST endpoint</strong> 輸出 cluster metrics</li>\n<li>可以與 Heapster 使用<strong>不同的後端</strong>\n<ul>\n<li>範例會使用 InfluxDB，但是其它像是 Google Cloud Monitoring/Logging 和 Kafka 也是可以的</li>\n</ul>\n</li>\n<li><strong>Visualizations</strong> (圖像) 可以使用 Grafana 表現\n<ul>\n<li>Kubernetes 儀表板只要 monitoring 啟動就可以顯示圖表</li>\n</ul>\n</li>\n<li>所有的這些技術(Heapster、InfluxDB 和 Grafana)都可以在 pods 裡面啟動</li>\n<li><strong>YAML 檔案</strong>可以在 <a href=\"https://github.com/kubernetes/heapster/tree/master/deploy/kube-config/influxdb\" target=\"_blank\" rel=\"external\">Heapster 的 github repository</a> 被找到\n<ul>\n<li>在下載完 repository 之後，平台可以使用 addon system 或使用 kubectl create -f directory-with-yaml-files/ 來部署</li>\n</ul>\n</li>\n</ol>\n<h4>Demo：監控資源用量</h4>\n<ol>\n<li><code>git clone https://github.com/kubernetes/heapster.git</code>\n<ul>\n<li>後改用 <a href=\"https://github.com/kubernetes/heapster/releases\" target=\"_blank\" rel=\"external\">1.3 版本</a></li>\n</ul>\n</li>\n<li><code>cd heapster/deploy/kube-config/influxdb</code></li>\n<li><code>vim grafana.yaml</code>\n<ul>\n<li>把這行註解掉 <code>kubernetes.io/cluster-service: 'true'</code></li>\n</ul>\n</li>\n<li><code>vim heapster.yaml</code>\n<ul>\n<li>把這行註解掉 <code>kubernetes.io/cluster-service: 'true'</code></li>\n</ul>\n</li>\n<li><code>vim influxdb.yaml</code>\n<ul>\n<li>把這行註解掉 <code>kubernetes.io/cluster-service: 'true'</code></li>\n</ul>\n</li>\n<li><code>cd ..</code></li>\n<li><code>kubectl create -f influxdb</code></li>\n<li><code>kubectl create -f kubernetes-course/deployment/helloworld.yml</code></li>\n<li><code>minikube service monitoring-grafana --namespace=kube-system --url</code></li>\n<li>進去 Grafana 之後，選擇左列選單，選擇 Sign In，然後就可以選擇 cluster 或是 pod 觀看目前的狀態</li>\n</ol>\n<h4>Autoscaling</h4>\n<ol>\n<li>Kubernetes 可以基於 metrics 來<strong>自動 scale pods</strong></li>\n<li>Kubernetes 可以自動 scale 一個 Deployment、Replication Controller 或 ReplicaSet</li>\n<li>在 Kubernetes 1.3 版本後，<strong>根據 CPU 用量 scaling</strong> 是可以使用的\n<ul>\n<li>有 alpha 的支持，基於 metrics 的 application 是可用的 (像是每秒取得或平均請求延遲)\n<ul>\n<li>要啟動這個，cluster 必須要設 env 變數裡面的 ENABLE_CUSTOM_METRICS 為 true 來啟動</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Autoscaling 會對目標 pods <strong>定期取得</strong>用量\n<ul>\n<li><strong>預設是 30 秒</strong>，可以在啟動 controller-manager 使用 <code>--horizontal-pod-autoscaler-sync-period</code> 來修改</li>\n</ul>\n</li>\n<li>Autoscaling 會使用監控工具 <strong>heapster</strong> 來收集它們的 metrics 和決定如何 scaling\n<ul>\n<li>Heapster 必須要在 autoscaling work 之前安裝並運行</li>\n</ul>\n</li>\n<li><strong>例子</strong>\n<ul>\n<li>運行一個 <strong>200m</strong> 的 <strong>CPU 資源</strong>請求的 <strong>pod</strong> 並在 <strong>pod</strong> 運行一個 <strong>deployment</strong></li>\n<li>200m = 200 millicpu (或是 200 millicores)</li>\n<li>200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n<ul>\n<li>如果 node 是雙核心，它還是只有單核心的 20%</li>\n</ul>\n</li>\n<li>可以採用 CPU 用量為 50% 的 autoscaling (也就是 100m)</li>\n<li>水平 Pod Autoscaling 可以增加/減少 pods 來維持目標 CPU 用量為 50%(或是 100m/在 pod 裡面一個核心10%)</li>\n</ul>\n</li>\n<li>測試 autoscaling</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: extensions/v1beta1</div><div class=\"line\">kind: Deployment</div><div class=\"line\">metadata:</div><div class=\"line\">  name: hpa-example</div><div class=\"line\">spec:</div><div class=\"line\">  replicas: 3</div><div class=\"line\">  template:</div><div class=\"line\">    metadata:</div><div class=\"line\">      labels:</div><div class=\"line\">        app: hpa-example</div><div class=\"line\">      spec:</div><div class=\"line\">        containers:</div><div class=\"line\">        - name: hpa-example</div><div class=\"line\">          image: gcr.io/google_containers/hpa-example</div><div class=\"line\">          ports:</div><div class=\"line\">          - name: http-port</div><div class=\"line\">            containerPort: 80</div><div class=\"line\">          resources:</div><div class=\"line\">            requests:</div><div class=\"line\">              cpu: 200m</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>autoscaling specification 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: autoscaling/v1</div><div class=\"line\">kind: HorizontalPodAutoscaler</div><div class=\"line\">metadata:</div><div class=\"line\">  name: hpa-example-autoscaler</div><div class=\"line\">spec:</div><div class=\"line\">  scaleTargetRef:</div><div class=\"line\">    apiVersion: extensions/v1beta1</div><div class=\"line\">    kind: Deployment</div><div class=\"line\">    name: hpa-example</div><div class=\"line\">  minReplicas: 1</div><div class=\"line\">  maxReplicas: 10</div><div class=\"line\">  targetCPUUtilizationPercentage: 50</div></pre></td></tr></table></figure>\n<h4>Demo：Autoscaling</h4>\n<ol>\n<li><code>cat autoscaling/hpa-example.yml</code></li>\n<li><code>minikube stop</code></li>\n<li><code>minikube start --extra-config kubelet.EnableCustomMetrics=true</code></li>\n<li><code>kubectl create -f autoscaling/hpa-example.yml</code></li>\n<li><code>kubectl get hpa</code></li>\n<li><code>kubectl run -i --tty load-generator --image=busybox /bin/sh</code></li>\n<li><code>wget http://hpa-example.default.svc.cluster.local:31001</code></li>\n<li><code>cat index.html</code></li>\n<li><code>rm index.html</code></li>\n<li><code>while true; do wget -q -O- http://hpa-example.default.svc.cluster.local:31001; done</code></li>\n<li><code>kubectl get pod</code>，這時候可以看出他會建立很多個</li>\n<li><code>kubectl get hpa</code> 觀看使用狀態</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/kubernetes/kubernetesday5.png\">\n<hr>\n<h3>進階的主題</h3>\n<h4>Volumes Autoprovisioning</h4>\n<ol>\n<li>Kubernetes plugins 可以<strong>提供 storage</strong></li>\n<li><strong>AWS Plugin</strong> 可以藉由在 AWS 創建 volumes 來<strong>提供 storage</strong>，但是要在 volume 連接到 node 之前才能做</li>\n<li>這些可以使用 <strong>StorageClass object</strong> 來完成\n<ul>\n<li><a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses\" target=\"_blank\" rel=\"external\">Documentation</a></li>\n</ul>\n</li>\n<li>使用 <strong>auto provisioned volumes</strong>，可以創建以下 yaml 檔案：\n<ul>\n<li>storage.yml</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">kind: StorageClass</div><div class=\"line\">apiVersion: storage.k8s.io/v1beta1</div><div class=\"line\">metadata:</div><div class=\"line\">  name: standard</div><div class=\"line\">provisioner: kubernetes.io/aws-ebs</div><div class=\"line\">parameters:</div><div class=\"line\">  type: gp2</div><div class=\"line\">  zone: us-east-1</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>這樣可以創建 volume 並宣告使用 <strong>aws-ebs provisioner</strong></li>\n<li>Kubernetes 將會提供 type <strong>gp2</strong> 的 volume (一般用途 - SSD)</li>\n<li>接下來，可以創建 volume 並宣告和指定容量\n<ul>\n<li>my-volume.claim.yml</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">kind: PersistentVolumeClaim</div><div class=\"line\">apiVersion: v1</div><div class=\"line\">metadata:</div><div class=\"line\">  name: myclaim</div><div class=\"line\">  annotations:</div><div class=\"line\">    volume.beta.kubernetes.io/storage-class: &quot;standard&quot;</div><div class=\"line\">spec:</div><div class=\"line\">  accessModes:</div><div class=\"line\">    - ReadWriteOnce</div><div class=\"line\">  resources:</div><div class=\"line\">    requests:</div><div class=\"line\">      storage: 8Gi</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>最後，可以使用 volume 來啟動 pod\n<ul>\n<li>my-pod.yml</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">kind: Pod</div><div class=\"line\">apiVersion: v1</div><div class=\"line\">metadata:</div><div class=\"line\">  name: mypod</div><div class=\"line\">spec:</div><div class=\"line\">  containers:</div><div class=\"line\">    - name: myfrontend</div><div class=\"line\">      image: nginx</div><div class=\"line\">      volumeMounts:</div><div class=\"line\">      - mountPath: &quot;/var/www/html&quot;</div><div class=\"line\">        name: mypd</div><div class=\"line\">  volumes:</div><div class=\"line\">    - name: mypd</div><div class=\"line\">      persistentVolumeClaim:</div><div class=\"line\">        claimName: myclaim</div></pre></td></tr></table></figure>\n<h4>Demo：使用 Volumes 的 WordPress</h4>\n<ol>\n<li><code>cd wordpress-volumes</code></li>\n<li><code>cat storage.yml</code></li>\n<li><code>cat pv-claim.yml</code></li>\n<li><code>cat wordpress-db.yml</code></li>\n<li><code>cat wordpress-db-service.yml</code></li>\n<li><code>cat wordpress-secrets.yml</code></li>\n<li><code>cat wordpress-web.yml</code></li>\n<li><code>cat wordpress-web-service.yml</code></li>\n<li><a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\" target=\"_blank\" rel=\"external\">查詢 AWS 服務區域</a><br>\n<code>aws efs create-file-system --creation-token 1 --region ap-southeast-2</code></li>\n<li>找尋 SubnetId 和 SecurityGroups<br>\n<code>aws ec2 describe-instances --region ap-southeast-2</code></li>\n<li><code>aws efs create-mount-target --file-system-id fs-518f6c68 --subnet-id subnet-5ed8c73a --security-groups sg-5154a737 --region ap-southeast-2</code></li>\n<li>修改倒數第二行的 server<br>\n<code>vim wordpress-web.yml</code></li>\n<li><code>kubectl create -f storage.yml</code></li>\n<li><code>kubectl create -f pv-claim.yml</code></li>\n<li><code>kubectl create -f wordpress-secrets.yml</code></li>\n<li><code>kubectl create -f wordpress-db.yml</code></li>\n<li><code>kubectl create -f wordpress-db-service.yml</code></li>\n<li><code>kubectl get pvc</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl describe pod wordpress-db-8n665</code></li>\n<li><code>kubectl create -f wordpress-web.yml</code></li>\n<li><code>kubectl create -f wordpress-web-service.yml</code></li>\n<li>去 Route53 新增一個 DNS record - wordpress.<domain>，在 alias 的地方打勾，選擇剛剛建立的 LoadBalancer</domain></li>\n<li><code>kubectl edit deployment/wordpress-deployment</code> 把以下五行加到 35 行之後，把後面 env 縮排進去並刪除 -，完成之後就發現 wordpress 可以上傳圖片了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- command:</div><div class=\"line\">  - bash</div><div class=\"line\">  - -c</div><div class=\"line\">  - chown www-data:www-data /var/www/html/wp-content/uploads &amp;&amp; docker-entrypoint.sh apache2-foreground</div><div class=\"line\">  env: </div><div class=\"line\">  - name:</div></pre></td></tr></table></figure>\n<ol start=\"25\">\n<li><code>kubectl get pod</code></li>\n<li>刪除所有的 pod，就會發現會全部自動重啟<br>\n<code>kubectl delete pod wordpress-db-5cgvm</code><br>\n<code>kubectl delete pod/wordpress-deployment-1534735485-71kjs</code><br>\n<code>kubectl delete pod wordpress-deployment-1534735485-j74hb</code></li>\n<li><code>kubectl get pod</code>，再一次 get pod 就會發現 pod 全部重啟了</li>\n<li><code>kubectl logs wordpress-deployment-1534735485-0wtxq</code></li>\n<li><code>kubectl exec wordpress-deployment-1534735485-0wtxq -i -t -- bash</code></li>\n<li><code>ls -ahl -R wp-content/uploads/</code> 會發現檔案都還在</li>\n</ol>\n<h4>Pet Sets</h4>\n<ol>\n<li>Pet Sets 是從 Kubernetes 1.3 之後開始的<strong>新功能</strong></li>\n<li>要執行 <strong>stateful application</strong> 需要：\n<ul>\n<li>一個<strong>穩定的 pod hostname</strong>(取代 podname-randomstring)\n<ul>\n<li>當一個 pod 有很多 instances，podname 需要有索引(例如：podname-1、podname-2、podname-3)</li>\n</ul>\n</li>\n<li>一個 <strong>stateful app</strong> 需要基於序號數(podname-<strong>x</strong>)或 hostname 的<strong>多個</strong>有 volumes 的 <strong>pods</strong>\n<ul>\n<li>目前<strong>刪除</strong>和/或<strong>擴展</strong>一個 <strong>PetSet down</strong>不會刪除跟 PetSet 有關連的 Volume</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一個 PetSet 允許 stateful app 使用 <strong>DNS</strong> 找尋其它<strong>同伴</strong>\n<ul>\n<li>Cassandra clusters、ElasticSearch clusters 使用 <strong>DNS</strong> 來找到其它 cluster 的 members</li>\n<li>在 Pet Set 之中<strong>一個</strong>運行中的 <strong>node</strong> 叫做 <strong>一個 Pet</strong> (例如：Cassandra 中的一個 node)</li>\n<li>舉例來說： 在 Kubernetes 上使用 Pet Sets 的五個 cassandra nodes，可以命名為 cassandra-1 到 cassandra-5</li>\n<li>如果不使用 Pet Sets，可以用取得一個動態 hostname 的方式，而這個方式不能夠使用在設定檔，因為設定檔可以隨時修改名字</li>\n</ul>\n</li>\n<li>一個 PetSet 也允許 stateful app <strong>排序啟動和關閉的 pets</strong>：\n<ul>\n<li>取代隨機終止一個 Pet (app 中的一個 instance)，你會知道哪一個會不見</li>\n<li>當在可以關閉之前，第一次需要從一個 node <strong>倒出</strong>資料的時候，這很有用</li>\n</ul>\n</li>\n<li>在 PetSets 依然還很多<strong>未來工作</strong>需要完成</li>\n</ol>\n<h4>Daemon Sets</h4>\n<ol>\n<li>Daemon Sets 確保 Kubernetes cluster 的<strong>每一個 node</strong> 運行相同的 pod 資源\n<ul>\n<li>如果你想要<strong>確保</strong>特定 pod 運行在每一個 Kubernetes node，這個非常有用</li>\n</ul>\n</li>\n<li>當一個 node <strong>被新增</strong>到 cluster，新的 pod 就會<strong>自動</strong>被啟動</li>\n<li>同樣地，當一個 node <strong>被移除</strong>，pod 將不會在其它 node 進行<strong>再排程</strong></li>\n<li>典型的<strong>應用例子</strong>\n<ul>\n<li>Logging aggregators</li>\n<li>Monitoring</li>\n<li>Load Balancers / Reverse Proxies / API Gateways</li>\n<li>運行一個 daemon 在每一個 physical instance 只需要一個 instance</li>\n</ul>\n</li>\n</ol>\n<h4>監控資源用量</h4>\n<ol>\n<li>Heapster 能夠<strong>監控 Container Cluster</strong> 和<strong>效能分析</strong></li>\n<li>它提供了 Kubernetes 的監控平台</li>\n<li>它是必要的，如果想要在 Kubernetes 使用 <strong>pod auto-scaling</strong></li>\n<li>Heapster <strong>透過 REST endpoint</strong> 輸出 cluster metrics</li>\n<li>可以與 Heapster 使用<strong>不同的後端</strong>\n<ul>\n<li>範例會使用 InfluxDB，但是其它像是 Google Cloud Monitoring/Logging 和 Kafka 也是可以的</li>\n</ul>\n</li>\n<li><strong>Visualizations</strong> (圖像) 可以使用 Grafana 表現\n<ul>\n<li>Kubernetes 儀表板只要 monitoring 啟動就可以顯示圖表</li>\n</ul>\n</li>\n<li>所有的這些技術(Heapster、InfluxDB 和 Grafana)都可以在 pods 裡面啟動</li>\n<li><strong>YAML 檔案</strong>可以在 <a href=\"https://github.com/kubernetes/heapster/tree/master/deploy/kube-config/influxdb\" target=\"_blank\" rel=\"external\">Heapster 的 github repository</a> 被找到\n<ul>\n<li>在下載完 repository 之後，平台可以使用 addon system 或使用 kubectl create -f directory-with-yaml-files/ 來部署</li>\n</ul>\n</li>\n</ol>\n<h4>Demo：監控資源用量</h4>\n<ol>\n<li><code>git clone https://github.com/kubernetes/heapster.git</code>\n<ul>\n<li>後改用 <a href=\"https://github.com/kubernetes/heapster/releases\" target=\"_blank\" rel=\"external\">1.3 版本</a></li>\n</ul>\n</li>\n<li><code>cd heapster/deploy/kube-config/influxdb</code></li>\n<li><code>vim grafana.yaml</code>\n<ul>\n<li>把這行註解掉 <code>kubernetes.io/cluster-service: 'true'</code></li>\n</ul>\n</li>\n<li><code>vim heapster.yaml</code>\n<ul>\n<li>把這行註解掉 <code>kubernetes.io/cluster-service: 'true'</code></li>\n</ul>\n</li>\n<li><code>vim influxdb.yaml</code>\n<ul>\n<li>把這行註解掉 <code>kubernetes.io/cluster-service: 'true'</code></li>\n</ul>\n</li>\n<li><code>cd ..</code></li>\n<li><code>kubectl create -f influxdb</code></li>\n<li><code>kubectl create -f kubernetes-course/deployment/helloworld.yml</code></li>\n<li><code>minikube service monitoring-grafana --namespace=kube-system --url</code></li>\n<li>進去 Grafana 之後，選擇左列選單，選擇 Sign In，然後就可以選擇 cluster 或是 pod 觀看目前的狀態</li>\n</ol>\n<h4>Autoscaling</h4>\n<ol>\n<li>Kubernetes 可以基於 metrics 來<strong>自動 scale pods</strong></li>\n<li>Kubernetes 可以自動 scale 一個 Deployment、Replication Controller 或 ReplicaSet</li>\n<li>在 Kubernetes 1.3 版本後，<strong>根據 CPU 用量 scaling</strong> 是可以使用的\n<ul>\n<li>有 alpha 的支持，基於 metrics 的 application 是可用的 (像是每秒取得或平均請求延遲)\n<ul>\n<li>要啟動這個，cluster 必須要設 env 變數裡面的 ENABLE_CUSTOM_METRICS 為 true 來啟動</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Autoscaling 會對目標 pods <strong>定期取得</strong>用量\n<ul>\n<li><strong>預設是 30 秒</strong>，可以在啟動 controller-manager 使用 <code>--horizontal-pod-autoscaler-sync-period</code> 來修改</li>\n</ul>\n</li>\n<li>Autoscaling 會使用監控工具 <strong>heapster</strong> 來收集它們的 metrics 和決定如何 scaling\n<ul>\n<li>Heapster 必須要在 autoscaling work 之前安裝並運行</li>\n</ul>\n</li>\n<li><strong>例子</strong>\n<ul>\n<li>運行一個 <strong>200m</strong> 的 <strong>CPU 資源</strong>請求的 <strong>pod</strong> 並在 <strong>pod</strong> 運行一個 <strong>deployment</strong></li>\n<li>200m = 200 millicpu (或是 200 millicores)</li>\n<li>200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n<ul>\n<li>如果 node 是雙核心，它還是只有單核心的 20%</li>\n</ul>\n</li>\n<li>可以採用 CPU 用量為 50% 的 autoscaling (也就是 100m)</li>\n<li>水平 Pod Autoscaling 可以增加/減少 pods 來維持目標 CPU 用量為 50%(或是 100m/在 pod 裡面一個核心10%)</li>\n</ul>\n</li>\n<li>測試 autoscaling</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: extensions/v1beta1</div><div class=\"line\">kind: Deployment</div><div class=\"line\">metadata:</div><div class=\"line\">  name: hpa-example</div><div class=\"line\">spec:</div><div class=\"line\">  replicas: 3</div><div class=\"line\">  template:</div><div class=\"line\">    metadata:</div><div class=\"line\">      labels:</div><div class=\"line\">        app: hpa-example</div><div class=\"line\">      spec:</div><div class=\"line\">        containers:</div><div class=\"line\">        - name: hpa-example</div><div class=\"line\">          image: gcr.io/google_containers/hpa-example</div><div class=\"line\">          ports:</div><div class=\"line\">          - name: http-port</div><div class=\"line\">            containerPort: 80</div><div class=\"line\">          resources:</div><div class=\"line\">            requests:</div><div class=\"line\">              cpu: 200m</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>autoscaling specification 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: autoscaling/v1</div><div class=\"line\">kind: HorizontalPodAutoscaler</div><div class=\"line\">metadata:</div><div class=\"line\">  name: hpa-example-autoscaler</div><div class=\"line\">spec:</div><div class=\"line\">  scaleTargetRef:</div><div class=\"line\">    apiVersion: extensions/v1beta1</div><div class=\"line\">    kind: Deployment</div><div class=\"line\">    name: hpa-example</div><div class=\"line\">  minReplicas: 1</div><div class=\"line\">  maxReplicas: 10</div><div class=\"line\">  targetCPUUtilizationPercentage: 50</div></pre></td></tr></table></figure>\n<h4>Demo：Autoscaling</h4>\n<ol>\n<li><code>cat autoscaling/hpa-example.yml</code></li>\n<li><code>minikube stop</code></li>\n<li><code>minikube start --extra-config kubelet.EnableCustomMetrics=true</code></li>\n<li><code>kubectl create -f autoscaling/hpa-example.yml</code></li>\n<li><code>kubectl get hpa</code></li>\n<li><code>kubectl run -i --tty load-generator --image=busybox /bin/sh</code></li>\n<li><code>wget http://hpa-example.default.svc.cluster.local:31001</code></li>\n<li><code>cat index.html</code></li>\n<li><code>rm index.html</code></li>\n<li><code>while true; do wget -q -O- http://hpa-example.default.svc.cluster.local:31001; done</code></li>\n<li><code>kubectl get pod</code>，這時候可以看出他會建立很多個</li>\n<li><code>kubectl get hpa</code> 觀看使用狀態</li>\n</ol>\n"},{"title":"Kubernetes 快速學習自我挑戰 Day6","thumbnail":["/images/learning/kubernetes/kubernetesday6.png"],"date":"2017-08-29T01:40:46.000Z","_content":"<img src=\"/images/learning/kubernetes/kubernetesday6.png\">\n\n***\n### Kubernetes 管理\n#### Kubernetes 的 Master 服務\n1. Kubectl 要和 REST 介面溝通，在溝通之前，要做 authorization\n2. Kubernetes 用 etcd 當作後端\n3. Scheduler 會負責排程 pod，可以使用預設的或是外掛\n#### 資源配額\n1. 當 Kubernetes cluster 被很多**人**或**團隊**使用的時候，**資源管理**變得非常重要\n    - 你想要能夠**管理資源**，你可以給一個人或一個團隊\n    - 你不想要一個人或團隊**占用 cluster 的所有資源**(例如：CPU 或記憶體)\n2. 可以使用 **namespaces** 來分離 cluster 且在上面啟用資源配額\n    - 可以用 **ResourceQuota** 和 **ObjectQuota** objects 來實現\n3. 每一個 container 都可以指定 **request capacity** 和 **capacity limits**\n    - **Request capacity** 對資源來說是一種明確的請求\n        - Scheduler 可以使用 **request capacity** 來決定要把 pod 放在哪裡\n        - 可以看成 **pod 需要的最少資源量**\n    - **Resource limit** 是一種對 container 的限制規定\n        - container 沒辦法利用比指定更多的資源\n4. resource quotas 範例\n    - 運行一個 **CPU resource** request 為 **200m** 的 **deployment** 在 **pod** 上面\n    - 200m = 200millicpu (或是 200 millicores)\n    - 200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n        - 如果 node 是雙核心，它還是只有單核心的 20%\n    - 也可以限制它，例如：400m\n    - Memory quotas 用 MiB 或 GiB 來定義\n5. 如果一個 capacity quota (例如：記憶體/cpu) 已經被管理者指定，那麼在創建 pod 的時候一定要指定 capacity quota\n    - 管理者可以為 pod 指定預設 request 值，且不需要為 capacity 指定任何值\n    - 對 limit quotas 一樣有效\n6. 如果資源被請求的次數高於允許的 capacity，伺服器 API 會丟出 403 FORBIDDEN 錯誤，且 kubectl 會顯示錯誤\n7. 管理者可以用一個 namespace 設定以下 resource limits\n\n| Resource | Description |\n| :-------------: | :---------------: |\n| requests.cpu | 全部 pods 的 **CPU requests** 總和不能超過這個值 |\n| requests.mem | 全部 pods 的 **MEM requests** 總和不能超過這個值 |\n| requests.storage | 全部 persistent volume 的 **storage requests** 總和不能超過這個值 |\n| limits.cpu | 全部 pods 的 **CPU limits** 總和不能超過這個值 |\n| limits.memory| 全部 pods 的 **MEM limits** 總和不能超過這個值 |\n8. 管理者可以設定以下 objects limits\n\n| Resource | Description |\n| :-------------: | :---------------: |\n| configmaps | 可以存在 namespace 的 **configmaps** 總數 |\n| persistentvolumeclaims | 可以存在 namespace 的 **persistent volume claims** 總數 |\n| pods | 可以存在 namespace 的 **pods** 總數 |\n| replicationcontrollers | 可以存在 namespace 的 **replicationcontrollers** 總數 |\n| resourcequotas | 可以存在 namespace 的 **resource quotas** 總數 |\n| services | 可以存在 namespace 的 **services** 總數 |\n| services.loadbalancer | 可以存在 namespace 的 **load balancers** 總數 |\n| services.nodeports | 可以存在 namespace 的 **nodeports** 總數 |\n| secrets | 可以存在 namespace 的 **secrets** 總數 |\n#### Namespaces\n1. Namespaces 可以在 phisical cluster 裡面創建 **virtual cluster**\n2. Namespaces **有邏輯的分離** cluster\n3. 標準的 namespace 叫做 \"**default**\"，而且那是所有資源預設啟動的地方\n    - 另外一個為 Kubernetes 特定資源擁有的 namespace，叫做 **kube-system**\n4. Namespaces 是有必要的，當同時有**很多團隊/專案**使用 kubernetes cluster\n5. 資源名稱在一個 namespace 必須要是獨一無二的，而且不能跨越 namespaces\n    - 例如：在不同 namespaces 可以擁有叫做 \"helloworld\" 的 deployment 很多次，但是在一個 namespace 不能有兩次\n6. 可以使用 namespaces 來分開一個 Kubernetes cluster 的資源\n    - 你可以以每一個單一 namespace 為基礎來限制資源\n    - 例如：市場組只能使用最多 10 GiB 的記憶體、2 個 Loadbalancers、2 核心 CPU\n7. 首先，你必須要先創建一個 namespace\n`kubectl create namespace myspace`\n8. 你可以列出所有 namespaces\n`kubectl get namespaces`\n9. 如果想要設定預設 namespace 來啟動資源\n`export CONTENT=$(kubectl config view | awk '/current-context/ {print $2}'`)\n`kubectl config set-context $CONTEXT --namespace=myspace`\n10. 接下來可以在 namespace 建立 resource limits\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-resources\n  namespace: myspace\nspec:\n  hard:\n    requests.cpu: \"1\"\n    requests.memory: 1Gi\n    limits.cpu: \"2\"\n    limits.memory: 2Gi\n```\n11. 也可以建立 object limits：\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: object-counts\n  namespace: myspace\nspec:\n  hard:\n    configmaps: \"10\"\n    persistentvolumeclaims: \"4\"\n    relicationcontrollers: \"20\"\n    secrets: \"10\"\n    services: \"10\"\n    services.loadbalancers: \"2\"\n```\n#### Demo：Namespace quotas\n1. `cat resourcequotas/resourcequota.yml`\n2. `kubectl create -f resourcequotas/resourcequota.yml`\n3. `cat resourcequotas/helloworld-no-quotas.yml`\n4. `kubectl create -f resourcequotas/helloworld-no-quotas.yml`\n5. `kubectl get deploy --namespace=myspace`\n6. `kubectl get rs --namespace=myspace`\n7. `kubectl describe rs/helloworld-deployment-4153696333 --namespace=myspace`\n會發現出現錯誤 failed quota，因為沒有指定限定資源，而本身 namespace 有限定資源\n8. `kubectl delete deploy/helloworld-deployment --namespace=myspace`\n9. `cat resourcequotas/helloworld-with-quotas.yml`\n10. `kubectl create -f resourcequotas/helloworld-with-quotas.yml`\n11. `kubectl get pod --namespace=myspace`\n這邊會發現，我明明要求三個 replicas，可是只出現兩個\n12. `kubectl get rs --namespace=myspace`\n13. `kubectl describe rs/helloworld-deployment-1576367412 --namespace=myspace`\n14. `kubectl get quota --namespace=myspace`\n15. `kubectl describe quota/compute-quota --namespace=myspace`\n16. `kubectl delete deploy/helloworld-deployment --namespace=myspace`\n17. `cat resourcequotas/defaults.yml`\n18. `kubectl describe limits limits --namespace=myspace`\n19. `kubectl create -f resourcequotas/helloworld-no-quotas.yml`\n20. `kubectl get pods --namespace=myspace`\n#### User 管理\n1. 有**兩種** users 可以創建\n    - **Normal user**，可以外部存取 user\n        - 例如：through kubectl\n        - 這個 user 不能使用 object 來管理\n    - **Service user**，可以在 Kubernetes 用 object 管理的 user\n        - 這個類型的 user 只能用在 cluster **裡面 authenticate**\n        - 例如：從 pod 裡面，或從 kubelet\n        - 這些 credentials 被像是 **Secrets** 管理\n2. 對 normal users 有很多 **authentication strategies**\n    - Client Cetificates\n    - Bearer Tokens\n    - Authentication Proxy\n    - HTTP Basic Authentication\n    - OpenID\n    - Webhooks\n3. Service Users 使用 **Service Account Tokens**\n4. 它們被儲存為 **credentials 且使用 Secrets**\n    - 那些 Secrets 被掛接在 pods 裡面來讓服務之間溝通\n5. Service Users **對 namespace 是特定的**\n6. 它們被用 API 自動建立或使用 **objects** 手動建立\n7. 任何 API 被稱為 **not authenticated** 被視為 **anonymous** user\n8. 獨立在認證機制之外，normal users 有以下特質：\n    - 一個 Username (例如：user123 或 user@email.com)\n    - 一個 UID\n    - Groups\n    - 其它儲存其它資訊的 field\n9. 在一個 normal users authenticate 之後，他就可以存取所有東西\n10. 為了**限制**存取，你必須設定 **authorization**\n11. 以下有幾種選項可以選擇：\n    - AlwaysAllow / AlwaysDeny\n    - ABAC (Attribute-Based Access Control)\n    - RBAC (Role Based Access Control)\n    - Webhook (從遠端 service 做 authorization)\n12. Authorization 還在更新中\n13. The ABAC 必須要**手動**設定\n14. RBAC 使用 [rbac.authorization.k8s.io](rbac.authorization.k8s.io) **API** group\n    - 這允許 admins 可以**透過 API** 來**動態**設定權限\n15. 在 Kubernetes 1.3 RBAC 還在 **alpha** 而且甚至被當作**實驗性的**\n    - RBAC 是很有展望的而且會變成 **stable**\n    - 關於 ABAC/RBAC 的目前狀況，可以參照 [Kubernetes Authorization](https://kubernetes.io/docs/admin/authorization/)\n#### Networking\n1. Networking 的方法跟預設 Docker 設定非常不一樣\n2. 在這個課程包含：\n    - 在 pod 裡面 **Container to container** 的溝通\n        - 透過 **localhost** 和 **port number**\n    - **Pod-To-Service** 通訊\n        - 使用 **NodePort** 或 **DNS**\n    - **External-To-Service**\n        - 使用 **LoadBalancer、NodePort**\n3. 在 Kubernetes，pod 本身應該要總是可以 routeable\n4. 這是 **Pod-to-Pod** 通訊\n5. Kubernetes 假設 pods 應該要能夠跟其它 pods 溝通，不論它們運行在哪個 node 上面\n    - 每一個 pod 都有它自己的 IP 位址\n    - 在不同 nodes 上的 pods 必須要能夠跟其它使用 IP 位址的 pod 溝通\n        - 在實作上會根據你的網路設定而有不同\n6. 在 AWS：**kubernets networking** (kops default)\n    - 每一個 pod 可以使用 AWS Virtual Private Network (VPC) 得到 routable 的 IP\n    - kubernetes master 分配一個 /24 subent 給每一個 node (254 IP 位址)\n    - 這個 subnet 會被新增到 VPCs route table\n    - 有限制 **50 個 entries**，也就是說，你不能夠建立超過 50 個 node 在單一 AWS cluster\n        - 雖然，AWS 可以把 limit 改到 100，但是可能會**影響效能**\n7. 並不是每個主機商都有 VPC-technology (雖然 GCP 和 Azure 都有)\n8. 還有其它**替代方案**\n    - Container Network Interface (CNI)\n        - 軟體會提供在 containers 裡的 network interfaces 的函式庫/外掛\n        - 熱門的解決方案包含 **Calico**、**Weave** (standalone or with CNI)\n    - **Overlay Network**\n        - **Flannel** 是一個簡單又熱門的方式 \n#### Node Maintenance\n1. 這是 **Node Controller**，它負責管理 Node Objects\n    - 它分派 **IP space** 給 node，當新的 node 啟動的時候\n    - 它使可用機器的 **node list** 維持最新\n    - node controller 也監控 **node 的健康狀態**\n        - 如果 node 不健康，它就會被刪除\n        - Pods 運行在不健康的 node 會 rescheduled\n2. 當新增新的 node，**kubelet** 會企圖自行註冊\n3. 這個叫做 **self-registration**，而且是預設的行為\n4. 它允許你**簡單的新增更多 nodes** 到 cluster，且不需要自己修改 API\n5. 一個新的 node object 會**自動**帶有以下內容進行建立\n    - metadata (帶有名稱：IP 或 hostname)\n    - Labels (例如：cloud region / availability zone / instance size)\n6. 一個 node 也有 **node condition** (例如：Ready、OutOfDisk)\n7. 當你想要 **decommission** 一個 node，你想要優雅地做\n    - 你要 drain 一個 node 在你關閉它或是把它拿移出 cluster\n8. 為了 drain 一個 node，可以用以下指令\n`kubectl drain nodename --grace-period=600`\n9. 如果 nodes 運行 pods 且不受 controller 控制，那就是一個單一 pod\n`kubectl drain nodename --force`\n#### Demo：Node Maintenance\n1. `kubectl create -f deployment/helloworld.yml`\n2. `kubectl get pod`\n3. `kubectl drain minikube --force`\n4. `kubectl get node`\n5. `kubectl get pod`\n#### High Availability\n1. 如果想要運行 cluster 在產品上，你會想要所有的 master services 有 **high availability (HA)** 設置\n2. 設定會像是這樣：\n    - **Clustering etcd**：至少運行三個 etcd nodes\n    - 使用一個 LoadBalancer 去**複製 API servers**\n    - 運行很多 **scheduler** 和 **controllers** 的 instances\n        - 只有其中一個會是 leader，其它的都會 stand-by\n3. 像是 minikube 的 cluster 不需要 HA - 它是單一 node cluster\n4. 如果要在 AWS 使用產品化 cluster，**kops** 可以為你做 heavy lifting\n5. 如果你運行在其它雲端平台，看看針對那個平台的 **kube deployment tools**\n    - **kubeadm** 是一個 tool 可以為你設置 cluster\n6. 如果你使用某個平台且不使用任何工具，可以看看[文件](https://kubernetes.io/docs/admin/high-availability/)來自行實作\n#### Demo：High Availability\n1. `kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-qq123 --zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com --master-zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c`\n2. `kops edit ig --name=kubernetes.appsoliloquy.com nodes --state=s3://kops-state-qq123`\n3. `kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2a --state=s3://kops-state-qq123`\n4. `kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2b --state=s3://kops-state-qq123`\n***\n### 完成課程\n<img src=\"/images/learning/kubernetes/Edward Viaene_Kubernetes.jpg\">","source":"_posts/Kubernetes-快速學習自我挑戰-Day6.md","raw":"---\ntitle: Kubernetes 快速學習自我挑戰 Day6\nthumbnail:\n  - /images/learning/kubernetes/kubernetesday6.png\ndate: 2017-08-29 09:40:46\ncategories: 學習歷程\ntags: Kubernetes\n---\n<img src=\"/images/learning/kubernetes/kubernetesday6.png\">\n\n***\n### Kubernetes 管理\n#### Kubernetes 的 Master 服務\n1. Kubectl 要和 REST 介面溝通，在溝通之前，要做 authorization\n2. Kubernetes 用 etcd 當作後端\n3. Scheduler 會負責排程 pod，可以使用預設的或是外掛\n#### 資源配額\n1. 當 Kubernetes cluster 被很多**人**或**團隊**使用的時候，**資源管理**變得非常重要\n    - 你想要能夠**管理資源**，你可以給一個人或一個團隊\n    - 你不想要一個人或團隊**占用 cluster 的所有資源**(例如：CPU 或記憶體)\n2. 可以使用 **namespaces** 來分離 cluster 且在上面啟用資源配額\n    - 可以用 **ResourceQuota** 和 **ObjectQuota** objects 來實現\n3. 每一個 container 都可以指定 **request capacity** 和 **capacity limits**\n    - **Request capacity** 對資源來說是一種明確的請求\n        - Scheduler 可以使用 **request capacity** 來決定要把 pod 放在哪裡\n        - 可以看成 **pod 需要的最少資源量**\n    - **Resource limit** 是一種對 container 的限制規定\n        - container 沒辦法利用比指定更多的資源\n4. resource quotas 範例\n    - 運行一個 **CPU resource** request 為 **200m** 的 **deployment** 在 **pod** 上面\n    - 200m = 200millicpu (或是 200 millicores)\n    - 200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n        - 如果 node 是雙核心，它還是只有單核心的 20%\n    - 也可以限制它，例如：400m\n    - Memory quotas 用 MiB 或 GiB 來定義\n5. 如果一個 capacity quota (例如：記憶體/cpu) 已經被管理者指定，那麼在創建 pod 的時候一定要指定 capacity quota\n    - 管理者可以為 pod 指定預設 request 值，且不需要為 capacity 指定任何值\n    - 對 limit quotas 一樣有效\n6. 如果資源被請求的次數高於允許的 capacity，伺服器 API 會丟出 403 FORBIDDEN 錯誤，且 kubectl 會顯示錯誤\n7. 管理者可以用一個 namespace 設定以下 resource limits\n\n| Resource | Description |\n| :-------------: | :---------------: |\n| requests.cpu | 全部 pods 的 **CPU requests** 總和不能超過這個值 |\n| requests.mem | 全部 pods 的 **MEM requests** 總和不能超過這個值 |\n| requests.storage | 全部 persistent volume 的 **storage requests** 總和不能超過這個值 |\n| limits.cpu | 全部 pods 的 **CPU limits** 總和不能超過這個值 |\n| limits.memory| 全部 pods 的 **MEM limits** 總和不能超過這個值 |\n8. 管理者可以設定以下 objects limits\n\n| Resource | Description |\n| :-------------: | :---------------: |\n| configmaps | 可以存在 namespace 的 **configmaps** 總數 |\n| persistentvolumeclaims | 可以存在 namespace 的 **persistent volume claims** 總數 |\n| pods | 可以存在 namespace 的 **pods** 總數 |\n| replicationcontrollers | 可以存在 namespace 的 **replicationcontrollers** 總數 |\n| resourcequotas | 可以存在 namespace 的 **resource quotas** 總數 |\n| services | 可以存在 namespace 的 **services** 總數 |\n| services.loadbalancer | 可以存在 namespace 的 **load balancers** 總數 |\n| services.nodeports | 可以存在 namespace 的 **nodeports** 總數 |\n| secrets | 可以存在 namespace 的 **secrets** 總數 |\n#### Namespaces\n1. Namespaces 可以在 phisical cluster 裡面創建 **virtual cluster**\n2. Namespaces **有邏輯的分離** cluster\n3. 標準的 namespace 叫做 \"**default**\"，而且那是所有資源預設啟動的地方\n    - 另外一個為 Kubernetes 特定資源擁有的 namespace，叫做 **kube-system**\n4. Namespaces 是有必要的，當同時有**很多團隊/專案**使用 kubernetes cluster\n5. 資源名稱在一個 namespace 必須要是獨一無二的，而且不能跨越 namespaces\n    - 例如：在不同 namespaces 可以擁有叫做 \"helloworld\" 的 deployment 很多次，但是在一個 namespace 不能有兩次\n6. 可以使用 namespaces 來分開一個 Kubernetes cluster 的資源\n    - 你可以以每一個單一 namespace 為基礎來限制資源\n    - 例如：市場組只能使用最多 10 GiB 的記憶體、2 個 Loadbalancers、2 核心 CPU\n7. 首先，你必須要先創建一個 namespace\n`kubectl create namespace myspace`\n8. 你可以列出所有 namespaces\n`kubectl get namespaces`\n9. 如果想要設定預設 namespace 來啟動資源\n`export CONTENT=$(kubectl config view | awk '/current-context/ {print $2}'`)\n`kubectl config set-context $CONTEXT --namespace=myspace`\n10. 接下來可以在 namespace 建立 resource limits\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-resources\n  namespace: myspace\nspec:\n  hard:\n    requests.cpu: \"1\"\n    requests.memory: 1Gi\n    limits.cpu: \"2\"\n    limits.memory: 2Gi\n```\n11. 也可以建立 object limits：\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: object-counts\n  namespace: myspace\nspec:\n  hard:\n    configmaps: \"10\"\n    persistentvolumeclaims: \"4\"\n    relicationcontrollers: \"20\"\n    secrets: \"10\"\n    services: \"10\"\n    services.loadbalancers: \"2\"\n```\n#### Demo：Namespace quotas\n1. `cat resourcequotas/resourcequota.yml`\n2. `kubectl create -f resourcequotas/resourcequota.yml`\n3. `cat resourcequotas/helloworld-no-quotas.yml`\n4. `kubectl create -f resourcequotas/helloworld-no-quotas.yml`\n5. `kubectl get deploy --namespace=myspace`\n6. `kubectl get rs --namespace=myspace`\n7. `kubectl describe rs/helloworld-deployment-4153696333 --namespace=myspace`\n會發現出現錯誤 failed quota，因為沒有指定限定資源，而本身 namespace 有限定資源\n8. `kubectl delete deploy/helloworld-deployment --namespace=myspace`\n9. `cat resourcequotas/helloworld-with-quotas.yml`\n10. `kubectl create -f resourcequotas/helloworld-with-quotas.yml`\n11. `kubectl get pod --namespace=myspace`\n這邊會發現，我明明要求三個 replicas，可是只出現兩個\n12. `kubectl get rs --namespace=myspace`\n13. `kubectl describe rs/helloworld-deployment-1576367412 --namespace=myspace`\n14. `kubectl get quota --namespace=myspace`\n15. `kubectl describe quota/compute-quota --namespace=myspace`\n16. `kubectl delete deploy/helloworld-deployment --namespace=myspace`\n17. `cat resourcequotas/defaults.yml`\n18. `kubectl describe limits limits --namespace=myspace`\n19. `kubectl create -f resourcequotas/helloworld-no-quotas.yml`\n20. `kubectl get pods --namespace=myspace`\n#### User 管理\n1. 有**兩種** users 可以創建\n    - **Normal user**，可以外部存取 user\n        - 例如：through kubectl\n        - 這個 user 不能使用 object 來管理\n    - **Service user**，可以在 Kubernetes 用 object 管理的 user\n        - 這個類型的 user 只能用在 cluster **裡面 authenticate**\n        - 例如：從 pod 裡面，或從 kubelet\n        - 這些 credentials 被像是 **Secrets** 管理\n2. 對 normal users 有很多 **authentication strategies**\n    - Client Cetificates\n    - Bearer Tokens\n    - Authentication Proxy\n    - HTTP Basic Authentication\n    - OpenID\n    - Webhooks\n3. Service Users 使用 **Service Account Tokens**\n4. 它們被儲存為 **credentials 且使用 Secrets**\n    - 那些 Secrets 被掛接在 pods 裡面來讓服務之間溝通\n5. Service Users **對 namespace 是特定的**\n6. 它們被用 API 自動建立或使用 **objects** 手動建立\n7. 任何 API 被稱為 **not authenticated** 被視為 **anonymous** user\n8. 獨立在認證機制之外，normal users 有以下特質：\n    - 一個 Username (例如：user123 或 user@email.com)\n    - 一個 UID\n    - Groups\n    - 其它儲存其它資訊的 field\n9. 在一個 normal users authenticate 之後，他就可以存取所有東西\n10. 為了**限制**存取，你必須設定 **authorization**\n11. 以下有幾種選項可以選擇：\n    - AlwaysAllow / AlwaysDeny\n    - ABAC (Attribute-Based Access Control)\n    - RBAC (Role Based Access Control)\n    - Webhook (從遠端 service 做 authorization)\n12. Authorization 還在更新中\n13. The ABAC 必須要**手動**設定\n14. RBAC 使用 [rbac.authorization.k8s.io](rbac.authorization.k8s.io) **API** group\n    - 這允許 admins 可以**透過 API** 來**動態**設定權限\n15. 在 Kubernetes 1.3 RBAC 還在 **alpha** 而且甚至被當作**實驗性的**\n    - RBAC 是很有展望的而且會變成 **stable**\n    - 關於 ABAC/RBAC 的目前狀況，可以參照 [Kubernetes Authorization](https://kubernetes.io/docs/admin/authorization/)\n#### Networking\n1. Networking 的方法跟預設 Docker 設定非常不一樣\n2. 在這個課程包含：\n    - 在 pod 裡面 **Container to container** 的溝通\n        - 透過 **localhost** 和 **port number**\n    - **Pod-To-Service** 通訊\n        - 使用 **NodePort** 或 **DNS**\n    - **External-To-Service**\n        - 使用 **LoadBalancer、NodePort**\n3. 在 Kubernetes，pod 本身應該要總是可以 routeable\n4. 這是 **Pod-to-Pod** 通訊\n5. Kubernetes 假設 pods 應該要能夠跟其它 pods 溝通，不論它們運行在哪個 node 上面\n    - 每一個 pod 都有它自己的 IP 位址\n    - 在不同 nodes 上的 pods 必須要能夠跟其它使用 IP 位址的 pod 溝通\n        - 在實作上會根據你的網路設定而有不同\n6. 在 AWS：**kubernets networking** (kops default)\n    - 每一個 pod 可以使用 AWS Virtual Private Network (VPC) 得到 routable 的 IP\n    - kubernetes master 分配一個 /24 subent 給每一個 node (254 IP 位址)\n    - 這個 subnet 會被新增到 VPCs route table\n    - 有限制 **50 個 entries**，也就是說，你不能夠建立超過 50 個 node 在單一 AWS cluster\n        - 雖然，AWS 可以把 limit 改到 100，但是可能會**影響效能**\n7. 並不是每個主機商都有 VPC-technology (雖然 GCP 和 Azure 都有)\n8. 還有其它**替代方案**\n    - Container Network Interface (CNI)\n        - 軟體會提供在 containers 裡的 network interfaces 的函式庫/外掛\n        - 熱門的解決方案包含 **Calico**、**Weave** (standalone or with CNI)\n    - **Overlay Network**\n        - **Flannel** 是一個簡單又熱門的方式 \n#### Node Maintenance\n1. 這是 **Node Controller**，它負責管理 Node Objects\n    - 它分派 **IP space** 給 node，當新的 node 啟動的時候\n    - 它使可用機器的 **node list** 維持最新\n    - node controller 也監控 **node 的健康狀態**\n        - 如果 node 不健康，它就會被刪除\n        - Pods 運行在不健康的 node 會 rescheduled\n2. 當新增新的 node，**kubelet** 會企圖自行註冊\n3. 這個叫做 **self-registration**，而且是預設的行為\n4. 它允許你**簡單的新增更多 nodes** 到 cluster，且不需要自己修改 API\n5. 一個新的 node object 會**自動**帶有以下內容進行建立\n    - metadata (帶有名稱：IP 或 hostname)\n    - Labels (例如：cloud region / availability zone / instance size)\n6. 一個 node 也有 **node condition** (例如：Ready、OutOfDisk)\n7. 當你想要 **decommission** 一個 node，你想要優雅地做\n    - 你要 drain 一個 node 在你關閉它或是把它拿移出 cluster\n8. 為了 drain 一個 node，可以用以下指令\n`kubectl drain nodename --grace-period=600`\n9. 如果 nodes 運行 pods 且不受 controller 控制，那就是一個單一 pod\n`kubectl drain nodename --force`\n#### Demo：Node Maintenance\n1. `kubectl create -f deployment/helloworld.yml`\n2. `kubectl get pod`\n3. `kubectl drain minikube --force`\n4. `kubectl get node`\n5. `kubectl get pod`\n#### High Availability\n1. 如果想要運行 cluster 在產品上，你會想要所有的 master services 有 **high availability (HA)** 設置\n2. 設定會像是這樣：\n    - **Clustering etcd**：至少運行三個 etcd nodes\n    - 使用一個 LoadBalancer 去**複製 API servers**\n    - 運行很多 **scheduler** 和 **controllers** 的 instances\n        - 只有其中一個會是 leader，其它的都會 stand-by\n3. 像是 minikube 的 cluster 不需要 HA - 它是單一 node cluster\n4. 如果要在 AWS 使用產品化 cluster，**kops** 可以為你做 heavy lifting\n5. 如果你運行在其它雲端平台，看看針對那個平台的 **kube deployment tools**\n    - **kubeadm** 是一個 tool 可以為你設置 cluster\n6. 如果你使用某個平台且不使用任何工具，可以看看[文件](https://kubernetes.io/docs/admin/high-availability/)來自行實作\n#### Demo：High Availability\n1. `kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-qq123 --zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com --master-zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c`\n2. `kops edit ig --name=kubernetes.appsoliloquy.com nodes --state=s3://kops-state-qq123`\n3. `kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2a --state=s3://kops-state-qq123`\n4. `kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2b --state=s3://kops-state-qq123`\n***\n### 完成課程\n<img src=\"/images/learning/kubernetes/Edward Viaene_Kubernetes.jpg\">","slug":"Kubernetes-快速學習自我挑戰-Day6","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwj000x7ifaogxugo39","content":"<img src=\"/images/learning/kubernetes/kubernetesday6.png\">\n<hr>\n<h3>Kubernetes 管理</h3>\n<h4>Kubernetes 的 Master 服務</h4>\n<ol>\n<li>Kubectl 要和 REST 介面溝通，在溝通之前，要做 authorization</li>\n<li>Kubernetes 用 etcd 當作後端</li>\n<li>Scheduler 會負責排程 pod，可以使用預設的或是外掛</li>\n</ol>\n<h4>資源配額</h4>\n<ol>\n<li>當 Kubernetes cluster 被很多<strong>人</strong>或<strong>團隊</strong>使用的時候，<strong>資源管理</strong>變得非常重要\n<ul>\n<li>你想要能夠<strong>管理資源</strong>，你可以給一個人或一個團隊</li>\n<li>你不想要一個人或團隊<strong>占用 cluster 的所有資源</strong>(例如：CPU 或記憶體)</li>\n</ul>\n</li>\n<li>可以使用 <strong>namespaces</strong> 來分離 cluster 且在上面啟用資源配額\n<ul>\n<li>可以用 <strong>ResourceQuota</strong> 和 <strong>ObjectQuota</strong> objects 來實現</li>\n</ul>\n</li>\n<li>每一個 container 都可以指定 <strong>request capacity</strong> 和 <strong>capacity limits</strong>\n<ul>\n<li><strong>Request capacity</strong> 對資源來說是一種明確的請求\n<ul>\n<li>Scheduler 可以使用 <strong>request capacity</strong> 來決定要把 pod 放在哪裡</li>\n<li>可以看成 <strong>pod 需要的最少資源量</strong></li>\n</ul>\n</li>\n<li><strong>Resource limit</strong> 是一種對 container 的限制規定\n<ul>\n<li>container 沒辦法利用比指定更多的資源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>resource quotas 範例\n<ul>\n<li>運行一個 <strong>CPU resource</strong> request 為 <strong>200m</strong> 的 <strong>deployment</strong> 在 <strong>pod</strong> 上面</li>\n<li>200m = 200millicpu (或是 200 millicores)</li>\n<li>200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n<ul>\n<li>如果 node 是雙核心，它還是只有單核心的 20%</li>\n</ul>\n</li>\n<li>也可以限制它，例如：400m</li>\n<li>Memory quotas 用 MiB 或 GiB 來定義</li>\n</ul>\n</li>\n<li>如果一個 capacity quota (例如：記憶體/cpu) 已經被管理者指定，那麼在創建 pod 的時候一定要指定 capacity quota\n<ul>\n<li>管理者可以為 pod 指定預設 request 值，且不需要為 capacity 指定任何值</li>\n<li>對 limit quotas 一樣有效</li>\n</ul>\n</li>\n<li>如果資源被請求的次數高於允許的 capacity，伺服器 API 會丟出 403 FORBIDDEN 錯誤，且 kubectl 會顯示錯誤</li>\n<li>管理者可以用一個 namespace 設定以下 resource limits</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Resource</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">requests.cpu</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>CPU requests</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">requests.mem</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>MEM requests</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">requests.storage</td>\n<td style=\"text-align:center\">全部 persistent volume 的 <strong>storage requests</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limits.cpu</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>CPU limits</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limits.memory</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>MEM limits</strong> 總和不能超過這個值</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"8\">\n<li>管理者可以設定以下 objects limits</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Resource</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">configmaps</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>configmaps</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">persistentvolumeclaims</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>persistent volume claims</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pods</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>pods</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replicationcontrollers</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>replicationcontrollers</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">resourcequotas</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>resource quotas</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">services</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>services</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">services.loadbalancer</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>load balancers</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">services.nodeports</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>nodeports</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">secrets</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>secrets</strong> 總數</td>\n</tr>\n</tbody>\n</table>\n<h4>Namespaces</h4>\n<ol>\n<li>Namespaces 可以在 phisical cluster 裡面創建 <strong>virtual cluster</strong></li>\n<li>Namespaces <strong>有邏輯的分離</strong> cluster</li>\n<li>標準的 namespace 叫做 “<strong>default</strong>”，而且那是所有資源預設啟動的地方\n<ul>\n<li>另外一個為 Kubernetes 特定資源擁有的 namespace，叫做 <strong>kube-system</strong></li>\n</ul>\n</li>\n<li>Namespaces 是有必要的，當同時有<strong>很多團隊/專案</strong>使用 kubernetes cluster</li>\n<li>資源名稱在一個 namespace 必須要是獨一無二的，而且不能跨越 namespaces\n<ul>\n<li>例如：在不同 namespaces 可以擁有叫做 “helloworld” 的 deployment 很多次，但是在一個 namespace 不能有兩次</li>\n</ul>\n</li>\n<li>可以使用 namespaces 來分開一個 Kubernetes cluster 的資源\n<ul>\n<li>你可以以每一個單一 namespace 為基礎來限制資源</li>\n<li>例如：市場組只能使用最多 10 GiB 的記憶體、2 個 Loadbalancers、2 核心 CPU</li>\n</ul>\n</li>\n<li>首先，你必須要先創建一個 namespace<br>\n<code>kubectl create namespace myspace</code></li>\n<li>你可以列出所有 namespaces<br>\n<code>kubectl get namespaces</code></li>\n<li>如果想要設定預設 namespace 來啟動資源<br>\n<code>export CONTENT=$(kubectl config view | awk '/current-context/ {print $2}'</code>)<br>\n<code>kubectl config set-context $CONTEXT --namespace=myspace</code></li>\n<li>接下來可以在 namespace 建立 resource limits</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: ResourceQuota</div><div class=\"line\">metadata:</div><div class=\"line\">  name: compute-resources</div><div class=\"line\">  namespace: myspace</div><div class=\"line\">spec:</div><div class=\"line\">  hard:</div><div class=\"line\">    requests.cpu: &quot;1&quot;</div><div class=\"line\">    requests.memory: 1Gi</div><div class=\"line\">    limits.cpu: &quot;2&quot;</div><div class=\"line\">    limits.memory: 2Gi</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>也可以建立 object limits：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: ResourceQuota</div><div class=\"line\">metadata:</div><div class=\"line\">  name: object-counts</div><div class=\"line\">  namespace: myspace</div><div class=\"line\">spec:</div><div class=\"line\">  hard:</div><div class=\"line\">    configmaps: &quot;10&quot;</div><div class=\"line\">    persistentvolumeclaims: &quot;4&quot;</div><div class=\"line\">    relicationcontrollers: &quot;20&quot;</div><div class=\"line\">    secrets: &quot;10&quot;</div><div class=\"line\">    services: &quot;10&quot;</div><div class=\"line\">    services.loadbalancers: &quot;2&quot;</div></pre></td></tr></table></figure>\n<h4>Demo：Namespace quotas</h4>\n<ol>\n<li><code>cat resourcequotas/resourcequota.yml</code></li>\n<li><code>kubectl create -f resourcequotas/resourcequota.yml</code></li>\n<li><code>cat resourcequotas/helloworld-no-quotas.yml</code></li>\n<li><code>kubectl create -f resourcequotas/helloworld-no-quotas.yml</code></li>\n<li><code>kubectl get deploy --namespace=myspace</code></li>\n<li><code>kubectl get rs --namespace=myspace</code></li>\n<li><code>kubectl describe rs/helloworld-deployment-4153696333 --namespace=myspace</code><br>\n會發現出現錯誤 failed quota，因為沒有指定限定資源，而本身 namespace 有限定資源</li>\n<li><code>kubectl delete deploy/helloworld-deployment --namespace=myspace</code></li>\n<li><code>cat resourcequotas/helloworld-with-quotas.yml</code></li>\n<li><code>kubectl create -f resourcequotas/helloworld-with-quotas.yml</code></li>\n<li><code>kubectl get pod --namespace=myspace</code><br>\n這邊會發現，我明明要求三個 replicas，可是只出現兩個</li>\n<li><code>kubectl get rs --namespace=myspace</code></li>\n<li><code>kubectl describe rs/helloworld-deployment-1576367412 --namespace=myspace</code></li>\n<li><code>kubectl get quota --namespace=myspace</code></li>\n<li><code>kubectl describe quota/compute-quota --namespace=myspace</code></li>\n<li><code>kubectl delete deploy/helloworld-deployment --namespace=myspace</code></li>\n<li><code>cat resourcequotas/defaults.yml</code></li>\n<li><code>kubectl describe limits limits --namespace=myspace</code></li>\n<li><code>kubectl create -f resourcequotas/helloworld-no-quotas.yml</code></li>\n<li><code>kubectl get pods --namespace=myspace</code></li>\n</ol>\n<h4>User 管理</h4>\n<ol>\n<li>有<strong>兩種</strong> users 可以創建\n<ul>\n<li><strong>Normal user</strong>，可以外部存取 user\n<ul>\n<li>例如：through kubectl</li>\n<li>這個 user 不能使用 object 來管理</li>\n</ul>\n</li>\n<li><strong>Service user</strong>，可以在 Kubernetes 用 object 管理的 user\n<ul>\n<li>這個類型的 user 只能用在 cluster <strong>裡面 authenticate</strong></li>\n<li>例如：從 pod 裡面，或從 kubelet</li>\n<li>這些 credentials 被像是 <strong>Secrets</strong> 管理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>對 normal users 有很多 <strong>authentication strategies</strong>\n<ul>\n<li>Client Cetificates</li>\n<li>Bearer Tokens</li>\n<li>Authentication Proxy</li>\n<li>HTTP Basic Authentication</li>\n<li>OpenID</li>\n<li>Webhooks</li>\n</ul>\n</li>\n<li>Service Users 使用 <strong>Service Account Tokens</strong></li>\n<li>它們被儲存為 <strong>credentials 且使用 Secrets</strong>\n<ul>\n<li>那些 Secrets 被掛接在 pods 裡面來讓服務之間溝通</li>\n</ul>\n</li>\n<li>Service Users <strong>對 namespace 是特定的</strong></li>\n<li>它們被用 API 自動建立或使用 <strong>objects</strong> 手動建立</li>\n<li>任何 API 被稱為 <strong>not authenticated</strong> 被視為 <strong>anonymous</strong> user</li>\n<li>獨立在認證機制之外，normal users 有以下特質：\n<ul>\n<li>一個 Username (例如：user123 或 <a href=\"mailto:user@email.com\" target=\"_blank\" rel=\"external\">user@email.com</a>)</li>\n<li>一個 UID</li>\n<li>Groups</li>\n<li>其它儲存其它資訊的 field</li>\n</ul>\n</li>\n<li>在一個 normal users authenticate 之後，他就可以存取所有東西</li>\n<li>為了<strong>限制</strong>存取，你必須設定 <strong>authorization</strong></li>\n<li>以下有幾種選項可以選擇：\n<ul>\n<li>AlwaysAllow / AlwaysDeny</li>\n<li>ABAC (Attribute-Based Access Control)</li>\n<li>RBAC (Role Based Access Control)</li>\n<li>Webhook (從遠端 service 做 authorization)</li>\n</ul>\n</li>\n<li>Authorization 還在更新中</li>\n<li>The ABAC 必須要<strong>手動</strong>設定</li>\n<li>RBAC 使用 <a href=\"rbac.authorization.k8s.io\">rbac.authorization.k8s.io</a> <strong>API</strong> group\n<ul>\n<li>這允許 admins 可以<strong>透過 API</strong> 來<strong>動態</strong>設定權限</li>\n</ul>\n</li>\n<li>在 Kubernetes 1.3 RBAC 還在 <strong>alpha</strong> 而且甚至被當作<strong>實驗性的</strong>\n<ul>\n<li>RBAC 是很有展望的而且會變成 <strong>stable</strong></li>\n<li>關於 ABAC/RBAC 的目前狀況，可以參照 <a href=\"https://kubernetes.io/docs/admin/authorization/\" target=\"_blank\" rel=\"external\">Kubernetes Authorization</a></li>\n</ul>\n</li>\n</ol>\n<h4>Networking</h4>\n<ol>\n<li>Networking 的方法跟預設 Docker 設定非常不一樣</li>\n<li>在這個課程包含：\n<ul>\n<li>在 pod 裡面 <strong>Container to container</strong> 的溝通\n<ul>\n<li>透過 <strong>localhost</strong> 和 <strong>port number</strong></li>\n</ul>\n</li>\n<li><strong>Pod-To-Service</strong> 通訊\n<ul>\n<li>使用 <strong>NodePort</strong> 或 <strong>DNS</strong></li>\n</ul>\n</li>\n<li><strong>External-To-Service</strong>\n<ul>\n<li>使用 <strong>LoadBalancer、NodePort</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在 Kubernetes，pod 本身應該要總是可以 routeable</li>\n<li>這是 <strong>Pod-to-Pod</strong> 通訊</li>\n<li>Kubernetes 假設 pods 應該要能夠跟其它 pods 溝通，不論它們運行在哪個 node 上面\n<ul>\n<li>每一個 pod 都有它自己的 IP 位址</li>\n<li>在不同 nodes 上的 pods 必須要能夠跟其它使用 IP 位址的 pod 溝通\n<ul>\n<li>在實作上會根據你的網路設定而有不同</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在 AWS：<strong>kubernets networking</strong> (kops default)\n<ul>\n<li>每一個 pod 可以使用 AWS Virtual Private Network (VPC) 得到 routable 的 IP</li>\n<li>kubernetes master 分配一個 /24 subent 給每一個 node (254 IP 位址)</li>\n<li>這個 subnet 會被新增到 VPCs route table</li>\n<li>有限制 <strong>50 個 entries</strong>，也就是說，你不能夠建立超過 50 個 node 在單一 AWS cluster\n<ul>\n<li>雖然，AWS 可以把 limit 改到 100，但是可能會<strong>影響效能</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>並不是每個主機商都有 VPC-technology (雖然 GCP 和 Azure 都有)</li>\n<li>還有其它<strong>替代方案</strong>\n<ul>\n<li>Container Network Interface (CNI)\n<ul>\n<li>軟體會提供在 containers 裡的 network interfaces 的函式庫/外掛</li>\n<li>熱門的解決方案包含 <strong>Calico</strong>、<strong>Weave</strong> (standalone or with CNI)</li>\n</ul>\n</li>\n<li><strong>Overlay Network</strong>\n<ul>\n<li><strong>Flannel</strong> 是一個簡單又熱門的方式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4>Node Maintenance</h4>\n<ol>\n<li>這是 <strong>Node Controller</strong>，它負責管理 Node Objects\n<ul>\n<li>它分派 <strong>IP space</strong> 給 node，當新的 node 啟動的時候</li>\n<li>它使可用機器的 <strong>node list</strong> 維持最新</li>\n<li>node controller 也監控 <strong>node 的健康狀態</strong>\n<ul>\n<li>如果 node 不健康，它就會被刪除</li>\n<li>Pods 運行在不健康的 node 會 rescheduled</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>當新增新的 node，<strong>kubelet</strong> 會企圖自行註冊</li>\n<li>這個叫做 <strong>self-registration</strong>，而且是預設的行為</li>\n<li>它允許你<strong>簡單的新增更多 nodes</strong> 到 cluster，且不需要自己修改 API</li>\n<li>一個新的 node object 會<strong>自動</strong>帶有以下內容進行建立\n<ul>\n<li>metadata (帶有名稱：IP 或 hostname)</li>\n<li>Labels (例如：cloud region / availability zone / instance size)</li>\n</ul>\n</li>\n<li>一個 node 也有 <strong>node condition</strong> (例如：Ready、OutOfDisk)</li>\n<li>當你想要 <strong>decommission</strong> 一個 node，你想要優雅地做\n<ul>\n<li>你要 drain 一個 node 在你關閉它或是把它拿移出 cluster</li>\n</ul>\n</li>\n<li>為了 drain 一個 node，可以用以下指令<br>\n<code>kubectl drain nodename --grace-period=600</code></li>\n<li>如果 nodes 運行 pods 且不受 controller 控制，那就是一個單一 pod<br>\n<code>kubectl drain nodename --force</code></li>\n</ol>\n<h4>Demo：Node Maintenance</h4>\n<ol>\n<li><code>kubectl create -f deployment/helloworld.yml</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl drain minikube --force</code></li>\n<li><code>kubectl get node</code></li>\n<li><code>kubectl get pod</code></li>\n</ol>\n<h4>High Availability</h4>\n<ol>\n<li>如果想要運行 cluster 在產品上，你會想要所有的 master services 有 <strong>high availability (HA)</strong> 設置</li>\n<li>設定會像是這樣：\n<ul>\n<li><strong>Clustering etcd</strong>：至少運行三個 etcd nodes</li>\n<li>使用一個 LoadBalancer 去<strong>複製 API servers</strong></li>\n<li>運行很多 <strong>scheduler</strong> 和 <strong>controllers</strong> 的 instances\n<ul>\n<li>只有其中一個會是 leader，其它的都會 stand-by</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>像是 minikube 的 cluster 不需要 HA - 它是單一 node cluster</li>\n<li>如果要在 AWS 使用產品化 cluster，<strong>kops</strong> 可以為你做 heavy lifting</li>\n<li>如果你運行在其它雲端平台，看看針對那個平台的 <strong>kube deployment tools</strong>\n<ul>\n<li><strong>kubeadm</strong> 是一個 tool 可以為你設置 cluster</li>\n</ul>\n</li>\n<li>如果你使用某個平台且不使用任何工具，可以看看<a href=\"https://kubernetes.io/docs/admin/high-availability/\" target=\"_blank\" rel=\"external\">文件</a>來自行實作</li>\n</ol>\n<h4>Demo：High Availability</h4>\n<ol>\n<li><code>kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-qq123 --zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com --master-zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c</code></li>\n<li><code>kops edit ig --name=kubernetes.appsoliloquy.com nodes --state=s3://kops-state-qq123</code></li>\n<li><code>kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2a --state=s3://kops-state-qq123</code></li>\n<li><code>kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2b --state=s3://kops-state-qq123</code></li>\n</ol>\n<hr>\n<h3>完成課程</h3>\n<img src=\"/images/learning/kubernetes/Edward Viaene_Kubernetes.jpg\">","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/kubernetes/kubernetesday6.png\">\n<hr>\n<h3>Kubernetes 管理</h3>\n<h4>Kubernetes 的 Master 服務</h4>\n<ol>\n<li>Kubectl 要和 REST 介面溝通，在溝通之前，要做 authorization</li>\n<li>Kubernetes 用 etcd 當作後端</li>\n<li>Scheduler 會負責排程 pod，可以使用預設的或是外掛</li>\n</ol>\n<h4>資源配額</h4>\n<ol>\n<li>當 Kubernetes cluster 被很多<strong>人</strong>或<strong>團隊</strong>使用的時候，<strong>資源管理</strong>變得非常重要\n<ul>\n<li>你想要能夠<strong>管理資源</strong>，你可以給一個人或一個團隊</li>\n<li>你不想要一個人或團隊<strong>占用 cluster 的所有資源</strong>(例如：CPU 或記憶體)</li>\n</ul>\n</li>\n<li>可以使用 <strong>namespaces</strong> 來分離 cluster 且在上面啟用資源配額\n<ul>\n<li>可以用 <strong>ResourceQuota</strong> 和 <strong>ObjectQuota</strong> objects 來實現</li>\n</ul>\n</li>\n<li>每一個 container 都可以指定 <strong>request capacity</strong> 和 <strong>capacity limits</strong>\n<ul>\n<li><strong>Request capacity</strong> 對資源來說是一種明確的請求\n<ul>\n<li>Scheduler 可以使用 <strong>request capacity</strong> 來決定要把 pod 放在哪裡</li>\n<li>可以看成 <strong>pod 需要的最少資源量</strong></li>\n</ul>\n</li>\n<li><strong>Resource limit</strong> 是一種對 container 的限制規定\n<ul>\n<li>container 沒辦法利用比指定更多的資源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>resource quotas 範例\n<ul>\n<li>運行一個 <strong>CPU resource</strong> request 為 <strong>200m</strong> 的 <strong>deployment</strong> 在 <strong>pod</strong> 上面</li>\n<li>200m = 200millicpu (或是 200 millicores)</li>\n<li>200m = 0.2 也就是運行 node 的 CPU 核心的 20%\n<ul>\n<li>如果 node 是雙核心，它還是只有單核心的 20%</li>\n</ul>\n</li>\n<li>也可以限制它，例如：400m</li>\n<li>Memory quotas 用 MiB 或 GiB 來定義</li>\n</ul>\n</li>\n<li>如果一個 capacity quota (例如：記憶體/cpu) 已經被管理者指定，那麼在創建 pod 的時候一定要指定 capacity quota\n<ul>\n<li>管理者可以為 pod 指定預設 request 值，且不需要為 capacity 指定任何值</li>\n<li>對 limit quotas 一樣有效</li>\n</ul>\n</li>\n<li>如果資源被請求的次數高於允許的 capacity，伺服器 API 會丟出 403 FORBIDDEN 錯誤，且 kubectl 會顯示錯誤</li>\n<li>管理者可以用一個 namespace 設定以下 resource limits</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Resource</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">requests.cpu</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>CPU requests</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">requests.mem</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>MEM requests</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">requests.storage</td>\n<td style=\"text-align:center\">全部 persistent volume 的 <strong>storage requests</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limits.cpu</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>CPU limits</strong> 總和不能超過這個值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limits.memory</td>\n<td style=\"text-align:center\">全部 pods 的 <strong>MEM limits</strong> 總和不能超過這個值</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"8\">\n<li>管理者可以設定以下 objects limits</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Resource</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">configmaps</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>configmaps</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">persistentvolumeclaims</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>persistent volume claims</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pods</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>pods</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replicationcontrollers</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>replicationcontrollers</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">resourcequotas</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>resource quotas</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">services</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>services</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">services.loadbalancer</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>load balancers</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">services.nodeports</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>nodeports</strong> 總數</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">secrets</td>\n<td style=\"text-align:center\">可以存在 namespace 的 <strong>secrets</strong> 總數</td>\n</tr>\n</tbody>\n</table>\n<h4>Namespaces</h4>\n<ol>\n<li>Namespaces 可以在 phisical cluster 裡面創建 <strong>virtual cluster</strong></li>\n<li>Namespaces <strong>有邏輯的分離</strong> cluster</li>\n<li>標準的 namespace 叫做 “<strong>default</strong>”，而且那是所有資源預設啟動的地方\n<ul>\n<li>另外一個為 Kubernetes 特定資源擁有的 namespace，叫做 <strong>kube-system</strong></li>\n</ul>\n</li>\n<li>Namespaces 是有必要的，當同時有<strong>很多團隊/專案</strong>使用 kubernetes cluster</li>\n<li>資源名稱在一個 namespace 必須要是獨一無二的，而且不能跨越 namespaces\n<ul>\n<li>例如：在不同 namespaces 可以擁有叫做 “helloworld” 的 deployment 很多次，但是在一個 namespace 不能有兩次</li>\n</ul>\n</li>\n<li>可以使用 namespaces 來分開一個 Kubernetes cluster 的資源\n<ul>\n<li>你可以以每一個單一 namespace 為基礎來限制資源</li>\n<li>例如：市場組只能使用最多 10 GiB 的記憶體、2 個 Loadbalancers、2 核心 CPU</li>\n</ul>\n</li>\n<li>首先，你必須要先創建一個 namespace<br>\n<code>kubectl create namespace myspace</code></li>\n<li>你可以列出所有 namespaces<br>\n<code>kubectl get namespaces</code></li>\n<li>如果想要設定預設 namespace 來啟動資源<br>\n<code>export CONTENT=$(kubectl config view | awk '/current-context/ {print $2}'</code>)<br>\n<code>kubectl config set-context $CONTEXT --namespace=myspace</code></li>\n<li>接下來可以在 namespace 建立 resource limits</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: ResourceQuota</div><div class=\"line\">metadata:</div><div class=\"line\">  name: compute-resources</div><div class=\"line\">  namespace: myspace</div><div class=\"line\">spec:</div><div class=\"line\">  hard:</div><div class=\"line\">    requests.cpu: &quot;1&quot;</div><div class=\"line\">    requests.memory: 1Gi</div><div class=\"line\">    limits.cpu: &quot;2&quot;</div><div class=\"line\">    limits.memory: 2Gi</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>也可以建立 object limits：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">apiVersion: v1</div><div class=\"line\">kind: ResourceQuota</div><div class=\"line\">metadata:</div><div class=\"line\">  name: object-counts</div><div class=\"line\">  namespace: myspace</div><div class=\"line\">spec:</div><div class=\"line\">  hard:</div><div class=\"line\">    configmaps: &quot;10&quot;</div><div class=\"line\">    persistentvolumeclaims: &quot;4&quot;</div><div class=\"line\">    relicationcontrollers: &quot;20&quot;</div><div class=\"line\">    secrets: &quot;10&quot;</div><div class=\"line\">    services: &quot;10&quot;</div><div class=\"line\">    services.loadbalancers: &quot;2&quot;</div></pre></td></tr></table></figure>\n<h4>Demo：Namespace quotas</h4>\n<ol>\n<li><code>cat resourcequotas/resourcequota.yml</code></li>\n<li><code>kubectl create -f resourcequotas/resourcequota.yml</code></li>\n<li><code>cat resourcequotas/helloworld-no-quotas.yml</code></li>\n<li><code>kubectl create -f resourcequotas/helloworld-no-quotas.yml</code></li>\n<li><code>kubectl get deploy --namespace=myspace</code></li>\n<li><code>kubectl get rs --namespace=myspace</code></li>\n<li><code>kubectl describe rs/helloworld-deployment-4153696333 --namespace=myspace</code><br>\n會發現出現錯誤 failed quota，因為沒有指定限定資源，而本身 namespace 有限定資源</li>\n<li><code>kubectl delete deploy/helloworld-deployment --namespace=myspace</code></li>\n<li><code>cat resourcequotas/helloworld-with-quotas.yml</code></li>\n<li><code>kubectl create -f resourcequotas/helloworld-with-quotas.yml</code></li>\n<li><code>kubectl get pod --namespace=myspace</code><br>\n這邊會發現，我明明要求三個 replicas，可是只出現兩個</li>\n<li><code>kubectl get rs --namespace=myspace</code></li>\n<li><code>kubectl describe rs/helloworld-deployment-1576367412 --namespace=myspace</code></li>\n<li><code>kubectl get quota --namespace=myspace</code></li>\n<li><code>kubectl describe quota/compute-quota --namespace=myspace</code></li>\n<li><code>kubectl delete deploy/helloworld-deployment --namespace=myspace</code></li>\n<li><code>cat resourcequotas/defaults.yml</code></li>\n<li><code>kubectl describe limits limits --namespace=myspace</code></li>\n<li><code>kubectl create -f resourcequotas/helloworld-no-quotas.yml</code></li>\n<li><code>kubectl get pods --namespace=myspace</code></li>\n</ol>\n<h4>User 管理</h4>\n<ol>\n<li>有<strong>兩種</strong> users 可以創建\n<ul>\n<li><strong>Normal user</strong>，可以外部存取 user\n<ul>\n<li>例如：through kubectl</li>\n<li>這個 user 不能使用 object 來管理</li>\n</ul>\n</li>\n<li><strong>Service user</strong>，可以在 Kubernetes 用 object 管理的 user\n<ul>\n<li>這個類型的 user 只能用在 cluster <strong>裡面 authenticate</strong></li>\n<li>例如：從 pod 裡面，或從 kubelet</li>\n<li>這些 credentials 被像是 <strong>Secrets</strong> 管理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>對 normal users 有很多 <strong>authentication strategies</strong>\n<ul>\n<li>Client Cetificates</li>\n<li>Bearer Tokens</li>\n<li>Authentication Proxy</li>\n<li>HTTP Basic Authentication</li>\n<li>OpenID</li>\n<li>Webhooks</li>\n</ul>\n</li>\n<li>Service Users 使用 <strong>Service Account Tokens</strong></li>\n<li>它們被儲存為 <strong>credentials 且使用 Secrets</strong>\n<ul>\n<li>那些 Secrets 被掛接在 pods 裡面來讓服務之間溝通</li>\n</ul>\n</li>\n<li>Service Users <strong>對 namespace 是特定的</strong></li>\n<li>它們被用 API 自動建立或使用 <strong>objects</strong> 手動建立</li>\n<li>任何 API 被稱為 <strong>not authenticated</strong> 被視為 <strong>anonymous</strong> user</li>\n<li>獨立在認證機制之外，normal users 有以下特質：\n<ul>\n<li>一個 Username (例如：user123 或 <a href=\"mailto:user@email.com\" target=\"_blank\" rel=\"external\">user@email.com</a>)</li>\n<li>一個 UID</li>\n<li>Groups</li>\n<li>其它儲存其它資訊的 field</li>\n</ul>\n</li>\n<li>在一個 normal users authenticate 之後，他就可以存取所有東西</li>\n<li>為了<strong>限制</strong>存取，你必須設定 <strong>authorization</strong></li>\n<li>以下有幾種選項可以選擇：\n<ul>\n<li>AlwaysAllow / AlwaysDeny</li>\n<li>ABAC (Attribute-Based Access Control)</li>\n<li>RBAC (Role Based Access Control)</li>\n<li>Webhook (從遠端 service 做 authorization)</li>\n</ul>\n</li>\n<li>Authorization 還在更新中</li>\n<li>The ABAC 必須要<strong>手動</strong>設定</li>\n<li>RBAC 使用 <a href=\"rbac.authorization.k8s.io\">rbac.authorization.k8s.io</a> <strong>API</strong> group\n<ul>\n<li>這允許 admins 可以<strong>透過 API</strong> 來<strong>動態</strong>設定權限</li>\n</ul>\n</li>\n<li>在 Kubernetes 1.3 RBAC 還在 <strong>alpha</strong> 而且甚至被當作<strong>實驗性的</strong>\n<ul>\n<li>RBAC 是很有展望的而且會變成 <strong>stable</strong></li>\n<li>關於 ABAC/RBAC 的目前狀況，可以參照 <a href=\"https://kubernetes.io/docs/admin/authorization/\" target=\"_blank\" rel=\"external\">Kubernetes Authorization</a></li>\n</ul>\n</li>\n</ol>\n<h4>Networking</h4>\n<ol>\n<li>Networking 的方法跟預設 Docker 設定非常不一樣</li>\n<li>在這個課程包含：\n<ul>\n<li>在 pod 裡面 <strong>Container to container</strong> 的溝通\n<ul>\n<li>透過 <strong>localhost</strong> 和 <strong>port number</strong></li>\n</ul>\n</li>\n<li><strong>Pod-To-Service</strong> 通訊\n<ul>\n<li>使用 <strong>NodePort</strong> 或 <strong>DNS</strong></li>\n</ul>\n</li>\n<li><strong>External-To-Service</strong>\n<ul>\n<li>使用 <strong>LoadBalancer、NodePort</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在 Kubernetes，pod 本身應該要總是可以 routeable</li>\n<li>這是 <strong>Pod-to-Pod</strong> 通訊</li>\n<li>Kubernetes 假設 pods 應該要能夠跟其它 pods 溝通，不論它們運行在哪個 node 上面\n<ul>\n<li>每一個 pod 都有它自己的 IP 位址</li>\n<li>在不同 nodes 上的 pods 必須要能夠跟其它使用 IP 位址的 pod 溝通\n<ul>\n<li>在實作上會根據你的網路設定而有不同</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在 AWS：<strong>kubernets networking</strong> (kops default)\n<ul>\n<li>每一個 pod 可以使用 AWS Virtual Private Network (VPC) 得到 routable 的 IP</li>\n<li>kubernetes master 分配一個 /24 subent 給每一個 node (254 IP 位址)</li>\n<li>這個 subnet 會被新增到 VPCs route table</li>\n<li>有限制 <strong>50 個 entries</strong>，也就是說，你不能夠建立超過 50 個 node 在單一 AWS cluster\n<ul>\n<li>雖然，AWS 可以把 limit 改到 100，但是可能會<strong>影響效能</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>並不是每個主機商都有 VPC-technology (雖然 GCP 和 Azure 都有)</li>\n<li>還有其它<strong>替代方案</strong>\n<ul>\n<li>Container Network Interface (CNI)\n<ul>\n<li>軟體會提供在 containers 裡的 network interfaces 的函式庫/外掛</li>\n<li>熱門的解決方案包含 <strong>Calico</strong>、<strong>Weave</strong> (standalone or with CNI)</li>\n</ul>\n</li>\n<li><strong>Overlay Network</strong>\n<ul>\n<li><strong>Flannel</strong> 是一個簡單又熱門的方式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4>Node Maintenance</h4>\n<ol>\n<li>這是 <strong>Node Controller</strong>，它負責管理 Node Objects\n<ul>\n<li>它分派 <strong>IP space</strong> 給 node，當新的 node 啟動的時候</li>\n<li>它使可用機器的 <strong>node list</strong> 維持最新</li>\n<li>node controller 也監控 <strong>node 的健康狀態</strong>\n<ul>\n<li>如果 node 不健康，它就會被刪除</li>\n<li>Pods 運行在不健康的 node 會 rescheduled</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>當新增新的 node，<strong>kubelet</strong> 會企圖自行註冊</li>\n<li>這個叫做 <strong>self-registration</strong>，而且是預設的行為</li>\n<li>它允許你<strong>簡單的新增更多 nodes</strong> 到 cluster，且不需要自己修改 API</li>\n<li>一個新的 node object 會<strong>自動</strong>帶有以下內容進行建立\n<ul>\n<li>metadata (帶有名稱：IP 或 hostname)</li>\n<li>Labels (例如：cloud region / availability zone / instance size)</li>\n</ul>\n</li>\n<li>一個 node 也有 <strong>node condition</strong> (例如：Ready、OutOfDisk)</li>\n<li>當你想要 <strong>decommission</strong> 一個 node，你想要優雅地做\n<ul>\n<li>你要 drain 一個 node 在你關閉它或是把它拿移出 cluster</li>\n</ul>\n</li>\n<li>為了 drain 一個 node，可以用以下指令<br>\n<code>kubectl drain nodename --grace-period=600</code></li>\n<li>如果 nodes 運行 pods 且不受 controller 控制，那就是一個單一 pod<br>\n<code>kubectl drain nodename --force</code></li>\n</ol>\n<h4>Demo：Node Maintenance</h4>\n<ol>\n<li><code>kubectl create -f deployment/helloworld.yml</code></li>\n<li><code>kubectl get pod</code></li>\n<li><code>kubectl drain minikube --force</code></li>\n<li><code>kubectl get node</code></li>\n<li><code>kubectl get pod</code></li>\n</ol>\n<h4>High Availability</h4>\n<ol>\n<li>如果想要運行 cluster 在產品上，你會想要所有的 master services 有 <strong>high availability (HA)</strong> 設置</li>\n<li>設定會像是這樣：\n<ul>\n<li><strong>Clustering etcd</strong>：至少運行三個 etcd nodes</li>\n<li>使用一個 LoadBalancer 去<strong>複製 API servers</strong></li>\n<li>運行很多 <strong>scheduler</strong> 和 <strong>controllers</strong> 的 instances\n<ul>\n<li>只有其中一個會是 leader，其它的都會 stand-by</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>像是 minikube 的 cluster 不需要 HA - 它是單一 node cluster</li>\n<li>如果要在 AWS 使用產品化 cluster，<strong>kops</strong> 可以為你做 heavy lifting</li>\n<li>如果你運行在其它雲端平台，看看針對那個平台的 <strong>kube deployment tools</strong>\n<ul>\n<li><strong>kubeadm</strong> 是一個 tool 可以為你設置 cluster</li>\n</ul>\n</li>\n<li>如果你使用某個平台且不使用任何工具，可以看看<a href=\"https://kubernetes.io/docs/admin/high-availability/\" target=\"_blank\" rel=\"external\">文件</a>來自行實作</li>\n</ol>\n<h4>Demo：High Availability</h4>\n<ol>\n<li><code>kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-qq123 --zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com --master-zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c</code></li>\n<li><code>kops edit ig --name=kubernetes.appsoliloquy.com nodes --state=s3://kops-state-qq123</code></li>\n<li><code>kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2a --state=s3://kops-state-qq123</code></li>\n<li><code>kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2b --state=s3://kops-state-qq123</code></li>\n</ol>\n<hr>\n<h3>完成課程</h3>\n<img src=\"/images/learning/kubernetes/Edward Viaene_Kubernetes.jpg\">"},{"title":"Lavarel 快速學習自我挑戰 Day10","thumbnail":["/images/learning/laravel/laravelday10.png"],"date":"2017-05-01T15:21:35.000Z","_content":"<img src=\"/images/learning/laravel/laravelday10.png\">\n\n***\n### Model Manipulation\n#### Dates\n1. 搜尋套件 `composer search carbon`\n2. 引用套件 `use Carbon\\Carbon;`\n3. 新增 routes\n```\nRoute::get('/dates', function(){\n\n   $date = new DateTime('+1 week');\n\n   echo $date->format('m-d-Y');\n\n   echo '<br>';\n\n   echo Carbon::now()->addDays(10)->diffForHumans();\n\n   echo '<br>';\n\n   echo Carbon::now()->subMonth(5)->diffForHumans();\n\n   echo '<br>';\n\n   echo Carbon::now()->yesterday()->diffForHumans();\n\n});\n```\n#### Accessors (pull data out of database)\n1. 修改 model\n```\npublic function getNameAttribute($value){\n\n//        return ucfirst($value); //第一個字大寫\n        return strtoupper($value); //全部變成大寫\n\n    }\n```\n2. 修改 routes\n```\nRoute::get('/getname', function(){\n\n    $user = User::find(1);\n\n    echo $user->name;\n\n});\n```\n#### Mutators - [Mutators 設定官方文件](https://laravel.com/docs/5.2/eloquent-mutators)\n1. 修改 model\n```\npublic function setNameAttribute($value){\n\n        $this->attributes['name'] = strtoupper($value);\n\n    }\n```\n2. 修改 routes\n```\nRoute::get('/setname', function(){\n\n    $user = User::find(1);\n\n    $user->name= \"william\";\n\n    $user->save();\n\n});\n```\n#### Query Scopes - [Query Scopes 設定官方文件](https://laravel.com/docs/5.2/eloquent#query-scopes)\n1. 修改 PostsController\n```\npublic function index()\n    {\n        $posts = Post::latest();\n\n        return view('posts.index', compact('posts'));\n    }\n\n```\n2. 修改 Post model\n```\npublic static function scopeLatest($query){\n\n        return $query->orderBy('id', 'asc')->get();\n\n    }\n```\n### 上傳檔案\n#### 新增 Views\n1. 修改第三個參數 `'files'=>true` 來新增 enctype ，並加入上傳的 input\n```\n{!! Form::open(['method'=>'POST', 'action'=>'PostsController@store', 'files'=>true]) !!}\n\n\n        <div class=\"form-group\">\n            {!! Form::label('title', 'Title:') !!}\n            {!! Form::text('title', null, ['class'=>'form-control']) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::file('file', ['class'=>'form-control']) !!}\n        </div>\n\n\n        <div class=\"form-group\">\n            {!! Form::submit('Create Post', ['class'=>'btn btn-primary']) !!}\n        </div>\n    {!! Form::close() !!}\n```\n#### 取得上傳檔案資訊\n1. 修改 PostsController\n```\npublic function store(CreatePostRequest $request)\n    {\n        $file = $request->file('file'); //取得檔案，會以暫存檔(temp)呈現\n\n        echo \"<br>\";\n\n        echo $file->getClientOriginalName(); //取得原始名稱\n\n        echo \"<br>\";\n\n        echo $file->getClientSize(); //取得檔案大小\n    }\n```\n#### 將上傳的檔案寫入資料庫 (persist file data into database)\n1. 新增一個 migration 並關聯到 posts\n`php artisan make:migration add_path_column_to_posts --table=posts`\n2. 新增 migration 到資料庫\n`php artisan migrate`\n3. 讓 path 欄位可寫入\n`protected $fillable = ['path'];`\n4. 設定 PostsController 讓檔案可以寫入資料庫\n```\npublic function store(CreatePostRequest $request)\n    {\n        $input = $request->all();\n\n        if($file = $request->file('file')){\n\n            $name = $file->getClientOriginalName();\n\n            $file->move('images', $name);\n\n            $input['path'] = $name;\n\n        }\n\n        Post::create($input);\n    }\n```\n#### 顯示上傳的圖片\n1. 新增 image-container 到 index.blade.php\n```\n<div class=\"image-container\">\n\n    <img height=\"100\" src=\"{{$post->path}}\" alt=\"\">\n    \n</div>\n```\n2. 新增目錄到 Post model\n`public $directory = '/images/';`\n3. 用 Accessors 新增圖片路徑\n```\npublic function getPathAttribute($value){\n\n        return $this->directory . $value;\n\n    }\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day10.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day10\nthumbnail:\n  - /images/learning/laravel/laravelday10.png\ndate: 2017-05-01 23:21:35\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday10.png\">\n\n***\n### Model Manipulation\n#### Dates\n1. 搜尋套件 `composer search carbon`\n2. 引用套件 `use Carbon\\Carbon;`\n3. 新增 routes\n```\nRoute::get('/dates', function(){\n\n   $date = new DateTime('+1 week');\n\n   echo $date->format('m-d-Y');\n\n   echo '<br>';\n\n   echo Carbon::now()->addDays(10)->diffForHumans();\n\n   echo '<br>';\n\n   echo Carbon::now()->subMonth(5)->diffForHumans();\n\n   echo '<br>';\n\n   echo Carbon::now()->yesterday()->diffForHumans();\n\n});\n```\n#### Accessors (pull data out of database)\n1. 修改 model\n```\npublic function getNameAttribute($value){\n\n//        return ucfirst($value); //第一個字大寫\n        return strtoupper($value); //全部變成大寫\n\n    }\n```\n2. 修改 routes\n```\nRoute::get('/getname', function(){\n\n    $user = User::find(1);\n\n    echo $user->name;\n\n});\n```\n#### Mutators - [Mutators 設定官方文件](https://laravel.com/docs/5.2/eloquent-mutators)\n1. 修改 model\n```\npublic function setNameAttribute($value){\n\n        $this->attributes['name'] = strtoupper($value);\n\n    }\n```\n2. 修改 routes\n```\nRoute::get('/setname', function(){\n\n    $user = User::find(1);\n\n    $user->name= \"william\";\n\n    $user->save();\n\n});\n```\n#### Query Scopes - [Query Scopes 設定官方文件](https://laravel.com/docs/5.2/eloquent#query-scopes)\n1. 修改 PostsController\n```\npublic function index()\n    {\n        $posts = Post::latest();\n\n        return view('posts.index', compact('posts'));\n    }\n\n```\n2. 修改 Post model\n```\npublic static function scopeLatest($query){\n\n        return $query->orderBy('id', 'asc')->get();\n\n    }\n```\n### 上傳檔案\n#### 新增 Views\n1. 修改第三個參數 `'files'=>true` 來新增 enctype ，並加入上傳的 input\n```\n{!! Form::open(['method'=>'POST', 'action'=>'PostsController@store', 'files'=>true]) !!}\n\n\n        <div class=\"form-group\">\n            {!! Form::label('title', 'Title:') !!}\n            {!! Form::text('title', null, ['class'=>'form-control']) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::file('file', ['class'=>'form-control']) !!}\n        </div>\n\n\n        <div class=\"form-group\">\n            {!! Form::submit('Create Post', ['class'=>'btn btn-primary']) !!}\n        </div>\n    {!! Form::close() !!}\n```\n#### 取得上傳檔案資訊\n1. 修改 PostsController\n```\npublic function store(CreatePostRequest $request)\n    {\n        $file = $request->file('file'); //取得檔案，會以暫存檔(temp)呈現\n\n        echo \"<br>\";\n\n        echo $file->getClientOriginalName(); //取得原始名稱\n\n        echo \"<br>\";\n\n        echo $file->getClientSize(); //取得檔案大小\n    }\n```\n#### 將上傳的檔案寫入資料庫 (persist file data into database)\n1. 新增一個 migration 並關聯到 posts\n`php artisan make:migration add_path_column_to_posts --table=posts`\n2. 新增 migration 到資料庫\n`php artisan migrate`\n3. 讓 path 欄位可寫入\n`protected $fillable = ['path'];`\n4. 設定 PostsController 讓檔案可以寫入資料庫\n```\npublic function store(CreatePostRequest $request)\n    {\n        $input = $request->all();\n\n        if($file = $request->file('file')){\n\n            $name = $file->getClientOriginalName();\n\n            $file->move('images', $name);\n\n            $input['path'] = $name;\n\n        }\n\n        Post::create($input);\n    }\n```\n#### 顯示上傳的圖片\n1. 新增 image-container 到 index.blade.php\n```\n<div class=\"image-container\">\n\n    <img height=\"100\" src=\"{{$post->path}}\" alt=\"\">\n    \n</div>\n```\n2. 新增目錄到 Post model\n`public $directory = '/images/';`\n3. 用 Accessors 新增圖片路徑\n```\npublic function getPathAttribute($value){\n\n        return $this->directory . $value;\n\n    }\n```","slug":"Lavarel-快速學習自我挑戰-Day10","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwk00107ifav061t6mp","content":"<img src=\"/images/learning/laravel/laravelday10.png\">\n<hr>\n<h3>Model Manipulation</h3>\n<h4>Dates</h4>\n<ol>\n<li>搜尋套件 <code>composer search carbon</code></li>\n<li>引用套件 <code>use Carbon\\Carbon;</code></li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/dates&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   $date = new DateTime(&apos;+1 week&apos;);</div><div class=\"line\"></div><div class=\"line\">   echo $date-&gt;format(&apos;m-d-Y&apos;);</div><div class=\"line\"></div><div class=\"line\">   echo &apos;&lt;br&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">   echo Carbon::now()-&gt;addDays(10)-&gt;diffForHumans();</div><div class=\"line\"></div><div class=\"line\">   echo &apos;&lt;br&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">   echo Carbon::now()-&gt;subMonth(5)-&gt;diffForHumans();</div><div class=\"line\"></div><div class=\"line\">   echo &apos;&lt;br&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">   echo Carbon::now()-&gt;yesterday()-&gt;diffForHumans();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Accessors (pull data out of database)</h4>\n<ol>\n<li>修改 model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function getNameAttribute($value)&#123;</div><div class=\"line\"></div><div class=\"line\">//        return ucfirst($value); //第一個字大寫</div><div class=\"line\">        return strtoupper($value); //全部變成大寫</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/getname&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    echo $user-&gt;name;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Mutators - <a href=\"https://laravel.com/docs/5.2/eloquent-mutators\" target=\"_blank\" rel=\"external\">Mutators 設定官方文件</a></h4>\n<ol>\n<li>修改 model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function setNameAttribute($value)&#123;</div><div class=\"line\"></div><div class=\"line\">        $this-&gt;attributes[&apos;name&apos;] = strtoupper($value);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/setname&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;name= &quot;william&quot;;</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Query Scopes - <a href=\"https://laravel.com/docs/5.2/eloquent#query-scopes\" target=\"_blank\" rel=\"external\">Query Scopes 設定官方文件</a></h4>\n<ol>\n<li>修改 PostsController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $posts = Post::latest();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;posts.index&apos;, compact(&apos;posts&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 Post model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static function scopeLatest($query)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $query-&gt;orderBy(&apos;id&apos;, &apos;asc&apos;)-&gt;get();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3>上傳檔案</h3>\n<h4>新增 Views</h4>\n<ol>\n<li>修改第三個參數 <code>'files'=&gt;true</code> 來新增 enctype ，並加入上傳的 input</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;PostsController@store&apos;, &apos;files&apos;=&gt;true]) !!&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::file(&apos;file&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<h4>取得上傳檔案資訊</h4>\n<ol>\n<li>修改 PostsController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(CreatePostRequest $request)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $file = $request-&gt;file(&apos;file&apos;); //取得檔案，會以暫存檔(temp)呈現</div><div class=\"line\"></div><div class=\"line\">        echo &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        echo $file-&gt;getClientOriginalName(); //取得原始名稱</div><div class=\"line\"></div><div class=\"line\">        echo &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        echo $file-&gt;getClientSize(); //取得檔案大小</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4>將上傳的檔案寫入資料庫 (persist file data into database)</h4>\n<ol>\n<li>新增一個 migration 並關聯到 posts<br>\n<code>php artisan make:migration add_path_column_to_posts --table=posts</code></li>\n<li>新增 migration 到資料庫<br>\n<code>php artisan migrate</code></li>\n<li>讓 path 欄位可寫入<br>\n<code>protected $fillable = ['path'];</code></li>\n<li>設定 PostsController 讓檔案可以寫入資料庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(CreatePostRequest $request)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        if($file = $request-&gt;file(&apos;file&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">            $name = $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">            $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">            $input[&apos;path&apos;] = $name;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Post::create($input);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4>顯示上傳的圖片</h4>\n<ol>\n<li>新增 image-container 到 index.blade.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;image-container&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;img height=&quot;100&quot; src=&quot;&#123;&#123;$post-&gt;path&#125;&#125;&quot; alt=&quot;&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增目錄到 Post model<br>\n<code>public $directory = '/images/';</code></li>\n<li>用 Accessors 新增圖片路徑</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function getPathAttribute($value)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $this-&gt;directory . $value;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday10.png\">\n<hr>\n<h3>Model Manipulation</h3>\n<h4>Dates</h4>\n<ol>\n<li>搜尋套件 <code>composer search carbon</code></li>\n<li>引用套件 <code>use Carbon\\Carbon;</code></li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/dates&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   $date = new DateTime(&apos;+1 week&apos;);</div><div class=\"line\"></div><div class=\"line\">   echo $date-&gt;format(&apos;m-d-Y&apos;);</div><div class=\"line\"></div><div class=\"line\">   echo &apos;&lt;br&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">   echo Carbon::now()-&gt;addDays(10)-&gt;diffForHumans();</div><div class=\"line\"></div><div class=\"line\">   echo &apos;&lt;br&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">   echo Carbon::now()-&gt;subMonth(5)-&gt;diffForHumans();</div><div class=\"line\"></div><div class=\"line\">   echo &apos;&lt;br&gt;&apos;;</div><div class=\"line\"></div><div class=\"line\">   echo Carbon::now()-&gt;yesterday()-&gt;diffForHumans();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Accessors (pull data out of database)</h4>\n<ol>\n<li>修改 model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function getNameAttribute($value)&#123;</div><div class=\"line\"></div><div class=\"line\">//        return ucfirst($value); //第一個字大寫</div><div class=\"line\">        return strtoupper($value); //全部變成大寫</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/getname&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    echo $user-&gt;name;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Mutators - <a href=\"https://laravel.com/docs/5.2/eloquent-mutators\" target=\"_blank\" rel=\"external\">Mutators 設定官方文件</a></h4>\n<ol>\n<li>修改 model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function setNameAttribute($value)&#123;</div><div class=\"line\"></div><div class=\"line\">        $this-&gt;attributes[&apos;name&apos;] = strtoupper($value);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/setname&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;name= &quot;william&quot;;</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Query Scopes - <a href=\"https://laravel.com/docs/5.2/eloquent#query-scopes\" target=\"_blank\" rel=\"external\">Query Scopes 設定官方文件</a></h4>\n<ol>\n<li>修改 PostsController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $posts = Post::latest();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;posts.index&apos;, compact(&apos;posts&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 Post model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static function scopeLatest($query)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $query-&gt;orderBy(&apos;id&apos;, &apos;asc&apos;)-&gt;get();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3>上傳檔案</h3>\n<h4>新增 Views</h4>\n<ol>\n<li>修改第三個參數 <code>'files'=&gt;true</code> 來新增 enctype ，並加入上傳的 input</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;PostsController@store&apos;, &apos;files&apos;=&gt;true]) !!&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::file(&apos;file&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<h4>取得上傳檔案資訊</h4>\n<ol>\n<li>修改 PostsController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(CreatePostRequest $request)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $file = $request-&gt;file(&apos;file&apos;); //取得檔案，會以暫存檔(temp)呈現</div><div class=\"line\"></div><div class=\"line\">        echo &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        echo $file-&gt;getClientOriginalName(); //取得原始名稱</div><div class=\"line\"></div><div class=\"line\">        echo &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        echo $file-&gt;getClientSize(); //取得檔案大小</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4>將上傳的檔案寫入資料庫 (persist file data into database)</h4>\n<ol>\n<li>新增一個 migration 並關聯到 posts<br>\n<code>php artisan make:migration add_path_column_to_posts --table=posts</code></li>\n<li>新增 migration 到資料庫<br>\n<code>php artisan migrate</code></li>\n<li>讓 path 欄位可寫入<br>\n<code>protected $fillable = ['path'];</code></li>\n<li>設定 PostsController 讓檔案可以寫入資料庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(CreatePostRequest $request)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        if($file = $request-&gt;file(&apos;file&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">            $name = $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">            $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">            $input[&apos;path&apos;] = $name;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Post::create($input);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4>顯示上傳的圖片</h4>\n<ol>\n<li>新增 image-container 到 index.blade.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;image-container&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;img height=&quot;100&quot; src=&quot;&#123;&#123;$post-&gt;path&#125;&#125;&quot; alt=&quot;&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增目錄到 Post model<br>\n<code>public $directory = '/images/';</code></li>\n<li>用 Accessors 新增圖片路徑</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function getPathAttribute($value)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $this-&gt;directory . $value;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day1","thumbnail":["/images/learning/laravel/laravelday1.jpg"],"date":"2017-04-21T19:00:35.000Z","_content":"<img src=\"/images/learning/laravel/laravelday1.jpg\">\n\n***\n### 安裝 PHP 環境\n1. 安裝 [XAMPP](https://www.apachefriends.org/download.html)，選 PHP 最新版本。\n2. 啟動 XAMPP，網址列輸入 localhost，可以看到 XAMPP 的最新畫面。\n\n### 安裝 IDE (PhpStorm)\n1. [官方網站](https://www.jetbrains.com/phpstorm/)。\n2. [學生免費](https://www.jetbrains.com/phpstorm/buy/#edition=discounts)。\n3. [下載 IDE](https://www.jetbrains.com/phpstorm/download/)。\n\n### Install Composer (相依套件管理器)\n1. [Composer官方網站](https://getcomposer.org/)。\n2. 找套件的網站：[packagist](https://packagist.org/)。\n3. [Download Composer](https://getcomposer.org/download/)。\n4. 按照程式碼安裝之後，會產生一個 composer.phar，為了要在全域使用，在 .zshrc 裡面加上`export PATH=\"~/.composer/vendor/bin:$PATH\"`，在指令列用`source .zshrc`更新檔案。\n\n### 啟動 laravel 專案\n1. `composer create-project --prefer-dist laravel/laravel cms 5.2.29`\n2. 更改讀取權限 `chmod -R o+w cms/storage`，就可以直接預覽了。\n3. 如果不想修改權限，可以在修改 httpd 設定檔。\n`vim /Applications/XAMPP/xamppfiles/etc/httpd.conf`\n將 `User daemon` 改成 `User 你的Username`。\n\n### Virtual hosts\n1. 修改 httpd 設定檔\n`vim /Applications/XAMPP/xamppfiles/etc/httpd.conf`\n把 Virtaul hosts include 進去 (將 # 移除)\n`Include etc/extra/httpd-vhosts.conf`\n2. 修改 hosts 檔案\n`vim /etc/hosts`\n加上 `127.0.0.1 cms.dev`\n3. 修改 vhosts 設定檔\n`vim /Applications/XAMPP/etc/extra/httpd-vhosts.conf`\n將檔案修改為以下格式\n```\n# <URL:http://httpd.apache.org/docs/2.4/vhosts/>\n# for further details before you try to setup virtual hosts.\n#\n# You may use the command line option '-S' to verify your virtual host\n# configuration.\n\nNameVirtualHost *:80\n\n#\n# VirtualHost example:\n# Almost any Apache directive may go into a VirtualHost container.\n# The first VirtualHost section is used for all requests that do not\n# match a ServerName or ServerAlias in any <VirtualHost> block.\n#\n<VirtualHost *:80>\n    ServerAdmin webmaster@dummy-host.example.com\n    DocumentRoot \"/Applications/XAMPP/xamppfiles/htdocs\"\n    ServerName localhost\n    ServerAlias www.localhost\n</VirtualHost>\n\n<VirtualHost *:80>\n    ServerAdmin webmaster@dummy-host2.example.com\n    DocumentRoot \"/Applications/XAMPP/xamppfiles/htdocs/cms/public\"\n    ServerName cms.dev\n#    ErrorLog \"logs/dummy-host2.example.com-error_log\"\n#    CustomLog \"logs/dummy-host2.example.com-access_log\" common\n</VirtualHost>\n```\n\n### 用 PhpStorm 打開專案\n1. 點選 open，選擇 laravel 專案目錄。\n\n### 觀念摘錄\n1. MVC 架構 Model (Deals with Databse), View (Deals with the HTML), Controller (The middle-man)。\n2. 快捷鍵設定 --- 加入 .zshrc\n輸入 `desk` 直接跳到桌面\n`alias desk=\"cd /Users/**USERNAME**/Desktop\"`\n輸入 `refzsh` 更新 .zshrc\n`alias refzsh=\"source ~/.zshrc\"`\n輸入 `zsh` 編輯 .zshrc\n`alias zsh=\"vim ~/.zshrc\"`\n輸入 `htdocs` 跳轉到 htdocs 目錄\n`alias htdocs=\"cd /Applications/XAMPP/htdocs\"`","source":"_posts/Lavarel-快速學習自我挑戰-Day1.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/laravel/laravelday1.jpg\ndate: 2017-04-22 03:00:35\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday1.jpg\">\n\n***\n### 安裝 PHP 環境\n1. 安裝 [XAMPP](https://www.apachefriends.org/download.html)，選 PHP 最新版本。\n2. 啟動 XAMPP，網址列輸入 localhost，可以看到 XAMPP 的最新畫面。\n\n### 安裝 IDE (PhpStorm)\n1. [官方網站](https://www.jetbrains.com/phpstorm/)。\n2. [學生免費](https://www.jetbrains.com/phpstorm/buy/#edition=discounts)。\n3. [下載 IDE](https://www.jetbrains.com/phpstorm/download/)。\n\n### Install Composer (相依套件管理器)\n1. [Composer官方網站](https://getcomposer.org/)。\n2. 找套件的網站：[packagist](https://packagist.org/)。\n3. [Download Composer](https://getcomposer.org/download/)。\n4. 按照程式碼安裝之後，會產生一個 composer.phar，為了要在全域使用，在 .zshrc 裡面加上`export PATH=\"~/.composer/vendor/bin:$PATH\"`，在指令列用`source .zshrc`更新檔案。\n\n### 啟動 laravel 專案\n1. `composer create-project --prefer-dist laravel/laravel cms 5.2.29`\n2. 更改讀取權限 `chmod -R o+w cms/storage`，就可以直接預覽了。\n3. 如果不想修改權限，可以在修改 httpd 設定檔。\n`vim /Applications/XAMPP/xamppfiles/etc/httpd.conf`\n將 `User daemon` 改成 `User 你的Username`。\n\n### Virtual hosts\n1. 修改 httpd 設定檔\n`vim /Applications/XAMPP/xamppfiles/etc/httpd.conf`\n把 Virtaul hosts include 進去 (將 # 移除)\n`Include etc/extra/httpd-vhosts.conf`\n2. 修改 hosts 檔案\n`vim /etc/hosts`\n加上 `127.0.0.1 cms.dev`\n3. 修改 vhosts 設定檔\n`vim /Applications/XAMPP/etc/extra/httpd-vhosts.conf`\n將檔案修改為以下格式\n```\n# <URL:http://httpd.apache.org/docs/2.4/vhosts/>\n# for further details before you try to setup virtual hosts.\n#\n# You may use the command line option '-S' to verify your virtual host\n# configuration.\n\nNameVirtualHost *:80\n\n#\n# VirtualHost example:\n# Almost any Apache directive may go into a VirtualHost container.\n# The first VirtualHost section is used for all requests that do not\n# match a ServerName or ServerAlias in any <VirtualHost> block.\n#\n<VirtualHost *:80>\n    ServerAdmin webmaster@dummy-host.example.com\n    DocumentRoot \"/Applications/XAMPP/xamppfiles/htdocs\"\n    ServerName localhost\n    ServerAlias www.localhost\n</VirtualHost>\n\n<VirtualHost *:80>\n    ServerAdmin webmaster@dummy-host2.example.com\n    DocumentRoot \"/Applications/XAMPP/xamppfiles/htdocs/cms/public\"\n    ServerName cms.dev\n#    ErrorLog \"logs/dummy-host2.example.com-error_log\"\n#    CustomLog \"logs/dummy-host2.example.com-access_log\" common\n</VirtualHost>\n```\n\n### 用 PhpStorm 打開專案\n1. 點選 open，選擇 laravel 專案目錄。\n\n### 觀念摘錄\n1. MVC 架構 Model (Deals with Databse), View (Deals with the HTML), Controller (The middle-man)。\n2. 快捷鍵設定 --- 加入 .zshrc\n輸入 `desk` 直接跳到桌面\n`alias desk=\"cd /Users/**USERNAME**/Desktop\"`\n輸入 `refzsh` 更新 .zshrc\n`alias refzsh=\"source ~/.zshrc\"`\n輸入 `zsh` 編輯 .zshrc\n`alias zsh=\"vim ~/.zshrc\"`\n輸入 `htdocs` 跳轉到 htdocs 目錄\n`alias htdocs=\"cd /Applications/XAMPP/htdocs\"`","slug":"Lavarel-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwl00137ifa6umt0etl","content":"<img src=\"/images/learning/laravel/laravelday1.jpg\">\n<hr>\n<h3>安裝 PHP 環境</h3>\n<ol>\n<li>安裝 <a href=\"https://www.apachefriends.org/download.html\" target=\"_blank\" rel=\"external\">XAMPP</a>，選 PHP 最新版本。</li>\n<li>啟動 XAMPP，網址列輸入 localhost，可以看到 XAMPP 的最新畫面。</li>\n</ol>\n<h3>安裝 IDE (PhpStorm)</h3>\n<ol>\n<li><a href=\"https://www.jetbrains.com/phpstorm/\" target=\"_blank\" rel=\"external\">官方網站</a>。</li>\n<li><a href=\"https://www.jetbrains.com/phpstorm/buy/#edition=discounts\" target=\"_blank\" rel=\"external\">學生免費</a>。</li>\n<li><a href=\"https://www.jetbrains.com/phpstorm/download/\" target=\"_blank\" rel=\"external\">下載 IDE</a>。</li>\n</ol>\n<h3>Install Composer (相依套件管理器)</h3>\n<ol>\n<li><a href=\"https://getcomposer.org/\" target=\"_blank\" rel=\"external\">Composer官方網站</a>。</li>\n<li>找套件的網站：<a href=\"https://packagist.org/\" target=\"_blank\" rel=\"external\">packagist</a>。</li>\n<li><a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"external\">Download Composer</a>。</li>\n<li>按照程式碼安裝之後，會產生一個 composer.phar，為了要在全域使用，在 .zshrc 裡面加上<code>export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;</code>，在指令列用<code>source .zshrc</code>更新檔案。</li>\n</ol>\n<h3>啟動 laravel 專案</h3>\n<ol>\n<li><code>composer create-project --prefer-dist laravel/laravel cms 5.2.29</code></li>\n<li>更改讀取權限 <code>chmod -R o+w cms/storage</code>，就可以直接預覽了。</li>\n<li>如果不想修改權限，可以在修改 httpd 設定檔。<br>\n<code>vim /Applications/XAMPP/xamppfiles/etc/httpd.conf</code><br>\n將 <code>User daemon</code> 改成 <code>User 你的Username</code>。</li>\n</ol>\n<h3>Virtual hosts</h3>\n<ol>\n<li>修改 httpd 設定檔<br>\n<code>vim /Applications/XAMPP/xamppfiles/etc/httpd.conf</code><br>\n把 Virtaul hosts include 進去 (將 # 移除)<br>\n<code>Include etc/extra/httpd-vhosts.conf</code></li>\n<li>修改 hosts 檔案<br>\n<code>vim /etc/hosts</code><br>\n加上 <code>127.0.0.1 cms.dev</code></li>\n<li>修改 vhosts 設定檔<br>\n<code>vim /Applications/XAMPP/etc/extra/httpd-vhosts.conf</code><br>\n將檔案修改為以下格式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"># &lt;URL:http://httpd.apache.org/docs/2.4/vhosts/&gt;</div><div class=\"line\"># for further details before you try to setup virtual hosts.</div><div class=\"line\">#</div><div class=\"line\"># You may use the command line option &apos;-S&apos; to verify your virtual host</div><div class=\"line\"># configuration.</div><div class=\"line\"></div><div class=\"line\">NameVirtualHost *:80</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># VirtualHost example:</div><div class=\"line\"># Almost any Apache directive may go into a VirtualHost container.</div><div class=\"line\"># The first VirtualHost section is used for all requests that do not</div><div class=\"line\"># match a ServerName or ServerAlias in any &lt;VirtualHost&gt; block.</div><div class=\"line\">#</div><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerAdmin webmaster@dummy-host.example.com</div><div class=\"line\">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs&quot;</div><div class=\"line\">    ServerName localhost</div><div class=\"line\">    ServerAlias www.localhost</div><div class=\"line\">&lt;/VirtualHost&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</div><div class=\"line\">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/cms/public&quot;</div><div class=\"line\">    ServerName cms.dev</div><div class=\"line\">#    ErrorLog &quot;logs/dummy-host2.example.com-error_log&quot;</div><div class=\"line\">#    CustomLog &quot;logs/dummy-host2.example.com-access_log&quot; common</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n<h3>用 PhpStorm 打開專案</h3>\n<ol>\n<li>點選 open，選擇 laravel 專案目錄。</li>\n</ol>\n<h3>觀念摘錄</h3>\n<ol>\n<li>MVC 架構 Model (Deals with Databse), View (Deals with the HTML), Controller (The middle-man)。</li>\n<li>快捷鍵設定 — 加入 .zshrc<br>\n輸入 <code>desk</code> 直接跳到桌面<br>\n<code>alias desk=&quot;cd /Users/**USERNAME**/Desktop&quot;</code><br>\n輸入 <code>refzsh</code> 更新 .zshrc<br>\n<code>alias refzsh=&quot;source ~/.zshrc&quot;</code><br>\n輸入 <code>zsh</code> 編輯 .zshrc<br>\n<code>alias zsh=&quot;vim ~/.zshrc&quot;</code><br>\n輸入 <code>htdocs</code> 跳轉到 htdocs 目錄<br>\n<code>alias htdocs=&quot;cd /Applications/XAMPP/htdocs&quot;</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday1.jpg\">\n<hr>\n<h3>安裝 PHP 環境</h3>\n<ol>\n<li>安裝 <a href=\"https://www.apachefriends.org/download.html\" target=\"_blank\" rel=\"external\">XAMPP</a>，選 PHP 最新版本。</li>\n<li>啟動 XAMPP，網址列輸入 localhost，可以看到 XAMPP 的最新畫面。</li>\n</ol>\n<h3>安裝 IDE (PhpStorm)</h3>\n<ol>\n<li><a href=\"https://www.jetbrains.com/phpstorm/\" target=\"_blank\" rel=\"external\">官方網站</a>。</li>\n<li><a href=\"https://www.jetbrains.com/phpstorm/buy/#edition=discounts\" target=\"_blank\" rel=\"external\">學生免費</a>。</li>\n<li><a href=\"https://www.jetbrains.com/phpstorm/download/\" target=\"_blank\" rel=\"external\">下載 IDE</a>。</li>\n</ol>\n<h3>Install Composer (相依套件管理器)</h3>\n<ol>\n<li><a href=\"https://getcomposer.org/\" target=\"_blank\" rel=\"external\">Composer官方網站</a>。</li>\n<li>找套件的網站：<a href=\"https://packagist.org/\" target=\"_blank\" rel=\"external\">packagist</a>。</li>\n<li><a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"external\">Download Composer</a>。</li>\n<li>按照程式碼安裝之後，會產生一個 composer.phar，為了要在全域使用，在 .zshrc 裡面加上<code>export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;</code>，在指令列用<code>source .zshrc</code>更新檔案。</li>\n</ol>\n<h3>啟動 laravel 專案</h3>\n<ol>\n<li><code>composer create-project --prefer-dist laravel/laravel cms 5.2.29</code></li>\n<li>更改讀取權限 <code>chmod -R o+w cms/storage</code>，就可以直接預覽了。</li>\n<li>如果不想修改權限，可以在修改 httpd 設定檔。<br>\n<code>vim /Applications/XAMPP/xamppfiles/etc/httpd.conf</code><br>\n將 <code>User daemon</code> 改成 <code>User 你的Username</code>。</li>\n</ol>\n<h3>Virtual hosts</h3>\n<ol>\n<li>修改 httpd 設定檔<br>\n<code>vim /Applications/XAMPP/xamppfiles/etc/httpd.conf</code><br>\n把 Virtaul hosts include 進去 (將 # 移除)<br>\n<code>Include etc/extra/httpd-vhosts.conf</code></li>\n<li>修改 hosts 檔案<br>\n<code>vim /etc/hosts</code><br>\n加上 <code>127.0.0.1 cms.dev</code></li>\n<li>修改 vhosts 設定檔<br>\n<code>vim /Applications/XAMPP/etc/extra/httpd-vhosts.conf</code><br>\n將檔案修改為以下格式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"># &lt;URL:http://httpd.apache.org/docs/2.4/vhosts/&gt;</div><div class=\"line\"># for further details before you try to setup virtual hosts.</div><div class=\"line\">#</div><div class=\"line\"># You may use the command line option &apos;-S&apos; to verify your virtual host</div><div class=\"line\"># configuration.</div><div class=\"line\"></div><div class=\"line\">NameVirtualHost *:80</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># VirtualHost example:</div><div class=\"line\"># Almost any Apache directive may go into a VirtualHost container.</div><div class=\"line\"># The first VirtualHost section is used for all requests that do not</div><div class=\"line\"># match a ServerName or ServerAlias in any &lt;VirtualHost&gt; block.</div><div class=\"line\">#</div><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerAdmin webmaster@dummy-host.example.com</div><div class=\"line\">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs&quot;</div><div class=\"line\">    ServerName localhost</div><div class=\"line\">    ServerAlias www.localhost</div><div class=\"line\">&lt;/VirtualHost&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerAdmin webmaster@dummy-host2.example.com</div><div class=\"line\">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/cms/public&quot;</div><div class=\"line\">    ServerName cms.dev</div><div class=\"line\">#    ErrorLog &quot;logs/dummy-host2.example.com-error_log&quot;</div><div class=\"line\">#    CustomLog &quot;logs/dummy-host2.example.com-access_log&quot; common</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n<h3>用 PhpStorm 打開專案</h3>\n<ol>\n<li>點選 open，選擇 laravel 專案目錄。</li>\n</ol>\n<h3>觀念摘錄</h3>\n<ol>\n<li>MVC 架構 Model (Deals with Databse), View (Deals with the HTML), Controller (The middle-man)。</li>\n<li>快捷鍵設定 — 加入 .zshrc<br>\n輸入 <code>desk</code> 直接跳到桌面<br>\n<code>alias desk=&quot;cd /Users/**USERNAME**/Desktop&quot;</code><br>\n輸入 <code>refzsh</code> 更新 .zshrc<br>\n<code>alias refzsh=&quot;source ~/.zshrc&quot;</code><br>\n輸入 <code>zsh</code> 編輯 .zshrc<br>\n<code>alias zsh=&quot;vim ~/.zshrc&quot;</code><br>\n輸入 <code>htdocs</code> 跳轉到 htdocs 目錄<br>\n<code>alias htdocs=&quot;cd /Applications/XAMPP/htdocs&quot;</code></li>\n</ol>\n"},{"title":"Lavarel 快速學習自我挑戰 Day11","thumbnail":["/images/learning/laravel/laravelday11.jpg"],"date":"2017-05-01T19:43:56.000Z","_content":"<img src=\"/images/learning/laravel/laravelday11.jpg\">\n\n***\n### Form Login - [Authentication 設定官方文件](https://laravel.com/docs/5.2/authentication)\n#### 安裝新的 Laravel\n1. `composer create-project --prefer-dist laravel/laravel login 5.2.29`\n2. 設定 vhost\n#### Database 連線和 migration\n1. 建立資料庫、設定 .env\n2. 直接 migrate `php artisan migrate`\n#### 建立登入系統\n1. `php artisan make:auth`\n#### 取得登入的使用者資料\n1. 修改 HomeController\n```\npublic function index()\n    {\n        $user = Auth::user();\n\n        return view('home', compact('user'));\n    }\n```\n2. 在 view 取得資料 `{{ \"{{$user->name\" }}}}`\n3. `Auth::check`：檢查登入資料、`Auth::attempt`：檢查是否有權限。\n### Middleware - [Middleware 設定官方文件](https://laravel.com/docs/5.2/middleware)\n#### 建立 Middleware\n1. 建立一個新的 middleware：`php artisan make:middleware RoleMiddleware`\n2. 進入維護模式：`php artisan down`\n3. 關閉維護模式：`php artisan up`\n4. 在 kernal.php 新增 alias：`'role' => \\App\\Http\\Middleware\\RoleMiddleware::class,`\n5. 新增 routes `Route::get('/admin/user/roles', ['middleware'=>'role', function(){return \"Middleware role\";}]);`\n6. 修改 RoleMiddleware 導向至首頁 `return redirect('/');`\n#### Middleware 應用 - roles, migration and relations\n1. 新增 Role Model：`php artisan make:model Role -m`\n2. 新增 role_id 到 User table：`$table->integer('role_id');`\n3. 新增 name 到 Role table：`$table->string('name');`\n4. 更新資料庫：`php artisan migrate:refresh`\n5. 在 User Model 新增 relation\n```\n    public function role(){\n    \n        return $this->belongsTo('App\\Role');\n        \n    }\n```\n#### Middleware 應用 1\n1. 新增一個新的 middleware：`php aritsan make:middleware IsAdmin`\n2. 在 kernal.php 新增 alias：`'IsAdmin' => \\App\\Http\\Middleware\\IsAdmin::class,`\n3. 在 User Model 新增 function\n```\n    public function isAdmin(){\n\n        if($this->role->name == 'administrator'){\n\n            return true;\n\n        }\n\n        return false;\n\n    }\n```\n4. 在 routes 測試 function\n```\n    if($user->isAdmin()){\n\n        echo \"this user is a administrator\";\n\n    }\n```\n#### Middleware 應用 2\n1. 將 function 從 routes 移動到 IsAdmin middle ware 的 handle function\n```\n    $user = Auth::user();\n\n    if($user->isAdmin()){\n\n        return redirect()->intended('/admin');\n\n    }\n```\n2. 新增 routes 連到 controller：`Route::get('/admin', 'AdminController@index');`\n3. 新增 controller：`php artisan make:controller AdminController`\n4. 新增 function 到 controller\n```\npublic function __construct()\n    {\n        $this->middleware('IsAdmin');\n    }\n    \n    public function index(){\n        \n        return \"you are and administrator because you are seeing this page\";\n        \n    }\n```\n5. 如果不是 administrator 就導向首頁\n```\n    $user = Auth::user();\n\n    if(!$user->isAdmin()){\n\n        return redirect('/');\n\n    }\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day11.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day11\nthumbnail:\n  - /images/learning/laravel/laravelday11.jpg\ndate: 2017-05-02 03:43:56\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday11.jpg\">\n\n***\n### Form Login - [Authentication 設定官方文件](https://laravel.com/docs/5.2/authentication)\n#### 安裝新的 Laravel\n1. `composer create-project --prefer-dist laravel/laravel login 5.2.29`\n2. 設定 vhost\n#### Database 連線和 migration\n1. 建立資料庫、設定 .env\n2. 直接 migrate `php artisan migrate`\n#### 建立登入系統\n1. `php artisan make:auth`\n#### 取得登入的使用者資料\n1. 修改 HomeController\n```\npublic function index()\n    {\n        $user = Auth::user();\n\n        return view('home', compact('user'));\n    }\n```\n2. 在 view 取得資料 `{{ \"{{$user->name\" }}}}`\n3. `Auth::check`：檢查登入資料、`Auth::attempt`：檢查是否有權限。\n### Middleware - [Middleware 設定官方文件](https://laravel.com/docs/5.2/middleware)\n#### 建立 Middleware\n1. 建立一個新的 middleware：`php artisan make:middleware RoleMiddleware`\n2. 進入維護模式：`php artisan down`\n3. 關閉維護模式：`php artisan up`\n4. 在 kernal.php 新增 alias：`'role' => \\App\\Http\\Middleware\\RoleMiddleware::class,`\n5. 新增 routes `Route::get('/admin/user/roles', ['middleware'=>'role', function(){return \"Middleware role\";}]);`\n6. 修改 RoleMiddleware 導向至首頁 `return redirect('/');`\n#### Middleware 應用 - roles, migration and relations\n1. 新增 Role Model：`php artisan make:model Role -m`\n2. 新增 role_id 到 User table：`$table->integer('role_id');`\n3. 新增 name 到 Role table：`$table->string('name');`\n4. 更新資料庫：`php artisan migrate:refresh`\n5. 在 User Model 新增 relation\n```\n    public function role(){\n    \n        return $this->belongsTo('App\\Role');\n        \n    }\n```\n#### Middleware 應用 1\n1. 新增一個新的 middleware：`php aritsan make:middleware IsAdmin`\n2. 在 kernal.php 新增 alias：`'IsAdmin' => \\App\\Http\\Middleware\\IsAdmin::class,`\n3. 在 User Model 新增 function\n```\n    public function isAdmin(){\n\n        if($this->role->name == 'administrator'){\n\n            return true;\n\n        }\n\n        return false;\n\n    }\n```\n4. 在 routes 測試 function\n```\n    if($user->isAdmin()){\n\n        echo \"this user is a administrator\";\n\n    }\n```\n#### Middleware 應用 2\n1. 將 function 從 routes 移動到 IsAdmin middle ware 的 handle function\n```\n    $user = Auth::user();\n\n    if($user->isAdmin()){\n\n        return redirect()->intended('/admin');\n\n    }\n```\n2. 新增 routes 連到 controller：`Route::get('/admin', 'AdminController@index');`\n3. 新增 controller：`php artisan make:controller AdminController`\n4. 新增 function 到 controller\n```\npublic function __construct()\n    {\n        $this->middleware('IsAdmin');\n    }\n    \n    public function index(){\n        \n        return \"you are and administrator because you are seeing this page\";\n        \n    }\n```\n5. 如果不是 administrator 就導向首頁\n```\n    $user = Auth::user();\n\n    if(!$user->isAdmin()){\n\n        return redirect('/');\n\n    }\n```","slug":"Lavarel-快速學習自我挑戰-Day11","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwm00177ifa6fagmdw2","content":"<img src=\"/images/learning/laravel/laravelday11.jpg\">\n<hr>\n<h3>Form Login - <a href=\"https://laravel.com/docs/5.2/authentication\" target=\"_blank\" rel=\"external\">Authentication 設定官方文件</a></h3>\n<h4>安裝新的 Laravel</h4>\n<ol>\n<li><code>composer create-project --prefer-dist laravel/laravel login 5.2.29</code></li>\n<li>設定 vhost</li>\n</ol>\n<h4>Database 連線和 migration</h4>\n<ol>\n<li>建立資料庫、設定 .env</li>\n<li>直接 migrate <code>php artisan migrate</code></li>\n</ol>\n<h4>建立登入系統</h4>\n<ol>\n<li><code>php artisan make:auth</code></li>\n</ol>\n<h4>取得登入的使用者資料</h4>\n<ol>\n<li>修改 HomeController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;home&apos;, compact(&apos;user&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 view 取得資料 <code>{{$user->name}}</code></li>\n<li><code>Auth::check</code>：檢查登入資料、<code>Auth::attempt</code>：檢查是否有權限。</li>\n</ol>\n<h3>Middleware - <a href=\"https://laravel.com/docs/5.2/middleware\" target=\"_blank\" rel=\"external\">Middleware 設定官方文件</a></h3>\n<h4>建立 Middleware</h4>\n<ol>\n<li>建立一個新的 middleware：<code>php artisan make:middleware RoleMiddleware</code></li>\n<li>進入維護模式：<code>php artisan down</code></li>\n<li>關閉維護模式：<code>php artisan up</code></li>\n<li>在 kernal.php 新增 alias：<code>'role' =&gt; \\App\\Http\\Middleware\\RoleMiddleware::class,</code></li>\n<li>新增 routes <code>Route::get('/admin/user/roles', ['middleware'=&gt;'role', function(){return &quot;Middleware role&quot;;}]);</code></li>\n<li>修改 RoleMiddleware 導向至首頁 <code>return redirect('/');</code></li>\n</ol>\n<h4>Middleware 應用 - roles, migration and relations</h4>\n<ol>\n<li>新增 Role Model：<code>php artisan make:model Role -m</code></li>\n<li>新增 role_id 到 User table：<code>$table-&gt;integer('role_id');</code></li>\n<li>新增 name 到 Role table：<code>$table-&gt;string('name');</code></li>\n<li>更新資料庫：<code>php artisan migrate:refresh</code></li>\n<li>在 User Model 新增 relation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function role()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Role&apos;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Middleware 應用 1</h4>\n<ol>\n<li>新增一個新的 middleware：<code>php aritsan make:middleware IsAdmin</code></li>\n<li>在 kernal.php 新增 alias：<code>'IsAdmin' =&gt; \\App\\Http\\Middleware\\IsAdmin::class,</code></li>\n<li>在 User Model 新增 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function isAdmin()&#123;</div><div class=\"line\"></div><div class=\"line\">    if($this-&gt;role-&gt;name == &apos;administrator&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">        return true;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return false;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 routes 測試 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if($user-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">    echo &quot;this user is a administrator&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Middleware 應用 2</h4>\n<ol>\n<li>將 function 從 routes 移動到 IsAdmin middle ware 的 handle function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">if($user-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;intended(&apos;/admin&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 routes 連到 controller：<code>Route::get('/admin', 'AdminController@index');</code></li>\n<li>新增 controller：<code>php artisan make:controller AdminController</code></li>\n<li>新增 function 到 controller</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function __construct()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;middleware(&apos;IsAdmin&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public function index()&#123;</div><div class=\"line\">        </div><div class=\"line\">        return &quot;you are and administrator because you are seeing this page&quot;;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>如果不是 administrator 就導向首頁</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">if(!$user-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday11.jpg\">\n<hr>\n<h3>Form Login - <a href=\"https://laravel.com/docs/5.2/authentication\" target=\"_blank\" rel=\"external\">Authentication 設定官方文件</a></h3>\n<h4>安裝新的 Laravel</h4>\n<ol>\n<li><code>composer create-project --prefer-dist laravel/laravel login 5.2.29</code></li>\n<li>設定 vhost</li>\n</ol>\n<h4>Database 連線和 migration</h4>\n<ol>\n<li>建立資料庫、設定 .env</li>\n<li>直接 migrate <code>php artisan migrate</code></li>\n</ol>\n<h4>建立登入系統</h4>\n<ol>\n<li><code>php artisan make:auth</code></li>\n</ol>\n<h4>取得登入的使用者資料</h4>\n<ol>\n<li>修改 HomeController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;home&apos;, compact(&apos;user&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 view 取得資料 <code>{{$user->name}}</code></li>\n<li><code>Auth::check</code>：檢查登入資料、<code>Auth::attempt</code>：檢查是否有權限。</li>\n</ol>\n<h3>Middleware - <a href=\"https://laravel.com/docs/5.2/middleware\" target=\"_blank\" rel=\"external\">Middleware 設定官方文件</a></h3>\n<h4>建立 Middleware</h4>\n<ol>\n<li>建立一個新的 middleware：<code>php artisan make:middleware RoleMiddleware</code></li>\n<li>進入維護模式：<code>php artisan down</code></li>\n<li>關閉維護模式：<code>php artisan up</code></li>\n<li>在 kernal.php 新增 alias：<code>'role' =&gt; \\App\\Http\\Middleware\\RoleMiddleware::class,</code></li>\n<li>新增 routes <code>Route::get('/admin/user/roles', ['middleware'=&gt;'role', function(){return &quot;Middleware role&quot;;}]);</code></li>\n<li>修改 RoleMiddleware 導向至首頁 <code>return redirect('/');</code></li>\n</ol>\n<h4>Middleware 應用 - roles, migration and relations</h4>\n<ol>\n<li>新增 Role Model：<code>php artisan make:model Role -m</code></li>\n<li>新增 role_id 到 User table：<code>$table-&gt;integer('role_id');</code></li>\n<li>新增 name 到 Role table：<code>$table-&gt;string('name');</code></li>\n<li>更新資料庫：<code>php artisan migrate:refresh</code></li>\n<li>在 User Model 新增 relation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function role()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Role&apos;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Middleware 應用 1</h4>\n<ol>\n<li>新增一個新的 middleware：<code>php aritsan make:middleware IsAdmin</code></li>\n<li>在 kernal.php 新增 alias：<code>'IsAdmin' =&gt; \\App\\Http\\Middleware\\IsAdmin::class,</code></li>\n<li>在 User Model 新增 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function isAdmin()&#123;</div><div class=\"line\"></div><div class=\"line\">    if($this-&gt;role-&gt;name == &apos;administrator&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">        return true;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return false;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 routes 測試 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if($user-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">    echo &quot;this user is a administrator&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Middleware 應用 2</h4>\n<ol>\n<li>將 function 從 routes 移動到 IsAdmin middle ware 的 handle function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">if($user-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;intended(&apos;/admin&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 routes 連到 controller：<code>Route::get('/admin', 'AdminController@index');</code></li>\n<li>新增 controller：<code>php artisan make:controller AdminController</code></li>\n<li>新增 function 到 controller</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function __construct()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;middleware(&apos;IsAdmin&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public function index()&#123;</div><div class=\"line\">        </div><div class=\"line\">        return &quot;you are and administrator because you are seeing this page&quot;;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>如果不是 administrator 就導向首頁</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">if(!$user-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day12","thumbnail":["/images/learning/laravel/laravelday12.png"],"date":"2017-05-02T21:44:13.000Z","_content":"<img src=\"/images/learning/laravel/laravelday12.png\">\n\n***\n### Sessions - [Sessions 設定官方文件](https://laravel.com/docs/5.2/session)\n#### Setting and Reading Sessions\n1. 加到 HomeController\n```\n$request->session()->put(['edwin'=>'master instructor']);\n//        session(['peter'=>'student']);  //最常用\n\n        $request->session()->get('edwin');\n```\n#### Global Session Function Deleting\n1. 新增 session\n```\n    session(['edwin2'=>'your teacher']);\n\n    return session('edwin2');\n```\n2. 刪除 session：`$request->session()->forget('edwin2');`\n3. 刪除所有 session：`$request->session()->flush();`\n4. 顯示 session 狀態：`return $request->session()->all();`\n#### Flashing Data\n1. 建立 flash data (只顯示一次的資料)\n```\n    $request->session()->flash('message', 'Post has been created');\n\n    return $request->session()->get('message');\n```\n2. data 保存久一點 \n```\n    $request->session()->reflash();\n        \n    $request->session()->keep('message');\n```\n### Sending Email / API - [Mail 設定官方文件](https://laravel.com/docs/5.2/mail)\n#### mailgun\n[Mailgun 官方網站](https://www.mailgun.com/)\n#### mailgun 設定\n1. 設定 config/mail.php 的寄件人名稱與 mail\n`'from' => ['address' => 'admin@pcelab.info', 'name' => 'Vincent Adler'],`\n2. 設定 .env\n```\nMAIL_DRIVER=mailgun\nMAILGUN_DOMAIN=XXXXX\nMAILGUN_SECRET=XXXXX\n```\n3. 新增 mail 的 view (resources/views/mails/test.blade.php)\n4. 新增 routes\n```\nRoute::get('/', function () {\n\n    $data = [\n\n        'title'=> 'Hi student I hope you like the course',\n        'content'=> 'This laravel course was created with a lot of love and dedication for you'\n\n    ];\n\n    Mail::send('emails.test', $data, function($message){\n\n        $message->to('dtvgood202@gmail.com', 'Vincent')->subject('Hello student how are you');\n\n    });\n\n});\n```\n5. 新增套件：`composer require guzzlehttp/guzzle`\n6. SSL certification error - 修改 vendor/guzzlehttp/guzzle/src/Client.php：configureDefaults function 的 verify 改為 `false`\n### Git and Github (Version Control)\n1. 新增 branch 分支 `git checkout -b newBranch`\n2. 合併到主分支 `git merge newBranch`\n3. 刪除已合併到 master 的分支 `git branch -d newBranch`","source":"_posts/Lavarel-快速學習自我挑戰-Day12.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day12\nthumbnail:\n  - /images/learning/laravel/laravelday12.png\ndate: 2017-05-03 05:44:13\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday12.png\">\n\n***\n### Sessions - [Sessions 設定官方文件](https://laravel.com/docs/5.2/session)\n#### Setting and Reading Sessions\n1. 加到 HomeController\n```\n$request->session()->put(['edwin'=>'master instructor']);\n//        session(['peter'=>'student']);  //最常用\n\n        $request->session()->get('edwin');\n```\n#### Global Session Function Deleting\n1. 新增 session\n```\n    session(['edwin2'=>'your teacher']);\n\n    return session('edwin2');\n```\n2. 刪除 session：`$request->session()->forget('edwin2');`\n3. 刪除所有 session：`$request->session()->flush();`\n4. 顯示 session 狀態：`return $request->session()->all();`\n#### Flashing Data\n1. 建立 flash data (只顯示一次的資料)\n```\n    $request->session()->flash('message', 'Post has been created');\n\n    return $request->session()->get('message');\n```\n2. data 保存久一點 \n```\n    $request->session()->reflash();\n        \n    $request->session()->keep('message');\n```\n### Sending Email / API - [Mail 設定官方文件](https://laravel.com/docs/5.2/mail)\n#### mailgun\n[Mailgun 官方網站](https://www.mailgun.com/)\n#### mailgun 設定\n1. 設定 config/mail.php 的寄件人名稱與 mail\n`'from' => ['address' => 'admin@pcelab.info', 'name' => 'Vincent Adler'],`\n2. 設定 .env\n```\nMAIL_DRIVER=mailgun\nMAILGUN_DOMAIN=XXXXX\nMAILGUN_SECRET=XXXXX\n```\n3. 新增 mail 的 view (resources/views/mails/test.blade.php)\n4. 新增 routes\n```\nRoute::get('/', function () {\n\n    $data = [\n\n        'title'=> 'Hi student I hope you like the course',\n        'content'=> 'This laravel course was created with a lot of love and dedication for you'\n\n    ];\n\n    Mail::send('emails.test', $data, function($message){\n\n        $message->to('dtvgood202@gmail.com', 'Vincent')->subject('Hello student how are you');\n\n    });\n\n});\n```\n5. 新增套件：`composer require guzzlehttp/guzzle`\n6. SSL certification error - 修改 vendor/guzzlehttp/guzzle/src/Client.php：configureDefaults function 的 verify 改為 `false`\n### Git and Github (Version Control)\n1. 新增 branch 分支 `git checkout -b newBranch`\n2. 合併到主分支 `git merge newBranch`\n3. 刪除已合併到 master 的分支 `git branch -d newBranch`","slug":"Lavarel-快速學習自我挑戰-Day12","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwn001a7ifa6qzl1koy","content":"<img src=\"/images/learning/laravel/laravelday12.png\">\n<hr>\n<h3>Sessions - <a href=\"https://laravel.com/docs/5.2/session\" target=\"_blank\" rel=\"external\">Sessions 設定官方文件</a></h3>\n<h4>Setting and Reading Sessions</h4>\n<ol>\n<li>加到 HomeController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$request-&gt;session()-&gt;put([&apos;edwin&apos;=&gt;&apos;master instructor&apos;]);</div><div class=\"line\">//        session([&apos;peter&apos;=&gt;&apos;student&apos;]);  //最常用</div><div class=\"line\"></div><div class=\"line\">        $request-&gt;session()-&gt;get(&apos;edwin&apos;);</div></pre></td></tr></table></figure>\n<h4>Global Session Function Deleting</h4>\n<ol>\n<li>新增 session</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">session([&apos;edwin2&apos;=&gt;&apos;your teacher&apos;]);</div><div class=\"line\"></div><div class=\"line\">return session(&apos;edwin2&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>刪除 session：<code>$request-&gt;session()-&gt;forget('edwin2');</code></li>\n<li>刪除所有 session：<code>$request-&gt;session()-&gt;flush();</code></li>\n<li>顯示 session 狀態：<code>return $request-&gt;session()-&gt;all();</code></li>\n</ol>\n<h4>Flashing Data</h4>\n<ol>\n<li>建立 flash data (只顯示一次的資料)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$request-&gt;session()-&gt;flash(&apos;message&apos;, &apos;Post has been created&apos;);</div><div class=\"line\"></div><div class=\"line\">return $request-&gt;session()-&gt;get(&apos;message&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>data 保存久一點</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$request-&gt;session()-&gt;reflash();</div><div class=\"line\">    </div><div class=\"line\">$request-&gt;session()-&gt;keep(&apos;message&apos;);</div></pre></td></tr></table></figure>\n<h3>Sending Email / API - <a href=\"https://laravel.com/docs/5.2/mail\" target=\"_blank\" rel=\"external\">Mail 設定官方文件</a></h3>\n<h4>mailgun</h4>\n<p><a href=\"https://www.mailgun.com/\" target=\"_blank\" rel=\"external\">Mailgun 官方網站</a></p>\n<h4>mailgun 設定</h4>\n<ol>\n<li>設定 config/mail.php 的寄件人名稱與 mail<br>\n<code>'from' =&gt; ['address' =&gt; 'admin@pcelab.info', 'name' =&gt; 'Vincent Adler'],</code></li>\n<li>設定 .env</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAIL_DRIVER=mailgun</div><div class=\"line\">MAILGUN_DOMAIN=XXXXX</div><div class=\"line\">MAILGUN_SECRET=XXXXX</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 mail 的 view (resources/views/mails/test.blade.php)</li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    $data = [</div><div class=\"line\"></div><div class=\"line\">        &apos;title&apos;=&gt; &apos;Hi student I hope you like the course&apos;,</div><div class=\"line\">        &apos;content&apos;=&gt; &apos;This laravel course was created with a lot of love and dedication for you&apos;</div><div class=\"line\"></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    Mail::send(&apos;emails.test&apos;, $data, function($message)&#123;</div><div class=\"line\"></div><div class=\"line\">        $message-&gt;to(&apos;dtvgood202@gmail.com&apos;, &apos;Vincent&apos;)-&gt;subject(&apos;Hello student how are you&apos;);</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增套件：<code>composer require guzzlehttp/guzzle</code></li>\n<li>SSL certification error - 修改 vendor/guzzlehttp/guzzle/src/Client.php：configureDefaults function 的 verify 改為 <code>false</code></li>\n</ol>\n<h3>Git and Github (Version Control)</h3>\n<ol>\n<li>新增 branch 分支 <code>git checkout -b newBranch</code></li>\n<li>合併到主分支 <code>git merge newBranch</code></li>\n<li>刪除已合併到 master 的分支 <code>git branch -d newBranch</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday12.png\">\n<hr>\n<h3>Sessions - <a href=\"https://laravel.com/docs/5.2/session\" target=\"_blank\" rel=\"external\">Sessions 設定官方文件</a></h3>\n<h4>Setting and Reading Sessions</h4>\n<ol>\n<li>加到 HomeController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$request-&gt;session()-&gt;put([&apos;edwin&apos;=&gt;&apos;master instructor&apos;]);</div><div class=\"line\">//        session([&apos;peter&apos;=&gt;&apos;student&apos;]);  //最常用</div><div class=\"line\"></div><div class=\"line\">        $request-&gt;session()-&gt;get(&apos;edwin&apos;);</div></pre></td></tr></table></figure>\n<h4>Global Session Function Deleting</h4>\n<ol>\n<li>新增 session</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">session([&apos;edwin2&apos;=&gt;&apos;your teacher&apos;]);</div><div class=\"line\"></div><div class=\"line\">return session(&apos;edwin2&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>刪除 session：<code>$request-&gt;session()-&gt;forget('edwin2');</code></li>\n<li>刪除所有 session：<code>$request-&gt;session()-&gt;flush();</code></li>\n<li>顯示 session 狀態：<code>return $request-&gt;session()-&gt;all();</code></li>\n</ol>\n<h4>Flashing Data</h4>\n<ol>\n<li>建立 flash data (只顯示一次的資料)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$request-&gt;session()-&gt;flash(&apos;message&apos;, &apos;Post has been created&apos;);</div><div class=\"line\"></div><div class=\"line\">return $request-&gt;session()-&gt;get(&apos;message&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>data 保存久一點</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$request-&gt;session()-&gt;reflash();</div><div class=\"line\">    </div><div class=\"line\">$request-&gt;session()-&gt;keep(&apos;message&apos;);</div></pre></td></tr></table></figure>\n<h3>Sending Email / API - <a href=\"https://laravel.com/docs/5.2/mail\" target=\"_blank\" rel=\"external\">Mail 設定官方文件</a></h3>\n<h4>mailgun</h4>\n<p><a href=\"https://www.mailgun.com/\" target=\"_blank\" rel=\"external\">Mailgun 官方網站</a></p>\n<h4>mailgun 設定</h4>\n<ol>\n<li>設定 config/mail.php 的寄件人名稱與 mail<br>\n<code>'from' =&gt; ['address' =&gt; 'admin@pcelab.info', 'name' =&gt; 'Vincent Adler'],</code></li>\n<li>設定 .env</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAIL_DRIVER=mailgun</div><div class=\"line\">MAILGUN_DOMAIN=XXXXX</div><div class=\"line\">MAILGUN_SECRET=XXXXX</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 mail 的 view (resources/views/mails/test.blade.php)</li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    $data = [</div><div class=\"line\"></div><div class=\"line\">        &apos;title&apos;=&gt; &apos;Hi student I hope you like the course&apos;,</div><div class=\"line\">        &apos;content&apos;=&gt; &apos;This laravel course was created with a lot of love and dedication for you&apos;</div><div class=\"line\"></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    Mail::send(&apos;emails.test&apos;, $data, function($message)&#123;</div><div class=\"line\"></div><div class=\"line\">        $message-&gt;to(&apos;dtvgood202@gmail.com&apos;, &apos;Vincent&apos;)-&gt;subject(&apos;Hello student how are you&apos;);</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增套件：<code>composer require guzzlehttp/guzzle</code></li>\n<li>SSL certification error - 修改 vendor/guzzlehttp/guzzle/src/Client.php：configureDefaults function 的 verify 改為 <code>false</code></li>\n</ol>\n<h3>Git and Github (Version Control)</h3>\n<ol>\n<li>新增 branch 分支 <code>git checkout -b newBranch</code></li>\n<li>合併到主分支 <code>git merge newBranch</code></li>\n<li>刪除已合併到 master 的分支 <code>git branch -d newBranch</code></li>\n</ol>\n"},{"title":"Lavarel 快速學習自我挑戰 Day13","thumbnail":["/images/learning/laravel/laravelday13.jpg"],"date":"2017-05-03T19:07:21.000Z","_content":"<img src=\"/images/learning/laravel/laravelday13.jpg\">\n\n***\n### Application\n#### 基礎設定\n1. 開新的專案 `composer create-project --prefer-dist laravel/laravel codehacking 5.2.29`\n2. 新增資料庫、設定環境變數、進行 migration `php artisan migrate`\n#### 設定 views\n1. 新增登入介面 `php artisan make:auth`\n2. 在 view 將目錄權限分開 新增 `admin/index` `admin/users/index` `admin/users/create` `admin/users/edit` `admin/posts/index` `admin/posts/create` `admin/posts/edit` `admin/categories/index` `admin/categories/edit`\n#### User table migration\n1. 加入 git 專案：`git init`、`git add .`、`git commit -m \"my first commit - admin view created\"`\n2. 新增資料欄位到 create\\_users_table.php\n`$table->integer('role_id')->index()->unsigned()->nullable();`\n`$table->integer('is_active')->default(0);`\n3. 新增 model `php artisan make:model Role -m`\n4. 新增資料欄位到 create\\_roles_table.php\n`$table->string('name');`\n#### Relation setup and data entry\n1. 新增 Relation 到 User model\n```\n    public function role(){\n\n        return $this->belongsTo('App\\Role');\n\n    }\n```\n2. 將資料重新 migrate 到資料庫 `php artisan migrate:refresh`\n#### 用 Tinker 測試 Relation\n1. 進入 tinder 模式 `php aritsan tinker`\n2. 找到第一個 User `$user = App\\User::find(1)`\n3. 檢查該 user 的 role `$user->role`\n4. 新增 User ` App\\User::create(['name'=>'Edwin Diaz', 'email'=>'edwin@codingfaculty.com']);`\n#### Admin Controller and Routes\n1. 新增 routes `Route::resource('admin/users', 'AdminUsersController');`\n2. 新增 controller `php artisan make:controller --resource AdminUsersController`\n3. 在 AdminUsersController 的 index function 加入 `return view('admin.users.index');`\n4. 在 AdminUsersController 的 create function 加入 `return view('admin.users.create');`\n5. 在 AdminUsersController 的 show function 加入 `return view('admin.users.show');`\n6. 在 AdminUsersController 的 edit function 加入 `return view('admin.users.edit');`\n#### 安裝 nodejs & 下載檔案\n1. 安裝 gulp `npm install --global gulp`\n#### Gulp & assets\n1. 安裝套件 `npm install`\n2. 將 css、js 檔案放置到 resources\\assets\n3. 將 font 檔案放置到 public\n4. 設定 gulpfile.js\n```\n    .styles([\n        \n        'libs/blog-post.css',\n        'libs/bootstrap.css',\n        'libs/font-awesome.css',\n        'libs/metisMenu.css',\n        'libs/sb-admin-2.css'\n        \n    ], './public/css/libs.css')\n    \n    .scripts([\n        \n        'libs/jquery.js',\n        'libs/bootstrap.js',\n        'libs/metisMenu.js',\n        'libs/sb-admin-2.js',\n        'libs/scripts.js'\n        \n    ], './public/js/libs.js')\n```\n5. 編譯檔案 `gulp`\n6. 新增 view /layouts/admin.blade.php\n#### 修正頁面\n1. 修改 resources/assets/sass/app.scss\n`#admin-page {padding-top: 0px;}`\n2. 重新編譯檔案 `gulp`\n3. 新增 routes\n```\nRoute::get('/admin', function(){\n\n   return view('admin.index');\n\n});\n```\n4. 修改 admin/index view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Admin</h1>\n\n@stop\n```\n#### 顯示 Users\n1. 修改 admin/users/index view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Users</h1>\n\n@stop\n```\n2. 修改 AdminUsersController\n```\npublic function index()\n    {\n        $users = User::all();\n\n        return view('admin.users.index', compact('users'));\n    }\n```\n3. 在 admin/users/index view 新增 table\n```\n    <table class=\"table\">\n      <thead>\n        <tr>\n            <th>Id</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Role</th>\n            <th>Active</th>\n            <th>Created</th>\n            <th>Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n      @if($users)\n\n          @foreach($users as $user)\n\n        <tr>\n            <td>{{$user->id}}</td>\n            <td>{{$user->name}}</td>\n            <td>{{$user->email}}</td>\n            <td>{{$user->role->name}}</td>\n            <td>{{$user->is_active == 1 ? 'Active' : 'No Active'}}</td>\n            <td>{{$user->created_at->diffForHumans()}}</td>\n            <td>{{$user->updated_at->diffForHumans()}}</td>\n        </tr>\n\n          @endforeach\n\n      @endif\n      </tbody>\n    </table>\n```\n#### 新增 Create Page\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Create User</h1>\n\n@stop\n```\n#### 安裝 laravel collective html package\n1. `composer require \"laravelcollective/html\":\"^5.2.0\"`\n2. 在 config/app.php 新增 provider `Collective\\Html\\HtmlServiceProvider::class,`\n3. 在 config/app.php 新增 aliases\n`'Form' => Collective\\Html\\FormFacade::class,`\n`'Html' => Collective\\Html\\HtmlFacade::class,`\n#### Create Page Form 表單\n1. 在 admin/users/create view 新增表單\n```\n{!! Form::open(['method'=>'POST', 'action'=>'AdminUsersController@store']) !!}\n        <div class=\"form-group\">\n            {!! Form::label('name', 'Name:') !!}\n            {!! Form::text('name', null, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('email', 'Email:') !!}\n            {!! Form::email('email', null, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('role_id', 'Role:') !!}\n            {!! Form::select('role_id', [''=>'Choose Options'] + $roles , null, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('status', 'Status:') !!}\n            {!! Form::select('status', array(1 => 'Active', 0 => 'No Active'), 0, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('password', 'Password:') !!}\n            {!! Form::password('password', ['class'=>'form-control']) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Create User', ['class'=>'btn btn-primary']) !!}\n        </div>\n    {!! Form::close() !!}\n```\n2. Role 的資料引入 (用 controller 抓取資料) - 修改 AdminUsersController\n```\npublic function create()\n    {\n        $roles = Role::lists('name', 'id')->all();\n\n        return view('admin.users.create', compact('roles'));\n    }\n```\n3. 新增 Request `php artisan make:request UsersRequest`\n4. 新增 rules function validation\n```\npublic function rules()\n    {\n        return [\n            'name' => 'required',\n            'email' => 'required',\n            'role_id' => 'required',\n            'is_active' => 'required',\n            'password' => 'required'\n        ];\n    }\n```\n5. 將 AdminUsersController 的 store function 的 Request 換成 UsersRequest (要 import)\n`public function store(UsersRequest $request)`\n6. 新增 views/includes/form_error.blade.php\n```\n@if(count($errors) > 0)\n\n    <div class=\"alert alert-danger\">\n\n        <ul>\n\n            @foreach($errors->all() as $error)\n\n                <li>{{$error}}</li>\n\n            @endforeach\n\n        </ul>\n\n    </div>\n\n@endif\n```\n7. 在 create page view include form error `@include('includes.form_error')`","source":"_posts/Lavarel-快速學習自我挑戰-Day13.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day13\nthumbnail:\n  - /images/learning/laravel/laravelday13.jpg\ndate: 2017-05-04 03:07:21\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday13.jpg\">\n\n***\n### Application\n#### 基礎設定\n1. 開新的專案 `composer create-project --prefer-dist laravel/laravel codehacking 5.2.29`\n2. 新增資料庫、設定環境變數、進行 migration `php artisan migrate`\n#### 設定 views\n1. 新增登入介面 `php artisan make:auth`\n2. 在 view 將目錄權限分開 新增 `admin/index` `admin/users/index` `admin/users/create` `admin/users/edit` `admin/posts/index` `admin/posts/create` `admin/posts/edit` `admin/categories/index` `admin/categories/edit`\n#### User table migration\n1. 加入 git 專案：`git init`、`git add .`、`git commit -m \"my first commit - admin view created\"`\n2. 新增資料欄位到 create\\_users_table.php\n`$table->integer('role_id')->index()->unsigned()->nullable();`\n`$table->integer('is_active')->default(0);`\n3. 新增 model `php artisan make:model Role -m`\n4. 新增資料欄位到 create\\_roles_table.php\n`$table->string('name');`\n#### Relation setup and data entry\n1. 新增 Relation 到 User model\n```\n    public function role(){\n\n        return $this->belongsTo('App\\Role');\n\n    }\n```\n2. 將資料重新 migrate 到資料庫 `php artisan migrate:refresh`\n#### 用 Tinker 測試 Relation\n1. 進入 tinder 模式 `php aritsan tinker`\n2. 找到第一個 User `$user = App\\User::find(1)`\n3. 檢查該 user 的 role `$user->role`\n4. 新增 User ` App\\User::create(['name'=>'Edwin Diaz', 'email'=>'edwin@codingfaculty.com']);`\n#### Admin Controller and Routes\n1. 新增 routes `Route::resource('admin/users', 'AdminUsersController');`\n2. 新增 controller `php artisan make:controller --resource AdminUsersController`\n3. 在 AdminUsersController 的 index function 加入 `return view('admin.users.index');`\n4. 在 AdminUsersController 的 create function 加入 `return view('admin.users.create');`\n5. 在 AdminUsersController 的 show function 加入 `return view('admin.users.show');`\n6. 在 AdminUsersController 的 edit function 加入 `return view('admin.users.edit');`\n#### 安裝 nodejs & 下載檔案\n1. 安裝 gulp `npm install --global gulp`\n#### Gulp & assets\n1. 安裝套件 `npm install`\n2. 將 css、js 檔案放置到 resources\\assets\n3. 將 font 檔案放置到 public\n4. 設定 gulpfile.js\n```\n    .styles([\n        \n        'libs/blog-post.css',\n        'libs/bootstrap.css',\n        'libs/font-awesome.css',\n        'libs/metisMenu.css',\n        'libs/sb-admin-2.css'\n        \n    ], './public/css/libs.css')\n    \n    .scripts([\n        \n        'libs/jquery.js',\n        'libs/bootstrap.js',\n        'libs/metisMenu.js',\n        'libs/sb-admin-2.js',\n        'libs/scripts.js'\n        \n    ], './public/js/libs.js')\n```\n5. 編譯檔案 `gulp`\n6. 新增 view /layouts/admin.blade.php\n#### 修正頁面\n1. 修改 resources/assets/sass/app.scss\n`#admin-page {padding-top: 0px;}`\n2. 重新編譯檔案 `gulp`\n3. 新增 routes\n```\nRoute::get('/admin', function(){\n\n   return view('admin.index');\n\n});\n```\n4. 修改 admin/index view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Admin</h1>\n\n@stop\n```\n#### 顯示 Users\n1. 修改 admin/users/index view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Users</h1>\n\n@stop\n```\n2. 修改 AdminUsersController\n```\npublic function index()\n    {\n        $users = User::all();\n\n        return view('admin.users.index', compact('users'));\n    }\n```\n3. 在 admin/users/index view 新增 table\n```\n    <table class=\"table\">\n      <thead>\n        <tr>\n            <th>Id</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Role</th>\n            <th>Active</th>\n            <th>Created</th>\n            <th>Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n      @if($users)\n\n          @foreach($users as $user)\n\n        <tr>\n            <td>{{$user->id}}</td>\n            <td>{{$user->name}}</td>\n            <td>{{$user->email}}</td>\n            <td>{{$user->role->name}}</td>\n            <td>{{$user->is_active == 1 ? 'Active' : 'No Active'}}</td>\n            <td>{{$user->created_at->diffForHumans()}}</td>\n            <td>{{$user->updated_at->diffForHumans()}}</td>\n        </tr>\n\n          @endforeach\n\n      @endif\n      </tbody>\n    </table>\n```\n#### 新增 Create Page\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Create User</h1>\n\n@stop\n```\n#### 安裝 laravel collective html package\n1. `composer require \"laravelcollective/html\":\"^5.2.0\"`\n2. 在 config/app.php 新增 provider `Collective\\Html\\HtmlServiceProvider::class,`\n3. 在 config/app.php 新增 aliases\n`'Form' => Collective\\Html\\FormFacade::class,`\n`'Html' => Collective\\Html\\HtmlFacade::class,`\n#### Create Page Form 表單\n1. 在 admin/users/create view 新增表單\n```\n{!! Form::open(['method'=>'POST', 'action'=>'AdminUsersController@store']) !!}\n        <div class=\"form-group\">\n            {!! Form::label('name', 'Name:') !!}\n            {!! Form::text('name', null, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('email', 'Email:') !!}\n            {!! Form::email('email', null, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('role_id', 'Role:') !!}\n            {!! Form::select('role_id', [''=>'Choose Options'] + $roles , null, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('status', 'Status:') !!}\n            {!! Form::select('status', array(1 => 'Active', 0 => 'No Active'), 0, ['class'=>'form-control']) !!}\n        </div>\n\n        <div class=\"form-group\">\n            {!! Form::label('password', 'Password:') !!}\n            {!! Form::password('password', ['class'=>'form-control']) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Create User', ['class'=>'btn btn-primary']) !!}\n        </div>\n    {!! Form::close() !!}\n```\n2. Role 的資料引入 (用 controller 抓取資料) - 修改 AdminUsersController\n```\npublic function create()\n    {\n        $roles = Role::lists('name', 'id')->all();\n\n        return view('admin.users.create', compact('roles'));\n    }\n```\n3. 新增 Request `php artisan make:request UsersRequest`\n4. 新增 rules function validation\n```\npublic function rules()\n    {\n        return [\n            'name' => 'required',\n            'email' => 'required',\n            'role_id' => 'required',\n            'is_active' => 'required',\n            'password' => 'required'\n        ];\n    }\n```\n5. 將 AdminUsersController 的 store function 的 Request 換成 UsersRequest (要 import)\n`public function store(UsersRequest $request)`\n6. 新增 views/includes/form_error.blade.php\n```\n@if(count($errors) > 0)\n\n    <div class=\"alert alert-danger\">\n\n        <ul>\n\n            @foreach($errors->all() as $error)\n\n                <li>{{$error}}</li>\n\n            @endforeach\n\n        </ul>\n\n    </div>\n\n@endif\n```\n7. 在 create page view include form error `@include('includes.form_error')`","slug":"Lavarel-快速學習自我挑戰-Day13","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwo001e7ifagkn29a51","content":"<img src=\"/images/learning/laravel/laravelday13.jpg\">\n<hr>\n<h3>Application</h3>\n<h4>基礎設定</h4>\n<ol>\n<li>開新的專案 <code>composer create-project --prefer-dist laravel/laravel codehacking 5.2.29</code></li>\n<li>新增資料庫、設定環境變數、進行 migration <code>php artisan migrate</code></li>\n</ol>\n<h4>設定 views</h4>\n<ol>\n<li>新增登入介面 <code>php artisan make:auth</code></li>\n<li>在 view 將目錄權限分開 新增 <code>admin/index</code> <code>admin/users/index</code> <code>admin/users/create</code> <code>admin/users/edit</code> <code>admin/posts/index</code> <code>admin/posts/create</code> <code>admin/posts/edit</code> <code>admin/categories/index</code> <code>admin/categories/edit</code></li>\n</ol>\n<h4>User table migration</h4>\n<ol>\n<li>加入 git 專案：<code>git init</code>、<code>git add .</code>、<code>git commit -m &quot;my first commit - admin view created&quot;</code></li>\n<li>新增資料欄位到 create_users_table.php<br>\n<code>$table-&gt;integer('role_id')-&gt;index()-&gt;unsigned()-&gt;nullable();</code><br>\n<code>$table-&gt;integer('is_active')-&gt;default(0);</code></li>\n<li>新增 model <code>php artisan make:model Role -m</code></li>\n<li>新增資料欄位到 create_roles_table.php<br>\n<code>$table-&gt;string('name');</code></li>\n</ol>\n<h4>Relation setup and data entry</h4>\n<ol>\n<li>新增 Relation 到 User model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function role()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Role&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將資料重新 migrate 到資料庫 <code>php artisan migrate:refresh</code></li>\n</ol>\n<h4>用 Tinker 測試 Relation</h4>\n<ol>\n<li>進入 tinder 模式 <code>php aritsan tinker</code></li>\n<li>找到第一個 User <code>$user = App\\User::find(1)</code></li>\n<li>檢查該 user 的 role <code>$user-&gt;role</code></li>\n<li>新增 User <code>App\\User::create(['name'=&gt;'Edwin Diaz', 'email'=&gt;'edwin@codingfaculty.com']);</code></li>\n</ol>\n<h4>Admin Controller and Routes</h4>\n<ol>\n<li>新增 routes <code>Route::resource('admin/users', 'AdminUsersController');</code></li>\n<li>新增 controller <code>php artisan make:controller --resource AdminUsersController</code></li>\n<li>在 AdminUsersController 的 index function 加入 <code>return view('admin.users.index');</code></li>\n<li>在 AdminUsersController 的 create function 加入 <code>return view('admin.users.create');</code></li>\n<li>在 AdminUsersController 的 show function 加入 <code>return view('admin.users.show');</code></li>\n<li>在 AdminUsersController 的 edit function 加入 <code>return view('admin.users.edit');</code></li>\n</ol>\n<h4>安裝 nodejs &amp; 下載檔案</h4>\n<ol>\n<li>安裝 gulp <code>npm install --global gulp</code></li>\n</ol>\n<h4>Gulp &amp; assets</h4>\n<ol>\n<li>安裝套件 <code>npm install</code></li>\n<li>將 css、js 檔案放置到 resources\\assets</li>\n<li>將 font 檔案放置到 public</li>\n<li>設定 gulpfile.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">.styles([</div><div class=\"line\">    </div><div class=\"line\">    &apos;libs/blog-post.css&apos;,</div><div class=\"line\">    &apos;libs/bootstrap.css&apos;,</div><div class=\"line\">    &apos;libs/font-awesome.css&apos;,</div><div class=\"line\">    &apos;libs/metisMenu.css&apos;,</div><div class=\"line\">    &apos;libs/sb-admin-2.css&apos;</div><div class=\"line\">    </div><div class=\"line\">], &apos;./public/css/libs.css&apos;)</div><div class=\"line\"></div><div class=\"line\">.scripts([</div><div class=\"line\">    </div><div class=\"line\">    &apos;libs/jquery.js&apos;,</div><div class=\"line\">    &apos;libs/bootstrap.js&apos;,</div><div class=\"line\">    &apos;libs/metisMenu.js&apos;,</div><div class=\"line\">    &apos;libs/sb-admin-2.js&apos;,</div><div class=\"line\">    &apos;libs/scripts.js&apos;</div><div class=\"line\">    </div><div class=\"line\">], &apos;./public/js/libs.js&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>編譯檔案 <code>gulp</code></li>\n<li>新增 view /layouts/admin.blade.php</li>\n</ol>\n<h4>修正頁面</h4>\n<ol>\n<li>修改 resources/assets/sass/app.scss<br>\n<code>#admin-page {padding-top: 0px;}</code></li>\n<li>重新編譯檔案 <code>gulp</code></li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/admin&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   return view(&apos;admin.index&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 admin/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Admin&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>顯示 Users</h4>\n<ol>\n<li>修改 admin/users/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Users&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminUsersController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $users = User::all();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.users.index&apos;, compact(&apos;users&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 admin/users/index view 新增 table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">  &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;th&gt;Id&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Name&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Email&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Role&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Active&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Created&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Updated&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">  &lt;/thead&gt;</div><div class=\"line\">  &lt;tbody&gt;</div><div class=\"line\">  @if($users)</div><div class=\"line\"></div><div class=\"line\">      @foreach($users as $user)</div><div class=\"line\"></div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;name&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;email&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;role-&gt;name&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;is_active == 1 ? &apos;Active&apos; : &apos;No Active&apos;&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;updated_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">      @endforeach</div><div class=\"line\"></div><div class=\"line\">  @endif</div><div class=\"line\">  &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure>\n<h4>新增 Create Page</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Create User&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>安裝 laravel collective html package</h4>\n<ol>\n<li><code>composer require &quot;laravelcollective/html&quot;:&quot;^5.2.0&quot;</code></li>\n<li>在 config/app.php 新增 provider <code>Collective\\Html\\HtmlServiceProvider::class,</code></li>\n<li>在 config/app.php 新增 aliases<br>\n<code>'Form' =&gt; Collective\\Html\\FormFacade::class,</code><br>\n<code>'Html' =&gt; Collective\\Html\\HtmlFacade::class,</code></li>\n</ol>\n<h4>Create Page Form 表單</h4>\n<ol>\n<li>在 admin/users/create view 新增表單</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminUsersController@store&apos;]) !!&#125;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;email&apos;, &apos;Email:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::email(&apos;email&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;role_id&apos;, &apos;Role:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::select(&apos;role_id&apos;, [&apos;&apos;=&gt;&apos;Choose Options&apos;] + $roles , null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;status&apos;, &apos;Status:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::select(&apos;status&apos;, array(1 =&gt; &apos;Active&apos;, 0 =&gt; &apos;No Active&apos;), 0, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;password&apos;, &apos;Password:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::password(&apos;password&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Create User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Role 的資料引入 (用 controller 抓取資料) - 修改 AdminUsersController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function create()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $roles = Role::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.users.create&apos;, compact(&apos;roles&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 Request <code>php artisan make:request UsersRequest</code></li>\n<li>新增 rules function validation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function rules()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\">            &apos;name&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;email&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;role_id&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;is_active&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;password&apos; =&gt; &apos;required&apos;</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>將 AdminUsersController 的 store function 的 Request 換成 UsersRequest (要 import)<br>\n<code>public function store(UsersRequest $request)</code></li>\n<li>新增 views/includes/form_error.blade.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($errors) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">            @foreach($errors-&gt;all() as $error)</div><div class=\"line\"></div><div class=\"line\">                &lt;li&gt;&#123;&#123;$error&#125;&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">            @endforeach</div><div class=\"line\"></div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 create page view include form error <code>@include('includes.form_error')</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday13.jpg\">\n<hr>\n<h3>Application</h3>\n<h4>基礎設定</h4>\n<ol>\n<li>開新的專案 <code>composer create-project --prefer-dist laravel/laravel codehacking 5.2.29</code></li>\n<li>新增資料庫、設定環境變數、進行 migration <code>php artisan migrate</code></li>\n</ol>\n<h4>設定 views</h4>\n<ol>\n<li>新增登入介面 <code>php artisan make:auth</code></li>\n<li>在 view 將目錄權限分開 新增 <code>admin/index</code> <code>admin/users/index</code> <code>admin/users/create</code> <code>admin/users/edit</code> <code>admin/posts/index</code> <code>admin/posts/create</code> <code>admin/posts/edit</code> <code>admin/categories/index</code> <code>admin/categories/edit</code></li>\n</ol>\n<h4>User table migration</h4>\n<ol>\n<li>加入 git 專案：<code>git init</code>、<code>git add .</code>、<code>git commit -m &quot;my first commit - admin view created&quot;</code></li>\n<li>新增資料欄位到 create_users_table.php<br>\n<code>$table-&gt;integer('role_id')-&gt;index()-&gt;unsigned()-&gt;nullable();</code><br>\n<code>$table-&gt;integer('is_active')-&gt;default(0);</code></li>\n<li>新增 model <code>php artisan make:model Role -m</code></li>\n<li>新增資料欄位到 create_roles_table.php<br>\n<code>$table-&gt;string('name');</code></li>\n</ol>\n<h4>Relation setup and data entry</h4>\n<ol>\n<li>新增 Relation 到 User model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function role()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Role&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將資料重新 migrate 到資料庫 <code>php artisan migrate:refresh</code></li>\n</ol>\n<h4>用 Tinker 測試 Relation</h4>\n<ol>\n<li>進入 tinder 模式 <code>php aritsan tinker</code></li>\n<li>找到第一個 User <code>$user = App\\User::find(1)</code></li>\n<li>檢查該 user 的 role <code>$user-&gt;role</code></li>\n<li>新增 User <code>App\\User::create(['name'=&gt;'Edwin Diaz', 'email'=&gt;'edwin@codingfaculty.com']);</code></li>\n</ol>\n<h4>Admin Controller and Routes</h4>\n<ol>\n<li>新增 routes <code>Route::resource('admin/users', 'AdminUsersController');</code></li>\n<li>新增 controller <code>php artisan make:controller --resource AdminUsersController</code></li>\n<li>在 AdminUsersController 的 index function 加入 <code>return view('admin.users.index');</code></li>\n<li>在 AdminUsersController 的 create function 加入 <code>return view('admin.users.create');</code></li>\n<li>在 AdminUsersController 的 show function 加入 <code>return view('admin.users.show');</code></li>\n<li>在 AdminUsersController 的 edit function 加入 <code>return view('admin.users.edit');</code></li>\n</ol>\n<h4>安裝 nodejs &amp; 下載檔案</h4>\n<ol>\n<li>安裝 gulp <code>npm install --global gulp</code></li>\n</ol>\n<h4>Gulp &amp; assets</h4>\n<ol>\n<li>安裝套件 <code>npm install</code></li>\n<li>將 css、js 檔案放置到 resources\\assets</li>\n<li>將 font 檔案放置到 public</li>\n<li>設定 gulpfile.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">.styles([</div><div class=\"line\">    </div><div class=\"line\">    &apos;libs/blog-post.css&apos;,</div><div class=\"line\">    &apos;libs/bootstrap.css&apos;,</div><div class=\"line\">    &apos;libs/font-awesome.css&apos;,</div><div class=\"line\">    &apos;libs/metisMenu.css&apos;,</div><div class=\"line\">    &apos;libs/sb-admin-2.css&apos;</div><div class=\"line\">    </div><div class=\"line\">], &apos;./public/css/libs.css&apos;)</div><div class=\"line\"></div><div class=\"line\">.scripts([</div><div class=\"line\">    </div><div class=\"line\">    &apos;libs/jquery.js&apos;,</div><div class=\"line\">    &apos;libs/bootstrap.js&apos;,</div><div class=\"line\">    &apos;libs/metisMenu.js&apos;,</div><div class=\"line\">    &apos;libs/sb-admin-2.js&apos;,</div><div class=\"line\">    &apos;libs/scripts.js&apos;</div><div class=\"line\">    </div><div class=\"line\">], &apos;./public/js/libs.js&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>編譯檔案 <code>gulp</code></li>\n<li>新增 view /layouts/admin.blade.php</li>\n</ol>\n<h4>修正頁面</h4>\n<ol>\n<li>修改 resources/assets/sass/app.scss<br>\n<code>#admin-page {padding-top: 0px;}</code></li>\n<li>重新編譯檔案 <code>gulp</code></li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/admin&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   return view(&apos;admin.index&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 admin/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Admin&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>顯示 Users</h4>\n<ol>\n<li>修改 admin/users/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Users&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminUsersController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $users = User::all();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.users.index&apos;, compact(&apos;users&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 admin/users/index view 新增 table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">  &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;th&gt;Id&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Name&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Email&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Role&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Active&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Created&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Updated&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">  &lt;/thead&gt;</div><div class=\"line\">  &lt;tbody&gt;</div><div class=\"line\">  @if($users)</div><div class=\"line\"></div><div class=\"line\">      @foreach($users as $user)</div><div class=\"line\"></div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;name&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;email&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;role-&gt;name&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;is_active == 1 ? &apos;Active&apos; : &apos;No Active&apos;&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$user-&gt;updated_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">      @endforeach</div><div class=\"line\"></div><div class=\"line\">  @endif</div><div class=\"line\">  &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure>\n<h4>新增 Create Page</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Create User&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>安裝 laravel collective html package</h4>\n<ol>\n<li><code>composer require &quot;laravelcollective/html&quot;:&quot;^5.2.0&quot;</code></li>\n<li>在 config/app.php 新增 provider <code>Collective\\Html\\HtmlServiceProvider::class,</code></li>\n<li>在 config/app.php 新增 aliases<br>\n<code>'Form' =&gt; Collective\\Html\\FormFacade::class,</code><br>\n<code>'Html' =&gt; Collective\\Html\\HtmlFacade::class,</code></li>\n</ol>\n<h4>Create Page Form 表單</h4>\n<ol>\n<li>在 admin/users/create view 新增表單</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminUsersController@store&apos;]) !!&#125;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;email&apos;, &apos;Email:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::email(&apos;email&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;role_id&apos;, &apos;Role:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::select(&apos;role_id&apos;, [&apos;&apos;=&gt;&apos;Choose Options&apos;] + $roles , null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;status&apos;, &apos;Status:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::select(&apos;status&apos;, array(1 =&gt; &apos;Active&apos;, 0 =&gt; &apos;No Active&apos;), 0, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;password&apos;, &apos;Password:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::password(&apos;password&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Create User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Role 的資料引入 (用 controller 抓取資料) - 修改 AdminUsersController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function create()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $roles = Role::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.users.create&apos;, compact(&apos;roles&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 Request <code>php artisan make:request UsersRequest</code></li>\n<li>新增 rules function validation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function rules()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\">            &apos;name&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;email&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;role_id&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;is_active&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;password&apos; =&gt; &apos;required&apos;</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>將 AdminUsersController 的 store function 的 Request 換成 UsersRequest (要 import)<br>\n<code>public function store(UsersRequest $request)</code></li>\n<li>新增 views/includes/form_error.blade.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($errors) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">            @foreach($errors-&gt;all() as $error)</div><div class=\"line\"></div><div class=\"line\">                &lt;li&gt;&#123;&#123;$error&#125;&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">            @endforeach</div><div class=\"line\"></div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 create page view include form error <code>@include('includes.form_error')</code></li>\n</ol>\n"},{"title":"Lavarel 快速學習自我挑戰 Day14","thumbnail":["/images/learning/laravel/laravelday14.jpg"],"date":"2017-05-04T16:06:02.000Z","_content":"<img src=\"/images/learning/laravel/laravelday14.jpg\">\n\n***\n### Application 2\n#### 上傳功能\n1. 新增 enctype (`'type'=>true`) `{!! Form::open(['method'=>'POST', 'action'=>'AdminUsersController@store', 'files'=>true]) !!}`\n2. 新增 migration `php artisan make:migration add_photo_id_to_users --table=users`\n3. 修改 add\\_photo\\_id\\_to\\_users_table\n```\npublic function up()\n{\n    Schema::table('users', function (Blueprint $table) {\n\n        $table->string('photo_id');\n    });\n}\npublic function down()\n{\n    Schema::table('users', function (Blueprint $table) {\n\n        $table->dropColumn('photo_id');\n    });\n}\n```\n4. 在 Create Page 新增 upload 欄位\n```\n<div class=\"form-group\">\n    {!! Form::label('file', 'Title:') !!}\n    {!! Form::file('file', null, ['class'=>'form-control']) !!}\n</div>\n```\n5. 在 User model 讓欄位可寫入 `protected $fillable = ['name', 'email', 'password', 'role_id', 'is_active', 'photo_id']`\n6.  修改 AdminUsersController 的 store function\n```\n    public function store(UsersRequest $request)\n    {\n        User::create($request->all());\n\n        return redirect('/admin/users');\n    }\n```\n7. 新增 Model 和 migration `php artisan make:model Photo -m`\n8. 在 create\\_photos\\_table 新增欄位 `$table->string('file');`\n9. 在 Photo model 讓 file 可寫入 `protected $fillable = ['file'];`\n10. 在 User model 新增 relationship `public function photo(){return $this->belongsTo('App\\Photo');}`\n#### 新增連結\n1. 在 layouts/admin.blade.php 新增 route link\n```\n<li>\n    <a href=\"{{route('admin.users.index')}}\">All Users</a>\n</li>\n\n<li>\n    <a href=\"{{route('admin.users.create')}}\">Create User</a>\n</li>\n```\n2. 修改 create page\n```\n<div class=\"form-group\">\n    {!! Form::label('photo_id', 'Photo:') !!}\n    {!! Form::file('photo_id', null, ['class'=>'form-control']) !!}\n</div>\n```\n3. 在 AdminUsersController 的 store function 新增\n```\nif($file = $request->file('photo_id')) {\n\n    $name = time() . $file->getClientOriginalName();\n\n    $file->move('images', $name);\n\n    $photo = Photo::create(['file'=>$name]);\n\n    $input['photo_id'] = $photo->id;\n\n}\n```\n4. 繼續在 store function 將密碼加密後儲存所有檔案\n```\n$input['password'] = bcrypt($request->password);\n\nUser::create($input);\n```\n5. 新增路徑資訊到 Photo model\n```\nprotected $uploads = '/images/';\n\npublic function getFileAttribute($photo){\n\n    return $this->uploads . $photo;\n\n}\n```\n6. 新增 photo 到 User index page\n`<td><img height=\"50\" src=\"{{ \"{{$user->photo ? $user->photo->file : 'no user photo'\" }}}}\" alt=\"\"></td>`\n#### Edit page\n1. 修改 AdminUsersController 的 edit function (傳送 role 的資訊)\n```\npublic function edit($id)\n    {\n        $user = User::findOrFail($id);\n\n        $roles = Role::lists('name', 'id')->all();\n\n        return view('admin.users.edit', compact('user', 'roles'));\n    }\n```\n2. 修改 edit page (先從 create page 複製頁面，將 form 連結 model)\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Edit User</h1>\n\n    {!! Form::model($user, ['method'=>'PATCH', 'action'=>['AdminUsersController@update', $user->id], 'files'=>true]) !!}\n    <div class=\"form-group\">\n        {!! Form::label('name', 'Name:') !!}\n        {!! Form::text('name', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('email', 'Email:') !!}\n        {!! Form::email('email', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('role_id', 'Role:') !!}\n        {!! Form::select('role_id', $roles , null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('is_active', 'Status:') !!}\n        {!! Form::select('is_active', array(1 => 'Active', 0 => 'No Active'), 0, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('photo_id', 'Photo:') !!}\n        {!! Form::file('photo_id', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('password', 'Password:') !!}\n        {!! Form::password('password', ['class'=>'form-control']) !!}\n    </div>\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Create User', ['class'=>'btn btn-primary']) !!}\n    </div>\n    {!! Form::close() !!}\n\n    @include('includes.form_error')\n\n@stop\n```\n3. 在 edit page 新增圖片\n```\n<div class=\"col-sm-3\">\n\n    <img src=\"{{$user->photo ? $user->photo->file : 'http://placehold.it/400x400'}}\" alt=\"\" class=\"img-responsive img-rounded\">\n    \n</div>\n\n<div class=\"col-sm-9\">\n\n</div>\n```\n4. 將 users/index view 的圖片改成若無圖片，顯示 sample 圖片\n`<td><img height=\"50\" src=\"{{ \"{{$user->photo ? $user->photo->file : 'http://placehold.it/400x400'\" }}}}\" alt=\"\"></td>`\n5. 將 AdminUsersController 的 update function 改用 UsersRequest 來做 validation\n`public function update(UsersRequest $request, $id){}`\n6. 修改 AdminUsersController 的 update function\n```\npublic function update(UsersRequest $request, $id)\n{\n    $user = User::findOrFail($id);\n\n    $input = $request->all();\n\n    if($file = $request->file('photo_id')) {\n\n        $name = time() . $file->getClientOriginalName();\n\n        $file->move('images', $name);\n\n        $photo = Photo::create(['file' => $name]);\n\n        $input['photo_id'] = $photo->id;\n\n    }\n\n    $user->update($input);\n\n    return redirect('/admin/users')\n}\n```\n7. 新增新的 Request `php artisan make:request UsersEditRequest`\n8. 修改 Request\n`public function authorize(){return true;}`\n```\npublic function rules()\n    {\n        return [\n            'name' => 'required',\n            'email' => 'required',\n            'role_id' => 'required',\n            'is_active' => 'required',\n        ];\n    }\n```\n9. 修改 AdminUsersController 的 create 和 update function\n```\nif(trim($request->password) == ''){\n\n    $input = $request->except('password');\n\n} else {\n\n    $input = $request->all();\n\n    $input['password'] = bcrypt($request->password);\n\n}\n```\n10. Mutator\n```\npublic function setPasswordAttribute($password){\n\n    if(!empty($password)){\n\n        $this->attributes['password'] = bcrypt($password);\n\n    }\n\n}\n```\n#### Middleware\n1. 新增一個 middleware `php artisan make:middleware Admin`\n2. 在 app\\kernel.php 註冊 middleware (routemiddleware)\n`'admin' => \\App\\Http\\Middleware\\Admin::class,`\n3. 新增 404 頁面 resources\\views\\errors\\404.blade.php\n4. 在 User model 新增一個 function\n```\npublic function isAdmin(){\n\n    if($this->role->name == \"administrator\"){\n\n        return true;\n\n    }\n\n    return false;\n\n}\n```\n5. 修改 Admin middleware\n```\npublic function handle($request, Closure $next)\n{\n\n    if(Auth::check()){\n\n        if(Auth::user()->isAdmin()){\n\n            return $next($request);\n\n        }\n\n    }\n\n    return redirect('/');\n}\n```\n#### Delete User\n1. 新增 form 到 Users/edit view\n```\n{!! Form::open(['method'=>'DELETE', 'action'=>['AdminUsersController@destroy', $user->id]]) !!}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Delete User', ['class'=>'btn btn-danger']) !!}\n    </div>\n\n{!! Form::close() !!}\n```\n2. 在 AdminUsersController 新增 destroy function\n```\npublic function destroy($id)\n{\n    User::findOrfail($id)->delete();\n\n    Session::flash('deleted_user', \"The user has been deleted\");\n\n    return redirect('/admin/users');\n}\n```\n3. 將讀取到的 session 顯示在 Users/index view\n```\n@if(Session::has('deleted_user'))\n\n    <p class=\"bg-danger\">{{session('deleted_user')}}</p>\n\n@endif\n```\n#### 在目錄刪除圖片\n1. 修改 destroy function\n```\npublic function destroy($id)\n{\n    $user = User::findOrfail($id);\n\n    unlink(public_path() . $user->photo->file);\n\n    $user->delete();\n\n    Session::flash('deleted_user', \"The user has been deleted\");\n\n    return redirect('/admin/users');\n}\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day14.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day14\nthumbnail:\n  - /images/learning/laravel/laravelday14.jpg\ndate: 2017-05-05 00:06:02\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday14.jpg\">\n\n***\n### Application 2\n#### 上傳功能\n1. 新增 enctype (`'type'=>true`) `{!! Form::open(['method'=>'POST', 'action'=>'AdminUsersController@store', 'files'=>true]) !!}`\n2. 新增 migration `php artisan make:migration add_photo_id_to_users --table=users`\n3. 修改 add\\_photo\\_id\\_to\\_users_table\n```\npublic function up()\n{\n    Schema::table('users', function (Blueprint $table) {\n\n        $table->string('photo_id');\n    });\n}\npublic function down()\n{\n    Schema::table('users', function (Blueprint $table) {\n\n        $table->dropColumn('photo_id');\n    });\n}\n```\n4. 在 Create Page 新增 upload 欄位\n```\n<div class=\"form-group\">\n    {!! Form::label('file', 'Title:') !!}\n    {!! Form::file('file', null, ['class'=>'form-control']) !!}\n</div>\n```\n5. 在 User model 讓欄位可寫入 `protected $fillable = ['name', 'email', 'password', 'role_id', 'is_active', 'photo_id']`\n6.  修改 AdminUsersController 的 store function\n```\n    public function store(UsersRequest $request)\n    {\n        User::create($request->all());\n\n        return redirect('/admin/users');\n    }\n```\n7. 新增 Model 和 migration `php artisan make:model Photo -m`\n8. 在 create\\_photos\\_table 新增欄位 `$table->string('file');`\n9. 在 Photo model 讓 file 可寫入 `protected $fillable = ['file'];`\n10. 在 User model 新增 relationship `public function photo(){return $this->belongsTo('App\\Photo');}`\n#### 新增連結\n1. 在 layouts/admin.blade.php 新增 route link\n```\n<li>\n    <a href=\"{{route('admin.users.index')}}\">All Users</a>\n</li>\n\n<li>\n    <a href=\"{{route('admin.users.create')}}\">Create User</a>\n</li>\n```\n2. 修改 create page\n```\n<div class=\"form-group\">\n    {!! Form::label('photo_id', 'Photo:') !!}\n    {!! Form::file('photo_id', null, ['class'=>'form-control']) !!}\n</div>\n```\n3. 在 AdminUsersController 的 store function 新增\n```\nif($file = $request->file('photo_id')) {\n\n    $name = time() . $file->getClientOriginalName();\n\n    $file->move('images', $name);\n\n    $photo = Photo::create(['file'=>$name]);\n\n    $input['photo_id'] = $photo->id;\n\n}\n```\n4. 繼續在 store function 將密碼加密後儲存所有檔案\n```\n$input['password'] = bcrypt($request->password);\n\nUser::create($input);\n```\n5. 新增路徑資訊到 Photo model\n```\nprotected $uploads = '/images/';\n\npublic function getFileAttribute($photo){\n\n    return $this->uploads . $photo;\n\n}\n```\n6. 新增 photo 到 User index page\n`<td><img height=\"50\" src=\"{{ \"{{$user->photo ? $user->photo->file : 'no user photo'\" }}}}\" alt=\"\"></td>`\n#### Edit page\n1. 修改 AdminUsersController 的 edit function (傳送 role 的資訊)\n```\npublic function edit($id)\n    {\n        $user = User::findOrFail($id);\n\n        $roles = Role::lists('name', 'id')->all();\n\n        return view('admin.users.edit', compact('user', 'roles'));\n    }\n```\n2. 修改 edit page (先從 create page 複製頁面，將 form 連結 model)\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Edit User</h1>\n\n    {!! Form::model($user, ['method'=>'PATCH', 'action'=>['AdminUsersController@update', $user->id], 'files'=>true]) !!}\n    <div class=\"form-group\">\n        {!! Form::label('name', 'Name:') !!}\n        {!! Form::text('name', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('email', 'Email:') !!}\n        {!! Form::email('email', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('role_id', 'Role:') !!}\n        {!! Form::select('role_id', $roles , null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('is_active', 'Status:') !!}\n        {!! Form::select('is_active', array(1 => 'Active', 0 => 'No Active'), 0, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('photo_id', 'Photo:') !!}\n        {!! Form::file('photo_id', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('password', 'Password:') !!}\n        {!! Form::password('password', ['class'=>'form-control']) !!}\n    </div>\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Create User', ['class'=>'btn btn-primary']) !!}\n    </div>\n    {!! Form::close() !!}\n\n    @include('includes.form_error')\n\n@stop\n```\n3. 在 edit page 新增圖片\n```\n<div class=\"col-sm-3\">\n\n    <img src=\"{{$user->photo ? $user->photo->file : 'http://placehold.it/400x400'}}\" alt=\"\" class=\"img-responsive img-rounded\">\n    \n</div>\n\n<div class=\"col-sm-9\">\n\n</div>\n```\n4. 將 users/index view 的圖片改成若無圖片，顯示 sample 圖片\n`<td><img height=\"50\" src=\"{{ \"{{$user->photo ? $user->photo->file : 'http://placehold.it/400x400'\" }}}}\" alt=\"\"></td>`\n5. 將 AdminUsersController 的 update function 改用 UsersRequest 來做 validation\n`public function update(UsersRequest $request, $id){}`\n6. 修改 AdminUsersController 的 update function\n```\npublic function update(UsersRequest $request, $id)\n{\n    $user = User::findOrFail($id);\n\n    $input = $request->all();\n\n    if($file = $request->file('photo_id')) {\n\n        $name = time() . $file->getClientOriginalName();\n\n        $file->move('images', $name);\n\n        $photo = Photo::create(['file' => $name]);\n\n        $input['photo_id'] = $photo->id;\n\n    }\n\n    $user->update($input);\n\n    return redirect('/admin/users')\n}\n```\n7. 新增新的 Request `php artisan make:request UsersEditRequest`\n8. 修改 Request\n`public function authorize(){return true;}`\n```\npublic function rules()\n    {\n        return [\n            'name' => 'required',\n            'email' => 'required',\n            'role_id' => 'required',\n            'is_active' => 'required',\n        ];\n    }\n```\n9. 修改 AdminUsersController 的 create 和 update function\n```\nif(trim($request->password) == ''){\n\n    $input = $request->except('password');\n\n} else {\n\n    $input = $request->all();\n\n    $input['password'] = bcrypt($request->password);\n\n}\n```\n10. Mutator\n```\npublic function setPasswordAttribute($password){\n\n    if(!empty($password)){\n\n        $this->attributes['password'] = bcrypt($password);\n\n    }\n\n}\n```\n#### Middleware\n1. 新增一個 middleware `php artisan make:middleware Admin`\n2. 在 app\\kernel.php 註冊 middleware (routemiddleware)\n`'admin' => \\App\\Http\\Middleware\\Admin::class,`\n3. 新增 404 頁面 resources\\views\\errors\\404.blade.php\n4. 在 User model 新增一個 function\n```\npublic function isAdmin(){\n\n    if($this->role->name == \"administrator\"){\n\n        return true;\n\n    }\n\n    return false;\n\n}\n```\n5. 修改 Admin middleware\n```\npublic function handle($request, Closure $next)\n{\n\n    if(Auth::check()){\n\n        if(Auth::user()->isAdmin()){\n\n            return $next($request);\n\n        }\n\n    }\n\n    return redirect('/');\n}\n```\n#### Delete User\n1. 新增 form 到 Users/edit view\n```\n{!! Form::open(['method'=>'DELETE', 'action'=>['AdminUsersController@destroy', $user->id]]) !!}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Delete User', ['class'=>'btn btn-danger']) !!}\n    </div>\n\n{!! Form::close() !!}\n```\n2. 在 AdminUsersController 新增 destroy function\n```\npublic function destroy($id)\n{\n    User::findOrfail($id)->delete();\n\n    Session::flash('deleted_user', \"The user has been deleted\");\n\n    return redirect('/admin/users');\n}\n```\n3. 將讀取到的 session 顯示在 Users/index view\n```\n@if(Session::has('deleted_user'))\n\n    <p class=\"bg-danger\">{{session('deleted_user')}}</p>\n\n@endif\n```\n#### 在目錄刪除圖片\n1. 修改 destroy function\n```\npublic function destroy($id)\n{\n    $user = User::findOrfail($id);\n\n    unlink(public_path() . $user->photo->file);\n\n    $user->delete();\n\n    Session::flash('deleted_user', \"The user has been deleted\");\n\n    return redirect('/admin/users');\n}\n```","slug":"Lavarel-快速學習自我挑戰-Day14","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwp001h7ifa055dg7bt","content":"<img src=\"/images/learning/laravel/laravelday14.jpg\">\n<hr>\n<h3>Application 2</h3>\n<h4>上傳功能</h4>\n<ol>\n<li>新增 enctype (<code>'type'=&gt;true</code>) <code>{!! Form::open(['method'=&gt;'POST', 'action'=&gt;'AdminUsersController@store', 'files'=&gt;true]) !!}</code></li>\n<li>新增 migration <code>php artisan make:migration add_photo_id_to_users --table=users</code></li>\n<li>修改 add_photo_id_to_users_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function up()</div><div class=\"line\">&#123;</div><div class=\"line\">    Schema::table(&apos;users&apos;, function (Blueprint $table) &#123;</div><div class=\"line\"></div><div class=\"line\">        $table-&gt;string(&apos;photo_id&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">public function down()</div><div class=\"line\">&#123;</div><div class=\"line\">    Schema::table(&apos;users&apos;, function (Blueprint $table) &#123;</div><div class=\"line\"></div><div class=\"line\">        $table-&gt;dropColumn(&apos;photo_id&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 Create Page 新增 upload 欄位</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::label(&apos;file&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">    &#123;!! Form::file(&apos;file&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 User model 讓欄位可寫入 <code>protected $fillable = ['name', 'email', 'password', 'role_id', 'is_active', 'photo_id']</code></li>\n<li>修改 AdminUsersController 的 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(UsersRequest $request)</div><div class=\"line\">&#123;</div><div class=\"line\">    User::create($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增 Model 和 migration <code>php artisan make:model Photo -m</code></li>\n<li>在 create_photos_table 新增欄位 <code>$table-&gt;string('file');</code></li>\n<li>在 Photo model 讓 file 可寫入 <code>protected $fillable = ['file'];</code></li>\n<li>在 User model 新增 relationship <code>public function photo(){return $this-&gt;belongsTo('App\\Photo');}</code></li>\n</ol>\n<h4>新增連結</h4>\n<ol>\n<li>在 layouts/admin.blade.php 新增 route link</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.users.index&apos;)&#125;&#125;&quot;&gt;All Users&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.users.create&apos;)&#125;&#125;&quot;&gt;Create User&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 create page</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125;</div><div class=\"line\">    &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 AdminUsersController 的 store function 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if($file = $request-&gt;file(&apos;photo_id&apos;)) &#123;</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\"></div><div class=\"line\">    $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>繼續在 store function 將密碼加密後儲存所有檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$input[&apos;password&apos;] = bcrypt($request-&gt;password);</div><div class=\"line\"></div><div class=\"line\">User::create($input);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增路徑資訊到 Photo model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $uploads = &apos;/images/&apos;;</div><div class=\"line\"></div><div class=\"line\">public function getFileAttribute($photo)&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;uploads . $photo;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>新增 photo 到 User index page<br>\n<code>&lt;td&gt;&lt;img height=&quot;50&quot; src=&quot;{{$user->photo ? $user->photo->file : 'no user photo'}}&quot; alt=&quot;&quot;&gt;&lt;/td&gt;</code></li>\n</ol>\n<h4>Edit page</h4>\n<ol>\n<li>修改 AdminUsersController 的 edit function (傳送 role 的資訊)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function edit($id)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $user = User::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">        $roles = Role::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.users.edit&apos;, compact(&apos;user&apos;, &apos;roles&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 edit page (先從 create page 複製頁面，將 form 連結 model)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Edit User&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::model($user, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;AdminUsersController@update&apos;, $user-&gt;id], &apos;files&apos;=&gt;true]) !!&#125;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;email&apos;, &apos;Email:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::email(&apos;email&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;role_id&apos;, &apos;Role:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::select(&apos;role_id&apos;, $roles , null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;is_active&apos;, &apos;Status:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::select(&apos;is_active&apos;, array(1 =&gt; &apos;Active&apos;, 0 =&gt; &apos;No Active&apos;), 0, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;password&apos;, &apos;Password:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::password(&apos;password&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Create User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    @include(&apos;includes.form_error&apos;)</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 edit page 新增圖片</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;col-sm-3&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;img src=&quot;&#123;&#123;$user-&gt;photo ? $user-&gt;photo-&gt;file : &apos;http://placehold.it/400x400&apos;&#125;&#125;&quot; alt=&quot;&quot; class=&quot;img-responsive img-rounded&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;col-sm-9&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>將 users/index view 的圖片改成若無圖片，顯示 sample 圖片<br>\n<code>&lt;td&gt;&lt;img height=&quot;50&quot; src=&quot;{{$user->photo ? $user->photo->file : 'http://placehold.it/400x400'}}&quot; alt=&quot;&quot;&gt;&lt;/td&gt;</code></li>\n<li>將 AdminUsersController 的 update function 改用 UsersRequest 來做 validation<br>\n<code>public function update(UsersRequest $request, $id){}</code></li>\n<li>修改 AdminUsersController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function update(UsersRequest $request, $id)</div><div class=\"line\">&#123;</div><div class=\"line\">    $user = User::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    $input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">    if($file = $request-&gt;file(&apos;photo_id&apos;)) &#123;</div><div class=\"line\"></div><div class=\"line\">        $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">        $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">        $photo = Photo::create([&apos;file&apos; =&gt; $name]);</div><div class=\"line\"></div><div class=\"line\">        $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;update($input);</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增新的 Request <code>php artisan make:request UsersEditRequest</code></li>\n<li>修改 Request<br>\n<code>public function authorize(){return true;}</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function rules()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\">            &apos;name&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;email&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;role_id&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;is_active&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>修改 AdminUsersController 的 create 和 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(trim($request-&gt;password) == &apos;&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">    $input = $request-&gt;except(&apos;password&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">    $input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">    $input[&apos;password&apos;] = bcrypt($request-&gt;password);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>Mutator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function setPasswordAttribute($password)&#123;</div><div class=\"line\"></div><div class=\"line\">    if(!empty($password))&#123;</div><div class=\"line\"></div><div class=\"line\">        $this-&gt;attributes[&apos;password&apos;] = bcrypt($password);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Middleware</h4>\n<ol>\n<li>新增一個 middleware <code>php artisan make:middleware Admin</code></li>\n<li>在 app\\kernel.php 註冊 middleware (routemiddleware)<br>\n<code>'admin' =&gt; \\App\\Http\\Middleware\\Admin::class,</code></li>\n<li>新增 404 頁面 resources\\views\\errors\\404.blade.php</li>\n<li>在 User model 新增一個 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function isAdmin()&#123;</div><div class=\"line\"></div><div class=\"line\">    if($this-&gt;role-&gt;name == &quot;administrator&quot;)&#123;</div><div class=\"line\"></div><div class=\"line\">        return true;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return false;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 Admin middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function handle($request, Closure $next)</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    if(Auth::check())&#123;</div><div class=\"line\"></div><div class=\"line\">        if(Auth::user()-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">            return $next($request);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Delete User</h4>\n<ol>\n<li>新增 form 到 Users/edit view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminUsersController@destroy&apos;, $user-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Delete User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 AdminUsersController 新增 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    User::findOrfail($id)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    Session::flash(&apos;deleted_user&apos;, &quot;The user has been deleted&quot;);</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將讀取到的 session 顯示在 Users/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(Session::has(&apos;deleted_user&apos;))</div><div class=\"line\"></div><div class=\"line\">    &lt;p class=&quot;bg-danger&quot;&gt;&#123;&#123;session(&apos;deleted_user&apos;)&#125;&#125;&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>在目錄刪除圖片</h4>\n<ol>\n<li>修改 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    $user = User::findOrfail($id);</div><div class=\"line\"></div><div class=\"line\">    unlink(public_path() . $user-&gt;photo-&gt;file);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    Session::flash(&apos;deleted_user&apos;, &quot;The user has been deleted&quot;);</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday14.jpg\">\n<hr>\n<h3>Application 2</h3>\n<h4>上傳功能</h4>\n<ol>\n<li>新增 enctype (<code>'type'=&gt;true</code>) <code>{!! Form::open(['method'=&gt;'POST', 'action'=&gt;'AdminUsersController@store', 'files'=&gt;true]) !!}</code></li>\n<li>新增 migration <code>php artisan make:migration add_photo_id_to_users --table=users</code></li>\n<li>修改 add_photo_id_to_users_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function up()</div><div class=\"line\">&#123;</div><div class=\"line\">    Schema::table(&apos;users&apos;, function (Blueprint $table) &#123;</div><div class=\"line\"></div><div class=\"line\">        $table-&gt;string(&apos;photo_id&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">public function down()</div><div class=\"line\">&#123;</div><div class=\"line\">    Schema::table(&apos;users&apos;, function (Blueprint $table) &#123;</div><div class=\"line\"></div><div class=\"line\">        $table-&gt;dropColumn(&apos;photo_id&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 Create Page 新增 upload 欄位</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::label(&apos;file&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">    &#123;!! Form::file(&apos;file&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 User model 讓欄位可寫入 <code>protected $fillable = ['name', 'email', 'password', 'role_id', 'is_active', 'photo_id']</code></li>\n<li>修改 AdminUsersController 的 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(UsersRequest $request)</div><div class=\"line\">&#123;</div><div class=\"line\">    User::create($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增 Model 和 migration <code>php artisan make:model Photo -m</code></li>\n<li>在 create_photos_table 新增欄位 <code>$table-&gt;string('file');</code></li>\n<li>在 Photo model 讓 file 可寫入 <code>protected $fillable = ['file'];</code></li>\n<li>在 User model 新增 relationship <code>public function photo(){return $this-&gt;belongsTo('App\\Photo');}</code></li>\n</ol>\n<h4>新增連結</h4>\n<ol>\n<li>在 layouts/admin.blade.php 新增 route link</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.users.index&apos;)&#125;&#125;&quot;&gt;All Users&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.users.create&apos;)&#125;&#125;&quot;&gt;Create User&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 create page</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125;</div><div class=\"line\">    &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 AdminUsersController 的 store function 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if($file = $request-&gt;file(&apos;photo_id&apos;)) &#123;</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\"></div><div class=\"line\">    $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>繼續在 store function 將密碼加密後儲存所有檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$input[&apos;password&apos;] = bcrypt($request-&gt;password);</div><div class=\"line\"></div><div class=\"line\">User::create($input);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增路徑資訊到 Photo model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $uploads = &apos;/images/&apos;;</div><div class=\"line\"></div><div class=\"line\">public function getFileAttribute($photo)&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;uploads . $photo;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>新增 photo 到 User index page<br>\n<code>&lt;td&gt;&lt;img height=&quot;50&quot; src=&quot;{{$user->photo ? $user->photo->file : 'no user photo'}}&quot; alt=&quot;&quot;&gt;&lt;/td&gt;</code></li>\n</ol>\n<h4>Edit page</h4>\n<ol>\n<li>修改 AdminUsersController 的 edit function (傳送 role 的資訊)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function edit($id)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $user = User::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">        $roles = Role::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.users.edit&apos;, compact(&apos;user&apos;, &apos;roles&apos;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 edit page (先從 create page 複製頁面，將 form 連結 model)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Edit User&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::model($user, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;AdminUsersController@update&apos;, $user-&gt;id], &apos;files&apos;=&gt;true]) !!&#125;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;email&apos;, &apos;Email:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::email(&apos;email&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;role_id&apos;, &apos;Role:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::select(&apos;role_id&apos;, $roles , null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;is_active&apos;, &apos;Status:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::select(&apos;is_active&apos;, array(1 =&gt; &apos;Active&apos;, 0 =&gt; &apos;No Active&apos;), 0, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;password&apos;, &apos;Password:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::password(&apos;password&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Create User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    @include(&apos;includes.form_error&apos;)</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 edit page 新增圖片</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;col-sm-3&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;img src=&quot;&#123;&#123;$user-&gt;photo ? $user-&gt;photo-&gt;file : &apos;http://placehold.it/400x400&apos;&#125;&#125;&quot; alt=&quot;&quot; class=&quot;img-responsive img-rounded&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;col-sm-9&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>將 users/index view 的圖片改成若無圖片，顯示 sample 圖片<br>\n<code>&lt;td&gt;&lt;img height=&quot;50&quot; src=&quot;{{$user->photo ? $user->photo->file : 'http://placehold.it/400x400'}}&quot; alt=&quot;&quot;&gt;&lt;/td&gt;</code></li>\n<li>將 AdminUsersController 的 update function 改用 UsersRequest 來做 validation<br>\n<code>public function update(UsersRequest $request, $id){}</code></li>\n<li>修改 AdminUsersController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function update(UsersRequest $request, $id)</div><div class=\"line\">&#123;</div><div class=\"line\">    $user = User::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    $input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">    if($file = $request-&gt;file(&apos;photo_id&apos;)) &#123;</div><div class=\"line\"></div><div class=\"line\">        $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">        $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">        $photo = Photo::create([&apos;file&apos; =&gt; $name]);</div><div class=\"line\"></div><div class=\"line\">        $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;update($input);</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增新的 Request <code>php artisan make:request UsersEditRequest</code></li>\n<li>修改 Request<br>\n<code>public function authorize(){return true;}</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function rules()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\">            &apos;name&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;email&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;role_id&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;is_active&apos; =&gt; &apos;required&apos;,</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>修改 AdminUsersController 的 create 和 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(trim($request-&gt;password) == &apos;&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">    $input = $request-&gt;except(&apos;password&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">    $input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">    $input[&apos;password&apos;] = bcrypt($request-&gt;password);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>Mutator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function setPasswordAttribute($password)&#123;</div><div class=\"line\"></div><div class=\"line\">    if(!empty($password))&#123;</div><div class=\"line\"></div><div class=\"line\">        $this-&gt;attributes[&apos;password&apos;] = bcrypt($password);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Middleware</h4>\n<ol>\n<li>新增一個 middleware <code>php artisan make:middleware Admin</code></li>\n<li>在 app\\kernel.php 註冊 middleware (routemiddleware)<br>\n<code>'admin' =&gt; \\App\\Http\\Middleware\\Admin::class,</code></li>\n<li>新增 404 頁面 resources\\views\\errors\\404.blade.php</li>\n<li>在 User model 新增一個 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function isAdmin()&#123;</div><div class=\"line\"></div><div class=\"line\">    if($this-&gt;role-&gt;name == &quot;administrator&quot;)&#123;</div><div class=\"line\"></div><div class=\"line\">        return true;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return false;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 Admin middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function handle($request, Closure $next)</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    if(Auth::check())&#123;</div><div class=\"line\"></div><div class=\"line\">        if(Auth::user()-&gt;isAdmin())&#123;</div><div class=\"line\"></div><div class=\"line\">            return $next($request);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Delete User</h4>\n<ol>\n<li>新增 form 到 Users/edit view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminUsersController@destroy&apos;, $user-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Delete User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 AdminUsersController 新增 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    User::findOrfail($id)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    Session::flash(&apos;deleted_user&apos;, &quot;The user has been deleted&quot;);</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將讀取到的 session 顯示在 Users/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(Session::has(&apos;deleted_user&apos;))</div><div class=\"line\"></div><div class=\"line\">    &lt;p class=&quot;bg-danger&quot;&gt;&#123;&#123;session(&apos;deleted_user&apos;)&#125;&#125;&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>在目錄刪除圖片</h4>\n<ol>\n<li>修改 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    $user = User::findOrfail($id);</div><div class=\"line\"></div><div class=\"line\">    unlink(public_path() . $user-&gt;photo-&gt;file);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    Session::flash(&apos;deleted_user&apos;, &quot;The user has been deleted&quot;);</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/users&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day15","thumbnail":["/images/learning/laravel/laravelday15.png"],"date":"2017-05-25T12:10:35.000Z","_content":"<img src=\"/images/learning/laravel/laravelday15.png\">\n\n***\n### Application Post Part I\n#### 設定 routes\n1. 設定 404 page view\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <h1 class=\"text-center\">Opps no page available</h1>\n\n@stop\n```\n2. 新增 routes 在 admin group 裡面\n`Route::resource('admin/posts', 'AdminPostsController');`\n3. 新增 Controller\n`php artisan make:controller --resource AdminPostsController`\n4. 在 Controller 的 index\n`return view('admin.posts.index');`\n5. 新增 /views/admin/posts/index.blade.php\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Posts</h1>\n\n@stop\n```\n6. 修改 layouts 的連結\nAll Posts -> `{{\" {{route('admin.posts.index')\" }}}}`\nCreate Post -> `{{\" {{route('admin.posts.create')\" }}}}`\n7. 修改 Create 和 Edit 的 view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Create Post</h1>\n\n@stop\n```\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Edit Post</h1>\n\n@stop\n```\n8. 修改 Controller 的 create\n`return view('admin.posts.create');`\n#### Migration\n1. 新增 model\n`php artisan make:model Post -m`\n2. 在 create\\_posts_table 新增欄位\n```\n    $table->integer('user_id')->unsigned()->index();\n    $table->integer('category_id')->unsigned()->index();\n    $table->integer('photo_id')->unsigned()->inex();\n    $table->string('title');\n    $table->text('body');\n```\n3. 寫入資料庫 `php artisan migrate`\n#### 顯示貼文\n1. 在 Post model 處理 mass assignment\n```\nprotected $fillable = [\n\n    'category_id',\n    'photo_id',\n    'title',\n    'body'\n\n];\n```\n2. 進入 tinker 模式新增資料庫內容 `php artisan tinker`\n3. 新增一行資料 `$post = App\\Post::create(['title'=>'my first post', 'body'=>'I love laravel with Edwin Diaz']);`\n4. 修改 Controller 的 Index function\n```\n$posts = Post::all();\nreturn view('admin.posts.index', compact('posts'));\n```\n5. 在 Post index view 新增一個 table 讀取資料庫資料\n```\n<table class=\"table\">\n    <thead>\n    <tr>\n        <th>Id</th>\n        <th>User</th>\n        <th>Category</th>\n        <th>Photo</th>\n        <th>Title</th>\n        <th>body</th>\n        <th>Created</th>\n        <th>Updated</th>\n    </tr>\n    </thead>\n    <tbody>\n\n    @if($posts)\n\n        @foreach($posts as $post)\n\n    <tr>\n        <td>{{$post->id}}</td>\n        <td>{{$post->user_id}}</td>\n        <td>{{$post->category_id}}</td>\n        <td>{{$post->photo_id}}</td>\n        <td>{{$post->title}}</td>\n        <td>{{$post->body}}</td>\n        <td>{{$post->created_at->diffForHumans()}}</td>\n        <td>{{$post->updated_at->diffForHumans()}}</td>\n    </tr>\n\n        @endforeach\n\n    @endif\n    </tbody>\n</table>\n```\n#### Relationship 設定\n1. 在 User model 新增 posts function\n```\npublic function posts(){\n\n    return $this->hasMany('App\\Post');\n\n}\n```\n2. 在 Post model 新增 user function\n```\npublic function user(){\n\n    return $this->belongsTo('App\\User');\n\n}\n```\n3. 修改 index view 的 user 欄位 `{{ \"{{$post->user->name\" }}}}`\n4. 在 Post model 新增 photo 和 category function\n```\npublic function photo(){\n        \n    return $this->belongsTo('App\\Photo');\n    \n}\n\npublic function category(){\n    \n    return $this->belongsTo('App\\Category');\n}\n```\n5. 在 Role model 讓 name 可寫入\n```\nprotected $fillable = [\n\n    'name'\n\n];\n```\n#### 創建表單\n1. 新增 create view 表單\n```\n{!! Form::open(['method'=>'POST', 'action'=>'AdminPostsController@store', 'files'=>true]) !!}\n\n    <div class=\"form-group\">\n        {!! Form::label('title', 'Title:') !!}\n        {!! Form::text('title', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('category_id', 'Category:') !!}\n        {!! Form::select('category_id', array(''=>'options'), null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('photo_id', 'Photo:') !!}\n        {!! Form::file('photo_id', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('body', 'Description:') !!}\n        {!! Form::textarea('body', null, ['class'=>'form-control', 'rows'=>3]) !!}\n    </div>\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Create Post', ['class'=>'btn btn-primary']) !!}\n    </div>\n\n{!! Form::close() !!}\n```\n2. 新增 Request\n`php artisan make:request PostsCreateRequest`\n3. 修改 PostscreateRequest\n```\npublic function authorize()\n    {\n        return true;\n    }\n\npublic function rules()\n    {\n        return [\n\n            'title'         =>'required',\n            'category_id'   =>'required',\n            'photo_id'      =>'required',\n            'body'          =>'required'\n\n        ];\n    }\n```\n4. 在 create post view include error message\n`@include('includes.form_error')`\n#### 創建貼文\n1. 更新 Controller 的 store function\n```\n$input = $request->all();\n\n$user = Auth::user();\n\nif($file = $request->file('photo_id')){\n\n    $name = time() . $file->getClientOriginalName();\n    \n    $file->move('images', $name);\n    \n    $photo = Photo::create(['file'=>$name]);\n    \n    $input['photo_id'] = $photo->id;\n\n}\n\n$user->posts()->create($input);\n\nreturn redirect('/admin/posts');\n```\n2. 修改 Post index view 來顯示圖片\n`<img height=\"100\" src=\"{{ \"{{$post->photo ? $post->photo->file : 'http://placehold.it/400x400'\" }}}}\" alt=\"\">`\n\n\n\n\n","source":"_posts/Lavarel-快速學習自我挑戰-Day15.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day15\nthumbnail:\n  - /images/learning/laravel/laravelday15.png\ndate: 2017-05-25 20:10:35\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday15.png\">\n\n***\n### Application Post Part I\n#### 設定 routes\n1. 設定 404 page view\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <h1 class=\"text-center\">Opps no page available</h1>\n\n@stop\n```\n2. 新增 routes 在 admin group 裡面\n`Route::resource('admin/posts', 'AdminPostsController');`\n3. 新增 Controller\n`php artisan make:controller --resource AdminPostsController`\n4. 在 Controller 的 index\n`return view('admin.posts.index');`\n5. 新增 /views/admin/posts/index.blade.php\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Posts</h1>\n\n@stop\n```\n6. 修改 layouts 的連結\nAll Posts -> `{{\" {{route('admin.posts.index')\" }}}}`\nCreate Post -> `{{\" {{route('admin.posts.create')\" }}}}`\n7. 修改 Create 和 Edit 的 view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Create Post</h1>\n\n@stop\n```\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Edit Post</h1>\n\n@stop\n```\n8. 修改 Controller 的 create\n`return view('admin.posts.create');`\n#### Migration\n1. 新增 model\n`php artisan make:model Post -m`\n2. 在 create\\_posts_table 新增欄位\n```\n    $table->integer('user_id')->unsigned()->index();\n    $table->integer('category_id')->unsigned()->index();\n    $table->integer('photo_id')->unsigned()->inex();\n    $table->string('title');\n    $table->text('body');\n```\n3. 寫入資料庫 `php artisan migrate`\n#### 顯示貼文\n1. 在 Post model 處理 mass assignment\n```\nprotected $fillable = [\n\n    'category_id',\n    'photo_id',\n    'title',\n    'body'\n\n];\n```\n2. 進入 tinker 模式新增資料庫內容 `php artisan tinker`\n3. 新增一行資料 `$post = App\\Post::create(['title'=>'my first post', 'body'=>'I love laravel with Edwin Diaz']);`\n4. 修改 Controller 的 Index function\n```\n$posts = Post::all();\nreturn view('admin.posts.index', compact('posts'));\n```\n5. 在 Post index view 新增一個 table 讀取資料庫資料\n```\n<table class=\"table\">\n    <thead>\n    <tr>\n        <th>Id</th>\n        <th>User</th>\n        <th>Category</th>\n        <th>Photo</th>\n        <th>Title</th>\n        <th>body</th>\n        <th>Created</th>\n        <th>Updated</th>\n    </tr>\n    </thead>\n    <tbody>\n\n    @if($posts)\n\n        @foreach($posts as $post)\n\n    <tr>\n        <td>{{$post->id}}</td>\n        <td>{{$post->user_id}}</td>\n        <td>{{$post->category_id}}</td>\n        <td>{{$post->photo_id}}</td>\n        <td>{{$post->title}}</td>\n        <td>{{$post->body}}</td>\n        <td>{{$post->created_at->diffForHumans()}}</td>\n        <td>{{$post->updated_at->diffForHumans()}}</td>\n    </tr>\n\n        @endforeach\n\n    @endif\n    </tbody>\n</table>\n```\n#### Relationship 設定\n1. 在 User model 新增 posts function\n```\npublic function posts(){\n\n    return $this->hasMany('App\\Post');\n\n}\n```\n2. 在 Post model 新增 user function\n```\npublic function user(){\n\n    return $this->belongsTo('App\\User');\n\n}\n```\n3. 修改 index view 的 user 欄位 `{{ \"{{$post->user->name\" }}}}`\n4. 在 Post model 新增 photo 和 category function\n```\npublic function photo(){\n        \n    return $this->belongsTo('App\\Photo');\n    \n}\n\npublic function category(){\n    \n    return $this->belongsTo('App\\Category');\n}\n```\n5. 在 Role model 讓 name 可寫入\n```\nprotected $fillable = [\n\n    'name'\n\n];\n```\n#### 創建表單\n1. 新增 create view 表單\n```\n{!! Form::open(['method'=>'POST', 'action'=>'AdminPostsController@store', 'files'=>true]) !!}\n\n    <div class=\"form-group\">\n        {!! Form::label('title', 'Title:') !!}\n        {!! Form::text('title', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('category_id', 'Category:') !!}\n        {!! Form::select('category_id', array(''=>'options'), null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('photo_id', 'Photo:') !!}\n        {!! Form::file('photo_id', null, ['class'=>'form-control']) !!}\n    </div>\n\n    <div class=\"form-group\">\n        {!! Form::label('body', 'Description:') !!}\n        {!! Form::textarea('body', null, ['class'=>'form-control', 'rows'=>3]) !!}\n    </div>\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Create Post', ['class'=>'btn btn-primary']) !!}\n    </div>\n\n{!! Form::close() !!}\n```\n2. 新增 Request\n`php artisan make:request PostsCreateRequest`\n3. 修改 PostscreateRequest\n```\npublic function authorize()\n    {\n        return true;\n    }\n\npublic function rules()\n    {\n        return [\n\n            'title'         =>'required',\n            'category_id'   =>'required',\n            'photo_id'      =>'required',\n            'body'          =>'required'\n\n        ];\n    }\n```\n4. 在 create post view include error message\n`@include('includes.form_error')`\n#### 創建貼文\n1. 更新 Controller 的 store function\n```\n$input = $request->all();\n\n$user = Auth::user();\n\nif($file = $request->file('photo_id')){\n\n    $name = time() . $file->getClientOriginalName();\n    \n    $file->move('images', $name);\n    \n    $photo = Photo::create(['file'=>$name]);\n    \n    $input['photo_id'] = $photo->id;\n\n}\n\n$user->posts()->create($input);\n\nreturn redirect('/admin/posts');\n```\n2. 修改 Post index view 來顯示圖片\n`<img height=\"100\" src=\"{{ \"{{$post->photo ? $post->photo->file : 'http://placehold.it/400x400'\" }}}}\" alt=\"\">`\n\n\n\n\n","slug":"Lavarel-快速學習自我挑戰-Day15","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwq001k7ifa501npu6h","content":"<img src=\"/images/learning/laravel/laravelday15.png\">\n<hr>\n<h3>Application Post Part I</h3>\n<h4>設定 routes</h4>\n<ol>\n<li>設定 404 page view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1 class=&quot;text-center&quot;&gt;Opps no page available&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 routes 在 admin group 裡面<br>\n<code>Route::resource('admin/posts', 'AdminPostsController');</code></li>\n<li>新增 Controller<br>\n<code>php artisan make:controller --resource AdminPostsController</code></li>\n<li>在 Controller 的 index<br>\n<code>return view('admin.posts.index');</code></li>\n<li>新增 /views/admin/posts/index.blade.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Posts&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改 layouts 的連結<br>\nAll Posts -&gt; <code> {{route('admin.posts.index')}}</code><br>\nCreate Post -&gt; <code> {{route('admin.posts.create')}}</code></li>\n<li>修改 Create 和 Edit 的 view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Create Post&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Edit Post&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>修改 Controller 的 create<br>\n<code>return view('admin.posts.create');</code></li>\n</ol>\n<h4>Migration</h4>\n<ol>\n<li>新增 model<br>\n<code>php artisan make:model Post -m</code></li>\n<li>在 create_posts_table 新增欄位</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$table-&gt;integer(&apos;user_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">$table-&gt;integer(&apos;category_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">$table-&gt;integer(&apos;photo_id&apos;)-&gt;unsigned()-&gt;inex();</div><div class=\"line\">$table-&gt;string(&apos;title&apos;);</div><div class=\"line\">$table-&gt;text(&apos;body&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>寫入資料庫 <code>php artisan migrate</code></li>\n</ol>\n<h4>顯示貼文</h4>\n<ol>\n<li>在 Post model 處理 mass assignment</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;category_id&apos;,</div><div class=\"line\">    &apos;photo_id&apos;,</div><div class=\"line\">    &apos;title&apos;,</div><div class=\"line\">    &apos;body&apos;</div><div class=\"line\"></div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>進入 tinker 模式新增資料庫內容 <code>php artisan tinker</code></li>\n<li>新增一行資料 <code>$post = App\\Post::create(['title'=&gt;'my first post', 'body'=&gt;'I love laravel with Edwin Diaz']);</code></li>\n<li>修改 Controller 的 Index function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$posts = Post::all();</div><div class=\"line\">return view(&apos;admin.posts.index&apos;, compact(&apos;posts&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 Post index view 新增一個 table 讀取資料庫資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">    &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;th&gt;Id&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;User&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Category&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Photo&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Title&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;body&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Created&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Updated&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">    &lt;/thead&gt;</div><div class=\"line\">    &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">    @if($posts)</div><div class=\"line\"></div><div class=\"line\">        @foreach($posts as $post)</div><div class=\"line\"></div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;user_id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;category_id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;photo_id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;title&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;body&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;updated_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">        @endforeach</div><div class=\"line\"></div><div class=\"line\">    @endif</div><div class=\"line\">    &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure>\n<h4>Relationship 設定</h4>\n<ol>\n<li>在 User model 新增 posts function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function posts()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\Post&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 Post model 新增 user function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function user()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\User&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 index view 的 user 欄位 <code>{{$post->user->name}}</code></li>\n<li>在 Post model 新增 photo 和 category function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function photo()&#123;</div><div class=\"line\">        </div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Photo&apos;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public function category()&#123;</div><div class=\"line\">    </div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Category&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 Role model 讓 name 可寫入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;name&apos;</div><div class=\"line\"></div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h4>創建表單</h4>\n<ol>\n<li>新增 create view 表單</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminPostsController@store&apos;, &apos;files&apos;=&gt;true]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;category_id&apos;, &apos;Category:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::select(&apos;category_id&apos;, array(&apos;&apos;=&gt;&apos;options&apos;), null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;body&apos;, &apos;Description:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::textarea(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;3]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 Request<br>\n<code>php artisan make:request PostsCreateRequest</code></li>\n<li>修改 PostscreateRequest</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function authorize()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">public function rules()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\"></div><div class=\"line\">            &apos;title&apos;         =&gt;&apos;required&apos;,</div><div class=\"line\">            &apos;category_id&apos;   =&gt;&apos;required&apos;,</div><div class=\"line\">            &apos;photo_id&apos;      =&gt;&apos;required&apos;,</div><div class=\"line\">            &apos;body&apos;          =&gt;&apos;required&apos;</div><div class=\"line\"></div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 create post view include error message<br>\n<code>@include('includes.form_error')</code></li>\n</ol>\n<h4>創建貼文</h4>\n<ol>\n<li>更新 Controller 的 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">$user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">if($file = $request-&gt;file(&apos;photo_id&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\">    </div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\">    </div><div class=\"line\">    $photo = Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\">    </div><div class=\"line\">    $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$user-&gt;posts()-&gt;create($input);</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/posts&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 Post index view 來顯示圖片<br>\n<code>&lt;img height=&quot;100&quot; src=&quot;{{$post->photo ? $post->photo->file : 'http://placehold.it/400x400'}}&quot; alt=&quot;&quot;&gt;</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday15.png\">\n<hr>\n<h3>Application Post Part I</h3>\n<h4>設定 routes</h4>\n<ol>\n<li>設定 404 page view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1 class=&quot;text-center&quot;&gt;Opps no page available&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 routes 在 admin group 裡面<br>\n<code>Route::resource('admin/posts', 'AdminPostsController');</code></li>\n<li>新增 Controller<br>\n<code>php artisan make:controller --resource AdminPostsController</code></li>\n<li>在 Controller 的 index<br>\n<code>return view('admin.posts.index');</code></li>\n<li>新增 /views/admin/posts/index.blade.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Posts&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改 layouts 的連結<br>\nAll Posts -&gt; <code> {{route('admin.posts.index')}}</code><br>\nCreate Post -&gt; <code> {{route('admin.posts.create')}}</code></li>\n<li>修改 Create 和 Edit 的 view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Create Post&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Edit Post&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>修改 Controller 的 create<br>\n<code>return view('admin.posts.create');</code></li>\n</ol>\n<h4>Migration</h4>\n<ol>\n<li>新增 model<br>\n<code>php artisan make:model Post -m</code></li>\n<li>在 create_posts_table 新增欄位</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$table-&gt;integer(&apos;user_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">$table-&gt;integer(&apos;category_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">$table-&gt;integer(&apos;photo_id&apos;)-&gt;unsigned()-&gt;inex();</div><div class=\"line\">$table-&gt;string(&apos;title&apos;);</div><div class=\"line\">$table-&gt;text(&apos;body&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>寫入資料庫 <code>php artisan migrate</code></li>\n</ol>\n<h4>顯示貼文</h4>\n<ol>\n<li>在 Post model 處理 mass assignment</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;category_id&apos;,</div><div class=\"line\">    &apos;photo_id&apos;,</div><div class=\"line\">    &apos;title&apos;,</div><div class=\"line\">    &apos;body&apos;</div><div class=\"line\"></div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>進入 tinker 模式新增資料庫內容 <code>php artisan tinker</code></li>\n<li>新增一行資料 <code>$post = App\\Post::create(['title'=&gt;'my first post', 'body'=&gt;'I love laravel with Edwin Diaz']);</code></li>\n<li>修改 Controller 的 Index function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$posts = Post::all();</div><div class=\"line\">return view(&apos;admin.posts.index&apos;, compact(&apos;posts&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 Post index view 新增一個 table 讀取資料庫資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">    &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;th&gt;Id&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;User&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Category&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Photo&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Title&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;body&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Created&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Updated&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">    &lt;/thead&gt;</div><div class=\"line\">    &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">    @if($posts)</div><div class=\"line\"></div><div class=\"line\">        @foreach($posts as $post)</div><div class=\"line\"></div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;user_id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;category_id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;photo_id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;title&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;body&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$post-&gt;updated_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">        @endforeach</div><div class=\"line\"></div><div class=\"line\">    @endif</div><div class=\"line\">    &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure>\n<h4>Relationship 設定</h4>\n<ol>\n<li>在 User model 新增 posts function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function posts()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\Post&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 Post model 新增 user function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function user()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\User&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 index view 的 user 欄位 <code>{{$post->user->name}}</code></li>\n<li>在 Post model 新增 photo 和 category function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function photo()&#123;</div><div class=\"line\">        </div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Photo&apos;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public function category()&#123;</div><div class=\"line\">    </div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Category&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 Role model 讓 name 可寫入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;name&apos;</div><div class=\"line\"></div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h4>創建表單</h4>\n<ol>\n<li>新增 create view 表單</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminPostsController@store&apos;, &apos;files&apos;=&gt;true]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;category_id&apos;, &apos;Category:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::select(&apos;category_id&apos;, array(&apos;&apos;=&gt;&apos;options&apos;), null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::label(&apos;body&apos;, &apos;Description:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::textarea(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;3]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 Request<br>\n<code>php artisan make:request PostsCreateRequest</code></li>\n<li>修改 PostscreateRequest</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function authorize()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">public function rules()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\"></div><div class=\"line\">            &apos;title&apos;         =&gt;&apos;required&apos;,</div><div class=\"line\">            &apos;category_id&apos;   =&gt;&apos;required&apos;,</div><div class=\"line\">            &apos;photo_id&apos;      =&gt;&apos;required&apos;,</div><div class=\"line\">            &apos;body&apos;          =&gt;&apos;required&apos;</div><div class=\"line\"></div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 create post view include error message<br>\n<code>@include('includes.form_error')</code></li>\n</ol>\n<h4>創建貼文</h4>\n<ol>\n<li>更新 Controller 的 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">$user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">if($file = $request-&gt;file(&apos;photo_id&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\">    </div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\">    </div><div class=\"line\">    $photo = Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\">    </div><div class=\"line\">    $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$user-&gt;posts()-&gt;create($input);</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/posts&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 Post index view 來顯示圖片<br>\n<code>&lt;img height=&quot;100&quot; src=&quot;{{$post->photo ? $post->photo->file : 'http://placehold.it/400x400'}}&quot; alt=&quot;&quot;&gt;</code></li>\n</ol>\n"},{"title":"Lavarel 快速學習自我挑戰 Day16","thumbnail":["/images/learning/laravel/laravelday16.jpg"],"date":"2017-05-26T04:23:31.000Z","_content":"<img src=\"/images/learning/laravel/laravelday16.jpg\">\n\n***\n### Application Post Part II\n#### 對貼文分類新增 model 和 migration\n1. 新增 model `php artisan make:model Category -m`\n2. 在 category 的 model 處理 mass assignment\n`protected $fillable = ['name'];`\n3. 在 create\\_categories_table 新增欄位 `$table->string('name');`\n4. 將欄位寫入資料庫 `php artisan migrate`\n#### 與貼文分類顯示或創建貼文\n1. 修改 posts 的 index view\n`<td>{{\" {{$post->category ? $post->category->name : 'Uncategorized'\" }}}}</td>`\n2. 修改 AdminPostsController 的 create function\n```\n$categories = Category::lists('name','id')->all();\nreturn view('admin.posts.create', compact('categories'));\n```\n3. 修改 Post create view\n```\n<div class=\"form-group\">\n    {!! Form::label('category_id', 'Category:') !!}\n    {!! Form::select('category_id', [''=>'Choose Categories'] + $categories, null, ['class'=>'form-control']) !!}\n</div>\n```\n#### 編輯貼文\n1. 修改 AdminPostsController 的 edit function\n```\n$post = Post::findOrFail($id);\n$categories = Category::lists('name', 'id')->all();\nreturn view('admin.posts.edit', compact('post', 'categories'));\n```\n2. 複製 create view 到 edit view 並修改 form\n`{!! Form::model($post, ['method'=>'PATCH', 'action'=>['AdminPostsController@update', $post->id], 'files'=>true]) !!}`\n3. 在 posts index view 的名字新增超連結\n`<td><a href=\"{{\" {{route('admin.posts.edit', $post->id)\" }}}}\">{{\" {{$post->user->name\" }}}}</a></td>`\n4. 修改 post edit view 的 category\n`{!! Form::select('category_id', $categories, null, ['class'=>'form-control']) !!}`\n5. 修改 AdminPostsController 的 update function\n```\n$input = $request->all();\n\nif($file = $request->file('photo_id')){\n\n    $name = time() . $file->getClientOriginalName();\n\n    $file->move('images', $name);\n\n    $photo = Photo::create(['file'=>$name]);\n\n    $input['photo_id'] = $photo->id;\n\n}\n\nAuth::user()->posts()->whereId($id)->first()->update($input);\n\nreturn redirect('/admin/posts');\n```\n6. 在 post index view 縮短字的長度 `{{\" {{str_limit($post->body, 30)\" }}}}`\n#### 刪除貼文\n1. 在 post edit view 新增 delete button\n```\n{!! Form::open(['method'=>'DELETE', 'action'=>['AdminPostsController@destroy', $post->id]]) !!}\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Delete Post', ['class'=>'btn btn-danger col-sm-6']) !!}\n    </div>\n\n{!! Form::close() !!}\n```\n2. 修改 AdminPostsController 的 destroy function\n```\n$post = Post::findOrfail($id);\n\nunlink(public_path() . $post->photo->file);\n\n$post->delete();\n\nreturn redirect('/admin/posts');\n```\n#### 刪除使用者時也刪除貼文\n1. 修改 create\\_posts_table\n`$table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');`\n2. 更新資料庫 `php artisan migrate:refresh`\n#### 在編輯貼文時顯示圖片\n1. 修改 post edit view\n```\n<div class=\"col-sm-3\">\n\n    <img src=\"{{$post->photo->file}}\" alt=\"\" class=\"img-responsive\">\n\n</div>\n```\n#### 設定分類\n1. 新增 Controller\n`php artisan make:controller --resource AdminCategoriesController`\n2. 新增 routes\n`Route::resource('admin/categories', 'AdminCategoriesController');`\n3. 新增 categories index view\n```\n@extends('layouts.admin');\n\n@section('content')\n\n    <h1>Categories</h1>\n\n@stop\n```\n4. 修改 layout.admin 的 routes\n```\n<li>\n    <a href=\"{{route('admin.categories.index')}}\">All Categories</a>\n</li>\n\n<li>\n    <a href=\"{{route('admin.categories.create')}}\">Create Category</a>\n</li>\n```\n#### 創建分類\n1. 修改 AdminCategoriesController 的 index\n```\n$categories = Category::all();\n\nreturn view('admin.categories.index', compact('categories'));\n```\n2. 修改 categories index view\n```\n@extends('layouts.admin');\n\n@section('content')\n\n    <h1>Categories</h1>\n\n    <div class=\"col-sm-6\">\n\n        {!! Form::open(['method'=>'POST', 'action'=>'AdminCategoriesController@store']) !!}\n\n            <div class=\"form-group\">\n                {!! Form::label('name', 'Name:') !!}\n                {!! Form::text('name', null, ['class'=>'form-control']) !!}\n            </div>\n\n            {{csrf_field()}}\n\n            <div class=\"form-group\">\n                {!! Form::submit('Create Category', ['class'=>'btn btn-primary']) !!}\n            </div>\n\n        {!! Form::close() !!}\n\n    </div>\n\n    <div class=\"col-sm-6\">\n\n        @if($categories)\n\n        <table class=\"table\">\n            <thead>\n            <tr>\n                <th>id</th>\n                <th>Name</th>\n                <th>Created date</th>\n            </tr>\n            </thead>\n            <tbody>\n\n            @foreach($categories as $category)\n            <tr>\n                <td>{{$category->id}}</td>\n                <td>{{$category->name}}</td>\n                <td>{{$category->created_at ? $category->created_at->diffForHumans() : 'No date'}}</td>\n            </tr>\n            @endforeach\n        </table>\n\n        @endif\n\n    </div>\n\n@stop\n```\n3. 在 AdminCategoriesController store function\n```\nCategory::create($request->all());\nreturn redirect('admin/categories');\n```\n#### 更新和刪除分類\n1. 修改 category edit view\n```\n@extends('layouts.admin');\n\n@section('content')\n\n    <h1>Categories</h1>\n\n    <div class=\"col-sm-6\">\n\n        {!! Form::model($category, ['method'=>'PATCH', 'action'=>['AdminCategoriesController@update', $category->id]]) !!}\n\n        <div class=\"form-group\">\n            {!! Form::label('name', 'Name:') !!}\n            {!! Form::text('name', null, ['class'=>'form-control']) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Update Category', ['class'=>'btn btn-primary']) !!}\n        </div>\n        {!! Form::close() !!}\n\n    </div>\n\n    <div class=\"col-sm-6\">\n\n    </div>\n\n@stop\n```\n2. 修改 AdminCategoriesController 的 edit function\n```\n$category = Category::findOrFail($id);\nreturn view('admin.categories', compact('category'));\n```\n3. 在 category edit view 新增 delete button\n```\n{!! Form::open(['method'=>'DELETE', 'action'=>['AdminCategoriesController@destroy', $category->id]]) !!}\n\n{{csrf_field()}}\n\n<div class=\"form-group\">\n    {!! Form::submit('Delete Category', ['class'=>'btn btn-danger col-sm-6']) !!}\n</div>\n\n{!! Form::close() !!}\n```\n4. 修改 AdminCategoriesController 的 destroy function\n```\nCategory::findOrFail($id)->delete();\nreturn redirect('/admin/categories');\n```\n5. 修改 AdminCategoriesController 的 update function\n```\n$category = Category::findOrFail($id);\n$category->update($request->all());\nreturn redirect('/admin/categories');\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day16.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day16\nthumbnail:\n  - /images/learning/laravel/laravelday16.jpg\ndate: 2017-05-26 12:23:31\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday16.jpg\">\n\n***\n### Application Post Part II\n#### 對貼文分類新增 model 和 migration\n1. 新增 model `php artisan make:model Category -m`\n2. 在 category 的 model 處理 mass assignment\n`protected $fillable = ['name'];`\n3. 在 create\\_categories_table 新增欄位 `$table->string('name');`\n4. 將欄位寫入資料庫 `php artisan migrate`\n#### 與貼文分類顯示或創建貼文\n1. 修改 posts 的 index view\n`<td>{{\" {{$post->category ? $post->category->name : 'Uncategorized'\" }}}}</td>`\n2. 修改 AdminPostsController 的 create function\n```\n$categories = Category::lists('name','id')->all();\nreturn view('admin.posts.create', compact('categories'));\n```\n3. 修改 Post create view\n```\n<div class=\"form-group\">\n    {!! Form::label('category_id', 'Category:') !!}\n    {!! Form::select('category_id', [''=>'Choose Categories'] + $categories, null, ['class'=>'form-control']) !!}\n</div>\n```\n#### 編輯貼文\n1. 修改 AdminPostsController 的 edit function\n```\n$post = Post::findOrFail($id);\n$categories = Category::lists('name', 'id')->all();\nreturn view('admin.posts.edit', compact('post', 'categories'));\n```\n2. 複製 create view 到 edit view 並修改 form\n`{!! Form::model($post, ['method'=>'PATCH', 'action'=>['AdminPostsController@update', $post->id], 'files'=>true]) !!}`\n3. 在 posts index view 的名字新增超連結\n`<td><a href=\"{{\" {{route('admin.posts.edit', $post->id)\" }}}}\">{{\" {{$post->user->name\" }}}}</a></td>`\n4. 修改 post edit view 的 category\n`{!! Form::select('category_id', $categories, null, ['class'=>'form-control']) !!}`\n5. 修改 AdminPostsController 的 update function\n```\n$input = $request->all();\n\nif($file = $request->file('photo_id')){\n\n    $name = time() . $file->getClientOriginalName();\n\n    $file->move('images', $name);\n\n    $photo = Photo::create(['file'=>$name]);\n\n    $input['photo_id'] = $photo->id;\n\n}\n\nAuth::user()->posts()->whereId($id)->first()->update($input);\n\nreturn redirect('/admin/posts');\n```\n6. 在 post index view 縮短字的長度 `{{\" {{str_limit($post->body, 30)\" }}}}`\n#### 刪除貼文\n1. 在 post edit view 新增 delete button\n```\n{!! Form::open(['method'=>'DELETE', 'action'=>['AdminPostsController@destroy', $post->id]]) !!}\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Delete Post', ['class'=>'btn btn-danger col-sm-6']) !!}\n    </div>\n\n{!! Form::close() !!}\n```\n2. 修改 AdminPostsController 的 destroy function\n```\n$post = Post::findOrfail($id);\n\nunlink(public_path() . $post->photo->file);\n\n$post->delete();\n\nreturn redirect('/admin/posts');\n```\n#### 刪除使用者時也刪除貼文\n1. 修改 create\\_posts_table\n`$table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');`\n2. 更新資料庫 `php artisan migrate:refresh`\n#### 在編輯貼文時顯示圖片\n1. 修改 post edit view\n```\n<div class=\"col-sm-3\">\n\n    <img src=\"{{$post->photo->file}}\" alt=\"\" class=\"img-responsive\">\n\n</div>\n```\n#### 設定分類\n1. 新增 Controller\n`php artisan make:controller --resource AdminCategoriesController`\n2. 新增 routes\n`Route::resource('admin/categories', 'AdminCategoriesController');`\n3. 新增 categories index view\n```\n@extends('layouts.admin');\n\n@section('content')\n\n    <h1>Categories</h1>\n\n@stop\n```\n4. 修改 layout.admin 的 routes\n```\n<li>\n    <a href=\"{{route('admin.categories.index')}}\">All Categories</a>\n</li>\n\n<li>\n    <a href=\"{{route('admin.categories.create')}}\">Create Category</a>\n</li>\n```\n#### 創建分類\n1. 修改 AdminCategoriesController 的 index\n```\n$categories = Category::all();\n\nreturn view('admin.categories.index', compact('categories'));\n```\n2. 修改 categories index view\n```\n@extends('layouts.admin');\n\n@section('content')\n\n    <h1>Categories</h1>\n\n    <div class=\"col-sm-6\">\n\n        {!! Form::open(['method'=>'POST', 'action'=>'AdminCategoriesController@store']) !!}\n\n            <div class=\"form-group\">\n                {!! Form::label('name', 'Name:') !!}\n                {!! Form::text('name', null, ['class'=>'form-control']) !!}\n            </div>\n\n            {{csrf_field()}}\n\n            <div class=\"form-group\">\n                {!! Form::submit('Create Category', ['class'=>'btn btn-primary']) !!}\n            </div>\n\n        {!! Form::close() !!}\n\n    </div>\n\n    <div class=\"col-sm-6\">\n\n        @if($categories)\n\n        <table class=\"table\">\n            <thead>\n            <tr>\n                <th>id</th>\n                <th>Name</th>\n                <th>Created date</th>\n            </tr>\n            </thead>\n            <tbody>\n\n            @foreach($categories as $category)\n            <tr>\n                <td>{{$category->id}}</td>\n                <td>{{$category->name}}</td>\n                <td>{{$category->created_at ? $category->created_at->diffForHumans() : 'No date'}}</td>\n            </tr>\n            @endforeach\n        </table>\n\n        @endif\n\n    </div>\n\n@stop\n```\n3. 在 AdminCategoriesController store function\n```\nCategory::create($request->all());\nreturn redirect('admin/categories');\n```\n#### 更新和刪除分類\n1. 修改 category edit view\n```\n@extends('layouts.admin');\n\n@section('content')\n\n    <h1>Categories</h1>\n\n    <div class=\"col-sm-6\">\n\n        {!! Form::model($category, ['method'=>'PATCH', 'action'=>['AdminCategoriesController@update', $category->id]]) !!}\n\n        <div class=\"form-group\">\n            {!! Form::label('name', 'Name:') !!}\n            {!! Form::text('name', null, ['class'=>'form-control']) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Update Category', ['class'=>'btn btn-primary']) !!}\n        </div>\n        {!! Form::close() !!}\n\n    </div>\n\n    <div class=\"col-sm-6\">\n\n    </div>\n\n@stop\n```\n2. 修改 AdminCategoriesController 的 edit function\n```\n$category = Category::findOrFail($id);\nreturn view('admin.categories', compact('category'));\n```\n3. 在 category edit view 新增 delete button\n```\n{!! Form::open(['method'=>'DELETE', 'action'=>['AdminCategoriesController@destroy', $category->id]]) !!}\n\n{{csrf_field()}}\n\n<div class=\"form-group\">\n    {!! Form::submit('Delete Category', ['class'=>'btn btn-danger col-sm-6']) !!}\n</div>\n\n{!! Form::close() !!}\n```\n4. 修改 AdminCategoriesController 的 destroy function\n```\nCategory::findOrFail($id)->delete();\nreturn redirect('/admin/categories');\n```\n5. 修改 AdminCategoriesController 的 update function\n```\n$category = Category::findOrFail($id);\n$category->update($request->all());\nreturn redirect('/admin/categories');\n```","slug":"Lavarel-快速學習自我挑戰-Day16","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwr001n7ifa6c010al1","content":"<img src=\"/images/learning/laravel/laravelday16.jpg\">\n<hr>\n<h3>Application Post Part II</h3>\n<h4>對貼文分類新增 model 和 migration</h4>\n<ol>\n<li>新增 model <code>php artisan make:model Category -m</code></li>\n<li>在 category 的 model 處理 mass assignment<br>\n<code>protected $fillable = ['name'];</code></li>\n<li>在 create_categories_table 新增欄位 <code>$table-&gt;string('name');</code></li>\n<li>將欄位寫入資料庫 <code>php artisan migrate</code></li>\n</ol>\n<h4>與貼文分類顯示或創建貼文</h4>\n<ol>\n<li>修改 posts 的 index view<br>\n<code>&lt;td&gt; {{$post->category ? $post->category->name : 'Uncategorized'}}&lt;/td&gt;</code></li>\n<li>修改 AdminPostsController 的 create function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$categories = Category::lists(&apos;name&apos;,&apos;id&apos;)-&gt;all();</div><div class=\"line\">return view(&apos;admin.posts.create&apos;, compact(&apos;categories&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 Post create view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::label(&apos;category_id&apos;, &apos;Category:&apos;) !!&#125;</div><div class=\"line\">    &#123;!! Form::select(&apos;category_id&apos;, [&apos;&apos;=&gt;&apos;Choose Categories&apos;] + $categories, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>編輯貼文</h4>\n<ol>\n<li>修改 AdminPostsController 的 edit function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post = Post::findOrFail($id);</div><div class=\"line\">$categories = Category::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all();</div><div class=\"line\">return view(&apos;admin.posts.edit&apos;, compact(&apos;post&apos;, &apos;categories&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>複製 create view 到 edit view 並修改 form<br>\n<code>{!! Form::model($post, ['method'=&gt;'PATCH', 'action'=&gt;['AdminPostsController@update', $post-&gt;id], 'files'=&gt;true]) !!}</code></li>\n<li>在 posts index view 的名字新增超連結<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('admin.posts.edit', $post->id)}}&quot;&gt; {{$post->user->name}}&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>修改 post edit view 的 category<br>\n<code>{!! Form::select('category_id', $categories, null, ['class'=&gt;'form-control']) !!}</code></li>\n<li>修改 AdminPostsController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">if($file = $request-&gt;file(&apos;photo_id&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\"></div><div class=\"line\">    $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Auth::user()-&gt;posts()-&gt;whereId($id)-&gt;first()-&gt;update($input);</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/posts&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 post index view 縮短字的長度 <code> {{str_limit($post->body, 30)}}</code></li>\n</ol>\n<h4>刪除貼文</h4>\n<ol>\n<li>在 post edit view 新增 delete button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminPostsController@destroy&apos;, $post-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger col-sm-6&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminPostsController 的 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post = Post::findOrfail($id);</div><div class=\"line\"></div><div class=\"line\">unlink(public_path() . $post-&gt;photo-&gt;file);</div><div class=\"line\"></div><div class=\"line\">$post-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/posts&apos;);</div></pre></td></tr></table></figure>\n<h4>刪除使用者時也刪除貼文</h4>\n<ol>\n<li>修改 create_posts_table<br>\n<code>$table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade');</code></li>\n<li>更新資料庫 <code>php artisan migrate:refresh</code></li>\n</ol>\n<h4>在編輯貼文時顯示圖片</h4>\n<ol>\n<li>修改 post edit view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;col-sm-3&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;img src=&quot;&#123;&#123;$post-&gt;photo-&gt;file&#125;&#125;&quot; alt=&quot;&quot; class=&quot;img-responsive&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>設定分類</h4>\n<ol>\n<li>新增 Controller<br>\n<code>php artisan make:controller --resource AdminCategoriesController</code></li>\n<li>新增 routes<br>\n<code>Route::resource('admin/categories', 'AdminCategoriesController');</code></li>\n<li>新增 categories index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;);</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Categories&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 layout.admin 的 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.categories.index&apos;)&#125;&#125;&quot;&gt;All Categories&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.categories.create&apos;)&#125;&#125;&quot;&gt;Create Category&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n<h4>創建分類</h4>\n<ol>\n<li>修改 AdminCategoriesController 的 index</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$categories = Category::all();</div><div class=\"line\"></div><div class=\"line\">return view(&apos;admin.categories.index&apos;, compact(&apos;categories&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 categories index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;);</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Categories&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminCategoriesController@store&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">                &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                &#123;!! Form::submit(&apos;Create Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        @if($categories)</div><div class=\"line\"></div><div class=\"line\">        &lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">            &lt;thead&gt;</div><div class=\"line\">            &lt;tr&gt;</div><div class=\"line\">                &lt;th&gt;id&lt;/th&gt;</div><div class=\"line\">                &lt;th&gt;Name&lt;/th&gt;</div><div class=\"line\">                &lt;th&gt;Created date&lt;/th&gt;</div><div class=\"line\">            &lt;/tr&gt;</div><div class=\"line\">            &lt;/thead&gt;</div><div class=\"line\">            &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">            @foreach($categories as $category)</div><div class=\"line\">            &lt;tr&gt;</div><div class=\"line\">                &lt;td&gt;&#123;&#123;$category-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;td&gt;&#123;&#123;$category-&gt;name&#125;&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;td&gt;&#123;&#123;$category-&gt;created_at ? $category-&gt;created_at-&gt;diffForHumans() : &apos;No date&apos;&#125;&#125;&lt;/td&gt;</div><div class=\"line\">            &lt;/tr&gt;</div><div class=\"line\">            @endforeach</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\"></div><div class=\"line\">        @endif</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 AdminCategoriesController store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Category::create($request-&gt;all());</div><div class=\"line\">return redirect(&apos;admin/categories&apos;);</div></pre></td></tr></table></figure>\n<h4>更新和刪除分類</h4>\n<ol>\n<li>修改 category edit view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;);</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Categories&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::model($category, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;AdminCategoriesController@update&apos;, $category-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Update Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminCategoriesController 的 edit function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$category = Category::findOrFail($id);</div><div class=\"line\">return view(&apos;admin.categories&apos;, compact(&apos;category&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 category edit view 新增 delete button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminCategoriesController@destroy&apos;, $category-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::submit(&apos;Delete Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger col-sm-6&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 AdminCategoriesController 的 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Category::findOrFail($id)-&gt;delete();</div><div class=\"line\">return redirect(&apos;/admin/categories&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 AdminCategoriesController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$category = Category::findOrFail($id);</div><div class=\"line\">$category-&gt;update($request-&gt;all());</div><div class=\"line\">return redirect(&apos;/admin/categories&apos;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday16.jpg\">\n<hr>\n<h3>Application Post Part II</h3>\n<h4>對貼文分類新增 model 和 migration</h4>\n<ol>\n<li>新增 model <code>php artisan make:model Category -m</code></li>\n<li>在 category 的 model 處理 mass assignment<br>\n<code>protected $fillable = ['name'];</code></li>\n<li>在 create_categories_table 新增欄位 <code>$table-&gt;string('name');</code></li>\n<li>將欄位寫入資料庫 <code>php artisan migrate</code></li>\n</ol>\n<h4>與貼文分類顯示或創建貼文</h4>\n<ol>\n<li>修改 posts 的 index view<br>\n<code>&lt;td&gt; {{$post->category ? $post->category->name : 'Uncategorized'}}&lt;/td&gt;</code></li>\n<li>修改 AdminPostsController 的 create function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$categories = Category::lists(&apos;name&apos;,&apos;id&apos;)-&gt;all();</div><div class=\"line\">return view(&apos;admin.posts.create&apos;, compact(&apos;categories&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 Post create view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::label(&apos;category_id&apos;, &apos;Category:&apos;) !!&#125;</div><div class=\"line\">    &#123;!! Form::select(&apos;category_id&apos;, [&apos;&apos;=&gt;&apos;Choose Categories&apos;] + $categories, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>編輯貼文</h4>\n<ol>\n<li>修改 AdminPostsController 的 edit function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post = Post::findOrFail($id);</div><div class=\"line\">$categories = Category::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all();</div><div class=\"line\">return view(&apos;admin.posts.edit&apos;, compact(&apos;post&apos;, &apos;categories&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>複製 create view 到 edit view 並修改 form<br>\n<code>{!! Form::model($post, ['method'=&gt;'PATCH', 'action'=&gt;['AdminPostsController@update', $post-&gt;id], 'files'=&gt;true]) !!}</code></li>\n<li>在 posts index view 的名字新增超連結<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('admin.posts.edit', $post->id)}}&quot;&gt; {{$post->user->name}}&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>修改 post edit view 的 category<br>\n<code>{!! Form::select('category_id', $categories, null, ['class'=&gt;'form-control']) !!}</code></li>\n<li>修改 AdminPostsController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$input = $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">if($file = $request-&gt;file(&apos;photo_id&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\"></div><div class=\"line\">    $input[&apos;photo_id&apos;] = $photo-&gt;id;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Auth::user()-&gt;posts()-&gt;whereId($id)-&gt;first()-&gt;update($input);</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/posts&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 post index view 縮短字的長度 <code> {{str_limit($post->body, 30)}}</code></li>\n</ol>\n<h4>刪除貼文</h4>\n<ol>\n<li>在 post edit view 新增 delete button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminPostsController@destroy&apos;, $post-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger col-sm-6&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminPostsController 的 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post = Post::findOrfail($id);</div><div class=\"line\"></div><div class=\"line\">unlink(public_path() . $post-&gt;photo-&gt;file);</div><div class=\"line\"></div><div class=\"line\">$post-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/posts&apos;);</div></pre></td></tr></table></figure>\n<h4>刪除使用者時也刪除貼文</h4>\n<ol>\n<li>修改 create_posts_table<br>\n<code>$table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade');</code></li>\n<li>更新資料庫 <code>php artisan migrate:refresh</code></li>\n</ol>\n<h4>在編輯貼文時顯示圖片</h4>\n<ol>\n<li>修改 post edit view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;col-sm-3&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;img src=&quot;&#123;&#123;$post-&gt;photo-&gt;file&#125;&#125;&quot; alt=&quot;&quot; class=&quot;img-responsive&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>設定分類</h4>\n<ol>\n<li>新增 Controller<br>\n<code>php artisan make:controller --resource AdminCategoriesController</code></li>\n<li>新增 routes<br>\n<code>Route::resource('admin/categories', 'AdminCategoriesController');</code></li>\n<li>新增 categories index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;);</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Categories&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 layout.admin 的 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.categories.index&apos;)&#125;&#125;&quot;&gt;All Categories&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.categories.create&apos;)&#125;&#125;&quot;&gt;Create Category&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n<h4>創建分類</h4>\n<ol>\n<li>修改 AdminCategoriesController 的 index</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$categories = Category::all();</div><div class=\"line\"></div><div class=\"line\">return view(&apos;admin.categories.index&apos;, compact(&apos;categories&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 categories index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;);</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Categories&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminCategoriesController@store&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">                &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                &#123;!! Form::submit(&apos;Create Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        @if($categories)</div><div class=\"line\"></div><div class=\"line\">        &lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">            &lt;thead&gt;</div><div class=\"line\">            &lt;tr&gt;</div><div class=\"line\">                &lt;th&gt;id&lt;/th&gt;</div><div class=\"line\">                &lt;th&gt;Name&lt;/th&gt;</div><div class=\"line\">                &lt;th&gt;Created date&lt;/th&gt;</div><div class=\"line\">            &lt;/tr&gt;</div><div class=\"line\">            &lt;/thead&gt;</div><div class=\"line\">            &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">            @foreach($categories as $category)</div><div class=\"line\">            &lt;tr&gt;</div><div class=\"line\">                &lt;td&gt;&#123;&#123;$category-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;td&gt;&#123;&#123;$category-&gt;name&#125;&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;td&gt;&#123;&#123;$category-&gt;created_at ? $category-&gt;created_at-&gt;diffForHumans() : &apos;No date&apos;&#125;&#125;&lt;/td&gt;</div><div class=\"line\">            &lt;/tr&gt;</div><div class=\"line\">            @endforeach</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\"></div><div class=\"line\">        @endif</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 AdminCategoriesController store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Category::create($request-&gt;all());</div><div class=\"line\">return redirect(&apos;admin/categories&apos;);</div></pre></td></tr></table></figure>\n<h4>更新和刪除分類</h4>\n<ol>\n<li>修改 category edit view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;);</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Categories&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::model($category, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;AdminCategoriesController@update&apos;, $category-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Update Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;col-sm-6&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminCategoriesController 的 edit function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$category = Category::findOrFail($id);</div><div class=\"line\">return view(&apos;admin.categories&apos;, compact(&apos;category&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 category edit view 新增 delete button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminCategoriesController@destroy&apos;, $category-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &#123;!! Form::submit(&apos;Delete Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger col-sm-6&apos;]) !!&#125;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 AdminCategoriesController 的 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Category::findOrFail($id)-&gt;delete();</div><div class=\"line\">return redirect(&apos;/admin/categories&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 AdminCategoriesController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$category = Category::findOrFail($id);</div><div class=\"line\">$category-&gt;update($request-&gt;all());</div><div class=\"line\">return redirect(&apos;/admin/categories&apos;);</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day17","thumbnail":["/images/learning/laravel/laravelday17.png"],"date":"2017-05-26T17:21:27.000Z","_content":"<img src=\"/images/learning/laravel/laravelday17.png\">\n\n***\n### Application Media\n#### 設定和顯示\n1. 新增 view views/media/index.blade.php\n2. 設定 media index view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Media</h1>\n\n    @if($photos)\n\n    <table class=\"table\">\n        <thead>\n        <tr>\n            <th>id</th>\n            <th>Name</th>\n            <th>Created</th>\n            <th>Email</th>\n        </tr>\n        </thead>\n        <tbody>\n\n        @foreach($photos as $photo)\n\n        <tr>\n            <td>{{$photo->id}}</td>\n            <td>{{$photo->file}}</td>\n            <td>{{$photo->created_at ? $photo->created_at : 'no date'}}</td>\n        </tr>\n\n        @endforeach\n        </tbody>\n    </table>\n\n    @endif\n\n@stop\n```\n3. 新增 media controller `php artisan make:control AdminMediasController`\n4. 新增 routes `Route::resource('admin/media', 'AdminMediasController');`\n5. 修改 layout admin\n```\n<li>\n    <a href=\"{{route('admin.media.index')}}\">All Media</a>\n</li>\n\n<li>\n    <a href=\"{{route('admin.media.upload')}}\">Upload Media</a>\n</li>\n```\n6. 在 AdminMediasController 新增 index function\n```\npublic function index(){\n        \n    $photos = Photo::all();\n    \n    return view('admin.media.index', compact('photos'));\n    \n}\n```\n7. 修改 routes\n`Route::get('admin/media/upload', ['as'=>'admin.media.upload', 'uses'=>'AdminMediasController@store']);`\n#### 設定 view\n1. 刪除 routes (因為這個是為了不讓錯誤顯示)\n`Route::get('admin/media/upload', ['as'=>'admin.media.upload', 'uses'=>'AdminMediasController@store']);`\n2. 修改 layouts admin view\n`<a href=\"{{\" {{route('admin.media.create')\" }}}}\">Upload Media</a>`\n3. 在 AdminMediasController 新增 create function\n```\npublic function create(){\n\n    return view('admin.media.create');\n\n}\n```\n4. 新增 media create view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Upload Media</h1>\n\n@stop\n\n```\n#### 新增上傳外掛\n1. [Dropzone 上傳外掛](http://www.dropzonejs.com/#installation)\n2. 在 media create view 新增 script section\n```\n@section('scripts')\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.js\"></script>\n\n@stop\n```\n3. 在 media create view 新增 style section\n```\n@section('styles')\n\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.css\">\n    \n@stop\n```\n4. 在 layouts admin view 新增 yield 才能使用 section `@yield('styles')` `@yield('scripts')`\n5. 新增上傳區塊\n```\n{!! Form::open(['method'=>'POST', 'action'=>'AdminMediasController@store', 'class'=>'dropzone']) !!}\n    \n    {{csrf_field()}}\n\n{!! Form::close() !!}\n```\n#### 上傳檔案\n1. 在 AdminMediasController 新增 store function\n```\npublic function store(Request $request){\n\n    $file = $request->file('file');\n\n    $name = time() . $file->getClientOriginalName();\n\n    $file->move('images', $name);\n\n    Photo::create(['file'=>$name]);\n\n    return $name;\n\n}\n```\n#### 刪除圖片\n1. 在 media index view 新增  delete button\n```\n<td>\n    {!! Form::open(['method'=>'DELETE', 'action'=>['AdminMediasController@destroy', $photo->id]]) !!}\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Delete Post', ['class'=>'btn btn-danger']) !!}\n        </div>\n    {!! Form::close() !!}\n</td>\n```\n2. 在 AdminMediaController 新增 destroy function\n```\npublic function destroy($id){\n\n    $photo = Photo::findOrFail($id);\n\n    unlink(public_path() . $photo->file);\n\n    $photo->delete();\n\n    return redirect('/admin/media');\n\n}\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day17.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day17\nthumbnail:\n  - /images/learning/laravel/laravelday17.png\ndate: 2017-05-27 01:21:27\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday17.png\">\n\n***\n### Application Media\n#### 設定和顯示\n1. 新增 view views/media/index.blade.php\n2. 設定 media index view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Media</h1>\n\n    @if($photos)\n\n    <table class=\"table\">\n        <thead>\n        <tr>\n            <th>id</th>\n            <th>Name</th>\n            <th>Created</th>\n            <th>Email</th>\n        </tr>\n        </thead>\n        <tbody>\n\n        @foreach($photos as $photo)\n\n        <tr>\n            <td>{{$photo->id}}</td>\n            <td>{{$photo->file}}</td>\n            <td>{{$photo->created_at ? $photo->created_at : 'no date'}}</td>\n        </tr>\n\n        @endforeach\n        </tbody>\n    </table>\n\n    @endif\n\n@stop\n```\n3. 新增 media controller `php artisan make:control AdminMediasController`\n4. 新增 routes `Route::resource('admin/media', 'AdminMediasController');`\n5. 修改 layout admin\n```\n<li>\n    <a href=\"{{route('admin.media.index')}}\">All Media</a>\n</li>\n\n<li>\n    <a href=\"{{route('admin.media.upload')}}\">Upload Media</a>\n</li>\n```\n6. 在 AdminMediasController 新增 index function\n```\npublic function index(){\n        \n    $photos = Photo::all();\n    \n    return view('admin.media.index', compact('photos'));\n    \n}\n```\n7. 修改 routes\n`Route::get('admin/media/upload', ['as'=>'admin.media.upload', 'uses'=>'AdminMediasController@store']);`\n#### 設定 view\n1. 刪除 routes (因為這個是為了不讓錯誤顯示)\n`Route::get('admin/media/upload', ['as'=>'admin.media.upload', 'uses'=>'AdminMediasController@store']);`\n2. 修改 layouts admin view\n`<a href=\"{{\" {{route('admin.media.create')\" }}}}\">Upload Media</a>`\n3. 在 AdminMediasController 新增 create function\n```\npublic function create(){\n\n    return view('admin.media.create');\n\n}\n```\n4. 新增 media create view\n```\n@extends('layouts.admin')\n\n@section('content')\n\n    <h1>Upload Media</h1>\n\n@stop\n\n```\n#### 新增上傳外掛\n1. [Dropzone 上傳外掛](http://www.dropzonejs.com/#installation)\n2. 在 media create view 新增 script section\n```\n@section('scripts')\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.js\"></script>\n\n@stop\n```\n3. 在 media create view 新增 style section\n```\n@section('styles')\n\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.css\">\n    \n@stop\n```\n4. 在 layouts admin view 新增 yield 才能使用 section `@yield('styles')` `@yield('scripts')`\n5. 新增上傳區塊\n```\n{!! Form::open(['method'=>'POST', 'action'=>'AdminMediasController@store', 'class'=>'dropzone']) !!}\n    \n    {{csrf_field()}}\n\n{!! Form::close() !!}\n```\n#### 上傳檔案\n1. 在 AdminMediasController 新增 store function\n```\npublic function store(Request $request){\n\n    $file = $request->file('file');\n\n    $name = time() . $file->getClientOriginalName();\n\n    $file->move('images', $name);\n\n    Photo::create(['file'=>$name]);\n\n    return $name;\n\n}\n```\n#### 刪除圖片\n1. 在 media index view 新增  delete button\n```\n<td>\n    {!! Form::open(['method'=>'DELETE', 'action'=>['AdminMediasController@destroy', $photo->id]]) !!}\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Delete Post', ['class'=>'btn btn-danger']) !!}\n        </div>\n    {!! Form::close() !!}\n</td>\n```\n2. 在 AdminMediaController 新增 destroy function\n```\npublic function destroy($id){\n\n    $photo = Photo::findOrFail($id);\n\n    unlink(public_path() . $photo->file);\n\n    $photo->delete();\n\n    return redirect('/admin/media');\n\n}\n```","slug":"Lavarel-快速學習自我挑戰-Day17","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwws001p7ifajilpxpb4","content":"<img src=\"/images/learning/laravel/laravelday17.png\">\n<hr>\n<h3>Application Media</h3>\n<h4>設定和顯示</h4>\n<ol>\n<li>新增 view views/media/index.blade.php</li>\n<li>設定 media index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Media&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    @if($photos)</div><div class=\"line\"></div><div class=\"line\">    &lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">        &lt;thead&gt;</div><div class=\"line\">        &lt;tr&gt;</div><div class=\"line\">            &lt;th&gt;id&lt;/th&gt;</div><div class=\"line\">            &lt;th&gt;Name&lt;/th&gt;</div><div class=\"line\">            &lt;th&gt;Created&lt;/th&gt;</div><div class=\"line\">            &lt;th&gt;Email&lt;/th&gt;</div><div class=\"line\">        &lt;/tr&gt;</div><div class=\"line\">        &lt;/thead&gt;</div><div class=\"line\">        &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">        @foreach($photos as $photo)</div><div class=\"line\"></div><div class=\"line\">        &lt;tr&gt;</div><div class=\"line\">            &lt;td&gt;&#123;&#123;$photo-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">            &lt;td&gt;&#123;&#123;$photo-&gt;file&#125;&#125;&lt;/td&gt;</div><div class=\"line\">            &lt;td&gt;&#123;&#123;$photo-&gt;created_at ? $photo-&gt;created_at : &apos;no date&apos;&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">        @endforeach</div><div class=\"line\">        &lt;/tbody&gt;</div><div class=\"line\">    &lt;/table&gt;</div><div class=\"line\"></div><div class=\"line\">    @endif</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 media controller <code>php artisan make:control AdminMediasController</code></li>\n<li>新增 routes <code>Route::resource('admin/media', 'AdminMediasController');</code></li>\n<li>修改 layout admin</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.media.index&apos;)&#125;&#125;&quot;&gt;All Media&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.media.upload&apos;)&#125;&#125;&quot;&gt;Upload Media&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 AdminMediasController 新增 index function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()&#123;</div><div class=\"line\">        </div><div class=\"line\">    $photos = Photo::all();</div><div class=\"line\">    </div><div class=\"line\">    return view(&apos;admin.media.index&apos;, compact(&apos;photos&apos;));</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>修改 routes<br>\n<code>Route::get('admin/media/upload', ['as'=&gt;'admin.media.upload', 'uses'=&gt;'AdminMediasController@store']);</code></li>\n</ol>\n<h4>設定 view</h4>\n<ol>\n<li>刪除 routes (因為這個是為了不讓錯誤顯示)<br>\n<code>Route::get('admin/media/upload', ['as'=&gt;'admin.media.upload', 'uses'=&gt;'AdminMediasController@store']);</code></li>\n<li>修改 layouts admin view<br>\n<code>&lt;a href=&quot; {{route('admin.media.create')}}&quot;&gt;Upload Media&lt;/a&gt;</code></li>\n<li>在 AdminMediasController 新增 create function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function create()&#123;</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;admin.media.create&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 media create view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Upload Media&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>新增上傳外掛</h4>\n<ol>\n<li><a href=\"http://www.dropzonejs.com/#installation\" target=\"_blank\" rel=\"external\">Dropzone 上傳外掛</a></li>\n<li>在 media create view 新增 script section</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;scripts&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 media create view 新增 style section</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;styles&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.css&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 layouts admin view 新增 yield 才能使用 section <code>@yield('styles')</code> <code>@yield('scripts')</code></li>\n<li>新增上傳區塊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminMediasController@store&apos;, &apos;class&apos;=&gt;&apos;dropzone&apos;]) !!&#125;</div><div class=\"line\">    </div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<h4>上傳檔案</h4>\n<ol>\n<li>在 AdminMediasController 新增 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(Request $request)&#123;</div><div class=\"line\"></div><div class=\"line\">    $file = $request-&gt;file(&apos;file&apos;);</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">    Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\"></div><div class=\"line\">    return $name;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>刪除圖片</h4>\n<ol>\n<li>在 media index view 新增  delete button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td&gt;</div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminMediasController@destroy&apos;, $photo-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\">&lt;/td&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 AdminMediaController 新增 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    unlink(public_path() . $photo-&gt;file);</div><div class=\"line\"></div><div class=\"line\">    $photo-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/media&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday17.png\">\n<hr>\n<h3>Application Media</h3>\n<h4>設定和顯示</h4>\n<ol>\n<li>新增 view views/media/index.blade.php</li>\n<li>設定 media index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Media&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    @if($photos)</div><div class=\"line\"></div><div class=\"line\">    &lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">        &lt;thead&gt;</div><div class=\"line\">        &lt;tr&gt;</div><div class=\"line\">            &lt;th&gt;id&lt;/th&gt;</div><div class=\"line\">            &lt;th&gt;Name&lt;/th&gt;</div><div class=\"line\">            &lt;th&gt;Created&lt;/th&gt;</div><div class=\"line\">            &lt;th&gt;Email&lt;/th&gt;</div><div class=\"line\">        &lt;/tr&gt;</div><div class=\"line\">        &lt;/thead&gt;</div><div class=\"line\">        &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">        @foreach($photos as $photo)</div><div class=\"line\"></div><div class=\"line\">        &lt;tr&gt;</div><div class=\"line\">            &lt;td&gt;&#123;&#123;$photo-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">            &lt;td&gt;&#123;&#123;$photo-&gt;file&#125;&#125;&lt;/td&gt;</div><div class=\"line\">            &lt;td&gt;&#123;&#123;$photo-&gt;created_at ? $photo-&gt;created_at : &apos;no date&apos;&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">        @endforeach</div><div class=\"line\">        &lt;/tbody&gt;</div><div class=\"line\">    &lt;/table&gt;</div><div class=\"line\"></div><div class=\"line\">    @endif</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 media controller <code>php artisan make:control AdminMediasController</code></li>\n<li>新增 routes <code>Route::resource('admin/media', 'AdminMediasController');</code></li>\n<li>修改 layout admin</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.media.index&apos;)&#125;&#125;&quot;&gt;All Media&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;li&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123;route(&apos;admin.media.upload&apos;)&#125;&#125;&quot;&gt;Upload Media&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 AdminMediasController 新增 index function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index()&#123;</div><div class=\"line\">        </div><div class=\"line\">    $photos = Photo::all();</div><div class=\"line\">    </div><div class=\"line\">    return view(&apos;admin.media.index&apos;, compact(&apos;photos&apos;));</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>修改 routes<br>\n<code>Route::get('admin/media/upload', ['as'=&gt;'admin.media.upload', 'uses'=&gt;'AdminMediasController@store']);</code></li>\n</ol>\n<h4>設定 view</h4>\n<ol>\n<li>刪除 routes (因為這個是為了不讓錯誤顯示)<br>\n<code>Route::get('admin/media/upload', ['as'=&gt;'admin.media.upload', 'uses'=&gt;'AdminMediasController@store']);</code></li>\n<li>修改 layouts admin view<br>\n<code>&lt;a href=&quot; {{route('admin.media.create')}}&quot;&gt;Upload Media&lt;/a&gt;</code></li>\n<li>在 AdminMediasController 新增 create function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function create()&#123;</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;admin.media.create&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 media create view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.admin&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Upload Media&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>新增上傳外掛</h4>\n<ol>\n<li><a href=\"http://www.dropzonejs.com/#installation\" target=\"_blank\" rel=\"external\">Dropzone 上傳外掛</a></li>\n<li>在 media create view 新增 script section</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;scripts&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 media create view 新增 style section</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;styles&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.css&quot;&gt;</div><div class=\"line\">    </div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 layouts admin view 新增 yield 才能使用 section <code>@yield('styles')</code> <code>@yield('scripts')</code></li>\n<li>新增上傳區塊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminMediasController@store&apos;, &apos;class&apos;=&gt;&apos;dropzone&apos;]) !!&#125;</div><div class=\"line\">    </div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<h4>上傳檔案</h4>\n<ol>\n<li>在 AdminMediasController 新增 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(Request $request)&#123;</div><div class=\"line\"></div><div class=\"line\">    $file = $request-&gt;file(&apos;file&apos;);</div><div class=\"line\"></div><div class=\"line\">    $name = time() . $file-&gt;getClientOriginalName();</div><div class=\"line\"></div><div class=\"line\">    $file-&gt;move(&apos;images&apos;, $name);</div><div class=\"line\"></div><div class=\"line\">    Photo::create([&apos;file&apos;=&gt;$name]);</div><div class=\"line\"></div><div class=\"line\">    return $name;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>刪除圖片</h4>\n<ol>\n<li>在 media index view 新增  delete button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td&gt;</div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminMediasController@destroy&apos;, $photo-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\">&lt;/td&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 AdminMediaController 新增 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    unlink(public_path() . $photo-&gt;file);</div><div class=\"line\"></div><div class=\"line\">    $photo-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    return redirect(&apos;/admin/media&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day18","thumbnail":["/images/learning/laravel/laravelday18.png"],"date":"2017-05-28T08:02:04.000Z","_content":"<img src=\"/images/learning/laravel/laravelday18.png\">\n\n***\n### Application 留言功能 Part I\n#### 設定環境\n1. 新增 views/admin/comments/index.blade.php 和 views/admin/comments/replies/index.blade.php\n2. 新增 routes\n```\nRoute::resource('admin/comments', 'PostCommentsController');\nRoute::resource('admin/comments/replies', 'CommentRepliesController');\n```\n3. 新增 model\n`php artisan make:model Comment -m`\n`php artisan make:model CommentReply -m`\n4. 新增欄位到 create\\_comments_table\n```\nSchema::create('comments', function (Blueprint $table) {\n    $table->increments('id');\n    $table->integer('post_id')->unsigned()->index();\n    $table->integer('is_active')->default(0);\n    $table->string('author');\n    $table->string('photo');\n    $table->string('email');\n    $table->text('body');\n    $table->timestamps();\n\n\n    $table->foreign('post_id')->references('id')->on('posts')->onDelete('cascade');\n\n});\n```\n5. 新增欄位到 create\\_comment\\_replies_table\n```\nSchema::create('comment_replies', function (Blueprint $table) {\n    $table->increments('id');\n    $table->integer('comment_id')->unsigned()->index();\n    $table->integer('is_active')->default(0);\n    $table->string('author');\n    $table->string('photo');\n    $table->string('email');\n    $table->text('body');\n    $table->timestamps();\n\n\n    $table->foreign('comment_id')->references('id')->on('comments')->onDelete('cascade');\n});\n```\n6. 匯入資料庫 `php artisan migrate`\n#### Relationship & Mass Assignment\n1. 在 Post model 新增\n```\npublic function comments(){\n        \n    return $this->hasMany('App\\Post');\n    \n}\n```\n2. 在 Comment model 新增\n```\nprotected $fillable = [\n\n    'post_id',\n    'author',\n    'email',\n    'body',\n    'is_active'\n\n];\n\npublic function replies(){\n\n    return $this->hasMany('App\\CommentReply');\n\n}\n```\n3. 在 CommentReply 新增\n```\nprotected $fillable = [\n\n    'comment_id',\n    'author',\n    'email',\n    'body',\n    'is_active'\n\n];\n\npublic function comment(){\n\n    return $this->belongsTo('App\\Comment');\n\n}\n```\n4. 新增 Controller\n`php artisan make:controller --resource PostCommentsController`\n`php artisan make:controller --resource CommentRepliesController`\n#### 設定 views\n1. 新增 layouts/blog-home.blade.php 和 layouts/blog-post.blade.php view\n2. 新增 layouts/blog.blade.php\n#### 創建貼文\n1. 將 admin route 移到 group 裡面\n2. 新增 routes \n`Route::get('/post/{id}', ['as'=>'home.post', 'uses'=>'AdminPostsController@post']);`\n3. 新增 post function 到 AdminPostsController\n```\npublic function post($id){\n\n    $post = Post::findOrFail($id);\n\n    return view('post', compact('post'));\n\n}\n```\n4. 將 view 的 tilte 改為動態產生 `{{\" {{$post->title\" }}}}`\n5. 修改作者、時間、圖片、內文\n    - `{{\" {{$post->user->name\" }}}}`\n    - `{{\" {{$post->created_at->diffForHumans()\" }}}}`\n    - `{{\" {{$post->photo->file\" }}}}`\n    - `{{\" {{$post->body\" }}}}`\n#### 創建留言\n1. 把 post view 的留言區改為 open form\n```\n<div class=\"well\">\n    <h4>Leave a Comment:</h4>\n\n    {!! Form::open(['method'=>'POST', 'action'=>'PostCommentsController@store']) !!}\n\n    <input type=\"hidden\" name=\"post_id\" value=\"{{$post->id}}\">\n\n        <div class=\"form-group\">\n            {!! Form::label('body', 'Body:') !!}\n            {!! Form::textarea('body', null, ['class'=>'form-control', 'rows'=>3]) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Submit comment', ['class'=>'btn btn-primary']) !!}\n        </div>\n\n    {!! Form::close() !!}\n\n</div>\n```\n2. 修改 PostCommentsController 的 store function\n```\npublic function store(Request $request)\n    {\n    $user = Auth::user();\n\n    $data = [\n\n        'post_id' => $request->post_id,\n        'author' => $user->name,\n        'email' => $user->email,\n        'photo' => $user->photo->file,\n        'body' => $request->body\n\n    ];\n\n    Comment::create($data);\n\n    $request->session()->flash('comment message', 'Your message has been submitted and is waiting moderation');\n\n    return redirect()->back();\n\n}\n```\n3. 顯示訊息，修改 post view\n```\n@if(Session::has('comment message'))\n\n    {{session('comment message')}}\n\n@endif\n```\n#### 顯示貼文\n1. 修改 PostCommentsController 的 index function\n```\n$comments = Comment::all();\nreturn view('admin.comments.index', compact('comments'));\n```\n2. 修改 Comment model\n```\npublic function post(){\n\n    return $this->belongsTo('App\\Post');\n\n}\n```\n3. 修改  comments/index view\n```\n@if(count($comments) > 0)\n\n<h1>Comments</h1>\n\n<table class=\"table\">\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>Author</th>\n        <th>Email</th>\n        <th>Body</th>\n    </tr>\n    </thead>\n    <tbody>\n\n    @foreach($comments as $comment)\n\n    <tr>\n        <td>{{$comment->id}}</td>\n        <td>{{$comment->author}}</td>\n        <td>{{$comment->email}}</td>\n        <td>{{$comment->body}}</td>\n        <td><a href=\"{{route('home.post', $comment->post->id)}}\">View Post</a></td>\n\n    </tr>\n\n    @endforeach\n    </tbody>\n</table>\n\n    @else\n\n    <h1 class=\"text-center\">No Comments</h1>\n\n@endif\n```\n#### 審核和刪除貼文\n1. 在 comments/index view 新增審核按鈕\n```\n<td>\n\n    @if($comment->is_active == 1)\n\n        {!! Form::open(['method'=>'PATCH', 'action'=> ['PostCommentsController@update', $comment->id]]) !!}\n\n            <input type=\"hidden\" name=\"is_active\" value=\"0\">\n\n            {{csrf_field()}}\n\n            <div class=\"form-group\">\n                {!! Form::submit('Un-approve', ['class'=>'btn btn-success']) !!}\n            </div>\n\n        {!! Form::close() !!}\n\n        @else\n\n        {!! Form::open(['method'=>'PATCH', 'action'=> ['PostCommentsController@update', $comment->id]]) !!}\n\n        <input type=\"hidden\" name=\"is_active\" value=\"1\">\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Approve', ['class'=>'btn btn-info']) !!}\n        </div>\n\n        {!! Form::close() !!}\n\n\n    @endif\n\n</td>\n```\n2. 在 comments/index view 新增刪除按鈕\n```\n<td>\n\n    {!! Form::open(['method'=>'DELETE', 'action'=> ['PostCommentsController@destroy', $comment->id]]) !!}\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Delete', ['class'=>'btn btn-danger']) !!}\n    </div>\n\n    {!! Form::close() !!}\n\n</td>\n```\n3. 修改 PostCommentsController 的 update function\n```\nComment::findOrFail($id)->update($request->all());\n\nreturn redirect('/admin/comments');\n```\n4. 修改 PostCommentsController 的 delete function\n```\nComment::findOrFail($id)->delete();\n\nreturn redirect()->back();\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day18.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day18\nthumbnail:\n  - /images/learning/laravel/laravelday18.png\ndate: 2017-05-28 16:02:04\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday18.png\">\n\n***\n### Application 留言功能 Part I\n#### 設定環境\n1. 新增 views/admin/comments/index.blade.php 和 views/admin/comments/replies/index.blade.php\n2. 新增 routes\n```\nRoute::resource('admin/comments', 'PostCommentsController');\nRoute::resource('admin/comments/replies', 'CommentRepliesController');\n```\n3. 新增 model\n`php artisan make:model Comment -m`\n`php artisan make:model CommentReply -m`\n4. 新增欄位到 create\\_comments_table\n```\nSchema::create('comments', function (Blueprint $table) {\n    $table->increments('id');\n    $table->integer('post_id')->unsigned()->index();\n    $table->integer('is_active')->default(0);\n    $table->string('author');\n    $table->string('photo');\n    $table->string('email');\n    $table->text('body');\n    $table->timestamps();\n\n\n    $table->foreign('post_id')->references('id')->on('posts')->onDelete('cascade');\n\n});\n```\n5. 新增欄位到 create\\_comment\\_replies_table\n```\nSchema::create('comment_replies', function (Blueprint $table) {\n    $table->increments('id');\n    $table->integer('comment_id')->unsigned()->index();\n    $table->integer('is_active')->default(0);\n    $table->string('author');\n    $table->string('photo');\n    $table->string('email');\n    $table->text('body');\n    $table->timestamps();\n\n\n    $table->foreign('comment_id')->references('id')->on('comments')->onDelete('cascade');\n});\n```\n6. 匯入資料庫 `php artisan migrate`\n#### Relationship & Mass Assignment\n1. 在 Post model 新增\n```\npublic function comments(){\n        \n    return $this->hasMany('App\\Post');\n    \n}\n```\n2. 在 Comment model 新增\n```\nprotected $fillable = [\n\n    'post_id',\n    'author',\n    'email',\n    'body',\n    'is_active'\n\n];\n\npublic function replies(){\n\n    return $this->hasMany('App\\CommentReply');\n\n}\n```\n3. 在 CommentReply 新增\n```\nprotected $fillable = [\n\n    'comment_id',\n    'author',\n    'email',\n    'body',\n    'is_active'\n\n];\n\npublic function comment(){\n\n    return $this->belongsTo('App\\Comment');\n\n}\n```\n4. 新增 Controller\n`php artisan make:controller --resource PostCommentsController`\n`php artisan make:controller --resource CommentRepliesController`\n#### 設定 views\n1. 新增 layouts/blog-home.blade.php 和 layouts/blog-post.blade.php view\n2. 新增 layouts/blog.blade.php\n#### 創建貼文\n1. 將 admin route 移到 group 裡面\n2. 新增 routes \n`Route::get('/post/{id}', ['as'=>'home.post', 'uses'=>'AdminPostsController@post']);`\n3. 新增 post function 到 AdminPostsController\n```\npublic function post($id){\n\n    $post = Post::findOrFail($id);\n\n    return view('post', compact('post'));\n\n}\n```\n4. 將 view 的 tilte 改為動態產生 `{{\" {{$post->title\" }}}}`\n5. 修改作者、時間、圖片、內文\n    - `{{\" {{$post->user->name\" }}}}`\n    - `{{\" {{$post->created_at->diffForHumans()\" }}}}`\n    - `{{\" {{$post->photo->file\" }}}}`\n    - `{{\" {{$post->body\" }}}}`\n#### 創建留言\n1. 把 post view 的留言區改為 open form\n```\n<div class=\"well\">\n    <h4>Leave a Comment:</h4>\n\n    {!! Form::open(['method'=>'POST', 'action'=>'PostCommentsController@store']) !!}\n\n    <input type=\"hidden\" name=\"post_id\" value=\"{{$post->id}}\">\n\n        <div class=\"form-group\">\n            {!! Form::label('body', 'Body:') !!}\n            {!! Form::textarea('body', null, ['class'=>'form-control', 'rows'=>3]) !!}\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Submit comment', ['class'=>'btn btn-primary']) !!}\n        </div>\n\n    {!! Form::close() !!}\n\n</div>\n```\n2. 修改 PostCommentsController 的 store function\n```\npublic function store(Request $request)\n    {\n    $user = Auth::user();\n\n    $data = [\n\n        'post_id' => $request->post_id,\n        'author' => $user->name,\n        'email' => $user->email,\n        'photo' => $user->photo->file,\n        'body' => $request->body\n\n    ];\n\n    Comment::create($data);\n\n    $request->session()->flash('comment message', 'Your message has been submitted and is waiting moderation');\n\n    return redirect()->back();\n\n}\n```\n3. 顯示訊息，修改 post view\n```\n@if(Session::has('comment message'))\n\n    {{session('comment message')}}\n\n@endif\n```\n#### 顯示貼文\n1. 修改 PostCommentsController 的 index function\n```\n$comments = Comment::all();\nreturn view('admin.comments.index', compact('comments'));\n```\n2. 修改 Comment model\n```\npublic function post(){\n\n    return $this->belongsTo('App\\Post');\n\n}\n```\n3. 修改  comments/index view\n```\n@if(count($comments) > 0)\n\n<h1>Comments</h1>\n\n<table class=\"table\">\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>Author</th>\n        <th>Email</th>\n        <th>Body</th>\n    </tr>\n    </thead>\n    <tbody>\n\n    @foreach($comments as $comment)\n\n    <tr>\n        <td>{{$comment->id}}</td>\n        <td>{{$comment->author}}</td>\n        <td>{{$comment->email}}</td>\n        <td>{{$comment->body}}</td>\n        <td><a href=\"{{route('home.post', $comment->post->id)}}\">View Post</a></td>\n\n    </tr>\n\n    @endforeach\n    </tbody>\n</table>\n\n    @else\n\n    <h1 class=\"text-center\">No Comments</h1>\n\n@endif\n```\n#### 審核和刪除貼文\n1. 在 comments/index view 新增審核按鈕\n```\n<td>\n\n    @if($comment->is_active == 1)\n\n        {!! Form::open(['method'=>'PATCH', 'action'=> ['PostCommentsController@update', $comment->id]]) !!}\n\n            <input type=\"hidden\" name=\"is_active\" value=\"0\">\n\n            {{csrf_field()}}\n\n            <div class=\"form-group\">\n                {!! Form::submit('Un-approve', ['class'=>'btn btn-success']) !!}\n            </div>\n\n        {!! Form::close() !!}\n\n        @else\n\n        {!! Form::open(['method'=>'PATCH', 'action'=> ['PostCommentsController@update', $comment->id]]) !!}\n\n        <input type=\"hidden\" name=\"is_active\" value=\"1\">\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n            {!! Form::submit('Approve', ['class'=>'btn btn-info']) !!}\n        </div>\n\n        {!! Form::close() !!}\n\n\n    @endif\n\n</td>\n```\n2. 在 comments/index view 新增刪除按鈕\n```\n<td>\n\n    {!! Form::open(['method'=>'DELETE', 'action'=> ['PostCommentsController@destroy', $comment->id]]) !!}\n\n    {{csrf_field()}}\n\n    <div class=\"form-group\">\n        {!! Form::submit('Delete', ['class'=>'btn btn-danger']) !!}\n    </div>\n\n    {!! Form::close() !!}\n\n</td>\n```\n3. 修改 PostCommentsController 的 update function\n```\nComment::findOrFail($id)->update($request->all());\n\nreturn redirect('/admin/comments');\n```\n4. 修改 PostCommentsController 的 delete function\n```\nComment::findOrFail($id)->delete();\n\nreturn redirect()->back();\n```","slug":"Lavarel-快速學習自我挑戰-Day18","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwu001t7ifajvc6rgts","content":"<img src=\"/images/learning/laravel/laravelday18.png\">\n<hr>\n<h3>Application 留言功能 Part I</h3>\n<h4>設定環境</h4>\n<ol>\n<li>新增 views/admin/comments/index.blade.php 和 views/admin/comments/replies/index.blade.php</li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::resource(&apos;admin/comments&apos;, &apos;PostCommentsController&apos;);</div><div class=\"line\">Route::resource(&apos;admin/comments/replies&apos;, &apos;CommentRepliesController&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 model<br>\n<code>php artisan make:model Comment -m</code><br>\n<code>php artisan make:model CommentReply -m</code></li>\n<li>新增欄位到 create_comments_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Schema::create(&apos;comments&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">    $table-&gt;increments(&apos;id&apos;);</div><div class=\"line\">    $table-&gt;integer(&apos;post_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">    $table-&gt;integer(&apos;is_active&apos;)-&gt;default(0);</div><div class=\"line\">    $table-&gt;string(&apos;author&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;photo&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;email&apos;);</div><div class=\"line\">    $table-&gt;text(&apos;body&apos;);</div><div class=\"line\">    $table-&gt;timestamps();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $table-&gt;foreign(&apos;post_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;posts&apos;)-&gt;onDelete(&apos;cascade&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增欄位到 create_comment_replies_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Schema::create(&apos;comment_replies&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">    $table-&gt;increments(&apos;id&apos;);</div><div class=\"line\">    $table-&gt;integer(&apos;comment_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">    $table-&gt;integer(&apos;is_active&apos;)-&gt;default(0);</div><div class=\"line\">    $table-&gt;string(&apos;author&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;photo&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;email&apos;);</div><div class=\"line\">    $table-&gt;text(&apos;body&apos;);</div><div class=\"line\">    $table-&gt;timestamps();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $table-&gt;foreign(&apos;comment_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;comments&apos;)-&gt;onDelete(&apos;cascade&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>匯入資料庫 <code>php artisan migrate</code></li>\n</ol>\n<h4>Relationship &amp; Mass Assignment</h4>\n<ol>\n<li>在 Post model 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function comments()&#123;</div><div class=\"line\">        </div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\Post&apos;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 Comment model 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;post_id&apos;,</div><div class=\"line\">    &apos;author&apos;,</div><div class=\"line\">    &apos;email&apos;,</div><div class=\"line\">    &apos;body&apos;,</div><div class=\"line\">    &apos;is_active&apos;</div><div class=\"line\"></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">public function replies()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\CommentReply&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 CommentReply 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;comment_id&apos;,</div><div class=\"line\">    &apos;author&apos;,</div><div class=\"line\">    &apos;email&apos;,</div><div class=\"line\">    &apos;body&apos;,</div><div class=\"line\">    &apos;is_active&apos;</div><div class=\"line\"></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">public function comment()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Comment&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 Controller<br>\n<code>php artisan make:controller --resource PostCommentsController</code><br>\n<code>php artisan make:controller --resource CommentRepliesController</code></li>\n</ol>\n<h4>設定 views</h4>\n<ol>\n<li>新增 layouts/blog-home.blade.php 和 layouts/blog-post.blade.php view</li>\n<li>新增 layouts/blog.blade.php</li>\n</ol>\n<h4>創建貼文</h4>\n<ol>\n<li>將 admin route 移到 group 裡面</li>\n<li>新增 routes<br>\n<code>Route::get('/post/{id}', ['as'=&gt;'home.post', 'uses'=&gt;'AdminPostsController@post']);</code></li>\n<li>新增 post function 到 AdminPostsController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;post&apos;, compact(&apos;post&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>將 view 的 tilte 改為動態產生 <code> {{$post->title}}</code></li>\n<li>修改作者、時間、圖片、內文\n<ul>\n<li><code> {{$post->user->name}}</code></li>\n<li><code> {{$post->created_at->diffForHumans()}}</code></li>\n<li><code> {{$post->photo->file}}</code></li>\n<li><code> {{$post->body}}</code></li>\n</ul>\n</li>\n</ol>\n<h4>創建留言</h4>\n<ol>\n<li>把 post view 的留言區改為 open form</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;well&quot;&gt;</div><div class=\"line\">    &lt;h4&gt;Leave a Comment:&lt;/h4&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;PostCommentsController@store&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;post_id&quot; value=&quot;&#123;&#123;$post-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;body&apos;, &apos;Body:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::textarea(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;3]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Submit comment&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 PostCommentsController 的 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(Request $request)</div><div class=\"line\">    &#123;</div><div class=\"line\">    $user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">    $data = [</div><div class=\"line\"></div><div class=\"line\">        &apos;post_id&apos; =&gt; $request-&gt;post_id,</div><div class=\"line\">        &apos;author&apos; =&gt; $user-&gt;name,</div><div class=\"line\">        &apos;email&apos; =&gt; $user-&gt;email,</div><div class=\"line\">        &apos;photo&apos; =&gt; $user-&gt;photo-&gt;file,</div><div class=\"line\">        &apos;body&apos; =&gt; $request-&gt;body</div><div class=\"line\"></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    Comment::create($data);</div><div class=\"line\"></div><div class=\"line\">    $request-&gt;session()-&gt;flash(&apos;comment message&apos;, &apos;Your message has been submitted and is waiting moderation&apos;);</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>顯示訊息，修改 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(Session::has(&apos;comment message&apos;))</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;session(&apos;comment message&apos;)&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>顯示貼文</h4>\n<ol>\n<li>修改 PostCommentsController 的 index function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$comments = Comment::all();</div><div class=\"line\">return view(&apos;admin.comments.index&apos;, compact(&apos;comments&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 Comment model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Post&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改  comments/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($comments) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">&lt;h1&gt;Comments&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">    &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;th&gt;id&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Author&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Email&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Body&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">    &lt;/thead&gt;</div><div class=\"line\">    &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">    @foreach($comments as $comment)</div><div class=\"line\"></div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;author&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;email&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;body&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&lt;a href=&quot;&#123;&#123;route(&apos;home.post&apos;, $comment-&gt;post-&gt;id)&#125;&#125;&quot;&gt;View Post&lt;/a&gt;&lt;/td&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">    @endforeach</div><div class=\"line\">    &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div><div class=\"line\"></div><div class=\"line\">    @else</div><div class=\"line\"></div><div class=\"line\">    &lt;h1 class=&quot;text-center&quot;&gt;No Comments&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>審核和刪除貼文</h4>\n<ol>\n<li>在 comments/index view 新增審核按鈕</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td&gt;</div><div class=\"line\"></div><div class=\"line\">    @if($comment-&gt;is_active == 1)</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::open([&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@update&apos;, $comment-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;input type=&quot;hidden&quot; name=&quot;is_active&quot; value=&quot;0&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                &#123;!! Form::submit(&apos;Un-approve&apos;, [&apos;class&apos;=&gt;&apos;btn btn-success&apos;]) !!&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">        @else</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::open([&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@update&apos;, $comment-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;hidden&quot; name=&quot;is_active&quot; value=&quot;1&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Approve&apos;, [&apos;class&apos;=&gt;&apos;btn btn-info&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @endif</div><div class=\"line\"></div><div class=\"line\">&lt;/td&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 comments/index view 新增刪除按鈕</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@destroy&apos;, $comment-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Delete&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/td&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 PostCommentsController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comment::findOrFail($id)-&gt;update($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/comments&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 PostCommentsController 的 delete function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comment::findOrFail($id)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">return redirect()-&gt;back();</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday18.png\">\n<hr>\n<h3>Application 留言功能 Part I</h3>\n<h4>設定環境</h4>\n<ol>\n<li>新增 views/admin/comments/index.blade.php 和 views/admin/comments/replies/index.blade.php</li>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::resource(&apos;admin/comments&apos;, &apos;PostCommentsController&apos;);</div><div class=\"line\">Route::resource(&apos;admin/comments/replies&apos;, &apos;CommentRepliesController&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 model<br>\n<code>php artisan make:model Comment -m</code><br>\n<code>php artisan make:model CommentReply -m</code></li>\n<li>新增欄位到 create_comments_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Schema::create(&apos;comments&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">    $table-&gt;increments(&apos;id&apos;);</div><div class=\"line\">    $table-&gt;integer(&apos;post_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">    $table-&gt;integer(&apos;is_active&apos;)-&gt;default(0);</div><div class=\"line\">    $table-&gt;string(&apos;author&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;photo&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;email&apos;);</div><div class=\"line\">    $table-&gt;text(&apos;body&apos;);</div><div class=\"line\">    $table-&gt;timestamps();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $table-&gt;foreign(&apos;post_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;posts&apos;)-&gt;onDelete(&apos;cascade&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增欄位到 create_comment_replies_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Schema::create(&apos;comment_replies&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">    $table-&gt;increments(&apos;id&apos;);</div><div class=\"line\">    $table-&gt;integer(&apos;comment_id&apos;)-&gt;unsigned()-&gt;index();</div><div class=\"line\">    $table-&gt;integer(&apos;is_active&apos;)-&gt;default(0);</div><div class=\"line\">    $table-&gt;string(&apos;author&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;photo&apos;);</div><div class=\"line\">    $table-&gt;string(&apos;email&apos;);</div><div class=\"line\">    $table-&gt;text(&apos;body&apos;);</div><div class=\"line\">    $table-&gt;timestamps();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $table-&gt;foreign(&apos;comment_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;comments&apos;)-&gt;onDelete(&apos;cascade&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>匯入資料庫 <code>php artisan migrate</code></li>\n</ol>\n<h4>Relationship &amp; Mass Assignment</h4>\n<ol>\n<li>在 Post model 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function comments()&#123;</div><div class=\"line\">        </div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\Post&apos;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 Comment model 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;post_id&apos;,</div><div class=\"line\">    &apos;author&apos;,</div><div class=\"line\">    &apos;email&apos;,</div><div class=\"line\">    &apos;body&apos;,</div><div class=\"line\">    &apos;is_active&apos;</div><div class=\"line\"></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">public function replies()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\CommentReply&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 CommentReply 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected $fillable = [</div><div class=\"line\"></div><div class=\"line\">    &apos;comment_id&apos;,</div><div class=\"line\">    &apos;author&apos;,</div><div class=\"line\">    &apos;email&apos;,</div><div class=\"line\">    &apos;body&apos;,</div><div class=\"line\">    &apos;is_active&apos;</div><div class=\"line\"></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">public function comment()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Comment&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 Controller<br>\n<code>php artisan make:controller --resource PostCommentsController</code><br>\n<code>php artisan make:controller --resource CommentRepliesController</code></li>\n</ol>\n<h4>設定 views</h4>\n<ol>\n<li>新增 layouts/blog-home.blade.php 和 layouts/blog-post.blade.php view</li>\n<li>新增 layouts/blog.blade.php</li>\n</ol>\n<h4>創建貼文</h4>\n<ol>\n<li>將 admin route 移到 group 裡面</li>\n<li>新增 routes<br>\n<code>Route::get('/post/{id}', ['as'=&gt;'home.post', 'uses'=&gt;'AdminPostsController@post']);</code></li>\n<li>新增 post function 到 AdminPostsController</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;post&apos;, compact(&apos;post&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>將 view 的 tilte 改為動態產生 <code> {{$post->title}}</code></li>\n<li>修改作者、時間、圖片、內文\n<ul>\n<li><code> {{$post->user->name}}</code></li>\n<li><code> {{$post->created_at->diffForHumans()}}</code></li>\n<li><code> {{$post->photo->file}}</code></li>\n<li><code> {{$post->body}}</code></li>\n</ul>\n</li>\n</ol>\n<h4>創建留言</h4>\n<ol>\n<li>把 post view 的留言區改為 open form</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;well&quot;&gt;</div><div class=\"line\">    &lt;h4&gt;Leave a Comment:&lt;/h4&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;PostCommentsController@store&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;post_id&quot; value=&quot;&#123;&#123;$post-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::label(&apos;body&apos;, &apos;Body:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::textarea(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;3]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Submit comment&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 PostCommentsController 的 store function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function store(Request $request)</div><div class=\"line\">    &#123;</div><div class=\"line\">    $user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">    $data = [</div><div class=\"line\"></div><div class=\"line\">        &apos;post_id&apos; =&gt; $request-&gt;post_id,</div><div class=\"line\">        &apos;author&apos; =&gt; $user-&gt;name,</div><div class=\"line\">        &apos;email&apos; =&gt; $user-&gt;email,</div><div class=\"line\">        &apos;photo&apos; =&gt; $user-&gt;photo-&gt;file,</div><div class=\"line\">        &apos;body&apos; =&gt; $request-&gt;body</div><div class=\"line\"></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    Comment::create($data);</div><div class=\"line\"></div><div class=\"line\">    $request-&gt;session()-&gt;flash(&apos;comment message&apos;, &apos;Your message has been submitted and is waiting moderation&apos;);</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>顯示訊息，修改 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(Session::has(&apos;comment message&apos;))</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;session(&apos;comment message&apos;)&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>顯示貼文</h4>\n<ol>\n<li>修改 PostCommentsController 的 index function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$comments = Comment::all();</div><div class=\"line\">return view(&apos;admin.comments.index&apos;, compact(&apos;comments&apos;));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 Comment model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;belongsTo(&apos;App\\Post&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改  comments/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($comments) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">&lt;h1&gt;Comments&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;table class=&quot;table&quot;&gt;</div><div class=\"line\">    &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;th&gt;id&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Author&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Email&lt;/th&gt;</div><div class=\"line\">        &lt;th&gt;Body&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">    &lt;/thead&gt;</div><div class=\"line\">    &lt;tbody&gt;</div><div class=\"line\"></div><div class=\"line\">    @foreach($comments as $comment)</div><div class=\"line\"></div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;id&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;author&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;email&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&#123;&#123;$comment-&gt;body&#125;&#125;&lt;/td&gt;</div><div class=\"line\">        &lt;td&gt;&lt;a href=&quot;&#123;&#123;route(&apos;home.post&apos;, $comment-&gt;post-&gt;id)&#125;&#125;&quot;&gt;View Post&lt;/a&gt;&lt;/td&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\"></div><div class=\"line\">    @endforeach</div><div class=\"line\">    &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div><div class=\"line\"></div><div class=\"line\">    @else</div><div class=\"line\"></div><div class=\"line\">    &lt;h1 class=&quot;text-center&quot;&gt;No Comments&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>審核和刪除貼文</h4>\n<ol>\n<li>在 comments/index view 新增審核按鈕</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td&gt;</div><div class=\"line\"></div><div class=\"line\">    @if($comment-&gt;is_active == 1)</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::open([&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@update&apos;, $comment-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;input type=&quot;hidden&quot; name=&quot;is_active&quot; value=&quot;0&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                &#123;!! Form::submit(&apos;Un-approve&apos;, [&apos;class&apos;=&gt;&apos;btn btn-success&apos;]) !!&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">        @else</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::open([&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@update&apos;, $comment-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;hidden&quot; name=&quot;is_active&quot; value=&quot;1&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &#123;!! Form::submit(&apos;Approve&apos;, [&apos;class&apos;=&gt;&apos;btn btn-info&apos;]) !!&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @endif</div><div class=\"line\"></div><div class=\"line\">&lt;/td&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 comments/index view 新增刪除按鈕</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;td&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@destroy&apos;, $comment-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &#123;!! Form::submit(&apos;Delete&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/td&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 PostCommentsController 的 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comment::findOrFail($id)-&gt;update($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">return redirect(&apos;/admin/comments&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>修改 PostCommentsController 的 delete function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comment::findOrFail($id)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">return redirect()-&gt;back();</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day19","thumbnail":["/images/learning/laravel/laravelday19.jpg"],"date":"2017-05-28T16:58:12.000Z","_content":"<img src=\"/images/learning/laravel/laravelday19.jpg\">\n\n***\n### Application 留言功能 Part II\n#### 顯示留言\n1. 在 admin/posts/index view 新增文章連結\n`<td><a href=\"{{\" {{route('home.post', $post->id)\" }}}}\">view post</a></td>`\n2. 在 admin/posts/index view 新增評論連結\n`<td><a href=\"{{\" {{route('admin.comments.show', $post->id)\" }}}}\">View Comments</a></td>`\n3. 新增 admin/comments/show view\n4. 在 PostCommentsController 新增 show function\n```\npublic function show($id)\n{   \n    $post = POST::findOrfail($id);\n    \n    $comments = $post->comments;\n    \n    return view('admin.comments.show', compact('comments'));   \n}\n```\n5. 修改 Post model\n```\npublic function comments(){\n\n    return $this->hasMany('App\\Comment');\n\n}\n```\n#### 在文章中顯示留言\n1. 新增 Auth 到留言區塊，讓登入的使用者才可以留言\n```\n@if(Auth::check())\n@endif\n```\n2. 修改 AdminPostsController 的 post function\n```\npublic function post($id){\n\n    $post = Post::findOrFail($id);\n\n    $comments = $post->comments()->whereIsActive(1)->get();\n\n    return view('post', compact('post', 'comments'));\n\n}\n```\n3. 新增 posted comments 到 post view\n```\n@if(count($comments) > 0)\n    @foreach($comments as $comment)\n        <div class=\"media\">\n            <a class=\"pull-left\" href=\"#\">\n                <img height=\"64\" class=\"media-object\" src=\"{{$comment->photo}}\" alt=\"\">\n            </a>\n            <div class=\"media-body\">\n                <h4 class=\"media-heading\">{{$comment->author}}\n                    <small>{{$comment->created_at->diffForHumans()}}</small>\n                </h4>\n            {{$comment->body}}\n            </div>\n        </div>\n    @endforeach\n@endif\n```\n#### 回覆留言功能\n1. 新增 routes\n```\nRoute::group(['middleware'=>'auth'], function() {\n    \n    Route::post('comment/reply', 'CommentRepliesController@createdReply');\n\n});\n```\n2. 在 CommentRepliesController 新增 CreateReply function\n```\npublic function createReply(Request $request){\n\n    $user = Auth::user();\n\n    $data = [\n\n        'post_id' => $request->post_id,\n        'author' => $user->name,\n        'email' => $user->email,\n        'photo' => $user->photo->file,\n        'body' => $request->body\n\n    ];\n\n\n    CommentReply::create($data);\n\n    $request->session()->flash('reply_message', 'Your reply has been submitted and is waiting moderation');\n\n    return redirect()->back();\n\n\n}\n```\n3. 在 CommentReply model 新增 `'photo'` 讓欄位可寫入\n4. 新增 reply comment 到 post view\n```\n@if(count($comment->replies) > 0)\n\n    @foreach($comment->replies as $reply)\n\n            <!-- Nested Comment -->\n            <div class=\"media\">\n                <a class=\"pull-left\" href=\"#\">\n                    <img height=\"64\" class=\"media-object\" src=\"{{$reply->photo}}\" alt=\"\">\n                </a>\n                <div class=\"media-body\">\n                    <h4 class=\"media-heading\">{{$reply->author}}\n                        <small>{{$reply->created_at->diffForHumans()}}</small>\n                    </h4>\n                    <p>{{$reply->body}}</p>\n                </div>\n\n                {!! Form::open(['method'=>'POST', 'action'=>'CommentRepliesController@createReply']) !!}\n\n                    <input type=\"hidden\" name=\"comment_id\" value=\"{{$comment->id}}\">\n\n                    <div class=\"form-group\">\n                        {!! Form::label('body', 'Body:') !!}\n                        {!! Form::text('body', null, ['class'=>'form-control', 'rows'=>1]) !!}\n                    </div>\n\n                    {{csrf_field()}}\n\n                    <div class=\"form-group\">\n                        {!! Form::submit('submit', ['class'=>'btn btn-primary']) !!}\n                    </div>\n\n                {!! Form::close() !!}\n\n            </div>\n            <!-- End Nested Comment -->\n\n    @endforeach\n\n@endif\n```\n5. 在 layouts.blog-post view 生成 script 區塊\n`@yield('scripts')`\n6. 新增 div\n```\n<div class=\"comment-reply-container\">\n\n    <button class=\"toggle-reply btn btn-primary pull-right\">Reply</button>\n\n    <div class=\"comment-reply\">\n    /* Nested Comment*/\n    </div>\n</div>\n\n```\n7. 在 resources/assets/scss/app.css 修改樣式，新增 `.comment-reply {display: none;}`，並用`gulp`編譯。\n8. 新增 scripts 區塊\n```\n@section('scripts')\n\n    <script>\n\n        $(\".comment-reply-container .toggle-reply\").click(function(){\n\n            $(this).next().slideToggle(\"slow\");\n\n        });\n\n    </script>\n\n@stop\n```\n#### 在主管理介面顯示回覆\n1. 複製 comments/show view 到 comments/replies/show view，將 comment 改為 reply。\n2. 在 admin/comments/index view 新增\n`<td><a href=\"{{\" {{route('admin.comments.replies.show', $comment->id)\" }}}}\">View Replies</a></td>`\n3. 在 CommentRepliesController 新增 show function\n```\npublic function show($id)\n{\n    $comment = Comment::findOrFail($id);\n\n    $replies = $comment->replies;\n\n    return view('admin.comments.replies.show', compact('replies'));\n}\n```\n4. 在 CommentRepliesController 新增 update function\n```\npublic function update(Request $request, $id)\n{\n    CommentReply::findOrFail($id)->update($request->all());\n\n    return redirect()->back();\n}\n```\n5. 修改 post view\n```\n@if($reply->is_active == 1)\n    /*nested comment*/\n    @else\n    <h1 class=\"text-center\">No Relies</h1>\n@endif\n```\n6. 在 CommentRepliesController 新增 destroy function\n```\npublic function destroy($id)\n{\n    CommentReply::findOrFail($id)->delete();\n    \n    redirect()->back();\n}\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day19.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day19\nthumbnail:\n  - /images/learning/laravel/laravelday19.jpg\ndate: 2017-05-29 00:58:12\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday19.jpg\">\n\n***\n### Application 留言功能 Part II\n#### 顯示留言\n1. 在 admin/posts/index view 新增文章連結\n`<td><a href=\"{{\" {{route('home.post', $post->id)\" }}}}\">view post</a></td>`\n2. 在 admin/posts/index view 新增評論連結\n`<td><a href=\"{{\" {{route('admin.comments.show', $post->id)\" }}}}\">View Comments</a></td>`\n3. 新增 admin/comments/show view\n4. 在 PostCommentsController 新增 show function\n```\npublic function show($id)\n{   \n    $post = POST::findOrfail($id);\n    \n    $comments = $post->comments;\n    \n    return view('admin.comments.show', compact('comments'));   \n}\n```\n5. 修改 Post model\n```\npublic function comments(){\n\n    return $this->hasMany('App\\Comment');\n\n}\n```\n#### 在文章中顯示留言\n1. 新增 Auth 到留言區塊，讓登入的使用者才可以留言\n```\n@if(Auth::check())\n@endif\n```\n2. 修改 AdminPostsController 的 post function\n```\npublic function post($id){\n\n    $post = Post::findOrFail($id);\n\n    $comments = $post->comments()->whereIsActive(1)->get();\n\n    return view('post', compact('post', 'comments'));\n\n}\n```\n3. 新增 posted comments 到 post view\n```\n@if(count($comments) > 0)\n    @foreach($comments as $comment)\n        <div class=\"media\">\n            <a class=\"pull-left\" href=\"#\">\n                <img height=\"64\" class=\"media-object\" src=\"{{$comment->photo}}\" alt=\"\">\n            </a>\n            <div class=\"media-body\">\n                <h4 class=\"media-heading\">{{$comment->author}}\n                    <small>{{$comment->created_at->diffForHumans()}}</small>\n                </h4>\n            {{$comment->body}}\n            </div>\n        </div>\n    @endforeach\n@endif\n```\n#### 回覆留言功能\n1. 新增 routes\n```\nRoute::group(['middleware'=>'auth'], function() {\n    \n    Route::post('comment/reply', 'CommentRepliesController@createdReply');\n\n});\n```\n2. 在 CommentRepliesController 新增 CreateReply function\n```\npublic function createReply(Request $request){\n\n    $user = Auth::user();\n\n    $data = [\n\n        'post_id' => $request->post_id,\n        'author' => $user->name,\n        'email' => $user->email,\n        'photo' => $user->photo->file,\n        'body' => $request->body\n\n    ];\n\n\n    CommentReply::create($data);\n\n    $request->session()->flash('reply_message', 'Your reply has been submitted and is waiting moderation');\n\n    return redirect()->back();\n\n\n}\n```\n3. 在 CommentReply model 新增 `'photo'` 讓欄位可寫入\n4. 新增 reply comment 到 post view\n```\n@if(count($comment->replies) > 0)\n\n    @foreach($comment->replies as $reply)\n\n            <!-- Nested Comment -->\n            <div class=\"media\">\n                <a class=\"pull-left\" href=\"#\">\n                    <img height=\"64\" class=\"media-object\" src=\"{{$reply->photo}}\" alt=\"\">\n                </a>\n                <div class=\"media-body\">\n                    <h4 class=\"media-heading\">{{$reply->author}}\n                        <small>{{$reply->created_at->diffForHumans()}}</small>\n                    </h4>\n                    <p>{{$reply->body}}</p>\n                </div>\n\n                {!! Form::open(['method'=>'POST', 'action'=>'CommentRepliesController@createReply']) !!}\n\n                    <input type=\"hidden\" name=\"comment_id\" value=\"{{$comment->id}}\">\n\n                    <div class=\"form-group\">\n                        {!! Form::label('body', 'Body:') !!}\n                        {!! Form::text('body', null, ['class'=>'form-control', 'rows'=>1]) !!}\n                    </div>\n\n                    {{csrf_field()}}\n\n                    <div class=\"form-group\">\n                        {!! Form::submit('submit', ['class'=>'btn btn-primary']) !!}\n                    </div>\n\n                {!! Form::close() !!}\n\n            </div>\n            <!-- End Nested Comment -->\n\n    @endforeach\n\n@endif\n```\n5. 在 layouts.blog-post view 生成 script 區塊\n`@yield('scripts')`\n6. 新增 div\n```\n<div class=\"comment-reply-container\">\n\n    <button class=\"toggle-reply btn btn-primary pull-right\">Reply</button>\n\n    <div class=\"comment-reply\">\n    /* Nested Comment*/\n    </div>\n</div>\n\n```\n7. 在 resources/assets/scss/app.css 修改樣式，新增 `.comment-reply {display: none;}`，並用`gulp`編譯。\n8. 新增 scripts 區塊\n```\n@section('scripts')\n\n    <script>\n\n        $(\".comment-reply-container .toggle-reply\").click(function(){\n\n            $(this).next().slideToggle(\"slow\");\n\n        });\n\n    </script>\n\n@stop\n```\n#### 在主管理介面顯示回覆\n1. 複製 comments/show view 到 comments/replies/show view，將 comment 改為 reply。\n2. 在 admin/comments/index view 新增\n`<td><a href=\"{{\" {{route('admin.comments.replies.show', $comment->id)\" }}}}\">View Replies</a></td>`\n3. 在 CommentRepliesController 新增 show function\n```\npublic function show($id)\n{\n    $comment = Comment::findOrFail($id);\n\n    $replies = $comment->replies;\n\n    return view('admin.comments.replies.show', compact('replies'));\n}\n```\n4. 在 CommentRepliesController 新增 update function\n```\npublic function update(Request $request, $id)\n{\n    CommentReply::findOrFail($id)->update($request->all());\n\n    return redirect()->back();\n}\n```\n5. 修改 post view\n```\n@if($reply->is_active == 1)\n    /*nested comment*/\n    @else\n    <h1 class=\"text-center\">No Relies</h1>\n@endif\n```\n6. 在 CommentRepliesController 新增 destroy function\n```\npublic function destroy($id)\n{\n    CommentReply::findOrFail($id)->delete();\n    \n    redirect()->back();\n}\n```","slug":"Lavarel-快速學習自我挑戰-Day19","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwv001v7ifafu5b9oxw","content":"<img src=\"/images/learning/laravel/laravelday19.jpg\">\n<hr>\n<h3>Application 留言功能 Part II</h3>\n<h4>顯示留言</h4>\n<ol>\n<li>在 admin/posts/index view 新增文章連結<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('home.post', $post->id)}}&quot;&gt;view post&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>在 admin/posts/index view 新增評論連結<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('admin.comments.show', $post->id)}}&quot;&gt;View Comments&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>新增 admin/comments/show view</li>\n<li>在 PostCommentsController 新增 show function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function show($id)</div><div class=\"line\">&#123;   </div><div class=\"line\">    $post = POST::findOrfail($id);</div><div class=\"line\">    </div><div class=\"line\">    $comments = $post-&gt;comments;</div><div class=\"line\">    </div><div class=\"line\">    return view(&apos;admin.comments.show&apos;, compact(&apos;comments&apos;));   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 Post model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function comments()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\Comment&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>在文章中顯示留言</h4>\n<ol>\n<li>新增 Auth 到留言區塊，讓登入的使用者才可以留言</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(Auth::check())</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminPostsController 的 post function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    $comments = $post-&gt;comments()-&gt;whereIsActive(1)-&gt;get();</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;post&apos;, compact(&apos;post&apos;, &apos;comments&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 posted comments 到 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($comments) &gt; 0)</div><div class=\"line\">    @foreach($comments as $comment)</div><div class=\"line\">        &lt;div class=&quot;media&quot;&gt;</div><div class=\"line\">            &lt;a class=&quot;pull-left&quot; href=&quot;#&quot;&gt;</div><div class=\"line\">                &lt;img height=&quot;64&quot; class=&quot;media-object&quot; src=&quot;&#123;&#123;$comment-&gt;photo&#125;&#125;&quot; alt=&quot;&quot;&gt;</div><div class=\"line\">            &lt;/a&gt;</div><div class=\"line\">            &lt;div class=&quot;media-body&quot;&gt;</div><div class=\"line\">                &lt;h4 class=&quot;media-heading&quot;&gt;&#123;&#123;$comment-&gt;author&#125;&#125;</div><div class=\"line\">                    &lt;small&gt;&#123;&#123;$comment-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/small&gt;</div><div class=\"line\">                &lt;/h4&gt;</div><div class=\"line\">            &#123;&#123;$comment-&gt;body&#125;&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    @endforeach</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>回覆留言功能</h4>\n<ol>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos;=&gt;&apos;auth&apos;], function() &#123;</div><div class=\"line\">    </div><div class=\"line\">    Route::post(&apos;comment/reply&apos;, &apos;CommentRepliesController@createdReply&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 CommentRepliesController 新增 CreateReply function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function createReply(Request $request)&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">    $data = [</div><div class=\"line\"></div><div class=\"line\">        &apos;post_id&apos; =&gt; $request-&gt;post_id,</div><div class=\"line\">        &apos;author&apos; =&gt; $user-&gt;name,</div><div class=\"line\">        &apos;email&apos; =&gt; $user-&gt;email,</div><div class=\"line\">        &apos;photo&apos; =&gt; $user-&gt;photo-&gt;file,</div><div class=\"line\">        &apos;body&apos; =&gt; $request-&gt;body</div><div class=\"line\"></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    CommentReply::create($data);</div><div class=\"line\"></div><div class=\"line\">    $request-&gt;session()-&gt;flash(&apos;reply_message&apos;, &apos;Your reply has been submitted and is waiting moderation&apos;);</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 CommentReply model 新增 <code>'photo'</code> 讓欄位可寫入</li>\n<li>新增 reply comment 到 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($comment-&gt;replies) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">    @foreach($comment-&gt;replies as $reply)</div><div class=\"line\"></div><div class=\"line\">            &lt;!-- Nested Comment --&gt;</div><div class=\"line\">            &lt;div class=&quot;media&quot;&gt;</div><div class=\"line\">                &lt;a class=&quot;pull-left&quot; href=&quot;#&quot;&gt;</div><div class=\"line\">                    &lt;img height=&quot;64&quot; class=&quot;media-object&quot; src=&quot;&#123;&#123;$reply-&gt;photo&#125;&#125;&quot; alt=&quot;&quot;&gt;</div><div class=\"line\">                &lt;/a&gt;</div><div class=\"line\">                &lt;div class=&quot;media-body&quot;&gt;</div><div class=\"line\">                    &lt;h4 class=&quot;media-heading&quot;&gt;&#123;&#123;$reply-&gt;author&#125;&#125;</div><div class=\"line\">                        &lt;small&gt;&#123;&#123;$reply-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/small&gt;</div><div class=\"line\">                    &lt;/h4&gt;</div><div class=\"line\">                    &lt;p&gt;&#123;&#123;$reply-&gt;body&#125;&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">                &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;CommentRepliesController@createReply&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">                    &lt;input type=&quot;hidden&quot; name=&quot;comment_id&quot; value=&quot;&#123;&#123;$comment-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">                    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                        &#123;!! Form::label(&apos;body&apos;, &apos;Body:&apos;) !!&#125;</div><div class=\"line\">                        &#123;!! Form::text(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;1]) !!&#125;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">                    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">                    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                        &#123;!! Form::submit(&apos;submit&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">                &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;!-- End Nested Comment --&gt;</div><div class=\"line\"></div><div class=\"line\">    @endforeach</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 layouts.blog-post view 生成 script 區塊<br>\n<code>@yield('scripts')</code></li>\n<li>新增 div</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;comment-reply-container&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;button class=&quot;toggle-reply btn btn-primary pull-right&quot;&gt;Reply&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;comment-reply&quot;&gt;</div><div class=\"line\">    /* Nested Comment*/</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 resources/assets/scss/app.css 修改樣式，新增 <code>.comment-reply {display: none;}</code>，並用<code>gulp</code>編譯。</li>\n<li>新增 scripts 區塊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;scripts&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">        $(&quot;.comment-reply-container .toggle-reply&quot;).click(function()&#123;</div><div class=\"line\"></div><div class=\"line\">            $(this).next().slideToggle(&quot;slow&quot;);</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>在主管理介面顯示回覆</h4>\n<ol>\n<li>複製 comments/show view 到 comments/replies/show view，將 comment 改為 reply。</li>\n<li>在 admin/comments/index view 新增<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('admin.comments.replies.show', $comment->id)}}&quot;&gt;View Replies&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>在 CommentRepliesController 新增 show function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function show($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    $comment = Comment::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    $replies = $comment-&gt;replies;</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;admin.comments.replies.show&apos;, compact(&apos;replies&apos;));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 CommentRepliesController 新增 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function update(Request $request, $id)</div><div class=\"line\">&#123;</div><div class=\"line\">    CommentReply::findOrFail($id)-&gt;update($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;back();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if($reply-&gt;is_active == 1)</div><div class=\"line\">    /*nested comment*/</div><div class=\"line\">    @else</div><div class=\"line\">    &lt;h1 class=&quot;text-center&quot;&gt;No Relies&lt;/h1&gt;</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 CommentRepliesController 新增 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    CommentReply::findOrFail($id)-&gt;delete();</div><div class=\"line\">    </div><div class=\"line\">    redirect()-&gt;back();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday19.jpg\">\n<hr>\n<h3>Application 留言功能 Part II</h3>\n<h4>顯示留言</h4>\n<ol>\n<li>在 admin/posts/index view 新增文章連結<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('home.post', $post->id)}}&quot;&gt;view post&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>在 admin/posts/index view 新增評論連結<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('admin.comments.show', $post->id)}}&quot;&gt;View Comments&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>新增 admin/comments/show view</li>\n<li>在 PostCommentsController 新增 show function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function show($id)</div><div class=\"line\">&#123;   </div><div class=\"line\">    $post = POST::findOrfail($id);</div><div class=\"line\">    </div><div class=\"line\">    $comments = $post-&gt;comments;</div><div class=\"line\">    </div><div class=\"line\">    return view(&apos;admin.comments.show&apos;, compact(&apos;comments&apos;));   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 Post model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function comments()&#123;</div><div class=\"line\"></div><div class=\"line\">    return $this-&gt;hasMany(&apos;App\\Comment&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>在文章中顯示留言</h4>\n<ol>\n<li>新增 Auth 到留言區塊，讓登入的使用者才可以留言</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(Auth::check())</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 AdminPostsController 的 post function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    $comments = $post-&gt;comments()-&gt;whereIsActive(1)-&gt;get();</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;post&apos;, compact(&apos;post&apos;, &apos;comments&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 posted comments 到 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($comments) &gt; 0)</div><div class=\"line\">    @foreach($comments as $comment)</div><div class=\"line\">        &lt;div class=&quot;media&quot;&gt;</div><div class=\"line\">            &lt;a class=&quot;pull-left&quot; href=&quot;#&quot;&gt;</div><div class=\"line\">                &lt;img height=&quot;64&quot; class=&quot;media-object&quot; src=&quot;&#123;&#123;$comment-&gt;photo&#125;&#125;&quot; alt=&quot;&quot;&gt;</div><div class=\"line\">            &lt;/a&gt;</div><div class=\"line\">            &lt;div class=&quot;media-body&quot;&gt;</div><div class=\"line\">                &lt;h4 class=&quot;media-heading&quot;&gt;&#123;&#123;$comment-&gt;author&#125;&#125;</div><div class=\"line\">                    &lt;small&gt;&#123;&#123;$comment-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/small&gt;</div><div class=\"line\">                &lt;/h4&gt;</div><div class=\"line\">            &#123;&#123;$comment-&gt;body&#125;&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    @endforeach</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h4>回覆留言功能</h4>\n<ol>\n<li>新增 routes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos;=&gt;&apos;auth&apos;], function() &#123;</div><div class=\"line\">    </div><div class=\"line\">    Route::post(&apos;comment/reply&apos;, &apos;CommentRepliesController@createdReply&apos;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 CommentRepliesController 新增 CreateReply function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function createReply(Request $request)&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = Auth::user();</div><div class=\"line\"></div><div class=\"line\">    $data = [</div><div class=\"line\"></div><div class=\"line\">        &apos;post_id&apos; =&gt; $request-&gt;post_id,</div><div class=\"line\">        &apos;author&apos; =&gt; $user-&gt;name,</div><div class=\"line\">        &apos;email&apos; =&gt; $user-&gt;email,</div><div class=\"line\">        &apos;photo&apos; =&gt; $user-&gt;photo-&gt;file,</div><div class=\"line\">        &apos;body&apos; =&gt; $request-&gt;body</div><div class=\"line\"></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    CommentReply::create($data);</div><div class=\"line\"></div><div class=\"line\">    $request-&gt;session()-&gt;flash(&apos;reply_message&apos;, &apos;Your reply has been submitted and is waiting moderation&apos;);</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 CommentReply model 新增 <code>'photo'</code> 讓欄位可寫入</li>\n<li>新增 reply comment 到 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($comment-&gt;replies) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">    @foreach($comment-&gt;replies as $reply)</div><div class=\"line\"></div><div class=\"line\">            &lt;!-- Nested Comment --&gt;</div><div class=\"line\">            &lt;div class=&quot;media&quot;&gt;</div><div class=\"line\">                &lt;a class=&quot;pull-left&quot; href=&quot;#&quot;&gt;</div><div class=\"line\">                    &lt;img height=&quot;64&quot; class=&quot;media-object&quot; src=&quot;&#123;&#123;$reply-&gt;photo&#125;&#125;&quot; alt=&quot;&quot;&gt;</div><div class=\"line\">                &lt;/a&gt;</div><div class=\"line\">                &lt;div class=&quot;media-body&quot;&gt;</div><div class=\"line\">                    &lt;h4 class=&quot;media-heading&quot;&gt;&#123;&#123;$reply-&gt;author&#125;&#125;</div><div class=\"line\">                        &lt;small&gt;&#123;&#123;$reply-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/small&gt;</div><div class=\"line\">                    &lt;/h4&gt;</div><div class=\"line\">                    &lt;p&gt;&#123;&#123;$reply-&gt;body&#125;&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">                &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;CommentRepliesController@createReply&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">                    &lt;input type=&quot;hidden&quot; name=&quot;comment_id&quot; value=&quot;&#123;&#123;$comment-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">                    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                        &#123;!! Form::label(&apos;body&apos;, &apos;Body:&apos;) !!&#125;</div><div class=\"line\">                        &#123;!! Form::text(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;1]) !!&#125;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">                    &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">                    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                        &#123;!! Form::submit(&apos;submit&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">                &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;!-- End Nested Comment --&gt;</div><div class=\"line\"></div><div class=\"line\">    @endforeach</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 layouts.blog-post view 生成 script 區塊<br>\n<code>@yield('scripts')</code></li>\n<li>新增 div</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;comment-reply-container&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;button class=&quot;toggle-reply btn btn-primary pull-right&quot;&gt;Reply&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;comment-reply&quot;&gt;</div><div class=\"line\">    /* Nested Comment*/</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 resources/assets/scss/app.css 修改樣式，新增 <code>.comment-reply {display: none;}</code>，並用<code>gulp</code>編譯。</li>\n<li>新增 scripts 區塊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;scripts&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">        $(&quot;.comment-reply-container .toggle-reply&quot;).click(function()&#123;</div><div class=\"line\"></div><div class=\"line\">            $(this).next().slideToggle(&quot;slow&quot;);</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>\n<h4>在主管理介面顯示回覆</h4>\n<ol>\n<li>複製 comments/show view 到 comments/replies/show view，將 comment 改為 reply。</li>\n<li>在 admin/comments/index view 新增<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('admin.comments.replies.show', $comment->id)}}&quot;&gt;View Replies&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>在 CommentRepliesController 新增 show function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function show($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    $comment = Comment::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    $replies = $comment-&gt;replies;</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;admin.comments.replies.show&apos;, compact(&apos;replies&apos;));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 CommentRepliesController 新增 update function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function update(Request $request, $id)</div><div class=\"line\">&#123;</div><div class=\"line\">    CommentReply::findOrFail($id)-&gt;update($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">    return redirect()-&gt;back();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 post view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if($reply-&gt;is_active == 1)</div><div class=\"line\">    /*nested comment*/</div><div class=\"line\">    @else</div><div class=\"line\">    &lt;h1 class=&quot;text-center&quot;&gt;No Relies&lt;/h1&gt;</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 CommentRepliesController 新增 destroy function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function destroy($id)</div><div class=\"line\">&#123;</div><div class=\"line\">    CommentReply::findOrFail($id)-&gt;delete();</div><div class=\"line\">    </div><div class=\"line\">    redirect()-&gt;back();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day20","thumbnail":["/images/learning/laravel/laravelday20.png"],"date":"2017-05-30T07:46:47.000Z","_content":"<img src=\"/images/learning/laravel/laravelday20.png\">\n\n***\n### Pretty URL\n1. [eloquent-sluggable 套件說明書](https://github.com/cviebrock/eloquent-sluggable)\n2. require 套件 `composer require cviebrock/eloquent-sluggable 4.1`\n3. 在 config/app.php 新增 provider\n`Cviebrock\\EloquentSluggable\\ServiceProvider::class,`\n4. 在 Post model 新增\n```\nuse Cviebrock\\EloquentSluggable\\Sluggable;\n\nclass Post extends Model\n{\n    use Sluggable;\n\n    /**\n     * Return the sluggable configuration array for this model.\n     *\n     * @return array\n     */\n    public function sluggable()\n    {\n        return [\n            'slug' => [\n                'source' => 'title'\n            ]\n        ];\n    }\n\n}\n```\n5. 新增 migration `php artisan make:migration add_slug_to_posts_table --create=posts`\n6. 修改 add\\_slug\\_to\\_posts_table\n```\nclass AddSlugToPostsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('posts', function (Blueprint $table) {\n            $table->string('slug')->nullable();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('posts', function (Blueprint $table) {\n            $table->dropColumn('slug');\n        });\n    }\n}\n```\n7. 將資料匯入資料庫 `php artisan migrate`\n8. 修改 admin/posts/index view 的檢視貼文欄位\n`<td><a href=\"{{\" {{route('home.post', $post->slug)\" }}}}\">View post</a></td>`\n9. 修改 AdminPostsController 的 post function\n```\npublic function post($slug){\n\n    $post = Post::where('slug', $slug)->first() ?: Post::findOrFail((int)$slug);\n\n    $comments = $post->comments()->whereIsActive(1)->get();\n\n    return view('post', compact('post', 'comments'));\n\n}\n```\n### Pagination ([Pagination 官方文件](https://laravel.com/docs/5.2/pagination))\n1. 修改 AdminPostsController 的 index function\n`$posts = Post::all();`=>`$posts = Post::paginate(2);`\n2. 在 admin/posts/index view 新增\n```\n<div class=\"row\">\n    <div class=\"col-sm-6 col-sm-offset-5\">\n\n        {{$posts->render()}}\n        \n    </div>\n</div>\n```\n### 從 gravatar 拿大頭貼\n1. 在 User model 新增 getGravatarAttribute function\n```\npublic function getGravatarAttribute(){\n\n    $hash = md5(strtolower(trim($this->attributes['email'])));\n\n    return \"http://www.gravatar.com/avatar/$hash\";\n\n}\n```\n2. 取得大頭貼\n`src=\"{{\" {{Auth::user()->gravatar\" }}}}\"`\n### 升級到 Laravel 5.3 Part I\n#### 升級\n1. [更新內容](https://laravel-news.com/look-whats-coming-laravel-5-3)\n2. 檢查版本 `php artisan --version`\n3. 修改 composer.json\n`\"laravel/framework\": \"5.3.*\",`=>`\"laravel/framework\": \"5.3.*\",`\n4. 更新資料 `composer update`\n5. 把 app/Providers/EventServiceProvider 的 boot function 的變數拿掉\n```\npublic function boot()\n{\n    parent::boot();\n}\n```\n6. 把 app/Providers/RouteServiceProvider 的 boot, map, mapWebRoutes function 的變數拿掉\n```\npublic function boot()\n{\n    parent::boot();\n}\n```\n```\npublic function map()\n{\n    $this->mapWebRoutes();\n}\n```\n```\nprotected function mapWebRoutes()\n{\n    Route::group([\n        'namespace' => $this->namespace, 'middleware' => 'web',\n    ], function ($router) {\n        require app_path('Http/routes.php');\n    });\n}\n```\n7. 接上面的步驟，將 `use Illuminate\\Routing\\Router;`移除\n8. 修改 mapWebRoutes function 的 path\n```\nprotected function mapWebRoutes()\n{\n    Route::group([\n        'namespace' => $this->namespace, 'middleware' => 'web',\n    ], function ($router) {\n        require base_path('routes/web.php');\n    });\n}\n```\n#### 更新 routes\n1. 在 app/Http/Controllers/Controller.php 刪除 `AuthorizesResources,`\n2. [更新 routes 檔案](https://github.com/laravel/laravel/tree/5.3/app/Http/Controllers/Auth)\n3. 將更新檔案複製到 app/Http/Controllers/Auth 目錄底下\n4. 新增以下兩行到 routes/web.php\n```\nAuth::routes();\nRoute::get('/logout', 'Auth\\LoginController@logout');\n```\n5. 修改 LoginController 將目錄導向 admin\n`protected $redirectTo = '/admin';`\n6. 客製化 routes 來符合舊的路由設定\n```\nRoute::group(['middleware'=>'admin'], function(){\n\n    Route::get('/admin', function(){\n\n        return view('admin.index');\n\n    });\n\n    Route::resource('admin/users', 'AdminUsersController', ['names'=>[\n\n        'index'=>'admin.users.index',\n        'create'=>'admin.users.create',\n        'store'=>'admin.users.store',\n        'edit'=>'admin.users.edit'\n\n    ]]);\n\n    Route::resource('admin/posts', 'AdminPostsController', ['names'=>[\n\n        'index'=>'admin.posts.index',\n        'create'=>'admin.posts.create',\n        'store'=>'admin.posts.store',\n        'edit'=>'admin.posts.edit'\n\n    ]]);\n\n    Route::resource('admin/categories', 'AdminCategoriesController', ['names'=>[\n\n        'index'=>'admin.categories.index',\n        'create'=>'admin.categories.create',\n        'store'=>'admin.categories.store',\n        'edit'=>'admin.categories.edit'\n\n    ]]);\n\n    Route::resource('admin/comments', 'PostCommentsController', ['names'=>[\n\n        'index'=>'admin.comments.index',\n        'create'=>'admin.comments.create',\n        'store'=>'admin.comments.store',\n        'edit'=>'admin.comments.edit'\n\n    ]]);\n\n    Route::resource('admin/comments/replies', 'CommentRepliesController', ['names'=>[\n\n        'index'=>'admin.comments.replies.index',\n        'create'=>'admin.comments.replies.create',\n        'store'=>'admin.comments.replies.store',\n        'edit'=>'admin.comments.replies.edit'\n\n    ]]);\n\n});\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day20.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day20\nthumbnail:\n  - /images/learning/laravel/laravelday20.png\ndate: 2017-05-30 15:46:47\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday20.png\">\n\n***\n### Pretty URL\n1. [eloquent-sluggable 套件說明書](https://github.com/cviebrock/eloquent-sluggable)\n2. require 套件 `composer require cviebrock/eloquent-sluggable 4.1`\n3. 在 config/app.php 新增 provider\n`Cviebrock\\EloquentSluggable\\ServiceProvider::class,`\n4. 在 Post model 新增\n```\nuse Cviebrock\\EloquentSluggable\\Sluggable;\n\nclass Post extends Model\n{\n    use Sluggable;\n\n    /**\n     * Return the sluggable configuration array for this model.\n     *\n     * @return array\n     */\n    public function sluggable()\n    {\n        return [\n            'slug' => [\n                'source' => 'title'\n            ]\n        ];\n    }\n\n}\n```\n5. 新增 migration `php artisan make:migration add_slug_to_posts_table --create=posts`\n6. 修改 add\\_slug\\_to\\_posts_table\n```\nclass AddSlugToPostsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('posts', function (Blueprint $table) {\n            $table->string('slug')->nullable();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('posts', function (Blueprint $table) {\n            $table->dropColumn('slug');\n        });\n    }\n}\n```\n7. 將資料匯入資料庫 `php artisan migrate`\n8. 修改 admin/posts/index view 的檢視貼文欄位\n`<td><a href=\"{{\" {{route('home.post', $post->slug)\" }}}}\">View post</a></td>`\n9. 修改 AdminPostsController 的 post function\n```\npublic function post($slug){\n\n    $post = Post::where('slug', $slug)->first() ?: Post::findOrFail((int)$slug);\n\n    $comments = $post->comments()->whereIsActive(1)->get();\n\n    return view('post', compact('post', 'comments'));\n\n}\n```\n### Pagination ([Pagination 官方文件](https://laravel.com/docs/5.2/pagination))\n1. 修改 AdminPostsController 的 index function\n`$posts = Post::all();`=>`$posts = Post::paginate(2);`\n2. 在 admin/posts/index view 新增\n```\n<div class=\"row\">\n    <div class=\"col-sm-6 col-sm-offset-5\">\n\n        {{$posts->render()}}\n        \n    </div>\n</div>\n```\n### 從 gravatar 拿大頭貼\n1. 在 User model 新增 getGravatarAttribute function\n```\npublic function getGravatarAttribute(){\n\n    $hash = md5(strtolower(trim($this->attributes['email'])));\n\n    return \"http://www.gravatar.com/avatar/$hash\";\n\n}\n```\n2. 取得大頭貼\n`src=\"{{\" {{Auth::user()->gravatar\" }}}}\"`\n### 升級到 Laravel 5.3 Part I\n#### 升級\n1. [更新內容](https://laravel-news.com/look-whats-coming-laravel-5-3)\n2. 檢查版本 `php artisan --version`\n3. 修改 composer.json\n`\"laravel/framework\": \"5.3.*\",`=>`\"laravel/framework\": \"5.3.*\",`\n4. 更新資料 `composer update`\n5. 把 app/Providers/EventServiceProvider 的 boot function 的變數拿掉\n```\npublic function boot()\n{\n    parent::boot();\n}\n```\n6. 把 app/Providers/RouteServiceProvider 的 boot, map, mapWebRoutes function 的變數拿掉\n```\npublic function boot()\n{\n    parent::boot();\n}\n```\n```\npublic function map()\n{\n    $this->mapWebRoutes();\n}\n```\n```\nprotected function mapWebRoutes()\n{\n    Route::group([\n        'namespace' => $this->namespace, 'middleware' => 'web',\n    ], function ($router) {\n        require app_path('Http/routes.php');\n    });\n}\n```\n7. 接上面的步驟，將 `use Illuminate\\Routing\\Router;`移除\n8. 修改 mapWebRoutes function 的 path\n```\nprotected function mapWebRoutes()\n{\n    Route::group([\n        'namespace' => $this->namespace, 'middleware' => 'web',\n    ], function ($router) {\n        require base_path('routes/web.php');\n    });\n}\n```\n#### 更新 routes\n1. 在 app/Http/Controllers/Controller.php 刪除 `AuthorizesResources,`\n2. [更新 routes 檔案](https://github.com/laravel/laravel/tree/5.3/app/Http/Controllers/Auth)\n3. 將更新檔案複製到 app/Http/Controllers/Auth 目錄底下\n4. 新增以下兩行到 routes/web.php\n```\nAuth::routes();\nRoute::get('/logout', 'Auth\\LoginController@logout');\n```\n5. 修改 LoginController 將目錄導向 admin\n`protected $redirectTo = '/admin';`\n6. 客製化 routes 來符合舊的路由設定\n```\nRoute::group(['middleware'=>'admin'], function(){\n\n    Route::get('/admin', function(){\n\n        return view('admin.index');\n\n    });\n\n    Route::resource('admin/users', 'AdminUsersController', ['names'=>[\n\n        'index'=>'admin.users.index',\n        'create'=>'admin.users.create',\n        'store'=>'admin.users.store',\n        'edit'=>'admin.users.edit'\n\n    ]]);\n\n    Route::resource('admin/posts', 'AdminPostsController', ['names'=>[\n\n        'index'=>'admin.posts.index',\n        'create'=>'admin.posts.create',\n        'store'=>'admin.posts.store',\n        'edit'=>'admin.posts.edit'\n\n    ]]);\n\n    Route::resource('admin/categories', 'AdminCategoriesController', ['names'=>[\n\n        'index'=>'admin.categories.index',\n        'create'=>'admin.categories.create',\n        'store'=>'admin.categories.store',\n        'edit'=>'admin.categories.edit'\n\n    ]]);\n\n    Route::resource('admin/comments', 'PostCommentsController', ['names'=>[\n\n        'index'=>'admin.comments.index',\n        'create'=>'admin.comments.create',\n        'store'=>'admin.comments.store',\n        'edit'=>'admin.comments.edit'\n\n    ]]);\n\n    Route::resource('admin/comments/replies', 'CommentRepliesController', ['names'=>[\n\n        'index'=>'admin.comments.replies.index',\n        'create'=>'admin.comments.replies.create',\n        'store'=>'admin.comments.replies.store',\n        'edit'=>'admin.comments.replies.edit'\n\n    ]]);\n\n});\n```","slug":"Lavarel-快速學習自我挑戰-Day20","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwx001z7ifal099x57m","content":"<img src=\"/images/learning/laravel/laravelday20.png\">\n<hr>\n<h3>Pretty URL</h3>\n<ol>\n<li><a href=\"https://github.com/cviebrock/eloquent-sluggable\" target=\"_blank\" rel=\"external\">eloquent-sluggable 套件說明書</a></li>\n<li>require 套件 <code>composer require cviebrock/eloquent-sluggable 4.1</code></li>\n<li>在 config/app.php 新增 provider<br>\n<code>Cviebrock\\EloquentSluggable\\ServiceProvider::class,</code></li>\n<li>在 Post model 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">use Cviebrock\\EloquentSluggable\\Sluggable;</div><div class=\"line\"></div><div class=\"line\">class Post extends Model</div><div class=\"line\">&#123;</div><div class=\"line\">    use Sluggable;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Return the sluggable configuration array for this model.</div><div class=\"line\">     *</div><div class=\"line\">     * @return array</div><div class=\"line\">     */</div><div class=\"line\">    public function sluggable()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\">            &apos;slug&apos; =&gt; [</div><div class=\"line\">                &apos;source&apos; =&gt; &apos;title&apos;</div><div class=\"line\">            ]</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 migration <code>php artisan make:migration add_slug_to_posts_table --create=posts</code></li>\n<li>修改 add_slug_to_posts_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AddSlugToPostsTable extends Migration</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * Run the migrations.</div><div class=\"line\">     *</div><div class=\"line\">     * @return void</div><div class=\"line\">     */</div><div class=\"line\">    public function up()</div><div class=\"line\">    &#123;</div><div class=\"line\">        Schema::table(&apos;posts&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">            $table-&gt;string(&apos;slug&apos;)-&gt;nullable();</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Reverse the migrations.</div><div class=\"line\">     *</div><div class=\"line\">     * @return void</div><div class=\"line\">     */</div><div class=\"line\">    public function down()</div><div class=\"line\">    &#123;</div><div class=\"line\">        Schema::table(&apos;posts&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">            $table-&gt;dropColumn(&apos;slug&apos;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>將資料匯入資料庫 <code>php artisan migrate</code></li>\n<li>修改 admin/posts/index view 的檢視貼文欄位<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('home.post', $post->slug)}}&quot;&gt;View post&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>修改 AdminPostsController 的 post function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post($slug)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::where(&apos;slug&apos;, $slug)-&gt;first() ?: Post::findOrFail((int)$slug);</div><div class=\"line\"></div><div class=\"line\">    $comments = $post-&gt;comments()-&gt;whereIsActive(1)-&gt;get();</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;post&apos;, compact(&apos;post&apos;, &apos;comments&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>Pagination (<a href=\"https://laravel.com/docs/5.2/pagination\" target=\"_blank\" rel=\"external\">Pagination 官方文件</a>)</h3>\n<ol>\n<li>修改 AdminPostsController 的 index function<br>\n<code>$posts = Post::all();</code>=&gt;<code>$posts = Post::paginate(2);</code></li>\n<li>在 admin/posts/index view 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-6 col-sm-offset-5&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;$posts-&gt;render()&#125;&#125;</div><div class=\"line\">        </div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3>從 gravatar 拿大頭貼</h3>\n<ol>\n<li>在 User model 新增 getGravatarAttribute function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function getGravatarAttribute()&#123;</div><div class=\"line\"></div><div class=\"line\">    $hash = md5(strtolower(trim($this-&gt;attributes[&apos;email&apos;])));</div><div class=\"line\"></div><div class=\"line\">    return &quot;http://www.gravatar.com/avatar/$hash&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>取得大頭貼<br>\n<code>src=&quot; {{Auth::user()->gravatar}}&quot;</code></li>\n</ol>\n<h3>升級到 Laravel 5.3 Part I</h3>\n<h4>升級</h4>\n<ol>\n<li><a href=\"https://laravel-news.com/look-whats-coming-laravel-5-3\" target=\"_blank\" rel=\"external\">更新內容</a></li>\n<li>檢查版本 <code>php artisan --version</code></li>\n<li>修改 composer.json<br>\n<code>&quot;laravel/framework&quot;: &quot;5.3.*&quot;,</code>=&gt;<code>&quot;laravel/framework&quot;: &quot;5.3.*&quot;,</code></li>\n<li>更新資料 <code>composer update</code></li>\n<li>把 app/Providers/EventServiceProvider 的 boot function 的變數拿掉</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function boot()</div><div class=\"line\">&#123;</div><div class=\"line\">    parent::boot();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>把 app/Providers/RouteServiceProvider 的 boot, map, mapWebRoutes function 的變數拿掉</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function boot()</div><div class=\"line\">&#123;</div><div class=\"line\">    parent::boot();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function map()</div><div class=\"line\">&#123;</div><div class=\"line\">    $this-&gt;mapWebRoutes();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected function mapWebRoutes()</div><div class=\"line\">&#123;</div><div class=\"line\">    Route::group([</div><div class=\"line\">        &apos;namespace&apos; =&gt; $this-&gt;namespace, &apos;middleware&apos; =&gt; &apos;web&apos;,</div><div class=\"line\">    ], function ($router) &#123;</div><div class=\"line\">        require app_path(&apos;Http/routes.php&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>接上面的步驟，將 <code>use Illuminate\\Routing\\Router;</code>移除</li>\n<li>修改 mapWebRoutes function 的 path</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected function mapWebRoutes()</div><div class=\"line\">&#123;</div><div class=\"line\">    Route::group([</div><div class=\"line\">        &apos;namespace&apos; =&gt; $this-&gt;namespace, &apos;middleware&apos; =&gt; &apos;web&apos;,</div><div class=\"line\">    ], function ($router) &#123;</div><div class=\"line\">        require base_path(&apos;routes/web.php&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>更新 routes</h4>\n<ol>\n<li>在 app/Http/Controllers/Controller.php 刪除 <code>AuthorizesResources,</code></li>\n<li><a href=\"https://github.com/laravel/laravel/tree/5.3/app/Http/Controllers/Auth\" target=\"_blank\" rel=\"external\">更新 routes 檔案</a></li>\n<li>將更新檔案複製到 app/Http/Controllers/Auth 目錄底下</li>\n<li>新增以下兩行到 routes/web.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Auth::routes();</div><div class=\"line\">Route::get(&apos;/logout&apos;, &apos;Auth\\LoginController@logout&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 LoginController 將目錄導向 admin<br>\n<code>protected $redirectTo = '/admin';</code></li>\n<li>客製化 routes 來符合舊的路由設定</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos;=&gt;&apos;admin&apos;], function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Route::get(&apos;/admin&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.index&apos;);</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/users&apos;, &apos;AdminUsersController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.users.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.users.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.users.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.users.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/posts&apos;, &apos;AdminPostsController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.posts.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.posts.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.posts.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.posts.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/categories&apos;, &apos;AdminCategoriesController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.categories.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.categories.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.categories.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.categories.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/comments&apos;, &apos;PostCommentsController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.comments.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.comments.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.comments.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.comments.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/comments/replies&apos;, &apos;CommentRepliesController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.comments.replies.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.comments.replies.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.comments.replies.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.comments.replies.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday20.png\">\n<hr>\n<h3>Pretty URL</h3>\n<ol>\n<li><a href=\"https://github.com/cviebrock/eloquent-sluggable\" target=\"_blank\" rel=\"external\">eloquent-sluggable 套件說明書</a></li>\n<li>require 套件 <code>composer require cviebrock/eloquent-sluggable 4.1</code></li>\n<li>在 config/app.php 新增 provider<br>\n<code>Cviebrock\\EloquentSluggable\\ServiceProvider::class,</code></li>\n<li>在 Post model 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">use Cviebrock\\EloquentSluggable\\Sluggable;</div><div class=\"line\"></div><div class=\"line\">class Post extends Model</div><div class=\"line\">&#123;</div><div class=\"line\">    use Sluggable;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Return the sluggable configuration array for this model.</div><div class=\"line\">     *</div><div class=\"line\">     * @return array</div><div class=\"line\">     */</div><div class=\"line\">    public function sluggable()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return [</div><div class=\"line\">            &apos;slug&apos; =&gt; [</div><div class=\"line\">                &apos;source&apos; =&gt; &apos;title&apos;</div><div class=\"line\">            ]</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 migration <code>php artisan make:migration add_slug_to_posts_table --create=posts</code></li>\n<li>修改 add_slug_to_posts_table</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AddSlugToPostsTable extends Migration</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * Run the migrations.</div><div class=\"line\">     *</div><div class=\"line\">     * @return void</div><div class=\"line\">     */</div><div class=\"line\">    public function up()</div><div class=\"line\">    &#123;</div><div class=\"line\">        Schema::table(&apos;posts&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">            $table-&gt;string(&apos;slug&apos;)-&gt;nullable();</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Reverse the migrations.</div><div class=\"line\">     *</div><div class=\"line\">     * @return void</div><div class=\"line\">     */</div><div class=\"line\">    public function down()</div><div class=\"line\">    &#123;</div><div class=\"line\">        Schema::table(&apos;posts&apos;, function (Blueprint $table) &#123;</div><div class=\"line\">            $table-&gt;dropColumn(&apos;slug&apos;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>將資料匯入資料庫 <code>php artisan migrate</code></li>\n<li>修改 admin/posts/index view 的檢視貼文欄位<br>\n<code>&lt;td&gt;&lt;a href=&quot; {{route('home.post', $post->slug)}}&quot;&gt;View post&lt;/a&gt;&lt;/td&gt;</code></li>\n<li>修改 AdminPostsController 的 post function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function post($slug)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::where(&apos;slug&apos;, $slug)-&gt;first() ?: Post::findOrFail((int)$slug);</div><div class=\"line\"></div><div class=\"line\">    $comments = $post-&gt;comments()-&gt;whereIsActive(1)-&gt;get();</div><div class=\"line\"></div><div class=\"line\">    return view(&apos;post&apos;, compact(&apos;post&apos;, &apos;comments&apos;));</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>Pagination (<a href=\"https://laravel.com/docs/5.2/pagination\" target=\"_blank\" rel=\"external\">Pagination 官方文件</a>)</h3>\n<ol>\n<li>修改 AdminPostsController 的 index function<br>\n<code>$posts = Post::all();</code>=&gt;<code>$posts = Post::paginate(2);</code></li>\n<li>在 admin/posts/index view 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;col-sm-6 col-sm-offset-5&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;$posts-&gt;render()&#125;&#125;</div><div class=\"line\">        </div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3>從 gravatar 拿大頭貼</h3>\n<ol>\n<li>在 User model 新增 getGravatarAttribute function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function getGravatarAttribute()&#123;</div><div class=\"line\"></div><div class=\"line\">    $hash = md5(strtolower(trim($this-&gt;attributes[&apos;email&apos;])));</div><div class=\"line\"></div><div class=\"line\">    return &quot;http://www.gravatar.com/avatar/$hash&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>取得大頭貼<br>\n<code>src=&quot; {{Auth::user()->gravatar}}&quot;</code></li>\n</ol>\n<h3>升級到 Laravel 5.3 Part I</h3>\n<h4>升級</h4>\n<ol>\n<li><a href=\"https://laravel-news.com/look-whats-coming-laravel-5-3\" target=\"_blank\" rel=\"external\">更新內容</a></li>\n<li>檢查版本 <code>php artisan --version</code></li>\n<li>修改 composer.json<br>\n<code>&quot;laravel/framework&quot;: &quot;5.3.*&quot;,</code>=&gt;<code>&quot;laravel/framework&quot;: &quot;5.3.*&quot;,</code></li>\n<li>更新資料 <code>composer update</code></li>\n<li>把 app/Providers/EventServiceProvider 的 boot function 的變數拿掉</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function boot()</div><div class=\"line\">&#123;</div><div class=\"line\">    parent::boot();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>把 app/Providers/RouteServiceProvider 的 boot, map, mapWebRoutes function 的變數拿掉</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function boot()</div><div class=\"line\">&#123;</div><div class=\"line\">    parent::boot();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function map()</div><div class=\"line\">&#123;</div><div class=\"line\">    $this-&gt;mapWebRoutes();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected function mapWebRoutes()</div><div class=\"line\">&#123;</div><div class=\"line\">    Route::group([</div><div class=\"line\">        &apos;namespace&apos; =&gt; $this-&gt;namespace, &apos;middleware&apos; =&gt; &apos;web&apos;,</div><div class=\"line\">    ], function ($router) &#123;</div><div class=\"line\">        require app_path(&apos;Http/routes.php&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>接上面的步驟，將 <code>use Illuminate\\Routing\\Router;</code>移除</li>\n<li>修改 mapWebRoutes function 的 path</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected function mapWebRoutes()</div><div class=\"line\">&#123;</div><div class=\"line\">    Route::group([</div><div class=\"line\">        &apos;namespace&apos; =&gt; $this-&gt;namespace, &apos;middleware&apos; =&gt; &apos;web&apos;,</div><div class=\"line\">    ], function ($router) &#123;</div><div class=\"line\">        require base_path(&apos;routes/web.php&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>更新 routes</h4>\n<ol>\n<li>在 app/Http/Controllers/Controller.php 刪除 <code>AuthorizesResources,</code></li>\n<li><a href=\"https://github.com/laravel/laravel/tree/5.3/app/Http/Controllers/Auth\" target=\"_blank\" rel=\"external\">更新 routes 檔案</a></li>\n<li>將更新檔案複製到 app/Http/Controllers/Auth 目錄底下</li>\n<li>新增以下兩行到 routes/web.php</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Auth::routes();</div><div class=\"line\">Route::get(&apos;/logout&apos;, &apos;Auth\\LoginController@logout&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 LoginController 將目錄導向 admin<br>\n<code>protected $redirectTo = '/admin';</code></li>\n<li>客製化 routes 來符合舊的路由設定</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos;=&gt;&apos;admin&apos;], function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Route::get(&apos;/admin&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">        return view(&apos;admin.index&apos;);</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/users&apos;, &apos;AdminUsersController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.users.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.users.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.users.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.users.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/posts&apos;, &apos;AdminPostsController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.posts.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.posts.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.posts.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.posts.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/categories&apos;, &apos;AdminCategoriesController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.categories.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.categories.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.categories.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.categories.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/comments&apos;, &apos;PostCommentsController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.comments.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.comments.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.comments.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.comments.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">    Route::resource(&apos;admin/comments/replies&apos;, &apos;CommentRepliesController&apos;, [&apos;names&apos;=&gt;[</div><div class=\"line\"></div><div class=\"line\">        &apos;index&apos;=&gt;&apos;admin.comments.replies.index&apos;,</div><div class=\"line\">        &apos;create&apos;=&gt;&apos;admin.comments.replies.create&apos;,</div><div class=\"line\">        &apos;store&apos;=&gt;&apos;admin.comments.replies.store&apos;,</div><div class=\"line\">        &apos;edit&apos;=&gt;&apos;admin.comments.replies.edit&apos;</div><div class=\"line\"></div><div class=\"line\">    ]]);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day2","thumbnail":["/images/learning/laravel/laravelday2.png"],"date":"2017-04-23T08:15:17.000Z","_content":"<img src=\"/images/learning/laravel/laravelday2.png\">\n\n***\n### Laravel 目錄結構\n/app/Http/Controllers：make request、routes 設定。\n/config： 註冊外掛進入 packages、database 連線 (但是連線資訊都設定在根目錄的 .env)、mail 連線。\n/database/migration：透過檔案建立資料，會非常常用。\n/public：css folder、javascript folder、image folder。\n/resources/views：存放畫面的位置，跟 controller 保持連線。\n/vendor：存放套件的地方。\n\n### Route 設定 - [路由設定官方文件](https://laravel.com/docs/5.2/routing)\n**修改 /app/Http/routes.php**\n傳 id, name 兩個變數到頁面的範例。\n```\nRoute::get('/post/{id}/{name}', function($id, $name){\n    return \"This is post number \". $id . \" \" .$name;\n});\n```\n\n### 路由命名法\n查詢路由狀態。\n`php artisan route:list`\n將路由用簡短的方式命名，以下用`admin.home`來取得路由。\n```\nRoute::get('admin/posts/example', array('as'=>'admin.home' ,function(){\n    $url = route('admin.home');\n\n    return \"this url is \". $url;\n}));\n```\n### Controller - [Controller 設定官方文件](https://laravel.com/docs/5.2/controllers)\n1. Controller 是用來處理來自 database 資訊的 class，然後將資料丟到 view (反之亦然)。\n2. Controller 路徑 - /app/Http/Controllers/Controller.php。\n3. 用 terminal 創建一個 Controller。\n    - `php artisan make:controller PostsController(Name)`\n    - `php artisan make:controller --resource PostsController(Name)`\n\n### 在路由設定 Controller\n1. 設定 routes.php\n`Route::get('/post', 'PostsController@index');` (讀取 Controller 的 index)\n2. 修改 PostsController.php\n`public function index() {return 'its working';}`\n\n### 在 Controller 傳送 data\n1. 設定 routes.php\n`Route::get('/post/{id}', 'PostsController@index');` (讀取 Controller 的 index)\n2. 修改 PostsController.php\n`public function index($id) {return 'its working the number' . $id;}`\n\n### Resources & Controller\n1. 設定 routes.php - 用 resource 的做法會產生 GET、DELETE、PUT...等不同 Method。\n`Route::resource('posts', 'PostsController');`\n2. 檢查路由狀態\n`php artisan route:list`\n3. 測試 show method\n`public function show($id) {return \"This is the show method yaaa\" . $id;}`\n4. 測試 create method\n`public function create() {return \"I am the method that creates stuff:)\";}`","source":"_posts/Lavarel-快速學習自我挑戰-Day2.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/laravel/laravelday2.png\ndate: 2017-04-23 16:15:17\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday2.png\">\n\n***\n### Laravel 目錄結構\n/app/Http/Controllers：make request、routes 設定。\n/config： 註冊外掛進入 packages、database 連線 (但是連線資訊都設定在根目錄的 .env)、mail 連線。\n/database/migration：透過檔案建立資料，會非常常用。\n/public：css folder、javascript folder、image folder。\n/resources/views：存放畫面的位置，跟 controller 保持連線。\n/vendor：存放套件的地方。\n\n### Route 設定 - [路由設定官方文件](https://laravel.com/docs/5.2/routing)\n**修改 /app/Http/routes.php**\n傳 id, name 兩個變數到頁面的範例。\n```\nRoute::get('/post/{id}/{name}', function($id, $name){\n    return \"This is post number \". $id . \" \" .$name;\n});\n```\n\n### 路由命名法\n查詢路由狀態。\n`php artisan route:list`\n將路由用簡短的方式命名，以下用`admin.home`來取得路由。\n```\nRoute::get('admin/posts/example', array('as'=>'admin.home' ,function(){\n    $url = route('admin.home');\n\n    return \"this url is \". $url;\n}));\n```\n### Controller - [Controller 設定官方文件](https://laravel.com/docs/5.2/controllers)\n1. Controller 是用來處理來自 database 資訊的 class，然後將資料丟到 view (反之亦然)。\n2. Controller 路徑 - /app/Http/Controllers/Controller.php。\n3. 用 terminal 創建一個 Controller。\n    - `php artisan make:controller PostsController(Name)`\n    - `php artisan make:controller --resource PostsController(Name)`\n\n### 在路由設定 Controller\n1. 設定 routes.php\n`Route::get('/post', 'PostsController@index');` (讀取 Controller 的 index)\n2. 修改 PostsController.php\n`public function index() {return 'its working';}`\n\n### 在 Controller 傳送 data\n1. 設定 routes.php\n`Route::get('/post/{id}', 'PostsController@index');` (讀取 Controller 的 index)\n2. 修改 PostsController.php\n`public function index($id) {return 'its working the number' . $id;}`\n\n### Resources & Controller\n1. 設定 routes.php - 用 resource 的做法會產生 GET、DELETE、PUT...等不同 Method。\n`Route::resource('posts', 'PostsController');`\n2. 檢查路由狀態\n`php artisan route:list`\n3. 測試 show method\n`public function show($id) {return \"This is the show method yaaa\" . $id;}`\n4. 測試 create method\n`public function create() {return \"I am the method that creates stuff:)\";}`","slug":"Lavarel-快速學習自我挑戰-Day2","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwy00217ifa3tpasu1k","content":"<img src=\"/images/learning/laravel/laravelday2.png\">\n<hr>\n<h3>Laravel 目錄結構</h3>\n<p>/app/Http/Controllers：make request、routes 設定。<br>\n/config： 註冊外掛進入 packages、database 連線 (但是連線資訊都設定在根目錄的 .env)、mail 連線。<br>\n/database/migration：透過檔案建立資料，會非常常用。<br>\n/public：css folder、javascript folder、image folder。<br>\n/resources/views：存放畫面的位置，跟 controller 保持連線。<br>\n/vendor：存放套件的地方。</p>\n<h3>Route 設定 - <a href=\"https://laravel.com/docs/5.2/routing\" target=\"_blank\" rel=\"external\">路由設定官方文件</a></h3>\n<p><strong>修改 /app/Http/routes.php</strong><br>\n傳 id, name 兩個變數到頁面的範例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/post/&#123;id&#125;/&#123;name&#125;&apos;, function($id, $name)&#123;</div><div class=\"line\">    return &quot;This is post number &quot;. $id . &quot; &quot; .$name;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3>路由命名法</h3>\n<p>查詢路由狀態。<br>\n<code>php artisan route:list</code><br>\n將路由用簡短的方式命名，以下用<code>admin.home</code>來取得路由。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;admin/posts/example&apos;, array(&apos;as&apos;=&gt;&apos;admin.home&apos; ,function()&#123;</div><div class=\"line\">    $url = route(&apos;admin.home&apos;);</div><div class=\"line\"></div><div class=\"line\">    return &quot;this url is &quot;. $url;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n<h3>Controller - <a href=\"https://laravel.com/docs/5.2/controllers\" target=\"_blank\" rel=\"external\">Controller 設定官方文件</a></h3>\n<ol>\n<li>Controller 是用來處理來自 database 資訊的 class，然後將資料丟到 view (反之亦然)。</li>\n<li>Controller 路徑 - /app/Http/Controllers/Controller.php。</li>\n<li>用 terminal 創建一個 Controller。\n<ul>\n<li><code>php artisan make:controller PostsController(Name)</code></li>\n<li><code>php artisan make:controller --resource PostsController(Name)</code></li>\n</ul>\n</li>\n</ol>\n<h3>在路由設定 Controller</h3>\n<ol>\n<li>設定 routes.php<br>\n<code>Route::get('/post', 'PostsController@index');</code> (讀取 Controller 的 index)</li>\n<li>修改 PostsController.php<br>\n<code>public function index() {return 'its working';}</code></li>\n</ol>\n<h3>在 Controller 傳送 data</h3>\n<ol>\n<li>設定 routes.php<br>\n<code>Route::get('/post/{id}', 'PostsController@index');</code> (讀取 Controller 的 index)</li>\n<li>修改 PostsController.php<br>\n<code>public function index($id) {return 'its working the number' . $id;}</code></li>\n</ol>\n<h3>Resources &amp; Controller</h3>\n<ol>\n<li>設定 routes.php - 用 resource 的做法會產生 GET、DELETE、PUT…等不同 Method。<br>\n<code>Route::resource('posts', 'PostsController');</code></li>\n<li>檢查路由狀態<br>\n<code>php artisan route:list</code></li>\n<li>測試 show method<br>\n<code>public function show($id) {return &quot;This is the show method yaaa&quot; . $id;}</code></li>\n<li>測試 create method<br>\n<code>public function create() {return &quot;I am the method that creates stuff:)&quot;;}</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday2.png\">\n<hr>\n<h3>Laravel 目錄結構</h3>\n<p>/app/Http/Controllers：make request、routes 設定。<br>\n/config： 註冊外掛進入 packages、database 連線 (但是連線資訊都設定在根目錄的 .env)、mail 連線。<br>\n/database/migration：透過檔案建立資料，會非常常用。<br>\n/public：css folder、javascript folder、image folder。<br>\n/resources/views：存放畫面的位置，跟 controller 保持連線。<br>\n/vendor：存放套件的地方。</p>\n<h3>Route 設定 - <a href=\"https://laravel.com/docs/5.2/routing\" target=\"_blank\" rel=\"external\">路由設定官方文件</a></h3>\n<p><strong>修改 /app/Http/routes.php</strong><br>\n傳 id, name 兩個變數到頁面的範例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/post/&#123;id&#125;/&#123;name&#125;&apos;, function($id, $name)&#123;</div><div class=\"line\">    return &quot;This is post number &quot;. $id . &quot; &quot; .$name;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3>路由命名法</h3>\n<p>查詢路由狀態。<br>\n<code>php artisan route:list</code><br>\n將路由用簡短的方式命名，以下用<code>admin.home</code>來取得路由。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;admin/posts/example&apos;, array(&apos;as&apos;=&gt;&apos;admin.home&apos; ,function()&#123;</div><div class=\"line\">    $url = route(&apos;admin.home&apos;);</div><div class=\"line\"></div><div class=\"line\">    return &quot;this url is &quot;. $url;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n<h3>Controller - <a href=\"https://laravel.com/docs/5.2/controllers\" target=\"_blank\" rel=\"external\">Controller 設定官方文件</a></h3>\n<ol>\n<li>Controller 是用來處理來自 database 資訊的 class，然後將資料丟到 view (反之亦然)。</li>\n<li>Controller 路徑 - /app/Http/Controllers/Controller.php。</li>\n<li>用 terminal 創建一個 Controller。\n<ul>\n<li><code>php artisan make:controller PostsController(Name)</code></li>\n<li><code>php artisan make:controller --resource PostsController(Name)</code></li>\n</ul>\n</li>\n</ol>\n<h3>在路由設定 Controller</h3>\n<ol>\n<li>設定 routes.php<br>\n<code>Route::get('/post', 'PostsController@index');</code> (讀取 Controller 的 index)</li>\n<li>修改 PostsController.php<br>\n<code>public function index() {return 'its working';}</code></li>\n</ol>\n<h3>在 Controller 傳送 data</h3>\n<ol>\n<li>設定 routes.php<br>\n<code>Route::get('/post/{id}', 'PostsController@index');</code> (讀取 Controller 的 index)</li>\n<li>修改 PostsController.php<br>\n<code>public function index($id) {return 'its working the number' . $id;}</code></li>\n</ol>\n<h3>Resources &amp; Controller</h3>\n<ol>\n<li>設定 routes.php - 用 resource 的做法會產生 GET、DELETE、PUT…等不同 Method。<br>\n<code>Route::resource('posts', 'PostsController');</code></li>\n<li>檢查路由狀態<br>\n<code>php artisan route:list</code></li>\n<li>測試 show method<br>\n<code>public function show($id) {return &quot;This is the show method yaaa&quot; . $id;}</code></li>\n<li>測試 create method<br>\n<code>public function create() {return &quot;I am the method that creates stuff:)&quot;;}</code></li>\n</ol>\n"},{"title":"Lavarel 快速學習自我挑戰 Day21","thumbnail":["/images/learning/laravel/laravelday21.png"],"date":"2017-05-31T08:58:07.000Z","_content":"<img src=\"/images/learning/laravel/laravelday21.png\">\n\n***\n### 升級到 Laravel 5.3 Part II\n#### 升級 users\n1. 把 AdminUsersController 的 `lists` 全部改為 `pluck`\n#### 升級 posts\n1. 新增到 routes/web.php\n`Route::get('/post/{id}', ['as'=>'home.post', 'uses'=>'AdminPostsController@post']);`\n2. 新增 comment routes\n`'show'=>'admin.comments.show'`\n3. 把 AdminPostsController 的 `lists` 全部改為 `pluck`\n4. 在 composer.json 升級套件 `\"laravelcollective/html\": \"5.3.*\",`，並使用 `composer update`\n#### 升級 middleware\n1. 修改 kernel.php 的 $routeMiddleware\n`'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,`\n2. 新增 kernel.php 的 $middlewareGroups\n`\\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,`\n3. 新增 kernel.php 的 $routeMiddleware\n`'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,`\n4. 新增 kernel.php 的 api\n`'bindings',`\n### WYSIWYG and file installing editor\n#### 下載套件 & 安裝編輯器\n1. [TinyMCE 官方網站](https://www.tinymce.com/)\n2. 新增 includes/tinyeditor.blade.php view\n```\n<script src=\"https://cloud.tinymce.com/stable/tinymce.min.js\"></script>\n<script>tinymce.init({ selector:'textarea' });</script>\n```\n3. 在 admin/posts/create view 新增 `@include('includes.tinyeditor')`\n4. [FileManager Github](https://github.com/UniSharp/laravel-filemanager)\n5. 安裝套件 ` composer require unisharp/laravel-filemanager`\n6. [laravel intervention 官方網站](http://image.intervention.io/)\n7. 安裝 intervention `composer require intervention/image`\n8. 將 class 加到 config/app.php provider\n`Unisharp\\Laravelfilemanager\\LaravelFilemanagerServiceProvider::class,`\n`Intervention\\Image\\ImageServiceProvider::class,`\n9. 將 class 加到 config/app.php alias\n`'Image' => Intervention\\Image\\Facades\\Image::class,`\n10. Publish the package’s config and assets\n`php artisan vendor:publish --tag=lfm_config`\n`php artisan vendor:publish --tag=lfm_public`\n#### 創建資料夾和上傳檔案\n1. 修改 includes/tinyeditor.blade.php view\n```\n<script src=\"https://cloud.tinymce.com/stable/tinymce.min.js\"></script>\n<script>\n    var editor_config = {\n        path_absolute : \"/\",\n        selector: \"textarea.my-editor\",\n        plugins: [\n            \"advlist autolink lists link image charmap print preview hr anchor pagebreak\",\n            \"searchreplace wordcount visualblocks visualchars code fullscreen\",\n            \"insertdatetime media nonbreaking save table contextmenu directionality\",\n            \"emoticons template paste textcolor colorpicker textpattern\"\n        ],\n        toolbar: \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media\",\n        relative_urls: false,\n        file_browser_callback : function(field_name, url, type, win) {\n            var x = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth;\n            var y = window.innerHeight|| document.documentElement.clientHeight|| document.getElementsByTagName('body')[0].clientHeight;\n\n            var cmsURL = editor_config.path_absolute + 'laravel-filemanager?field_name=' + field_name;\n            if (type == 'image') {\n                cmsURL = cmsURL + \"&type=Images\";\n            } else {\n                cmsURL = cmsURL + \"&type=Files\";\n            }\n\n            tinyMCE.activeEditor.windowManager.open({\n                file : cmsURL,\n                title : 'Filemanager',\n                width : x * 0.8,\n                height : y * 0.8,\n                resizable : \"yes\",\n                close_previous : \"no\"\n            });\n        }\n    };\n\n    tinymce.init(editor_config);\n</script>\n```\n2. 在 admin/posts/create view 的 textarea 加上 `my-editor` 的 class\n3. 修改 post view，強制顯示圖片\n`<p>{!! $post->body !!}</p>`\n4. 將編輯器也引入 admin/posts/edit view\n`@include('includes.tinyeditor')`\n### Disqus system\n1. 進入[網站首頁](https://disqus.com/)，選擇安裝程式碼到我的網站上面。\n2. 新增新的網站，按照步驟做即可。\n### 大量刪除媒體\n1. 新增 form 到 admin/media/index view\n```\n<form action=\"/delete/media/\" method=\"get\" class=\"form-inline\">\n    {{csrf_field()}}        \n    {{method_field('delete')}}\n    <div class=\"form-group\">\n        <select name=\"checkBoxArray\" id=\"\" class=\"form-control\">\n            <option value=\"delete\">Delete</option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"submit\" class=\"btn-primary\">\n    </div>\n        /*table code*/\n</form>\n```\n2. 新增 routes\n`Route::get('/delete/media', 'AdminMediasController@deleteMedia');`\n3. 將 Delete button 的 form 修改為\n```\n<input type=\"hidden\" name=\"photo\" value=\"{{$photo->id}}\">\n\n<div class=\"form-group\">\n    <input type=\"submit\" name=\"delete_single\" value=\"Delete\" class=\"btn btn-danger\">\n</div>\n```\n4. 在 AdminMediasController 新增 deleteMedia function\n```\npublic function deleteMedia(Request $request){\n\n    if(isset($request->delete_single)){\n\n        $this->destroy($request->photo);\n\n        return redirect()->back();\n\n    }\n\n    if(isset($request->delete_all) && !empty($request->checkBoxArray)){\n\n        $photos = Photo::findOrFail($request->checkBoxArray);\n\n        foreach ($photos as $photo) {\n\n            $photo->delete();\n\n        }\n\n        return redirect()->back();\n\n    } else {\n\n        return redirect()->back();\n\n    }\n\n}\n```\n5. 新增 script section 到 media/index view，讓全選功能完成。\n```\n@section('scripts')\n\n    <script>\n\n        $(document).ready(function(){\n\n            $('#options').click(function(){\n\n                if(this.checked){\n\n                    $('.checkBoxes').each(function(){\n\n                       this.checked = true;\n\n                    });\n\n                } else {\n\n                    $('.checkBoxes').each(function(){\n\n                        this.checked = false;\n\n                    });\n\n                }\n                \n            })\n\n        });\n\n    </script>\n\n@stop\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day21.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day21\nthumbnail:\n  - /images/learning/laravel/laravelday21.png\ndate: 2017-05-31 16:58:07\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday21.png\">\n\n***\n### 升級到 Laravel 5.3 Part II\n#### 升級 users\n1. 把 AdminUsersController 的 `lists` 全部改為 `pluck`\n#### 升級 posts\n1. 新增到 routes/web.php\n`Route::get('/post/{id}', ['as'=>'home.post', 'uses'=>'AdminPostsController@post']);`\n2. 新增 comment routes\n`'show'=>'admin.comments.show'`\n3. 把 AdminPostsController 的 `lists` 全部改為 `pluck`\n4. 在 composer.json 升級套件 `\"laravelcollective/html\": \"5.3.*\",`，並使用 `composer update`\n#### 升級 middleware\n1. 修改 kernel.php 的 $routeMiddleware\n`'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,`\n2. 新增 kernel.php 的 $middlewareGroups\n`\\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,`\n3. 新增 kernel.php 的 $routeMiddleware\n`'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,`\n4. 新增 kernel.php 的 api\n`'bindings',`\n### WYSIWYG and file installing editor\n#### 下載套件 & 安裝編輯器\n1. [TinyMCE 官方網站](https://www.tinymce.com/)\n2. 新增 includes/tinyeditor.blade.php view\n```\n<script src=\"https://cloud.tinymce.com/stable/tinymce.min.js\"></script>\n<script>tinymce.init({ selector:'textarea' });</script>\n```\n3. 在 admin/posts/create view 新增 `@include('includes.tinyeditor')`\n4. [FileManager Github](https://github.com/UniSharp/laravel-filemanager)\n5. 安裝套件 ` composer require unisharp/laravel-filemanager`\n6. [laravel intervention 官方網站](http://image.intervention.io/)\n7. 安裝 intervention `composer require intervention/image`\n8. 將 class 加到 config/app.php provider\n`Unisharp\\Laravelfilemanager\\LaravelFilemanagerServiceProvider::class,`\n`Intervention\\Image\\ImageServiceProvider::class,`\n9. 將 class 加到 config/app.php alias\n`'Image' => Intervention\\Image\\Facades\\Image::class,`\n10. Publish the package’s config and assets\n`php artisan vendor:publish --tag=lfm_config`\n`php artisan vendor:publish --tag=lfm_public`\n#### 創建資料夾和上傳檔案\n1. 修改 includes/tinyeditor.blade.php view\n```\n<script src=\"https://cloud.tinymce.com/stable/tinymce.min.js\"></script>\n<script>\n    var editor_config = {\n        path_absolute : \"/\",\n        selector: \"textarea.my-editor\",\n        plugins: [\n            \"advlist autolink lists link image charmap print preview hr anchor pagebreak\",\n            \"searchreplace wordcount visualblocks visualchars code fullscreen\",\n            \"insertdatetime media nonbreaking save table contextmenu directionality\",\n            \"emoticons template paste textcolor colorpicker textpattern\"\n        ],\n        toolbar: \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media\",\n        relative_urls: false,\n        file_browser_callback : function(field_name, url, type, win) {\n            var x = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth;\n            var y = window.innerHeight|| document.documentElement.clientHeight|| document.getElementsByTagName('body')[0].clientHeight;\n\n            var cmsURL = editor_config.path_absolute + 'laravel-filemanager?field_name=' + field_name;\n            if (type == 'image') {\n                cmsURL = cmsURL + \"&type=Images\";\n            } else {\n                cmsURL = cmsURL + \"&type=Files\";\n            }\n\n            tinyMCE.activeEditor.windowManager.open({\n                file : cmsURL,\n                title : 'Filemanager',\n                width : x * 0.8,\n                height : y * 0.8,\n                resizable : \"yes\",\n                close_previous : \"no\"\n            });\n        }\n    };\n\n    tinymce.init(editor_config);\n</script>\n```\n2. 在 admin/posts/create view 的 textarea 加上 `my-editor` 的 class\n3. 修改 post view，強制顯示圖片\n`<p>{!! $post->body !!}</p>`\n4. 將編輯器也引入 admin/posts/edit view\n`@include('includes.tinyeditor')`\n### Disqus system\n1. 進入[網站首頁](https://disqus.com/)，選擇安裝程式碼到我的網站上面。\n2. 新增新的網站，按照步驟做即可。\n### 大量刪除媒體\n1. 新增 form 到 admin/media/index view\n```\n<form action=\"/delete/media/\" method=\"get\" class=\"form-inline\">\n    {{csrf_field()}}        \n    {{method_field('delete')}}\n    <div class=\"form-group\">\n        <select name=\"checkBoxArray\" id=\"\" class=\"form-control\">\n            <option value=\"delete\">Delete</option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"submit\" class=\"btn-primary\">\n    </div>\n        /*table code*/\n</form>\n```\n2. 新增 routes\n`Route::get('/delete/media', 'AdminMediasController@deleteMedia');`\n3. 將 Delete button 的 form 修改為\n```\n<input type=\"hidden\" name=\"photo\" value=\"{{$photo->id}}\">\n\n<div class=\"form-group\">\n    <input type=\"submit\" name=\"delete_single\" value=\"Delete\" class=\"btn btn-danger\">\n</div>\n```\n4. 在 AdminMediasController 新增 deleteMedia function\n```\npublic function deleteMedia(Request $request){\n\n    if(isset($request->delete_single)){\n\n        $this->destroy($request->photo);\n\n        return redirect()->back();\n\n    }\n\n    if(isset($request->delete_all) && !empty($request->checkBoxArray)){\n\n        $photos = Photo::findOrFail($request->checkBoxArray);\n\n        foreach ($photos as $photo) {\n\n            $photo->delete();\n\n        }\n\n        return redirect()->back();\n\n    } else {\n\n        return redirect()->back();\n\n    }\n\n}\n```\n5. 新增 script section 到 media/index view，讓全選功能完成。\n```\n@section('scripts')\n\n    <script>\n\n        $(document).ready(function(){\n\n            $('#options').click(function(){\n\n                if(this.checked){\n\n                    $('.checkBoxes').each(function(){\n\n                       this.checked = true;\n\n                    });\n\n                } else {\n\n                    $('.checkBoxes').each(function(){\n\n                        this.checked = false;\n\n                    });\n\n                }\n                \n            })\n\n        });\n\n    </script>\n\n@stop\n```","slug":"Lavarel-快速學習自我挑戰-Day21","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwwz00257ifalnr05ij3","content":"<img src=\"/images/learning/laravel/laravelday21.png\">\n<hr>\n<h3>升級到 Laravel 5.3 Part II</h3>\n<h4>升級 users</h4>\n<ol>\n<li>把 AdminUsersController 的 <code>lists</code> 全部改為 <code>pluck</code></li>\n</ol>\n<h4>升級 posts</h4>\n<ol>\n<li>新增到 routes/web.php<br>\n<code>Route::get('/post/{id}', ['as'=&gt;'home.post', 'uses'=&gt;'AdminPostsController@post']);</code></li>\n<li>新增 comment routes<br>\n<code>'show'=&gt;'admin.comments.show'</code></li>\n<li>把 AdminPostsController 的 <code>lists</code> 全部改為 <code>pluck</code></li>\n<li>在 composer.json 升級套件 <code>&quot;laravelcollective/html&quot;: &quot;5.3.*&quot;,</code>，並使用 <code>composer update</code></li>\n</ol>\n<h4>升級 middleware</h4>\n<ol>\n<li>修改 kernel.php 的 $routeMiddleware<br>\n<code>'can' =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,</code></li>\n<li>新增 kernel.php 的 $middlewareGroups<br>\n<code>\\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,</code></li>\n<li>新增 kernel.php 的 $routeMiddleware<br>\n<code>'bindings' =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,</code></li>\n<li>新增 kernel.php 的 api<br>\n<code>'bindings',</code></li>\n</ol>\n<h3>WYSIWYG and file installing editor</h3>\n<h4>下載套件 &amp; 安裝編輯器</h4>\n<ol>\n<li><a href=\"https://www.tinymce.com/\" target=\"_blank\" rel=\"external\">TinyMCE 官方網站</a></li>\n<li>新增 includes/tinyeditor.blade.php view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;https://cloud.tinymce.com/stable/tinymce.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;tinymce.init(&#123; selector:&apos;textarea&apos; &#125;);&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 admin/posts/create view 新增 <code>@include('includes.tinyeditor')</code></li>\n<li><a href=\"https://github.com/UniSharp/laravel-filemanager\" target=\"_blank\" rel=\"external\">FileManager Github</a></li>\n<li>安裝套件 <code>composer require unisharp/laravel-filemanager</code></li>\n<li><a href=\"http://image.intervention.io/\" target=\"_blank\" rel=\"external\">laravel intervention 官方網站</a></li>\n<li>安裝 intervention <code>composer require intervention/image</code></li>\n<li>將 class 加到 config/app.php provider<br>\n<code>Unisharp\\Laravelfilemanager\\LaravelFilemanagerServiceProvider::class,</code><br>\n<code>Intervention\\Image\\ImageServiceProvider::class,</code></li>\n<li>將 class 加到 config/app.php alias<br>\n<code>'Image' =&gt; Intervention\\Image\\Facades\\Image::class,</code></li>\n<li>Publish the package’s config and assets<br>\n<code>php artisan vendor:publish --tag=lfm_config</code><br>\n<code>php artisan vendor:publish --tag=lfm_public</code></li>\n</ol>\n<h4>創建資料夾和上傳檔案</h4>\n<ol>\n<li>修改 includes/tinyeditor.blade.php view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;https://cloud.tinymce.com/stable/tinymce.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var editor_config = &#123;</div><div class=\"line\">        path_absolute : &quot;/&quot;,</div><div class=\"line\">        selector: &quot;textarea.my-editor&quot;,</div><div class=\"line\">        plugins: [</div><div class=\"line\">            &quot;advlist autolink lists link image charmap print preview hr anchor pagebreak&quot;,</div><div class=\"line\">            &quot;searchreplace wordcount visualblocks visualchars code fullscreen&quot;,</div><div class=\"line\">            &quot;insertdatetime media nonbreaking save table contextmenu directionality&quot;,</div><div class=\"line\">            &quot;emoticons template paste textcolor colorpicker textpattern&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        toolbar: &quot;insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media&quot;,</div><div class=\"line\">        relative_urls: false,</div><div class=\"line\">        file_browser_callback : function(field_name, url, type, win) &#123;</div><div class=\"line\">            var x = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName(&apos;body&apos;)[0].clientWidth;</div><div class=\"line\">            var y = window.innerHeight|| document.documentElement.clientHeight|| document.getElementsByTagName(&apos;body&apos;)[0].clientHeight;</div><div class=\"line\"></div><div class=\"line\">            var cmsURL = editor_config.path_absolute + &apos;laravel-filemanager?field_name=&apos; + field_name;</div><div class=\"line\">            if (type == &apos;image&apos;) &#123;</div><div class=\"line\">                cmsURL = cmsURL + &quot;&amp;type=Images&quot;;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                cmsURL = cmsURL + &quot;&amp;type=Files&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            tinyMCE.activeEditor.windowManager.open(&#123;</div><div class=\"line\">                file : cmsURL,</div><div class=\"line\">                title : &apos;Filemanager&apos;,</div><div class=\"line\">                width : x * 0.8,</div><div class=\"line\">                height : y * 0.8,</div><div class=\"line\">                resizable : &quot;yes&quot;,</div><div class=\"line\">                close_previous : &quot;no&quot;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    tinymce.init(editor_config);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 admin/posts/create view 的 textarea 加上 <code>my-editor</code> 的 class</li>\n<li>修改 post view，強制顯示圖片<br>\n<code>&lt;p&gt;{!! $post-&gt;body !!}&lt;/p&gt;</code></li>\n<li>將編輯器也引入 admin/posts/edit view<br>\n<code>@include('includes.tinyeditor')</code></li>\n</ol>\n<h3>Disqus system</h3>\n<ol>\n<li>進入<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">網站首頁</a>，選擇安裝程式碼到我的網站上面。</li>\n<li>新增新的網站，按照步驟做即可。</li>\n</ol>\n<h3>大量刪除媒體</h3>\n<ol>\n<li>新增 form 到 admin/media/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;/delete/media/&quot; method=&quot;get&quot; class=&quot;form-inline&quot;&gt;</div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;        </div><div class=\"line\">    &#123;&#123;method_field(&apos;delete&apos;)&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &lt;select name=&quot;checkBoxArray&quot; id=&quot;&quot; class=&quot;form-control&quot;&gt;</div><div class=\"line\">            &lt;option value=&quot;delete&quot;&gt;Delete&lt;/option&gt;</div><div class=\"line\">        &lt;/select&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &lt;input type=&quot;submit&quot; class=&quot;btn-primary&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">        /*table code*/</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 routes<br>\n<code>Route::get('/delete/media', 'AdminMediasController@deleteMedia');</code></li>\n<li>將 Delete button 的 form 修改為</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;hidden&quot; name=&quot;photo&quot; value=&quot;&#123;&#123;$photo-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;submit&quot; name=&quot;delete_single&quot; value=&quot;Delete&quot; class=&quot;btn btn-danger&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 AdminMediasController 新增 deleteMedia function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function deleteMedia(Request $request)&#123;</div><div class=\"line\"></div><div class=\"line\">    if(isset($request-&gt;delete_single))&#123;</div><div class=\"line\"></div><div class=\"line\">        $this-&gt;destroy($request-&gt;photo);</div><div class=\"line\"></div><div class=\"line\">        return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(isset($request-&gt;delete_all) &amp;&amp; !empty($request-&gt;checkBoxArray))&#123;</div><div class=\"line\"></div><div class=\"line\">        $photos = Photo::findOrFail($request-&gt;checkBoxArray);</div><div class=\"line\"></div><div class=\"line\">        foreach ($photos as $photo) &#123;</div><div class=\"line\"></div><div class=\"line\">            $photo-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 script section 到 media/index view，讓全選功能完成。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;scripts&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">        $(document).ready(function()&#123;</div><div class=\"line\"></div><div class=\"line\">            $(&apos;#options&apos;).click(function()&#123;</div><div class=\"line\"></div><div class=\"line\">                if(this.checked)&#123;</div><div class=\"line\"></div><div class=\"line\">                    $(&apos;.checkBoxes&apos;).each(function()&#123;</div><div class=\"line\"></div><div class=\"line\">                       this.checked = true;</div><div class=\"line\"></div><div class=\"line\">                    &#125;);</div><div class=\"line\"></div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">                    $(&apos;.checkBoxes&apos;).each(function()&#123;</div><div class=\"line\"></div><div class=\"line\">                        this.checked = false;</div><div class=\"line\"></div><div class=\"line\">                    &#125;);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday21.png\">\n<hr>\n<h3>升級到 Laravel 5.3 Part II</h3>\n<h4>升級 users</h4>\n<ol>\n<li>把 AdminUsersController 的 <code>lists</code> 全部改為 <code>pluck</code></li>\n</ol>\n<h4>升級 posts</h4>\n<ol>\n<li>新增到 routes/web.php<br>\n<code>Route::get('/post/{id}', ['as'=&gt;'home.post', 'uses'=&gt;'AdminPostsController@post']);</code></li>\n<li>新增 comment routes<br>\n<code>'show'=&gt;'admin.comments.show'</code></li>\n<li>把 AdminPostsController 的 <code>lists</code> 全部改為 <code>pluck</code></li>\n<li>在 composer.json 升級套件 <code>&quot;laravelcollective/html&quot;: &quot;5.3.*&quot;,</code>，並使用 <code>composer update</code></li>\n</ol>\n<h4>升級 middleware</h4>\n<ol>\n<li>修改 kernel.php 的 $routeMiddleware<br>\n<code>'can' =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,</code></li>\n<li>新增 kernel.php 的 $middlewareGroups<br>\n<code>\\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,</code></li>\n<li>新增 kernel.php 的 $routeMiddleware<br>\n<code>'bindings' =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,</code></li>\n<li>新增 kernel.php 的 api<br>\n<code>'bindings',</code></li>\n</ol>\n<h3>WYSIWYG and file installing editor</h3>\n<h4>下載套件 &amp; 安裝編輯器</h4>\n<ol>\n<li><a href=\"https://www.tinymce.com/\" target=\"_blank\" rel=\"external\">TinyMCE 官方網站</a></li>\n<li>新增 includes/tinyeditor.blade.php view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;https://cloud.tinymce.com/stable/tinymce.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;tinymce.init(&#123; selector:&apos;textarea&apos; &#125;);&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 admin/posts/create view 新增 <code>@include('includes.tinyeditor')</code></li>\n<li><a href=\"https://github.com/UniSharp/laravel-filemanager\" target=\"_blank\" rel=\"external\">FileManager Github</a></li>\n<li>安裝套件 <code>composer require unisharp/laravel-filemanager</code></li>\n<li><a href=\"http://image.intervention.io/\" target=\"_blank\" rel=\"external\">laravel intervention 官方網站</a></li>\n<li>安裝 intervention <code>composer require intervention/image</code></li>\n<li>將 class 加到 config/app.php provider<br>\n<code>Unisharp\\Laravelfilemanager\\LaravelFilemanagerServiceProvider::class,</code><br>\n<code>Intervention\\Image\\ImageServiceProvider::class,</code></li>\n<li>將 class 加到 config/app.php alias<br>\n<code>'Image' =&gt; Intervention\\Image\\Facades\\Image::class,</code></li>\n<li>Publish the package’s config and assets<br>\n<code>php artisan vendor:publish --tag=lfm_config</code><br>\n<code>php artisan vendor:publish --tag=lfm_public</code></li>\n</ol>\n<h4>創建資料夾和上傳檔案</h4>\n<ol>\n<li>修改 includes/tinyeditor.blade.php view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;https://cloud.tinymce.com/stable/tinymce.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var editor_config = &#123;</div><div class=\"line\">        path_absolute : &quot;/&quot;,</div><div class=\"line\">        selector: &quot;textarea.my-editor&quot;,</div><div class=\"line\">        plugins: [</div><div class=\"line\">            &quot;advlist autolink lists link image charmap print preview hr anchor pagebreak&quot;,</div><div class=\"line\">            &quot;searchreplace wordcount visualblocks visualchars code fullscreen&quot;,</div><div class=\"line\">            &quot;insertdatetime media nonbreaking save table contextmenu directionality&quot;,</div><div class=\"line\">            &quot;emoticons template paste textcolor colorpicker textpattern&quot;</div><div class=\"line\">        ],</div><div class=\"line\">        toolbar: &quot;insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media&quot;,</div><div class=\"line\">        relative_urls: false,</div><div class=\"line\">        file_browser_callback : function(field_name, url, type, win) &#123;</div><div class=\"line\">            var x = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName(&apos;body&apos;)[0].clientWidth;</div><div class=\"line\">            var y = window.innerHeight|| document.documentElement.clientHeight|| document.getElementsByTagName(&apos;body&apos;)[0].clientHeight;</div><div class=\"line\"></div><div class=\"line\">            var cmsURL = editor_config.path_absolute + &apos;laravel-filemanager?field_name=&apos; + field_name;</div><div class=\"line\">            if (type == &apos;image&apos;) &#123;</div><div class=\"line\">                cmsURL = cmsURL + &quot;&amp;type=Images&quot;;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                cmsURL = cmsURL + &quot;&amp;type=Files&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            tinyMCE.activeEditor.windowManager.open(&#123;</div><div class=\"line\">                file : cmsURL,</div><div class=\"line\">                title : &apos;Filemanager&apos;,</div><div class=\"line\">                width : x * 0.8,</div><div class=\"line\">                height : y * 0.8,</div><div class=\"line\">                resizable : &quot;yes&quot;,</div><div class=\"line\">                close_previous : &quot;no&quot;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    tinymce.init(editor_config);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 admin/posts/create view 的 textarea 加上 <code>my-editor</code> 的 class</li>\n<li>修改 post view，強制顯示圖片<br>\n<code>&lt;p&gt;{!! $post-&gt;body !!}&lt;/p&gt;</code></li>\n<li>將編輯器也引入 admin/posts/edit view<br>\n<code>@include('includes.tinyeditor')</code></li>\n</ol>\n<h3>Disqus system</h3>\n<ol>\n<li>進入<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">網站首頁</a>，選擇安裝程式碼到我的網站上面。</li>\n<li>新增新的網站，按照步驟做即可。</li>\n</ol>\n<h3>大量刪除媒體</h3>\n<ol>\n<li>新增 form 到 admin/media/index view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;/delete/media/&quot; method=&quot;get&quot; class=&quot;form-inline&quot;&gt;</div><div class=\"line\">    &#123;&#123;csrf_field()&#125;&#125;        </div><div class=\"line\">    &#123;&#123;method_field(&apos;delete&apos;)&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &lt;select name=&quot;checkBoxArray&quot; id=&quot;&quot; class=&quot;form-control&quot;&gt;</div><div class=\"line\">            &lt;option value=&quot;delete&quot;&gt;Delete&lt;/option&gt;</div><div class=\"line\">        &lt;/select&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">        &lt;input type=&quot;submit&quot; class=&quot;btn-primary&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">        /*table code*/</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 routes<br>\n<code>Route::get('/delete/media', 'AdminMediasController@deleteMedia');</code></li>\n<li>將 Delete button 的 form 修改為</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;hidden&quot; name=&quot;photo&quot; value=&quot;&#123;&#123;$photo-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;submit&quot; name=&quot;delete_single&quot; value=&quot;Delete&quot; class=&quot;btn btn-danger&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 AdminMediasController 新增 deleteMedia function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function deleteMedia(Request $request)&#123;</div><div class=\"line\"></div><div class=\"line\">    if(isset($request-&gt;delete_single))&#123;</div><div class=\"line\"></div><div class=\"line\">        $this-&gt;destroy($request-&gt;photo);</div><div class=\"line\"></div><div class=\"line\">        return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(isset($request-&gt;delete_all) &amp;&amp; !empty($request-&gt;checkBoxArray))&#123;</div><div class=\"line\"></div><div class=\"line\">        $photos = Photo::findOrFail($request-&gt;checkBoxArray);</div><div class=\"line\"></div><div class=\"line\">        foreach ($photos as $photo) &#123;</div><div class=\"line\"></div><div class=\"line\">            $photo-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">        return redirect()-&gt;back();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 script section 到 media/index view，讓全選功能完成。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@section(&apos;scripts&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\">        $(document).ready(function()&#123;</div><div class=\"line\"></div><div class=\"line\">            $(&apos;#options&apos;).click(function()&#123;</div><div class=\"line\"></div><div class=\"line\">                if(this.checked)&#123;</div><div class=\"line\"></div><div class=\"line\">                    $(&apos;.checkBoxes&apos;).each(function()&#123;</div><div class=\"line\"></div><div class=\"line\">                       this.checked = true;</div><div class=\"line\"></div><div class=\"line\">                    &#125;);</div><div class=\"line\"></div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\"></div><div class=\"line\">                    $(&apos;.checkBoxes&apos;).each(function()&#123;</div><div class=\"line\"></div><div class=\"line\">                        this.checked = false;</div><div class=\"line\"></div><div class=\"line\">                    &#125;);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day22","thumbnail":["/images/learning/laravel/laravelday22.jpg"],"date":"2017-06-01T07:04:36.000Z","_content":"<img src=\"/images/learning/laravel/laravelday22.jpg\">\n\n***\n### 部署 app 與共享主機\n#### 主機相關\n1. 申請 godaddy 主機[(一元主機)](http://www.tkqlhce.com/ie77p-85-7NVWVUVWTNPOWUQORV)\n2. 啟用 ssh 連線並匯入金鑰 `ssh -i ~/.ssh/id_rsa 帳號@ip`\n3. Select PHP verion => 選擇 5.6 => 啟用 zip => 儲存\n#### Composer install\n1. 預設就裝好了。\n2. 如果沒有，使用 wget 或是 curl 取得 composer\n`wget https://getcomposer.org/installer`\n`curl -sS https://getcomposer.org/installer | php`\n3. 檢查 composer 是否可用 `php installer --check`\n4. 安裝 composer `php installer`\n5. 執行 composer `php composer.phar`\n#### laravel install\n1. 用 composer 下載 laravel installer\n`composer global require \"laravel/installer\"`\n2. 新增 path 到 ~/.bash_profile\n`export PATH=\"$PATH:$HOME/.composer/vendor/bin\"`\n3. 更新檔案\n`source .bash_profile`\n4. 執行 `laravel` 語法\n#### 上傳專案\n1. 直接到 cpanel 上傳檔案\n#### 設定環境檔案\n1. 下載相依檔案 `composer update`\n2. 複製 env 範例檔 `cp .env.example .env`\n3. 設定 .env\n4. 新增 APP_KEY `php artisan key:generate` \n#### 發佈\n1. 修改 documentroot 到 public folder\n2. 如果主目錄路徑不同，可修改 public 目錄下的 index.php\n3. 修改 config/app.php 的 URL 網址、時區(Asia/Taipei)\n4. 將 adimin/media/index view 的 form path 改為 `delete/media`\n5. 將 routes/web.php 的 delete media route 改為\n`Route::get('admin/delete/media', 'AdminMediasController@deleteMedia');`\n6. 修改 .env 將 debug 關閉且將環境改為 production\n### 升級到 5.4\n1. 刪除 bootstrap/cache/compiled.php\n2. 修改 composer.json\n`\"phpunit/phpunit\": \"~5.7\",`\n`\"laravel/framework\": \"5.4.*\",`\n`\"laravelcollective/html\": \"5.4.*\",`\n`\"cviebrock/eloquent-sluggable\": \"4.2.1\",`\n3. 更新套件 `composer update`\n4. 清除快取 `php artisan view:clear`\n5. 清除路由快取 `php artisan route:clear`\n6. 刪除 gulpfile.js\n7. 新增 webpack.mix.js\n```\nconst { mix } = require ('laravel-mix');\n\nmix.js('resources/assets/js/app.js', 'public/js')\n    .sass('resources/assets/sass/app.css', 'public/css');\n\nmix.styles([\n\n    'resources/assets/css/libs/blog-post.css',\n    'resources/assets/css/libs/bootstrap.css',\n    'resources/assets/css/libs/font-awesome.css',\n    'resources/assets/css/libs/metisMenu.css',\n    'resources/assets/css/libs/sb-admin-2.css'\n\n], 'public/css/libs.css');\n\nmix.scripts([\n\n    'resources/assets/js/libs/jquery.js',\n    'resources/assets/js/libs/bootstrap.js',\n    'resources/assets/js/libs/metisMenu.js',\n    'resources/assets/js/libs/sb-admin-2.js',\n    'resources/assets/js/libs/scripts.js'\n\n], './public/js/libs.js');\n\n```\n8. 將 package.json 取代為\n```\n{\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"watch\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"watch-poll\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --watch-poll --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"hot\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"production\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n  },\n  \"devDependencies\": {\n    \"axios\": \"^0.15.3\",\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"jquery\": \"^3.1.1\",\n    \"laravel-mix\": \"^0.8.1\",\n    \"lodash\": \"^4.17.4\",\n    \"vue\": \"^2.2.2\"\n  }\n}\n```\n9. 安裝相依套件 `npm install`\n10. 執行 webpack `npm run dev`\n11. 監控 webpack 任何變化 `npm run watch`\n### 完成課程結業證書\n<img src=\"/images/learning/laravel/EdwinDiaz_Laravel.jpg\">","source":"_posts/Lavarel-快速學習自我挑戰-Day22.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day22\nthumbnail:\n  - /images/learning/laravel/laravelday22.jpg\ndate: 2017-06-01 15:04:36\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday22.jpg\">\n\n***\n### 部署 app 與共享主機\n#### 主機相關\n1. 申請 godaddy 主機[(一元主機)](http://www.tkqlhce.com/ie77p-85-7NVWVUVWTNPOWUQORV)\n2. 啟用 ssh 連線並匯入金鑰 `ssh -i ~/.ssh/id_rsa 帳號@ip`\n3. Select PHP verion => 選擇 5.6 => 啟用 zip => 儲存\n#### Composer install\n1. 預設就裝好了。\n2. 如果沒有，使用 wget 或是 curl 取得 composer\n`wget https://getcomposer.org/installer`\n`curl -sS https://getcomposer.org/installer | php`\n3. 檢查 composer 是否可用 `php installer --check`\n4. 安裝 composer `php installer`\n5. 執行 composer `php composer.phar`\n#### laravel install\n1. 用 composer 下載 laravel installer\n`composer global require \"laravel/installer\"`\n2. 新增 path 到 ~/.bash_profile\n`export PATH=\"$PATH:$HOME/.composer/vendor/bin\"`\n3. 更新檔案\n`source .bash_profile`\n4. 執行 `laravel` 語法\n#### 上傳專案\n1. 直接到 cpanel 上傳檔案\n#### 設定環境檔案\n1. 下載相依檔案 `composer update`\n2. 複製 env 範例檔 `cp .env.example .env`\n3. 設定 .env\n4. 新增 APP_KEY `php artisan key:generate` \n#### 發佈\n1. 修改 documentroot 到 public folder\n2. 如果主目錄路徑不同，可修改 public 目錄下的 index.php\n3. 修改 config/app.php 的 URL 網址、時區(Asia/Taipei)\n4. 將 adimin/media/index view 的 form path 改為 `delete/media`\n5. 將 routes/web.php 的 delete media route 改為\n`Route::get('admin/delete/media', 'AdminMediasController@deleteMedia');`\n6. 修改 .env 將 debug 關閉且將環境改為 production\n### 升級到 5.4\n1. 刪除 bootstrap/cache/compiled.php\n2. 修改 composer.json\n`\"phpunit/phpunit\": \"~5.7\",`\n`\"laravel/framework\": \"5.4.*\",`\n`\"laravelcollective/html\": \"5.4.*\",`\n`\"cviebrock/eloquent-sluggable\": \"4.2.1\",`\n3. 更新套件 `composer update`\n4. 清除快取 `php artisan view:clear`\n5. 清除路由快取 `php artisan route:clear`\n6. 刪除 gulpfile.js\n7. 新增 webpack.mix.js\n```\nconst { mix } = require ('laravel-mix');\n\nmix.js('resources/assets/js/app.js', 'public/js')\n    .sass('resources/assets/sass/app.css', 'public/css');\n\nmix.styles([\n\n    'resources/assets/css/libs/blog-post.css',\n    'resources/assets/css/libs/bootstrap.css',\n    'resources/assets/css/libs/font-awesome.css',\n    'resources/assets/css/libs/metisMenu.css',\n    'resources/assets/css/libs/sb-admin-2.css'\n\n], 'public/css/libs.css');\n\nmix.scripts([\n\n    'resources/assets/js/libs/jquery.js',\n    'resources/assets/js/libs/bootstrap.js',\n    'resources/assets/js/libs/metisMenu.js',\n    'resources/assets/js/libs/sb-admin-2.js',\n    'resources/assets/js/libs/scripts.js'\n\n], './public/js/libs.js');\n\n```\n8. 將 package.json 取代為\n```\n{\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"watch\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"watch-poll\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --watch-poll --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"hot\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"production\": \"node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n  },\n  \"devDependencies\": {\n    \"axios\": \"^0.15.3\",\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"jquery\": \"^3.1.1\",\n    \"laravel-mix\": \"^0.8.1\",\n    \"lodash\": \"^4.17.4\",\n    \"vue\": \"^2.2.2\"\n  }\n}\n```\n9. 安裝相依套件 `npm install`\n10. 執行 webpack `npm run dev`\n11. 監控 webpack 任何變化 `npm run watch`\n### 完成課程結業證書\n<img src=\"/images/learning/laravel/EdwinDiaz_Laravel.jpg\">","slug":"Lavarel-快速學習自我挑戰-Day22","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx000277ifap0268f5c","content":"<img src=\"/images/learning/laravel/laravelday22.jpg\">\n<hr>\n<h3>部署 app 與共享主機</h3>\n<h4>主機相關</h4>\n<ol>\n<li>申請 godaddy 主機<a href=\"http://www.tkqlhce.com/ie77p-85-7NVWVUVWTNPOWUQORV\" target=\"_blank\" rel=\"external\">(一元主機)</a></li>\n<li>啟用 ssh 連線並匯入金鑰 <code>ssh -i ~/.ssh/id_rsa 帳號@ip</code></li>\n<li>Select PHP verion =&gt; 選擇 5.6 =&gt; 啟用 zip =&gt; 儲存</li>\n</ol>\n<h4>Composer install</h4>\n<ol>\n<li>預設就裝好了。</li>\n<li>如果沒有，使用 wget 或是 curl 取得 composer<br>\n<code>wget https://getcomposer.org/installer</code><br>\n<code>curl -sS https://getcomposer.org/installer | php</code></li>\n<li>檢查 composer 是否可用 <code>php installer --check</code></li>\n<li>安裝 composer <code>php installer</code></li>\n<li>執行 composer <code>php composer.phar</code></li>\n</ol>\n<h4>laravel install</h4>\n<ol>\n<li>用 composer 下載 laravel installer<br>\n<code>composer global require &quot;laravel/installer&quot;</code></li>\n<li>新增 path 到 ~/.bash_profile<br>\n<code>export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot;</code></li>\n<li>更新檔案<br>\n<code>source .bash_profile</code></li>\n<li>執行 <code>laravel</code> 語法</li>\n</ol>\n<h4>上傳專案</h4>\n<ol>\n<li>直接到 cpanel 上傳檔案</li>\n</ol>\n<h4>設定環境檔案</h4>\n<ol>\n<li>下載相依檔案 <code>composer update</code></li>\n<li>複製 env 範例檔 <code>cp .env.example .env</code></li>\n<li>設定 .env</li>\n<li>新增 APP_KEY <code>php artisan key:generate</code></li>\n</ol>\n<h4>發佈</h4>\n<ol>\n<li>修改 documentroot 到 public folder</li>\n<li>如果主目錄路徑不同，可修改 public 目錄下的 index.php</li>\n<li>修改 config/app.php 的 URL 網址、時區(Asia/Taipei)</li>\n<li>將 adimin/media/index view 的 form path 改為 <code>delete/media</code></li>\n<li>將 routes/web.php 的 delete media route 改為<br>\n<code>Route::get('admin/delete/media', 'AdminMediasController@deleteMedia');</code></li>\n<li>修改 .env 將 debug 關閉且將環境改為 production</li>\n</ol>\n<h3>升級到 5.4</h3>\n<ol>\n<li>刪除 bootstrap/cache/compiled.php</li>\n<li>修改 composer.json<br>\n<code>&quot;phpunit/phpunit&quot;: &quot;~5.7&quot;,</code><br>\n<code>&quot;laravel/framework&quot;: &quot;5.4.*&quot;,</code><br>\n<code>&quot;laravelcollective/html&quot;: &quot;5.4.*&quot;,</code><br>\n<code>&quot;cviebrock/eloquent-sluggable&quot;: &quot;4.2.1&quot;,</code></li>\n<li>更新套件 <code>composer update</code></li>\n<li>清除快取 <code>php artisan view:clear</code></li>\n<li>清除路由快取 <code>php artisan route:clear</code></li>\n<li>刪除 gulpfile.js</li>\n<li>新增 webpack.mix.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123; mix &#125; = require (&apos;laravel-mix&apos;);</div><div class=\"line\"></div><div class=\"line\">mix.js(&apos;resources/assets/js/app.js&apos;, &apos;public/js&apos;)</div><div class=\"line\">    .sass(&apos;resources/assets/sass/app.css&apos;, &apos;public/css&apos;);</div><div class=\"line\"></div><div class=\"line\">mix.styles([</div><div class=\"line\"></div><div class=\"line\">    &apos;resources/assets/css/libs/blog-post.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/bootstrap.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/font-awesome.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/metisMenu.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/sb-admin-2.css&apos;</div><div class=\"line\"></div><div class=\"line\">], &apos;public/css/libs.css&apos;);</div><div class=\"line\"></div><div class=\"line\">mix.scripts([</div><div class=\"line\"></div><div class=\"line\">    &apos;resources/assets/js/libs/jquery.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/bootstrap.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/metisMenu.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/sb-admin-2.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/scripts.js&apos;</div><div class=\"line\"></div><div class=\"line\">], &apos;./public/js/libs.js&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>將 package.json 取代為</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;private&quot;: true,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;dev&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;watch&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;watch-poll&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --watch-poll --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;hot&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;production&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;axios&quot;: &quot;^0.15.3&quot;,</div><div class=\"line\">    &quot;bootstrap-sass&quot;: &quot;^3.3.7&quot;,</div><div class=\"line\">    &quot;jquery&quot;: &quot;^3.1.1&quot;,</div><div class=\"line\">    &quot;laravel-mix&quot;: &quot;^0.8.1&quot;,</div><div class=\"line\">    &quot;lodash&quot;: &quot;^4.17.4&quot;,</div><div class=\"line\">    &quot;vue&quot;: &quot;^2.2.2&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>安裝相依套件 <code>npm install</code></li>\n<li>執行 webpack <code>npm run dev</code></li>\n<li>監控 webpack 任何變化 <code>npm run watch</code></li>\n</ol>\n<h3>完成課程結業證書</h3>\n<img src=\"/images/learning/laravel/EdwinDiaz_Laravel.jpg\">","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday22.jpg\">\n<hr>\n<h3>部署 app 與共享主機</h3>\n<h4>主機相關</h4>\n<ol>\n<li>申請 godaddy 主機<a href=\"http://www.tkqlhce.com/ie77p-85-7NVWVUVWTNPOWUQORV\" target=\"_blank\" rel=\"external\">(一元主機)</a></li>\n<li>啟用 ssh 連線並匯入金鑰 <code>ssh -i ~/.ssh/id_rsa 帳號@ip</code></li>\n<li>Select PHP verion =&gt; 選擇 5.6 =&gt; 啟用 zip =&gt; 儲存</li>\n</ol>\n<h4>Composer install</h4>\n<ol>\n<li>預設就裝好了。</li>\n<li>如果沒有，使用 wget 或是 curl 取得 composer<br>\n<code>wget https://getcomposer.org/installer</code><br>\n<code>curl -sS https://getcomposer.org/installer | php</code></li>\n<li>檢查 composer 是否可用 <code>php installer --check</code></li>\n<li>安裝 composer <code>php installer</code></li>\n<li>執行 composer <code>php composer.phar</code></li>\n</ol>\n<h4>laravel install</h4>\n<ol>\n<li>用 composer 下載 laravel installer<br>\n<code>composer global require &quot;laravel/installer&quot;</code></li>\n<li>新增 path 到 ~/.bash_profile<br>\n<code>export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot;</code></li>\n<li>更新檔案<br>\n<code>source .bash_profile</code></li>\n<li>執行 <code>laravel</code> 語法</li>\n</ol>\n<h4>上傳專案</h4>\n<ol>\n<li>直接到 cpanel 上傳檔案</li>\n</ol>\n<h4>設定環境檔案</h4>\n<ol>\n<li>下載相依檔案 <code>composer update</code></li>\n<li>複製 env 範例檔 <code>cp .env.example .env</code></li>\n<li>設定 .env</li>\n<li>新增 APP_KEY <code>php artisan key:generate</code></li>\n</ol>\n<h4>發佈</h4>\n<ol>\n<li>修改 documentroot 到 public folder</li>\n<li>如果主目錄路徑不同，可修改 public 目錄下的 index.php</li>\n<li>修改 config/app.php 的 URL 網址、時區(Asia/Taipei)</li>\n<li>將 adimin/media/index view 的 form path 改為 <code>delete/media</code></li>\n<li>將 routes/web.php 的 delete media route 改為<br>\n<code>Route::get('admin/delete/media', 'AdminMediasController@deleteMedia');</code></li>\n<li>修改 .env 將 debug 關閉且將環境改為 production</li>\n</ol>\n<h3>升級到 5.4</h3>\n<ol>\n<li>刪除 bootstrap/cache/compiled.php</li>\n<li>修改 composer.json<br>\n<code>&quot;phpunit/phpunit&quot;: &quot;~5.7&quot;,</code><br>\n<code>&quot;laravel/framework&quot;: &quot;5.4.*&quot;,</code><br>\n<code>&quot;laravelcollective/html&quot;: &quot;5.4.*&quot;,</code><br>\n<code>&quot;cviebrock/eloquent-sluggable&quot;: &quot;4.2.1&quot;,</code></li>\n<li>更新套件 <code>composer update</code></li>\n<li>清除快取 <code>php artisan view:clear</code></li>\n<li>清除路由快取 <code>php artisan route:clear</code></li>\n<li>刪除 gulpfile.js</li>\n<li>新增 webpack.mix.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123; mix &#125; = require (&apos;laravel-mix&apos;);</div><div class=\"line\"></div><div class=\"line\">mix.js(&apos;resources/assets/js/app.js&apos;, &apos;public/js&apos;)</div><div class=\"line\">    .sass(&apos;resources/assets/sass/app.css&apos;, &apos;public/css&apos;);</div><div class=\"line\"></div><div class=\"line\">mix.styles([</div><div class=\"line\"></div><div class=\"line\">    &apos;resources/assets/css/libs/blog-post.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/bootstrap.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/font-awesome.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/metisMenu.css&apos;,</div><div class=\"line\">    &apos;resources/assets/css/libs/sb-admin-2.css&apos;</div><div class=\"line\"></div><div class=\"line\">], &apos;public/css/libs.css&apos;);</div><div class=\"line\"></div><div class=\"line\">mix.scripts([</div><div class=\"line\"></div><div class=\"line\">    &apos;resources/assets/js/libs/jquery.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/bootstrap.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/metisMenu.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/sb-admin-2.js&apos;,</div><div class=\"line\">    &apos;resources/assets/js/libs/scripts.js&apos;</div><div class=\"line\"></div><div class=\"line\">], &apos;./public/js/libs.js&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>將 package.json 取代為</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;private&quot;: true,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;dev&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;watch&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;watch-poll&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --watch-poll --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;hot&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,</div><div class=\"line\">    &quot;production&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;axios&quot;: &quot;^0.15.3&quot;,</div><div class=\"line\">    &quot;bootstrap-sass&quot;: &quot;^3.3.7&quot;,</div><div class=\"line\">    &quot;jquery&quot;: &quot;^3.1.1&quot;,</div><div class=\"line\">    &quot;laravel-mix&quot;: &quot;^0.8.1&quot;,</div><div class=\"line\">    &quot;lodash&quot;: &quot;^4.17.4&quot;,</div><div class=\"line\">    &quot;vue&quot;: &quot;^2.2.2&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>安裝相依套件 <code>npm install</code></li>\n<li>執行 webpack <code>npm run dev</code></li>\n<li>監控 webpack 任何變化 <code>npm run watch</code></li>\n</ol>\n<h3>完成課程結業證書</h3>\n<img src=\"/images/learning/laravel/EdwinDiaz_Laravel.jpg\">"},{"title":"Lavarel 快速學習自我挑戰 Day3","thumbnail":["/images/learning/laravel/laravelday3.jpg"],"date":"2017-04-24T07:12:12.000Z","_content":"<img src=\"/images/learning/laravel/laravelday3.jpg\">\n\n***\n### Views - [Views 設定官方文件](https://laravel.com/docs/5.2/views)\n路徑：/resources/views\n1. 在 Controller 新增一個 function\n`public function contact(){return view('contact');}`\n2. 新增一個 view (檔名為xxx.blade.php)\n    - 可以將 view 的檔案設定在子目錄下。例：新增一個 pages/contact.php，路由部分則要設定為 `view(page/contact(或是page.contact)')`\n3. Routes 設定\n`Route::get('/contact', 'PostsController@contact');`\n\n### 傳送 data 到 Views\n1. 設定 Routes\n`Route::get('post/{id}', 'PostsController@show_post');`\n2. 在 Controller 新增一個 function\n`public function show_post($id){return view('post')->with('id',$id);}`\n3. 在 View 裡面使用 data `{{ \"{{$id\" }}}}`\n\n### 傳送多 data 到 Views\n1. 設定 Routes\n`Route::get('post/{id}/{name}/{password}', 'PostsController@show_post');`\n2. 在 Controller 使用 compact function\n`public function show_post($id, $name, $password){return view('post', compact('id','name','password'));}`\n3. 在 View 裡面使用 data\n\n### blade (PHP模板引擎) - [blade 設定官方文件](https://laravel.com/docs/5.2/blade)\n`!` + `tab` => html 模板\n`div.container` + `tab` => class 為 container 的 div 容器\n`@yield('content')` => 產生一個內容的區塊\n`@extends('layouts.app')` => 使用 layouts.app 裡面的內容\n`@section('content')` => 產生自定義內容\n\nblade 使用範例：\n1. 在 PostsController 裡的 Contact 新增人名 array，並傳送 data\n`$people = ['Edwin', 'Jose', 'James', 'Peter', 'Maria'];`\n`return view('contact', compact('people'));`\n2. 在 contact.blade.php 裡面列出人名 (blade 的函式皆以 @ 開頭)\n```\n@if (count($people))\n  <ul>\n  @foreach($people as $person)\n      <li>{{$person}}</li>\n  @endforeach\n  </ul>\n@endif\n```\n\n### Database Migration - [Migration 設定官方文件](https://laravel.com/docs/5.2/migrations)\nsqlite：file based database，資料庫內容儲存於檔案裡，應用於小專案。\n1. 先設定 .env\n2. `php artisan migrate` (將資料庫設定檔自動移入資料庫)\n\n自定義 migration\n1. 自行創建一個 migration 檔案：`php artisan make:migration (migration_NAME) (FLAG)`\n範例：`php artisan make:migration create_posts_table --create=\"posts\"`\n2. 在 migration 裡面新增 table 項目。(`$table->string('title');`)\n\n撤回上一步完成的 migration：`php artisan migrate:rollback`。\n\n### 新增 column 到存在的 table\n1. 新增一個 migration：`php artisan make:migration add_is_admin_column_to_posts_tables --table=\"posts\"(定義相關table)`\n2. 在新增的 migration 檔案的 up 新增 `$table->integer('is_admin')->unsigned();`\n3. 在新增的 migration 檔案的 down 新增 `$table->dropColumn('is_admin');`\n\n### Migration 命令\n刪除所有資料庫內容：`php artisan migrate:reset`\n更新資料庫內容(刪除資料庫再重新新增):`php artisan migrate:refresh`\n確認 migration 狀態：`php artisan migrate:status`","source":"_posts/Lavarel-快速學習自我挑戰-Day3.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day3\nthumbnail:\n  - /images/learning/laravel/laravelday3.jpg\ndate: 2017-04-24 15:12:12\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday3.jpg\">\n\n***\n### Views - [Views 設定官方文件](https://laravel.com/docs/5.2/views)\n路徑：/resources/views\n1. 在 Controller 新增一個 function\n`public function contact(){return view('contact');}`\n2. 新增一個 view (檔名為xxx.blade.php)\n    - 可以將 view 的檔案設定在子目錄下。例：新增一個 pages/contact.php，路由部分則要設定為 `view(page/contact(或是page.contact)')`\n3. Routes 設定\n`Route::get('/contact', 'PostsController@contact');`\n\n### 傳送 data 到 Views\n1. 設定 Routes\n`Route::get('post/{id}', 'PostsController@show_post');`\n2. 在 Controller 新增一個 function\n`public function show_post($id){return view('post')->with('id',$id);}`\n3. 在 View 裡面使用 data `{{ \"{{$id\" }}}}`\n\n### 傳送多 data 到 Views\n1. 設定 Routes\n`Route::get('post/{id}/{name}/{password}', 'PostsController@show_post');`\n2. 在 Controller 使用 compact function\n`public function show_post($id, $name, $password){return view('post', compact('id','name','password'));}`\n3. 在 View 裡面使用 data\n\n### blade (PHP模板引擎) - [blade 設定官方文件](https://laravel.com/docs/5.2/blade)\n`!` + `tab` => html 模板\n`div.container` + `tab` => class 為 container 的 div 容器\n`@yield('content')` => 產生一個內容的區塊\n`@extends('layouts.app')` => 使用 layouts.app 裡面的內容\n`@section('content')` => 產生自定義內容\n\nblade 使用範例：\n1. 在 PostsController 裡的 Contact 新增人名 array，並傳送 data\n`$people = ['Edwin', 'Jose', 'James', 'Peter', 'Maria'];`\n`return view('contact', compact('people'));`\n2. 在 contact.blade.php 裡面列出人名 (blade 的函式皆以 @ 開頭)\n```\n@if (count($people))\n  <ul>\n  @foreach($people as $person)\n      <li>{{$person}}</li>\n  @endforeach\n  </ul>\n@endif\n```\n\n### Database Migration - [Migration 設定官方文件](https://laravel.com/docs/5.2/migrations)\nsqlite：file based database，資料庫內容儲存於檔案裡，應用於小專案。\n1. 先設定 .env\n2. `php artisan migrate` (將資料庫設定檔自動移入資料庫)\n\n自定義 migration\n1. 自行創建一個 migration 檔案：`php artisan make:migration (migration_NAME) (FLAG)`\n範例：`php artisan make:migration create_posts_table --create=\"posts\"`\n2. 在 migration 裡面新增 table 項目。(`$table->string('title');`)\n\n撤回上一步完成的 migration：`php artisan migrate:rollback`。\n\n### 新增 column 到存在的 table\n1. 新增一個 migration：`php artisan make:migration add_is_admin_column_to_posts_tables --table=\"posts\"(定義相關table)`\n2. 在新增的 migration 檔案的 up 新增 `$table->integer('is_admin')->unsigned();`\n3. 在新增的 migration 檔案的 down 新增 `$table->dropColumn('is_admin');`\n\n### Migration 命令\n刪除所有資料庫內容：`php artisan migrate:reset`\n更新資料庫內容(刪除資料庫再重新新增):`php artisan migrate:refresh`\n確認 migration 狀態：`php artisan migrate:status`","slug":"Lavarel-快速學習自我挑戰-Day3","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx1002b7ifa1qy8rojr","content":"<img src=\"/images/learning/laravel/laravelday3.jpg\">\n<hr>\n<h3>Views - <a href=\"https://laravel.com/docs/5.2/views\" target=\"_blank\" rel=\"external\">Views 設定官方文件</a></h3>\n<p>路徑：/resources/views</p>\n<ol>\n<li>在 Controller 新增一個 function<br>\n<code>public function contact(){return view('contact');}</code></li>\n<li>新增一個 view (檔名為xxx.blade.php)\n<ul>\n<li>可以將 view 的檔案設定在子目錄下。例：新增一個 pages/contact.php，路由部分則要設定為 <code>view(page/contact(或是page.contact)')</code></li>\n</ul>\n</li>\n<li>Routes 設定<br>\n<code>Route::get('/contact', 'PostsController@contact');</code></li>\n</ol>\n<h3>傳送 data 到 Views</h3>\n<ol>\n<li>設定 Routes<br>\n<code>Route::get('post/{id}', 'PostsController@show_post');</code></li>\n<li>在 Controller 新增一個 function<br>\n<code>public function show_post($id){return view('post')-&gt;with('id',$id);}</code></li>\n<li>在 View 裡面使用 data <code>{{$id}}</code></li>\n</ol>\n<h3>傳送多 data 到 Views</h3>\n<ol>\n<li>設定 Routes<br>\n<code>Route::get('post/{id}/{name}/{password}', 'PostsController@show_post');</code></li>\n<li>在 Controller 使用 compact function<br>\n<code>public function show_post($id, $name, $password){return view('post', compact('id','name','password'));}</code></li>\n<li>在 View 裡面使用 data</li>\n</ol>\n<h3>blade (PHP模板引擎) - <a href=\"https://laravel.com/docs/5.2/blade\" target=\"_blank\" rel=\"external\">blade 設定官方文件</a></h3>\n<p><code>!</code> + <code>tab</code> =&gt; html 模板<br>\n<code>div.container</code> + <code>tab</code> =&gt; class 為 container 的 div 容器<br>\n<code>@yield('content')</code> =&gt; 產生一個內容的區塊<br>\n<code>@extends('layouts.app')</code> =&gt; 使用 layouts.app 裡面的內容<br>\n<code>@section('content')</code> =&gt; 產生自定義內容</p>\n<p>blade 使用範例：</p>\n<ol>\n<li>在 PostsController 裡的 Contact 新增人名 array，並傳送 data<br>\n<code>$people = ['Edwin', 'Jose', 'James', 'Peter', 'Maria'];</code><br>\n<code>return view('contact', compact('people'));</code></li>\n<li>在 contact.blade.php 裡面列出人名 (blade 的函式皆以 @ 開頭)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if (count($people))</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">  @foreach($people as $person)</div><div class=\"line\">      &lt;li&gt;&#123;&#123;$person&#125;&#125;&lt;/li&gt;</div><div class=\"line\">  @endforeach</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h3>Database Migration - <a href=\"https://laravel.com/docs/5.2/migrations\" target=\"_blank\" rel=\"external\">Migration 設定官方文件</a></h3>\n<p>sqlite：file based database，資料庫內容儲存於檔案裡，應用於小專案。</p>\n<ol>\n<li>先設定 .env</li>\n<li><code>php artisan migrate</code> (將資料庫設定檔自動移入資料庫)</li>\n</ol>\n<p>自定義 migration</p>\n<ol>\n<li>自行創建一個 migration 檔案：<code>php artisan make:migration (migration_NAME) (FLAG)</code><br>\n範例：<code>php artisan make:migration create_posts_table --create=&quot;posts&quot;</code></li>\n<li>在 migration 裡面新增 table 項目。(<code>$table-&gt;string('title');</code>)</li>\n</ol>\n<p>撤回上一步完成的 migration：<code>php artisan migrate:rollback</code>。</p>\n<h3>新增 column 到存在的 table</h3>\n<ol>\n<li>新增一個 migration：<code>php artisan make:migration add_is_admin_column_to_posts_tables --table=&quot;posts&quot;(定義相關table)</code></li>\n<li>在新增的 migration 檔案的 up 新增 <code>$table-&gt;integer('is_admin')-&gt;unsigned();</code></li>\n<li>在新增的 migration 檔案的 down 新增 <code>$table-&gt;dropColumn('is_admin');</code></li>\n</ol>\n<h3>Migration 命令</h3>\n<p>刪除所有資料庫內容：<code>php artisan migrate:reset</code><br>\n更新資料庫內容(刪除資料庫再重新新增):<code>php artisan migrate:refresh</code><br>\n確認 migration 狀態：<code>php artisan migrate:status</code></p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday3.jpg\">\n<hr>\n<h3>Views - <a href=\"https://laravel.com/docs/5.2/views\" target=\"_blank\" rel=\"external\">Views 設定官方文件</a></h3>\n<p>路徑：/resources/views</p>\n<ol>\n<li>在 Controller 新增一個 function<br>\n<code>public function contact(){return view('contact');}</code></li>\n<li>新增一個 view (檔名為xxx.blade.php)\n<ul>\n<li>可以將 view 的檔案設定在子目錄下。例：新增一個 pages/contact.php，路由部分則要設定為 <code>view(page/contact(或是page.contact)')</code></li>\n</ul>\n</li>\n<li>Routes 設定<br>\n<code>Route::get('/contact', 'PostsController@contact');</code></li>\n</ol>\n<h3>傳送 data 到 Views</h3>\n<ol>\n<li>設定 Routes<br>\n<code>Route::get('post/{id}', 'PostsController@show_post');</code></li>\n<li>在 Controller 新增一個 function<br>\n<code>public function show_post($id){return view('post')-&gt;with('id',$id);}</code></li>\n<li>在 View 裡面使用 data <code>{{$id}}</code></li>\n</ol>\n<h3>傳送多 data 到 Views</h3>\n<ol>\n<li>設定 Routes<br>\n<code>Route::get('post/{id}/{name}/{password}', 'PostsController@show_post');</code></li>\n<li>在 Controller 使用 compact function<br>\n<code>public function show_post($id, $name, $password){return view('post', compact('id','name','password'));}</code></li>\n<li>在 View 裡面使用 data</li>\n</ol>\n<h3>blade (PHP模板引擎) - <a href=\"https://laravel.com/docs/5.2/blade\" target=\"_blank\" rel=\"external\">blade 設定官方文件</a></h3>\n<p><code>!</code> + <code>tab</code> =&gt; html 模板<br>\n<code>div.container</code> + <code>tab</code> =&gt; class 為 container 的 div 容器<br>\n<code>@yield('content')</code> =&gt; 產生一個內容的區塊<br>\n<code>@extends('layouts.app')</code> =&gt; 使用 layouts.app 裡面的內容<br>\n<code>@section('content')</code> =&gt; 產生自定義內容</p>\n<p>blade 使用範例：</p>\n<ol>\n<li>在 PostsController 裡的 Contact 新增人名 array，並傳送 data<br>\n<code>$people = ['Edwin', 'Jose', 'James', 'Peter', 'Maria'];</code><br>\n<code>return view('contact', compact('people'));</code></li>\n<li>在 contact.blade.php 裡面列出人名 (blade 的函式皆以 @ 開頭)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if (count($people))</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">  @foreach($people as $person)</div><div class=\"line\">      &lt;li&gt;&#123;&#123;$person&#125;&#125;&lt;/li&gt;</div><div class=\"line\">  @endforeach</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<h3>Database Migration - <a href=\"https://laravel.com/docs/5.2/migrations\" target=\"_blank\" rel=\"external\">Migration 設定官方文件</a></h3>\n<p>sqlite：file based database，資料庫內容儲存於檔案裡，應用於小專案。</p>\n<ol>\n<li>先設定 .env</li>\n<li><code>php artisan migrate</code> (將資料庫設定檔自動移入資料庫)</li>\n</ol>\n<p>自定義 migration</p>\n<ol>\n<li>自行創建一個 migration 檔案：<code>php artisan make:migration (migration_NAME) (FLAG)</code><br>\n範例：<code>php artisan make:migration create_posts_table --create=&quot;posts&quot;</code></li>\n<li>在 migration 裡面新增 table 項目。(<code>$table-&gt;string('title');</code>)</li>\n</ol>\n<p>撤回上一步完成的 migration：<code>php artisan migrate:rollback</code>。</p>\n<h3>新增 column 到存在的 table</h3>\n<ol>\n<li>新增一個 migration：<code>php artisan make:migration add_is_admin_column_to_posts_tables --table=&quot;posts&quot;(定義相關table)</code></li>\n<li>在新增的 migration 檔案的 up 新增 <code>$table-&gt;integer('is_admin')-&gt;unsigned();</code></li>\n<li>在新增的 migration 檔案的 down 新增 <code>$table-&gt;dropColumn('is_admin');</code></li>\n</ol>\n<h3>Migration 命令</h3>\n<p>刪除所有資料庫內容：<code>php artisan migrate:reset</code><br>\n更新資料庫內容(刪除資料庫再重新新增):<code>php artisan migrate:refresh</code><br>\n確認 migration 狀態：<code>php artisan migrate:status</code></p>\n"},{"title":"Lavarel 快速學習自我挑戰 Day4","thumbnail":["/images/learning/laravel/laravelday4.jpg"],"date":"2017-04-25T05:12:19.000Z","_content":"<img src=\"/images/learning/laravel/laravelday4.jpg\">\n\n***\n### Raw SQL Queries - [Database 設定官方文件](https://laravel.com/docs/5.2/database)\n1. insert data (直接在 Routes.php 設定)\n```\nRoute::get('/insert', function(){\n    DB::insert('insert into posts(title, content) values(?, ?)', ['PHP with Laravel', 'Laravel is the best thing that has happened to PHP']);\n});\n```\n2. read data\n```\nRoute::get('/read', function() {\n    $results = DB::select('select * from posts where id = ?', [1]);\n\n    return $results; (傳回陣列)\n\n//    return var_dump($results); (傳回值的詳細資料)\n//    foreach($results as $post){\n//\n//        return $post->title;\n//\n//    }(傳回單一項目)\n});\n```\n3. update data\n```\nRoute::get('/update', function(){\n    $updated = DB::update('update posts set title = \"update title\" where id = ?', [1]);\n    return $updated;\n});\n```\n4. delete data\n```\nRoute::get('/delete', function(){\n    $deleted = DB::delete('delete from posts where id = ?', [1]);\n    return $deleted;\n});\n```\n\n### Eloquent / ORM - [Eloquent 設定官方文件](https://laravel.com/docs/5.2/eloquent)\n- 創建一個 model：`php artisan make:model`\n- 在 model 的 class 宣告 table 名稱：`protected $table = 'posts';`\n- 在 Routes 引入 class：`use App\\Post;`\n1. 用 model 的方式讀取所有資料\n```\nRoute::get('/find', function(){\n\n    $posts = Post::all(); // 加入 Post 的所有紀錄\n\n    foreach($posts as $post) {\n        return $post->title;\n    }\n\n});\n```\n2. 用 model 的方式讀取單一資料\n```\nRoute::get('/find', function(){\n\n    $post = Post::find(1);\n    return $post->title;\n\n});\n```\n3. 用 eloquent 的方式取得資料：`$posts = Post::where('id', 1)->orderBy('id', 'desc')->take(1)->get();`\n    - eloquent -> 取得或失敗：`$posts = Post::findOrFail(2);`\n4. save data\n```\nRoute::get('/basicinsert', function(){\n\n    $post = new Post;\n\n    $post->title = 'new Eloquent title insert';\n    $post->content = 'Wow eloquent is really cool, look at this content';\n\n    $post->save();\n\n});\n```\n5. 修改 data\n```\nRoute::get('/basicinsert1', function(){\n\n    $post = Post::find(1);\n\n    $post->title = 'new Eloquent title insert 1';\n    $post->content = 'Wow eloquent is really cool, look at this content 1';\n\n    $post->save();\n\n});\n```\n6. Mass Assignment\n    - 在路由用 create 來新增 model\n    `Post::create(['title'=>'the create method', 'content'=> 'WOW I\\'m learning a lot with Edwin Diaz']);`\n    - 在 model 裡面設定 protected\n    `protected $fillable = ['title', 'content'];`\n7. update data\n`Post::where('id', 2)->where('is_admin', 0)->update(['title'=>'NEW PHP TITLE', 'content'=>'I love my instructor Edwin']);`\n8. delete data\n- 方法 1\n```\nRoute::get('/delete', function(){\n\n    $post = Post::find(1);\n\n    $post->delete();\n\n});\n```\n- 方法 2\n```\nRoute::get('/delete2', function(){\n\n    Post::destroy(2);\n    // Post::destroy([4,5]); //刪除多筆資料\n    // Post::where('is_admin', 0)->delete(); //加上條件的刪除法\n\n});\n```\n9. Soft delete / trashing\n    - 在 model 引入 softdelete\n    `use Illuminate\\Database\\Eloquent\\SoftDeletes;`\n    - 在 model 使用 protected\n    `protected $dates = ['deleted_at'];`\n    - 建立新的 model\n    `php artisan make:migration add_deleted_at_column_to_posts_tables --table=posts`\n    - 設定新的 model\n        - up 的部分：`$table->softDeletes();`\n        - down 的部分：`$table->dropColumn('deleted_at');`\n    -  **提醒：在刪除 model 之前要先 reset 才不會造成資料庫錯誤**\n    - 直接在 Routes 進行刪除：`Post::find(3)->delete();`\n10. 取得 deleted / trashed 紀錄\n```\nRoute::get('resoftdelete', function(){\n\n// 取得單一紀錄\n//    $post = Post::find(3);\n//    return $post;\n\n// 取得包含丟到回收桶的紀錄\n//    $post = Post::withTrashed()->where('is_admin', 0)->get();\n//    return $post;\n\n// 只取得丟到回收桶的紀錄\n//    $post = Post::onlyTrashed()->where('is_admin', 0)->get();\n//    return $post;\n\n});\n```\n11. 恢復  deleted / trashed 紀錄\n```\nRoute::get('/restore', function(){\n\n    Post::withTrashed()->where('is_admin', 0)->restore();\n\n});\n```\n12. 永久移除紀錄\n```\nRoute::get('/forcedelete', function(){\n\n    Post::onlyTrashed()->where('is_admin', 0)->forceDelete();\n\n});\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day4.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day4\nthumbnail:\n  - /images/learning/laravel/laravelday4.jpg\ndate: 2017-04-25 13:12:19\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday4.jpg\">\n\n***\n### Raw SQL Queries - [Database 設定官方文件](https://laravel.com/docs/5.2/database)\n1. insert data (直接在 Routes.php 設定)\n```\nRoute::get('/insert', function(){\n    DB::insert('insert into posts(title, content) values(?, ?)', ['PHP with Laravel', 'Laravel is the best thing that has happened to PHP']);\n});\n```\n2. read data\n```\nRoute::get('/read', function() {\n    $results = DB::select('select * from posts where id = ?', [1]);\n\n    return $results; (傳回陣列)\n\n//    return var_dump($results); (傳回值的詳細資料)\n//    foreach($results as $post){\n//\n//        return $post->title;\n//\n//    }(傳回單一項目)\n});\n```\n3. update data\n```\nRoute::get('/update', function(){\n    $updated = DB::update('update posts set title = \"update title\" where id = ?', [1]);\n    return $updated;\n});\n```\n4. delete data\n```\nRoute::get('/delete', function(){\n    $deleted = DB::delete('delete from posts where id = ?', [1]);\n    return $deleted;\n});\n```\n\n### Eloquent / ORM - [Eloquent 設定官方文件](https://laravel.com/docs/5.2/eloquent)\n- 創建一個 model：`php artisan make:model`\n- 在 model 的 class 宣告 table 名稱：`protected $table = 'posts';`\n- 在 Routes 引入 class：`use App\\Post;`\n1. 用 model 的方式讀取所有資料\n```\nRoute::get('/find', function(){\n\n    $posts = Post::all(); // 加入 Post 的所有紀錄\n\n    foreach($posts as $post) {\n        return $post->title;\n    }\n\n});\n```\n2. 用 model 的方式讀取單一資料\n```\nRoute::get('/find', function(){\n\n    $post = Post::find(1);\n    return $post->title;\n\n});\n```\n3. 用 eloquent 的方式取得資料：`$posts = Post::where('id', 1)->orderBy('id', 'desc')->take(1)->get();`\n    - eloquent -> 取得或失敗：`$posts = Post::findOrFail(2);`\n4. save data\n```\nRoute::get('/basicinsert', function(){\n\n    $post = new Post;\n\n    $post->title = 'new Eloquent title insert';\n    $post->content = 'Wow eloquent is really cool, look at this content';\n\n    $post->save();\n\n});\n```\n5. 修改 data\n```\nRoute::get('/basicinsert1', function(){\n\n    $post = Post::find(1);\n\n    $post->title = 'new Eloquent title insert 1';\n    $post->content = 'Wow eloquent is really cool, look at this content 1';\n\n    $post->save();\n\n});\n```\n6. Mass Assignment\n    - 在路由用 create 來新增 model\n    `Post::create(['title'=>'the create method', 'content'=> 'WOW I\\'m learning a lot with Edwin Diaz']);`\n    - 在 model 裡面設定 protected\n    `protected $fillable = ['title', 'content'];`\n7. update data\n`Post::where('id', 2)->where('is_admin', 0)->update(['title'=>'NEW PHP TITLE', 'content'=>'I love my instructor Edwin']);`\n8. delete data\n- 方法 1\n```\nRoute::get('/delete', function(){\n\n    $post = Post::find(1);\n\n    $post->delete();\n\n});\n```\n- 方法 2\n```\nRoute::get('/delete2', function(){\n\n    Post::destroy(2);\n    // Post::destroy([4,5]); //刪除多筆資料\n    // Post::where('is_admin', 0)->delete(); //加上條件的刪除法\n\n});\n```\n9. Soft delete / trashing\n    - 在 model 引入 softdelete\n    `use Illuminate\\Database\\Eloquent\\SoftDeletes;`\n    - 在 model 使用 protected\n    `protected $dates = ['deleted_at'];`\n    - 建立新的 model\n    `php artisan make:migration add_deleted_at_column_to_posts_tables --table=posts`\n    - 設定新的 model\n        - up 的部分：`$table->softDeletes();`\n        - down 的部分：`$table->dropColumn('deleted_at');`\n    -  **提醒：在刪除 model 之前要先 reset 才不會造成資料庫錯誤**\n    - 直接在 Routes 進行刪除：`Post::find(3)->delete();`\n10. 取得 deleted / trashed 紀錄\n```\nRoute::get('resoftdelete', function(){\n\n// 取得單一紀錄\n//    $post = Post::find(3);\n//    return $post;\n\n// 取得包含丟到回收桶的紀錄\n//    $post = Post::withTrashed()->where('is_admin', 0)->get();\n//    return $post;\n\n// 只取得丟到回收桶的紀錄\n//    $post = Post::onlyTrashed()->where('is_admin', 0)->get();\n//    return $post;\n\n});\n```\n11. 恢復  deleted / trashed 紀錄\n```\nRoute::get('/restore', function(){\n\n    Post::withTrashed()->where('is_admin', 0)->restore();\n\n});\n```\n12. 永久移除紀錄\n```\nRoute::get('/forcedelete', function(){\n\n    Post::onlyTrashed()->where('is_admin', 0)->forceDelete();\n\n});\n```","slug":"Lavarel-快速學習自我挑戰-Day4","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx2002d7ifatbswi1xb","content":"<img src=\"/images/learning/laravel/laravelday4.jpg\">\n<hr>\n<h3>Raw SQL Queries - <a href=\"https://laravel.com/docs/5.2/database\" target=\"_blank\" rel=\"external\">Database 設定官方文件</a></h3>\n<ol>\n<li>insert data (直接在 Routes.php 設定)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/insert&apos;, function()&#123;</div><div class=\"line\">    DB::insert(&apos;insert into posts(title, content) values(?, ?)&apos;, [&apos;PHP with Laravel&apos;, &apos;Laravel is the best thing that has happened to PHP&apos;]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>read data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function() &#123;</div><div class=\"line\">    $results = DB::select(&apos;select * from posts where id = ?&apos;, [1]);</div><div class=\"line\"></div><div class=\"line\">    return $results; (傳回陣列)</div><div class=\"line\"></div><div class=\"line\">//    return var_dump($results); (傳回值的詳細資料)</div><div class=\"line\">//    foreach($results as $post)&#123;</div><div class=\"line\">//</div><div class=\"line\">//        return $post-&gt;title;</div><div class=\"line\">//</div><div class=\"line\">//    &#125;(傳回單一項目)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>update data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\">    $updated = DB::update(&apos;update posts set title = &quot;update title&quot; where id = ?&apos;, [1]);</div><div class=\"line\">    return $updated;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>delete data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\">    $deleted = DB::delete(&apos;delete from posts where id = ?&apos;, [1]);</div><div class=\"line\">    return $deleted;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3>Eloquent / ORM - <a href=\"https://laravel.com/docs/5.2/eloquent\" target=\"_blank\" rel=\"external\">Eloquent 設定官方文件</a></h3>\n<ul>\n<li>創建一個 model：<code>php artisan make:model</code></li>\n<li>在 model 的 class 宣告 table 名稱：<code>protected $table = 'posts';</code></li>\n<li>在 Routes 引入 class：<code>use App\\Post;</code></li>\n</ul>\n<ol>\n<li>用 model 的方式讀取所有資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/find&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $posts = Post::all(); // 加入 Post 的所有紀錄</div><div class=\"line\"></div><div class=\"line\">    foreach($posts as $post) &#123;</div><div class=\"line\">        return $post-&gt;title;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>用 model 的方式讀取單一資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/find&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(1);</div><div class=\"line\">    return $post-&gt;title;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>用 eloquent 的方式取得資料：<code>$posts = Post::where('id', 1)-&gt;orderBy('id', 'desc')-&gt;take(1)-&gt;get();</code>\n<ul>\n<li>eloquent -&gt; 取得或失敗：<code>$posts = Post::findOrFail(2);</code></li>\n</ul>\n</li>\n<li>save data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/basicinsert&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = new Post;</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;title = &apos;new Eloquent title insert&apos;;</div><div class=\"line\">    $post-&gt;content = &apos;Wow eloquent is really cool, look at this content&apos;;</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/basicinsert1&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(1);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;title = &apos;new Eloquent title insert 1&apos;;</div><div class=\"line\">    $post-&gt;content = &apos;Wow eloquent is really cool, look at this content 1&apos;;</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>Mass Assignment\n<ul>\n<li>在路由用 create 來新增 model<br>\n<code>Post::create(['title'=&gt;'the create method', 'content'=&gt; 'WOW I\\'m learning a lot with Edwin Diaz']);</code></li>\n<li>在 model 裡面設定 protected<br>\n<code>protected $fillable = ['title', 'content'];</code></li>\n</ul>\n</li>\n<li>update data<br>\n<code>Post::where('id', 2)-&gt;where('is_admin', 0)-&gt;update(['title'=&gt;'NEW PHP TITLE', 'content'=&gt;'I love my instructor Edwin']);</code></li>\n<li>delete data</li>\n</ol>\n<ul>\n<li>方法 1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(1);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>方法 2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete2&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Post::destroy(2);</div><div class=\"line\">    // Post::destroy([4,5]); //刪除多筆資料</div><div class=\"line\">    // Post::where(&apos;is_admin&apos;, 0)-&gt;delete(); //加上條件的刪除法</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>Soft delete / trashing\n<ul>\n<li>在 model 引入 softdelete<br>\n<code>use Illuminate\\Database\\Eloquent\\SoftDeletes;</code></li>\n<li>在 model 使用 protected<br>\n<code>protected $dates = ['deleted_at'];</code></li>\n<li>建立新的 model<br>\n<code>php artisan make:migration add_deleted_at_column_to_posts_tables --table=posts</code></li>\n<li>設定新的 model\n<ul>\n<li>up 的部分：<code>$table-&gt;softDeletes();</code></li>\n<li>down 的部分：<code>$table-&gt;dropColumn('deleted_at');</code></li>\n</ul>\n</li>\n<li><strong>提醒：在刪除 model 之前要先 reset 才不會造成資料庫錯誤</strong></li>\n<li>直接在 Routes 進行刪除：<code>Post::find(3)-&gt;delete();</code></li>\n</ul>\n</li>\n<li>取得 deleted / trashed 紀錄</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;resoftdelete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">// 取得單一紀錄</div><div class=\"line\">//    $post = Post::find(3);</div><div class=\"line\">//    return $post;</div><div class=\"line\"></div><div class=\"line\">// 取得包含丟到回收桶的紀錄</div><div class=\"line\">//    $post = Post::withTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;get();</div><div class=\"line\">//    return $post;</div><div class=\"line\"></div><div class=\"line\">// 只取得丟到回收桶的紀錄</div><div class=\"line\">//    $post = Post::onlyTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;get();</div><div class=\"line\">//    return $post;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>恢復  deleted / trashed 紀錄</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/restore&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Post::withTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;restore();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>永久移除紀錄</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/forcedelete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Post::onlyTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;forceDelete();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday4.jpg\">\n<hr>\n<h3>Raw SQL Queries - <a href=\"https://laravel.com/docs/5.2/database\" target=\"_blank\" rel=\"external\">Database 設定官方文件</a></h3>\n<ol>\n<li>insert data (直接在 Routes.php 設定)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/insert&apos;, function()&#123;</div><div class=\"line\">    DB::insert(&apos;insert into posts(title, content) values(?, ?)&apos;, [&apos;PHP with Laravel&apos;, &apos;Laravel is the best thing that has happened to PHP&apos;]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>read data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function() &#123;</div><div class=\"line\">    $results = DB::select(&apos;select * from posts where id = ?&apos;, [1]);</div><div class=\"line\"></div><div class=\"line\">    return $results; (傳回陣列)</div><div class=\"line\"></div><div class=\"line\">//    return var_dump($results); (傳回值的詳細資料)</div><div class=\"line\">//    foreach($results as $post)&#123;</div><div class=\"line\">//</div><div class=\"line\">//        return $post-&gt;title;</div><div class=\"line\">//</div><div class=\"line\">//    &#125;(傳回單一項目)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>update data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\">    $updated = DB::update(&apos;update posts set title = &quot;update title&quot; where id = ?&apos;, [1]);</div><div class=\"line\">    return $updated;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>delete data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\">    $deleted = DB::delete(&apos;delete from posts where id = ?&apos;, [1]);</div><div class=\"line\">    return $deleted;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3>Eloquent / ORM - <a href=\"https://laravel.com/docs/5.2/eloquent\" target=\"_blank\" rel=\"external\">Eloquent 設定官方文件</a></h3>\n<ul>\n<li>創建一個 model：<code>php artisan make:model</code></li>\n<li>在 model 的 class 宣告 table 名稱：<code>protected $table = 'posts';</code></li>\n<li>在 Routes 引入 class：<code>use App\\Post;</code></li>\n</ul>\n<ol>\n<li>用 model 的方式讀取所有資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/find&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $posts = Post::all(); // 加入 Post 的所有紀錄</div><div class=\"line\"></div><div class=\"line\">    foreach($posts as $post) &#123;</div><div class=\"line\">        return $post-&gt;title;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>用 model 的方式讀取單一資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/find&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(1);</div><div class=\"line\">    return $post-&gt;title;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>用 eloquent 的方式取得資料：<code>$posts = Post::where('id', 1)-&gt;orderBy('id', 'desc')-&gt;take(1)-&gt;get();</code>\n<ul>\n<li>eloquent -&gt; 取得或失敗：<code>$posts = Post::findOrFail(2);</code></li>\n</ul>\n</li>\n<li>save data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/basicinsert&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = new Post;</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;title = &apos;new Eloquent title insert&apos;;</div><div class=\"line\">    $post-&gt;content = &apos;Wow eloquent is really cool, look at this content&apos;;</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 data</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/basicinsert1&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(1);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;title = &apos;new Eloquent title insert 1&apos;;</div><div class=\"line\">    $post-&gt;content = &apos;Wow eloquent is really cool, look at this content 1&apos;;</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>Mass Assignment\n<ul>\n<li>在路由用 create 來新增 model<br>\n<code>Post::create(['title'=&gt;'the create method', 'content'=&gt; 'WOW I\\'m learning a lot with Edwin Diaz']);</code></li>\n<li>在 model 裡面設定 protected<br>\n<code>protected $fillable = ['title', 'content'];</code></li>\n</ul>\n</li>\n<li>update data<br>\n<code>Post::where('id', 2)-&gt;where('is_admin', 0)-&gt;update(['title'=&gt;'NEW PHP TITLE', 'content'=&gt;'I love my instructor Edwin']);</code></li>\n<li>delete data</li>\n</ol>\n<ul>\n<li>方法 1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(1);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>方法 2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete2&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Post::destroy(2);</div><div class=\"line\">    // Post::destroy([4,5]); //刪除多筆資料</div><div class=\"line\">    // Post::where(&apos;is_admin&apos;, 0)-&gt;delete(); //加上條件的刪除法</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>Soft delete / trashing\n<ul>\n<li>在 model 引入 softdelete<br>\n<code>use Illuminate\\Database\\Eloquent\\SoftDeletes;</code></li>\n<li>在 model 使用 protected<br>\n<code>protected $dates = ['deleted_at'];</code></li>\n<li>建立新的 model<br>\n<code>php artisan make:migration add_deleted_at_column_to_posts_tables --table=posts</code></li>\n<li>設定新的 model\n<ul>\n<li>up 的部分：<code>$table-&gt;softDeletes();</code></li>\n<li>down 的部分：<code>$table-&gt;dropColumn('deleted_at');</code></li>\n</ul>\n</li>\n<li><strong>提醒：在刪除 model 之前要先 reset 才不會造成資料庫錯誤</strong></li>\n<li>直接在 Routes 進行刪除：<code>Post::find(3)-&gt;delete();</code></li>\n</ul>\n</li>\n<li>取得 deleted / trashed 紀錄</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;resoftdelete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">// 取得單一紀錄</div><div class=\"line\">//    $post = Post::find(3);</div><div class=\"line\">//    return $post;</div><div class=\"line\"></div><div class=\"line\">// 取得包含丟到回收桶的紀錄</div><div class=\"line\">//    $post = Post::withTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;get();</div><div class=\"line\">//    return $post;</div><div class=\"line\"></div><div class=\"line\">// 只取得丟到回收桶的紀錄</div><div class=\"line\">//    $post = Post::onlyTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;get();</div><div class=\"line\">//    return $post;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>恢復  deleted / trashed 紀錄</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/restore&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Post::withTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;restore();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>永久移除紀錄</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/forcedelete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    Post::onlyTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;forceDelete();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day5","thumbnail":["/images/learning/laravel/laravelday5.jpeg"],"date":"2017-04-26T02:19:30.000Z","_content":"<img src=\"/images/learning/laravel/laravelday5.jpeg\">\n\n***\n### Eloquent Relationship - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. One to One Relationship\n    - 新增 user_id 到 migration\n    `$table->integer('user_id')->unsigned();`\n    - 新增一個 function 到 User.php\n    `public function post(){return $this->hasOne('App\\Post');}`\n    - 新增 routes\n    `Route::get('/user/{id}/post', function($id){return User::find($id)->post->title;});`\n2. Reverse One to One Relationship (Inverse Relationship)\n    - 新增一個 function 到 Post.php\n    `public function user(){return $this->belongsTo('App\\User');}`\n    - 新增 routes\n    `Route::get('/user/{id}/post', function($id){return User::find($id)->post->content;});`\n3. One to Many Relationship\n    - 新增一個 function 到  User.php\n    `public function posts(){return $this->hasMany('App\\Post');}`\n    - 新增 routes\n```\n    Route::get('/posts', function(){\n\n    $user = User::find(1);\n\n    foreach ($user->posts as $post) {\n\n        echo $post->title .\"<br>\"; (不要使用 return，return 只能傳回一個內容)\n\n    }\n\n});\n```\n4. Many to Many Relationship\n    - 新增一個 model\n    `php artisan make:model Role -m`\n    - 新增一個 migration\n    `php artisan make:migration create_users_roles_table --create=role_user`\n    - 在 create\\_roles_table 新增姓名\n    `$table->string('name');`\n    - 在 create\\_users\\_roles\\_table 新增 user\\_id 和 role\\_id\n    `$table->integer('user_id');`\n    `$table->integer('role_id');`\n    - 在 User.php 新增一個 function\n    `public function roles(){return $this->belongsToMany('App\\Role');}`\n    - 新增 routes (1)\n    `Route::get('/user/{id}/role', function($id){`\n    `$user = User::find($id);`\n    `foreach ($user->roles as $role) {return $role->name;}});`\n    - 新增 routes (2)\n    `Route::get('/user/{id}/role', function($id){`\n        `$user = User::find($id)->roles()->orderBy('id', 'desc')->get();`\n        `return $user;`\n    `});`\n5. 取得 Intermediate table\n    - 在  Role.php 新增 belongsToMany\n    `public function users(){return $this->belongsToMany('App\\User');}`\n    - 在 User.php 的 roles function 新增 withPivot\n    `return $this->belongsToMany('App\\Role')->withPivot('created_at');`\n    - 新增 routes\n```\nRoute::get('/user/pivot', function(){\n\n    $user = User::find(1);\n\n    foreach($user->roles as $role){\n\n        return $role->pivot->created_at;\n\n    }\n\n});\n```\n6. Has Many Through Relation\n    - 新增一個 model\n    `php artisan make:model Country -m`\n    - 新增一個 migration\n    `php artisan make:migration add_country_id_column_to_users --table=users`\n    - 到 add\\_country\\_id\\_column\\_to_users.php 的 up function 新增\n    `$table->integer('country_id');`\n    - 到 add\\_country\\_id\\_column\\_to_users.php 的 down function 新增\n    `$table->dropColumn('country_id');`\n    - 到 create\\_countries_table 新增\n    `$table->string('name');`\n    - 匯入資料庫\n    `php artisan migrate`\n    - 在 Country Model 新增 function\n    `public function posts(){return $this->hasManyThrough('App\\Post', 'App\\User');}`\n    - 在 routes 引入 Model\n    `use App\\Country`\n    - 新增 routes\n```\nRoute::get('/user/country', function(){\n\n$country = Country::find(4);\n\nforeach ($country->posts as $post){\n\n    return $post->title;;\n\n}\n\n});\n```\n7. Polymorphic Relation\n    - 新增 photo 的 Model\n    `php artisan make:model Photo -m`\n    - 在 create\\_photos_table 新增以下欄位\n    `$table->string('path');`\n    `$table->integer('imageable_id');`\n    `$table->string('imageable_type');`\n    - 匯入資料庫\n    `php artisan migrate`\n    -  不需要 user\\_id，在 create\\_post_talbe 移除並更新\n    `$table->integer('user_id')->unsigned();`\n    `php artisan migrate:refresh`\n    - 在 Photo.php 新增一個 function\n    `public function imageable() {return $this->morphTo();}`\n    - 在 Post.php 和 User.php 各新增一個 function\n    `public function photos(){return $this->morphMany('App\\Photo', 'imageable');}`\n    - 新增 routes\n```\nRoute::get('post/{id}/photos', function($id){\n\n    $post = Post::find($id);\n\n        foreach($post->photos as $photo){\n\n            echo $photo->path . \"<br>\";\n\n        }\n\n});\n```\n8. Reverse Polymorphic Relation\n    - 在 routes 引入 Model\n    `use App\\Photo;`\n    - 新增 routes\n```\nRoute::get('photo/{id}/post', function($id){\n\n    $photo = Photo::findOrFail($id);\n\n    return $photo->imageable;\n\n});\n```\n9. Many to Many Polymorphic Relation\n    - 新增三個 model\n    `php artisan make:model Video -m`\n    `php artisan make:model Tag -m`\n    `php artisan make:model Taggable -m`\n    - 在 create\\_videos\\_table 和 create\\_tags\\_table 建立 name 的 table\n    `$table->string('name');`\n    - 在 create_taggables_table 建立以下 table\n    `$table->integer('tag_id');`\n    `$table->integer('taggable_id');`\n    `$table->string('taggable_type');`\n    - 在 Post.php 新增 morphToMany function\n    `public function tags(){return $this->morphToMany('App\\Tag', 'taggable');}`\n    - 在 Tag.php  新增 morphedByMany function\n    `public function posts(){ return $this->morphedByMany('App\\Post', 'taggable');}`\n    `public function videos(){return $this->morphedByMany('App\\Video', 'taggable');}`\n    - 匯入 migrate\n    `php artisan migrate`\n    - 新增 routes\n    `Route::get('/post/tag', function(){`\n        `$post = Post::find(1);`\n        `foreach ($post->tags as $tag){`\n            `echo $tag->name;`\n        `}`\n    `});`\n    - import Tag model\n    `use App\\Tag;`\n    - 新增 routes\n    `Route::get('/tag/post', function(){`\n    `$tag = Tag::find(2);`\n    `foreach($tag->posts as $post){`\n        `return $post->title;`\n    `}`\n    `});`\n\n\n","source":"_posts/Lavarel-快速學習自我挑戰-Day5.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day5\nthumbnail:\n  - /images/learning/laravel/laravelday5.jpeg\ndate: 2017-04-26 10:19:30\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday5.jpeg\">\n\n***\n### Eloquent Relationship - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. One to One Relationship\n    - 新增 user_id 到 migration\n    `$table->integer('user_id')->unsigned();`\n    - 新增一個 function 到 User.php\n    `public function post(){return $this->hasOne('App\\Post');}`\n    - 新增 routes\n    `Route::get('/user/{id}/post', function($id){return User::find($id)->post->title;});`\n2. Reverse One to One Relationship (Inverse Relationship)\n    - 新增一個 function 到 Post.php\n    `public function user(){return $this->belongsTo('App\\User');}`\n    - 新增 routes\n    `Route::get('/user/{id}/post', function($id){return User::find($id)->post->content;});`\n3. One to Many Relationship\n    - 新增一個 function 到  User.php\n    `public function posts(){return $this->hasMany('App\\Post');}`\n    - 新增 routes\n```\n    Route::get('/posts', function(){\n\n    $user = User::find(1);\n\n    foreach ($user->posts as $post) {\n\n        echo $post->title .\"<br>\"; (不要使用 return，return 只能傳回一個內容)\n\n    }\n\n});\n```\n4. Many to Many Relationship\n    - 新增一個 model\n    `php artisan make:model Role -m`\n    - 新增一個 migration\n    `php artisan make:migration create_users_roles_table --create=role_user`\n    - 在 create\\_roles_table 新增姓名\n    `$table->string('name');`\n    - 在 create\\_users\\_roles\\_table 新增 user\\_id 和 role\\_id\n    `$table->integer('user_id');`\n    `$table->integer('role_id');`\n    - 在 User.php 新增一個 function\n    `public function roles(){return $this->belongsToMany('App\\Role');}`\n    - 新增 routes (1)\n    `Route::get('/user/{id}/role', function($id){`\n    `$user = User::find($id);`\n    `foreach ($user->roles as $role) {return $role->name;}});`\n    - 新增 routes (2)\n    `Route::get('/user/{id}/role', function($id){`\n        `$user = User::find($id)->roles()->orderBy('id', 'desc')->get();`\n        `return $user;`\n    `});`\n5. 取得 Intermediate table\n    - 在  Role.php 新增 belongsToMany\n    `public function users(){return $this->belongsToMany('App\\User');}`\n    - 在 User.php 的 roles function 新增 withPivot\n    `return $this->belongsToMany('App\\Role')->withPivot('created_at');`\n    - 新增 routes\n```\nRoute::get('/user/pivot', function(){\n\n    $user = User::find(1);\n\n    foreach($user->roles as $role){\n\n        return $role->pivot->created_at;\n\n    }\n\n});\n```\n6. Has Many Through Relation\n    - 新增一個 model\n    `php artisan make:model Country -m`\n    - 新增一個 migration\n    `php artisan make:migration add_country_id_column_to_users --table=users`\n    - 到 add\\_country\\_id\\_column\\_to_users.php 的 up function 新增\n    `$table->integer('country_id');`\n    - 到 add\\_country\\_id\\_column\\_to_users.php 的 down function 新增\n    `$table->dropColumn('country_id');`\n    - 到 create\\_countries_table 新增\n    `$table->string('name');`\n    - 匯入資料庫\n    `php artisan migrate`\n    - 在 Country Model 新增 function\n    `public function posts(){return $this->hasManyThrough('App\\Post', 'App\\User');}`\n    - 在 routes 引入 Model\n    `use App\\Country`\n    - 新增 routes\n```\nRoute::get('/user/country', function(){\n\n$country = Country::find(4);\n\nforeach ($country->posts as $post){\n\n    return $post->title;;\n\n}\n\n});\n```\n7. Polymorphic Relation\n    - 新增 photo 的 Model\n    `php artisan make:model Photo -m`\n    - 在 create\\_photos_table 新增以下欄位\n    `$table->string('path');`\n    `$table->integer('imageable_id');`\n    `$table->string('imageable_type');`\n    - 匯入資料庫\n    `php artisan migrate`\n    -  不需要 user\\_id，在 create\\_post_talbe 移除並更新\n    `$table->integer('user_id')->unsigned();`\n    `php artisan migrate:refresh`\n    - 在 Photo.php 新增一個 function\n    `public function imageable() {return $this->morphTo();}`\n    - 在 Post.php 和 User.php 各新增一個 function\n    `public function photos(){return $this->morphMany('App\\Photo', 'imageable');}`\n    - 新增 routes\n```\nRoute::get('post/{id}/photos', function($id){\n\n    $post = Post::find($id);\n\n        foreach($post->photos as $photo){\n\n            echo $photo->path . \"<br>\";\n\n        }\n\n});\n```\n8. Reverse Polymorphic Relation\n    - 在 routes 引入 Model\n    `use App\\Photo;`\n    - 新增 routes\n```\nRoute::get('photo/{id}/post', function($id){\n\n    $photo = Photo::findOrFail($id);\n\n    return $photo->imageable;\n\n});\n```\n9. Many to Many Polymorphic Relation\n    - 新增三個 model\n    `php artisan make:model Video -m`\n    `php artisan make:model Tag -m`\n    `php artisan make:model Taggable -m`\n    - 在 create\\_videos\\_table 和 create\\_tags\\_table 建立 name 的 table\n    `$table->string('name');`\n    - 在 create_taggables_table 建立以下 table\n    `$table->integer('tag_id');`\n    `$table->integer('taggable_id');`\n    `$table->string('taggable_type');`\n    - 在 Post.php 新增 morphToMany function\n    `public function tags(){return $this->morphToMany('App\\Tag', 'taggable');}`\n    - 在 Tag.php  新增 morphedByMany function\n    `public function posts(){ return $this->morphedByMany('App\\Post', 'taggable');}`\n    `public function videos(){return $this->morphedByMany('App\\Video', 'taggable');}`\n    - 匯入 migrate\n    `php artisan migrate`\n    - 新增 routes\n    `Route::get('/post/tag', function(){`\n        `$post = Post::find(1);`\n        `foreach ($post->tags as $tag){`\n            `echo $tag->name;`\n        `}`\n    `});`\n    - import Tag model\n    `use App\\Tag;`\n    - 新增 routes\n    `Route::get('/tag/post', function(){`\n    `$tag = Tag::find(2);`\n    `foreach($tag->posts as $post){`\n        `return $post->title;`\n    `}`\n    `});`\n\n\n","slug":"Lavarel-快速學習自我挑戰-Day5","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx3002h7ifamb13exti","content":"<img src=\"/images/learning/laravel/laravelday5.jpeg\">\n<hr>\n<h3>Eloquent Relationship - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>One to One Relationship\n<ul>\n<li>新增 user_id 到 migration<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned();</code></li>\n<li>新增一個 function 到 User.php<br>\n<code>public function post(){return $this-&gt;hasOne('App\\Post');}</code></li>\n<li>新增 routes<br>\n<code>Route::get('/user/{id}/post', function($id){return User::find($id)-&gt;post-&gt;title;});</code></li>\n</ul>\n</li>\n<li>Reverse One to One Relationship (Inverse Relationship)\n<ul>\n<li>新增一個 function 到 Post.php<br>\n<code>public function user(){return $this-&gt;belongsTo('App\\User');}</code></li>\n<li>新增 routes<br>\n<code>Route::get('/user/{id}/post', function($id){return User::find($id)-&gt;post-&gt;content;});</code></li>\n</ul>\n</li>\n<li>One to Many Relationship\n<ul>\n<li>新增一個 function 到  User.php<br>\n<code>public function posts(){return $this-&gt;hasMany('App\\Post');}</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    Route::get(&apos;/posts&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    foreach ($user-&gt;posts as $post) &#123;</div><div class=\"line\"></div><div class=\"line\">        echo $post-&gt;title .&quot;&lt;br&gt;&quot;; (不要使用 return，return 只能傳回一個內容)</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Many to Many Relationship\n<ul>\n<li>新增一個 model<br>\n<code>php artisan make:model Role -m</code></li>\n<li>新增一個 migration<br>\n<code>php artisan make:migration create_users_roles_table --create=role_user</code></li>\n<li>在 create_roles_table 新增姓名<br>\n<code>$table-&gt;string('name');</code></li>\n<li>在 create_users_roles_table 新增 user_id 和 role_id<br>\n<code>$table-&gt;integer('user_id');</code><br>\n<code>$table-&gt;integer('role_id');</code></li>\n<li>在 User.php 新增一個 function<br>\n<code>public function roles(){return $this-&gt;belongsToMany('App\\Role');}</code></li>\n<li>新增 routes (1)<br>\n<code>Route::get('/user/{id}/role', function($id){</code><br>\n<code>$user = User::find($id);</code><br>\n<code>foreach ($user-&gt;roles as $role) {return $role-&gt;name;}});</code></li>\n<li>新增 routes (2)<br>\n<code>Route::get('/user/{id}/role', function($id){</code><br>\n<code>$user = User::find($id)-&gt;roles()-&gt;orderBy('id', 'desc')-&gt;get();</code><br>\n<code>return $user;</code><br>\n<code>});</code></li>\n</ul>\n</li>\n<li>取得 Intermediate table\n<ul>\n<li>在  Role.php 新增 belongsToMany<br>\n<code>public function users(){return $this-&gt;belongsToMany('App\\User');}</code></li>\n<li>在 User.php 的 roles function 新增 withPivot<br>\n<code>return $this-&gt;belongsToMany('App\\Role')-&gt;withPivot('created_at');</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/user/pivot&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $role-&gt;pivot-&gt;created_at;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>Has Many Through Relation\n<ul>\n<li>新增一個 model<br>\n<code>php artisan make:model Country -m</code></li>\n<li>新增一個 migration<br>\n<code>php artisan make:migration add_country_id_column_to_users --table=users</code></li>\n<li>到 add_country_id_column_to_users.php 的 up function 新增<br>\n<code>$table-&gt;integer('country_id');</code></li>\n<li>到 add_country_id_column_to_users.php 的 down function 新增<br>\n<code>$table-&gt;dropColumn('country_id');</code></li>\n<li>到 create_countries_table 新增<br>\n<code>$table-&gt;string('name');</code></li>\n<li>匯入資料庫<br>\n<code>php artisan migrate</code></li>\n<li>在 Country Model 新增 function<br>\n<code>public function posts(){return $this-&gt;hasManyThrough('App\\Post', 'App\\User');}</code></li>\n<li>在 routes 引入 Model<br>\n<code>use App\\Country</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/user/country&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">$country = Country::find(4);</div><div class=\"line\"></div><div class=\"line\">foreach ($country-&gt;posts as $post)&#123;</div><div class=\"line\"></div><div class=\"line\">    return $post-&gt;title;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>Polymorphic Relation\n<ul>\n<li>新增 photo 的 Model<br>\n<code>php artisan make:model Photo -m</code></li>\n<li>在 create_photos_table 新增以下欄位<br>\n<code>$table-&gt;string('path');</code><br>\n<code>$table-&gt;integer('imageable_id');</code><br>\n<code>$table-&gt;string('imageable_type');</code></li>\n<li>匯入資料庫<br>\n<code>php artisan migrate</code></li>\n<li>不需要 user_id，在 create_post_talbe 移除並更新<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned();</code><br>\n<code>php artisan migrate:refresh</code></li>\n<li>在 Photo.php 新增一個 function<br>\n<code>public function imageable() {return $this-&gt;morphTo();}</code></li>\n<li>在 Post.php 和 User.php 各新增一個 function<br>\n<code>public function photos(){return $this-&gt;morphMany('App\\Photo', 'imageable');}</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;post/&#123;id&#125;/photos&apos;, function($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find($id);</div><div class=\"line\"></div><div class=\"line\">        foreach($post-&gt;photos as $photo)&#123;</div><div class=\"line\"></div><div class=\"line\">            echo $photo-&gt;path . &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Reverse Polymorphic Relation\n<ul>\n<li>在 routes 引入 Model<br>\n<code>use App\\Photo;</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;photo/&#123;id&#125;/post&apos;, function($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    return $photo-&gt;imageable;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>Many to Many Polymorphic Relation\n<ul>\n<li>新增三個 model<br>\n<code>php artisan make:model Video -m</code><br>\n<code>php artisan make:model Tag -m</code><br>\n<code>php artisan make:model Taggable -m</code></li>\n<li>在 create_videos_table 和 create_tags_table 建立 name 的 table<br>\n<code>$table-&gt;string('name');</code></li>\n<li>在 create_taggables_table 建立以下 table<br>\n<code>$table-&gt;integer('tag_id');</code><br>\n<code>$table-&gt;integer('taggable_id');</code><br>\n<code>$table-&gt;string('taggable_type');</code></li>\n<li>在 Post.php 新增 morphToMany function<br>\n<code>public function tags(){return $this-&gt;morphToMany('App\\Tag', 'taggable');}</code></li>\n<li>在 Tag.php  新增 morphedByMany function<br>\n<code>public function posts(){ return $this-&gt;morphedByMany('App\\Post', 'taggable');}</code><br>\n<code>public function videos(){return $this-&gt;morphedByMany('App\\Video', 'taggable');}</code></li>\n<li>匯入 migrate<br>\n<code>php artisan migrate</code></li>\n<li>新增 routes<br>\n<code>Route::get('/post/tag', function(){</code><br>\n<code>$post = Post::find(1);</code><br>\n<code>foreach ($post-&gt;tags as $tag){</code><br>\n<code>echo $tag-&gt;name;</code><br>\n<code>}</code><br>\n<code>});</code></li>\n<li>import Tag model<br>\n<code>use App\\Tag;</code></li>\n<li>新增 routes<br>\n<code>Route::get('/tag/post', function(){</code><br>\n<code>$tag = Tag::find(2);</code><br>\n<code>foreach($tag-&gt;posts as $post){</code><br>\n<code>return $post-&gt;title;</code><br>\n<code>}</code><br>\n<code>});</code></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday5.jpeg\">\n<hr>\n<h3>Eloquent Relationship - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>One to One Relationship\n<ul>\n<li>新增 user_id 到 migration<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned();</code></li>\n<li>新增一個 function 到 User.php<br>\n<code>public function post(){return $this-&gt;hasOne('App\\Post');}</code></li>\n<li>新增 routes<br>\n<code>Route::get('/user/{id}/post', function($id){return User::find($id)-&gt;post-&gt;title;});</code></li>\n</ul>\n</li>\n<li>Reverse One to One Relationship (Inverse Relationship)\n<ul>\n<li>新增一個 function 到 Post.php<br>\n<code>public function user(){return $this-&gt;belongsTo('App\\User');}</code></li>\n<li>新增 routes<br>\n<code>Route::get('/user/{id}/post', function($id){return User::find($id)-&gt;post-&gt;content;});</code></li>\n</ul>\n</li>\n<li>One to Many Relationship\n<ul>\n<li>新增一個 function 到  User.php<br>\n<code>public function posts(){return $this-&gt;hasMany('App\\Post');}</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    Route::get(&apos;/posts&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    foreach ($user-&gt;posts as $post) &#123;</div><div class=\"line\"></div><div class=\"line\">        echo $post-&gt;title .&quot;&lt;br&gt;&quot;; (不要使用 return，return 只能傳回一個內容)</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Many to Many Relationship\n<ul>\n<li>新增一個 model<br>\n<code>php artisan make:model Role -m</code></li>\n<li>新增一個 migration<br>\n<code>php artisan make:migration create_users_roles_table --create=role_user</code></li>\n<li>在 create_roles_table 新增姓名<br>\n<code>$table-&gt;string('name');</code></li>\n<li>在 create_users_roles_table 新增 user_id 和 role_id<br>\n<code>$table-&gt;integer('user_id');</code><br>\n<code>$table-&gt;integer('role_id');</code></li>\n<li>在 User.php 新增一個 function<br>\n<code>public function roles(){return $this-&gt;belongsToMany('App\\Role');}</code></li>\n<li>新增 routes (1)<br>\n<code>Route::get('/user/{id}/role', function($id){</code><br>\n<code>$user = User::find($id);</code><br>\n<code>foreach ($user-&gt;roles as $role) {return $role-&gt;name;}});</code></li>\n<li>新增 routes (2)<br>\n<code>Route::get('/user/{id}/role', function($id){</code><br>\n<code>$user = User::find($id)-&gt;roles()-&gt;orderBy('id', 'desc')-&gt;get();</code><br>\n<code>return $user;</code><br>\n<code>});</code></li>\n</ul>\n</li>\n<li>取得 Intermediate table\n<ul>\n<li>在  Role.php 新增 belongsToMany<br>\n<code>public function users(){return $this-&gt;belongsToMany('App\\User');}</code></li>\n<li>在 User.php 的 roles function 新增 withPivot<br>\n<code>return $this-&gt;belongsToMany('App\\Role')-&gt;withPivot('created_at');</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/user/pivot&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $role-&gt;pivot-&gt;created_at;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>Has Many Through Relation\n<ul>\n<li>新增一個 model<br>\n<code>php artisan make:model Country -m</code></li>\n<li>新增一個 migration<br>\n<code>php artisan make:migration add_country_id_column_to_users --table=users</code></li>\n<li>到 add_country_id_column_to_users.php 的 up function 新增<br>\n<code>$table-&gt;integer('country_id');</code></li>\n<li>到 add_country_id_column_to_users.php 的 down function 新增<br>\n<code>$table-&gt;dropColumn('country_id');</code></li>\n<li>到 create_countries_table 新增<br>\n<code>$table-&gt;string('name');</code></li>\n<li>匯入資料庫<br>\n<code>php artisan migrate</code></li>\n<li>在 Country Model 新增 function<br>\n<code>public function posts(){return $this-&gt;hasManyThrough('App\\Post', 'App\\User');}</code></li>\n<li>在 routes 引入 Model<br>\n<code>use App\\Country</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/user/country&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">$country = Country::find(4);</div><div class=\"line\"></div><div class=\"line\">foreach ($country-&gt;posts as $post)&#123;</div><div class=\"line\"></div><div class=\"line\">    return $post-&gt;title;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>Polymorphic Relation\n<ul>\n<li>新增 photo 的 Model<br>\n<code>php artisan make:model Photo -m</code></li>\n<li>在 create_photos_table 新增以下欄位<br>\n<code>$table-&gt;string('path');</code><br>\n<code>$table-&gt;integer('imageable_id');</code><br>\n<code>$table-&gt;string('imageable_type');</code></li>\n<li>匯入資料庫<br>\n<code>php artisan migrate</code></li>\n<li>不需要 user_id，在 create_post_talbe 移除並更新<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned();</code><br>\n<code>php artisan migrate:refresh</code></li>\n<li>在 Photo.php 新增一個 function<br>\n<code>public function imageable() {return $this-&gt;morphTo();}</code></li>\n<li>在 Post.php 和 User.php 各新增一個 function<br>\n<code>public function photos(){return $this-&gt;morphMany('App\\Photo', 'imageable');}</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;post/&#123;id&#125;/photos&apos;, function($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find($id);</div><div class=\"line\"></div><div class=\"line\">        foreach($post-&gt;photos as $photo)&#123;</div><div class=\"line\"></div><div class=\"line\">            echo $photo-&gt;path . &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Reverse Polymorphic Relation\n<ul>\n<li>在 routes 引入 Model<br>\n<code>use App\\Photo;</code></li>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;photo/&#123;id&#125;/post&apos;, function($id)&#123;</div><div class=\"line\"></div><div class=\"line\">    $photo = Photo::findOrFail($id);</div><div class=\"line\"></div><div class=\"line\">    return $photo-&gt;imageable;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>Many to Many Polymorphic Relation\n<ul>\n<li>新增三個 model<br>\n<code>php artisan make:model Video -m</code><br>\n<code>php artisan make:model Tag -m</code><br>\n<code>php artisan make:model Taggable -m</code></li>\n<li>在 create_videos_table 和 create_tags_table 建立 name 的 table<br>\n<code>$table-&gt;string('name');</code></li>\n<li>在 create_taggables_table 建立以下 table<br>\n<code>$table-&gt;integer('tag_id');</code><br>\n<code>$table-&gt;integer('taggable_id');</code><br>\n<code>$table-&gt;string('taggable_type');</code></li>\n<li>在 Post.php 新增 morphToMany function<br>\n<code>public function tags(){return $this-&gt;morphToMany('App\\Tag', 'taggable');}</code></li>\n<li>在 Tag.php  新增 morphedByMany function<br>\n<code>public function posts(){ return $this-&gt;morphedByMany('App\\Post', 'taggable');}</code><br>\n<code>public function videos(){return $this-&gt;morphedByMany('App\\Video', 'taggable');}</code></li>\n<li>匯入 migrate<br>\n<code>php artisan migrate</code></li>\n<li>新增 routes<br>\n<code>Route::get('/post/tag', function(){</code><br>\n<code>$post = Post::find(1);</code><br>\n<code>foreach ($post-&gt;tags as $tag){</code><br>\n<code>echo $tag-&gt;name;</code><br>\n<code>}</code><br>\n<code>});</code></li>\n<li>import Tag model<br>\n<code>use App\\Tag;</code></li>\n<li>新增 routes<br>\n<code>Route::get('/tag/post', function(){</code><br>\n<code>$tag = Tag::find(2);</code><br>\n<code>foreach($tag-&gt;posts as $post){</code><br>\n<code>return $post-&gt;title;</code><br>\n<code>}</code><br>\n<code>});</code></li>\n</ul>\n</li>\n</ol>\n"},{"title":"Lavarel 快速學習自我挑戰 Day6","thumbnail":["/images/learning/laravel/laravelday6.jpg"],"date":"2017-04-27T02:19:30.000Z","_content":"<img src=\"/images/learning/laravel/laravelday6.jpg\">\n\n***\n### Tinker\n1. 使用 Tinker 建立資料\n    - 進入 Tinker 模式\n    `php artisan tinker`\n    - 建立資料\n    `$post = App\\Post::create(['title'=>'PHP post from tinker','content'=>'PHP content from tinker']);`\n    - 再看一次資料\n    `$post`\n    - 創建物件\n    `$post = new App\\Post`\n    - 新增 title 到物件\n    `$post->title = \"New Title from this object\"`\n    - 新增 content 到物件\n    `$post->content = \"yeah baby I\\'m coding and doing awesome\"`\n    - 寫入資料庫\n    `$post->save()`\n    - 離開 Tinker 模式\n    `exit`\n2. 使用 Tinker 讀取資料庫\n    - 讀取資料\n    `$post = App\\Post::find(5);`\n    - 用 constraint 的方式讀取\n    ` $post = App\\Post::where('id', 5)->first();`\n    `$post = App\\Post::whereId(5)->first();`\n3. 更新和刪除資料庫\n    - 更新 title\n    `$post->title = \"update record with id 4\"`\n    - 更新 content\n    `$post->content = \"updated record content with id 4\"`\n    - 寫入資料庫 `$post->save()`\n    - 從資料庫刪除(丟入垃圾桶) `$post->delete()`\n    - 從資料庫強迫刪除\n    `$post = App\\Post::onlyTrashed()`\n    `$post->forceDelete()`\n4. Relations in Tinker\n    - 搜尋 User\n    `$user = App\\User::find(1)`\n    - 搜尋 User 相關的 role\n    `$user->roles`\n\n### One to One Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel onetoone 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 model\n    `php artisan make:model Address -m`\n    - 新增欄位\n    `$table->string('name');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation\n    - 新增欄位\n    `$table->integer('user_id')->nullable();`\n    - 重新 migrate\n    `php artisan migrate:refresh`\n    - 在 User.php 設定 Relation\n    `public function address(){return $this->hasOne('App\\Address');}`\n    - 在資料庫 insert User\n    - 在 Address.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];`\n    - 用 routes 新增資料\n```\nuse App\\User;\nuse App\\Address;\n\nRoute::get('/insert', function(){\n\n    $user = User::findOrFail(1);\n\n    $address = new Address(['name'=>'1234 Houston av NY NY 11218']);\n\n    $user->address()->save($address);\n\n});\n```\n4. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $address = Address::whereUserId(1)->first();\n\n    $address->name = \"4353 Update Av, alaska\";\n\n    $address->save();\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $user = User::findOrFail(1);\n\n    echo $user->address->name;\n\n});\n```\n6. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n    $user = User::findOrFail(1);\n\n    $user->address()->delete();\n\n    return \"done\";\n\n});\n```\n","source":"_posts/Lavarel-快速學習自我挑戰-Day6.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day6\nthumbnail:\n  - /images/learning/laravel/laravelday6.jpg\ndate: 2017-04-27 10:19:30\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday6.jpg\">\n\n***\n### Tinker\n1. 使用 Tinker 建立資料\n    - 進入 Tinker 模式\n    `php artisan tinker`\n    - 建立資料\n    `$post = App\\Post::create(['title'=>'PHP post from tinker','content'=>'PHP content from tinker']);`\n    - 再看一次資料\n    `$post`\n    - 創建物件\n    `$post = new App\\Post`\n    - 新增 title 到物件\n    `$post->title = \"New Title from this object\"`\n    - 新增 content 到物件\n    `$post->content = \"yeah baby I\\'m coding and doing awesome\"`\n    - 寫入資料庫\n    `$post->save()`\n    - 離開 Tinker 模式\n    `exit`\n2. 使用 Tinker 讀取資料庫\n    - 讀取資料\n    `$post = App\\Post::find(5);`\n    - 用 constraint 的方式讀取\n    ` $post = App\\Post::where('id', 5)->first();`\n    `$post = App\\Post::whereId(5)->first();`\n3. 更新和刪除資料庫\n    - 更新 title\n    `$post->title = \"update record with id 4\"`\n    - 更新 content\n    `$post->content = \"updated record content with id 4\"`\n    - 寫入資料庫 `$post->save()`\n    - 從資料庫刪除(丟入垃圾桶) `$post->delete()`\n    - 從資料庫強迫刪除\n    `$post = App\\Post::onlyTrashed()`\n    `$post->forceDelete()`\n4. Relations in Tinker\n    - 搜尋 User\n    `$user = App\\User::find(1)`\n    - 搜尋 User 相關的 role\n    `$user->roles`\n\n### One to One Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel onetoone 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 model\n    `php artisan make:model Address -m`\n    - 新增欄位\n    `$table->string('name');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation\n    - 新增欄位\n    `$table->integer('user_id')->nullable();`\n    - 重新 migrate\n    `php artisan migrate:refresh`\n    - 在 User.php 設定 Relation\n    `public function address(){return $this->hasOne('App\\Address');}`\n    - 在資料庫 insert User\n    - 在 Address.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];`\n    - 用 routes 新增資料\n```\nuse App\\User;\nuse App\\Address;\n\nRoute::get('/insert', function(){\n\n    $user = User::findOrFail(1);\n\n    $address = new Address(['name'=>'1234 Houston av NY NY 11218']);\n\n    $user->address()->save($address);\n\n});\n```\n4. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $address = Address::whereUserId(1)->first();\n\n    $address->name = \"4353 Update Av, alaska\";\n\n    $address->save();\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $user = User::findOrFail(1);\n\n    echo $user->address->name;\n\n});\n```\n6. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n    $user = User::findOrFail(1);\n\n    $user->address()->delete();\n\n    return \"done\";\n\n});\n```\n","slug":"Lavarel-快速學習自我挑戰-Day6","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx5002k7ifa8ap4hruq","content":"<img src=\"/images/learning/laravel/laravelday6.jpg\">\n<hr>\n<h3>Tinker</h3>\n<ol>\n<li>使用 Tinker 建立資料\n<ul>\n<li>進入 Tinker 模式<br>\n<code>php artisan tinker</code></li>\n<li>建立資料<br>\n<code>$post = App\\Post::create(['title'=&gt;'PHP post from tinker','content'=&gt;'PHP content from tinker']);</code></li>\n<li>再看一次資料<br>\n<code>$post</code></li>\n<li>創建物件<br>\n<code>$post = new App\\Post</code></li>\n<li>新增 title 到物件<br>\n<code>$post-&gt;title = &quot;New Title from this object&quot;</code></li>\n<li>新增 content 到物件<br>\n<code>$post-&gt;content = &quot;yeah baby I\\'m coding and doing awesome&quot;</code></li>\n<li>寫入資料庫<br>\n<code>$post-&gt;save()</code></li>\n<li>離開 Tinker 模式<br>\n<code>exit</code></li>\n</ul>\n</li>\n<li>使用 Tinker 讀取資料庫\n<ul>\n<li>讀取資料<br>\n<code>$post = App\\Post::find(5);</code></li>\n<li>用 constraint 的方式讀取<br>\n<code>$post = App\\Post::where('id', 5)-&gt;first();</code><br>\n<code>$post = App\\Post::whereId(5)-&gt;first();</code></li>\n</ul>\n</li>\n<li>更新和刪除資料庫\n<ul>\n<li>更新 title<br>\n<code>$post-&gt;title = &quot;update record with id 4&quot;</code></li>\n<li>更新 content<br>\n<code>$post-&gt;content = &quot;updated record content with id 4&quot;</code></li>\n<li>寫入資料庫 <code>$post-&gt;save()</code></li>\n<li>從資料庫刪除(丟入垃圾桶) <code>$post-&gt;delete()</code></li>\n<li>從資料庫強迫刪除<br>\n<code>$post = App\\Post::onlyTrashed()</code><br>\n<code>$post-&gt;forceDelete()</code></li>\n</ul>\n</li>\n<li>Relations in Tinker\n<ul>\n<li>搜尋 User<br>\n<code>$user = App\\User::find(1)</code></li>\n<li>搜尋 User 相關的 role<br>\n<code>$user-&gt;roles</code></li>\n</ul>\n</li>\n</ol>\n<h3>One to One Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel onetoone 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 model<br>\n<code>php artisan make:model Address -m</code></li>\n<li>新增欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation\n<ul>\n<li>新增欄位<br>\n<code>$table-&gt;integer('user_id')-&gt;nullable();</code></li>\n<li>重新 migrate<br>\n<code>php artisan migrate:refresh</code></li>\n<li>在 User.php 設定 Relation<br>\n<code>public function address(){return $this-&gt;hasOne('App\\Address');}</code></li>\n<li>在資料庫 insert User</li>\n<li>在 Address.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];</code></li>\n<li>用 routes 新增資料</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">use App\\User;</div><div class=\"line\">use App\\Address;</div><div class=\"line\"></div><div class=\"line\">Route::get(&apos;/insert&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $address = new Address([&apos;name&apos;=&gt;&apos;1234 Houston av NY NY 11218&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;address()-&gt;save($address);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $address = Address::whereUserId(1)-&gt;first();</div><div class=\"line\"></div><div class=\"line\">    $address-&gt;name = &quot;4353 Update Av, alaska&quot;;</div><div class=\"line\"></div><div class=\"line\">    $address-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    echo $user-&gt;address-&gt;name;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;address()-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    return &quot;done&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday6.jpg\">\n<hr>\n<h3>Tinker</h3>\n<ol>\n<li>使用 Tinker 建立資料\n<ul>\n<li>進入 Tinker 模式<br>\n<code>php artisan tinker</code></li>\n<li>建立資料<br>\n<code>$post = App\\Post::create(['title'=&gt;'PHP post from tinker','content'=&gt;'PHP content from tinker']);</code></li>\n<li>再看一次資料<br>\n<code>$post</code></li>\n<li>創建物件<br>\n<code>$post = new App\\Post</code></li>\n<li>新增 title 到物件<br>\n<code>$post-&gt;title = &quot;New Title from this object&quot;</code></li>\n<li>新增 content 到物件<br>\n<code>$post-&gt;content = &quot;yeah baby I\\'m coding and doing awesome&quot;</code></li>\n<li>寫入資料庫<br>\n<code>$post-&gt;save()</code></li>\n<li>離開 Tinker 模式<br>\n<code>exit</code></li>\n</ul>\n</li>\n<li>使用 Tinker 讀取資料庫\n<ul>\n<li>讀取資料<br>\n<code>$post = App\\Post::find(5);</code></li>\n<li>用 constraint 的方式讀取<br>\n<code>$post = App\\Post::where('id', 5)-&gt;first();</code><br>\n<code>$post = App\\Post::whereId(5)-&gt;first();</code></li>\n</ul>\n</li>\n<li>更新和刪除資料庫\n<ul>\n<li>更新 title<br>\n<code>$post-&gt;title = &quot;update record with id 4&quot;</code></li>\n<li>更新 content<br>\n<code>$post-&gt;content = &quot;updated record content with id 4&quot;</code></li>\n<li>寫入資料庫 <code>$post-&gt;save()</code></li>\n<li>從資料庫刪除(丟入垃圾桶) <code>$post-&gt;delete()</code></li>\n<li>從資料庫強迫刪除<br>\n<code>$post = App\\Post::onlyTrashed()</code><br>\n<code>$post-&gt;forceDelete()</code></li>\n</ul>\n</li>\n<li>Relations in Tinker\n<ul>\n<li>搜尋 User<br>\n<code>$user = App\\User::find(1)</code></li>\n<li>搜尋 User 相關的 role<br>\n<code>$user-&gt;roles</code></li>\n</ul>\n</li>\n</ol>\n<h3>One to One Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel onetoone 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 model<br>\n<code>php artisan make:model Address -m</code></li>\n<li>新增欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation\n<ul>\n<li>新增欄位<br>\n<code>$table-&gt;integer('user_id')-&gt;nullable();</code></li>\n<li>重新 migrate<br>\n<code>php artisan migrate:refresh</code></li>\n<li>在 User.php 設定 Relation<br>\n<code>public function address(){return $this-&gt;hasOne('App\\Address');}</code></li>\n<li>在資料庫 insert User</li>\n<li>在 Address.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];</code></li>\n<li>用 routes 新增資料</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">use App\\User;</div><div class=\"line\">use App\\Address;</div><div class=\"line\"></div><div class=\"line\">Route::get(&apos;/insert&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $address = new Address([&apos;name&apos;=&gt;&apos;1234 Houston av NY NY 11218&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;address()-&gt;save($address);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $address = Address::whereUserId(1)-&gt;first();</div><div class=\"line\"></div><div class=\"line\">    $address-&gt;name = &quot;4353 Update Av, alaska&quot;;</div><div class=\"line\"></div><div class=\"line\">    $address-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    echo $user-&gt;address-&gt;name;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;address()-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    return &quot;done&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"Lavarel 快速學習自我挑戰 Day7","thumbnail":["/images/learning/laravel/laravelday7.jpeg"],"date":"2017-04-28T15:21:35.000Z","_content":"<img src=\"/images/learning/laravel/laravelday7.jpeg\">\n\n***\n### One to Many Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel onetomany 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 model\n    `php artisan make:model Post -m`\n    - 新增欄位\n    `$table->integer('user_id')->unsigned()->nullable()->index();`\n    `$table->string('title');`\n    `$table->text('body');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 User.php 設定 Relation\n    `public function posts() {return $this->hasMany('App\\Post');}`\n    - 在 Post.php 新增 protected，讓資料可填入\n    `protected $fillable = ['title','body'];`\n4. 用 tinker 和 routes 新增資料\n    - 進入 tinker 模式\n    `php artisan tinker`\n    - 新增一筆 User\n    `App\\User::create(['name'=>'Edwin Diaz', 'email'=>'edwin@codingfaculty.com', 'password'=>bcrypt(\"123\")])`\n    - 離開 tinker 模式\n    `exit`\n    - 用 routes 的方式\n```\nRoute::get('/insert', function(){\n\n    $user = User::findOrFail(1);\n\n    $post = new Post(['title'=>'My first post with Edwin Diaz', 'body'=>'I love Laravel, with Edwin Diaz']);\n    \n    $user->posts()->save($post);\n    \n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $user = User::findOrFail(1);\n\n//    dd($user); //一種 collection object\n\n    foreach($user->posts as $post){\n\n        echo $post->title . \"<br>\";\n\n    }\n\n});\n```\n6. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $user = User::find(1);\n\n    $user->posts()->where('id', '=', '2')->update(['title'=>'I love laravel2', 'body'=>'This is awesome, thank you Edwin2']);\n\n\n});\n```\n7. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n   $user = User::find(1);\n\n   $user->posts()->whereId(1)->delete();\n\n//    $user->posts()->delete(); // 刪除全部\n\n});\n```\n### Many to Many Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel manytomany 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 model\n    `php artisan make:model Role -m`\n    - 新增 migration\n    `php artisan make:migration create_role_user_table --create=role_user`\n    - 在 create\\_role\\_user_table 新增欄位\n    `$table->integer('user_id')->unsigned()->nullable()->index();`\n    `$table->integer('role_id')->unsigned()->nullable()->index();`\n    - 在 create\\_roles_table 新增欄位\n    `$table->string('name');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 User.php 設定 Relation\n    `public function roles() {return $this->belongsToMany('App\\Role');}`\n    - 在 Post.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];`\n4. 新增資料\n    - 新增 routes\n```\nRoute::get('/create', function(){\n\n    $user = User::find(1);\n\n    $role = new Role(['name'=>'Administrator']);\n\n    $user->roles()->save($role);\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $user = User::findOrFail(1);\n\n    foreach($user->roles as $role){\n\n        echo $role->name;\n\n    }\n\n});\n```\n6. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $user = User::findOrFail(1);\n\n    if($user->has('roles')){\n\n        foreach($user->roles as $role){\n\n            if($role->name == 'Administrator'){\n\n                $role->name = \"subscriber\";\n\n                $role->save();\n\n            }\n\n        }\n\n    }\n\n});\n```\n7. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n   $user = User::findOrFail(1);\n\n   foreach($user->roles as $role){\n\n       $role->whereId(5)->delete();\n\n   }\n\n});\n```\n8. Attaching, Detaching and Syncing\n    - attach：新增 user 的 role\n    `Route::get('/attach', function(){`\n        `$user = User::findOrFail(1);`\n        `$user->roles()->attach(4);`\n    `});`\n    - detach：把 user 的 role 移除\n    `Route::get('/detach', function(){`\n        `$user = User::findOrFail(1);`\n        `$user->roles()->detach();`\n    `});`\n    - sync：把 user\\_id 和多個 role_id 做連結\n    `Route::get('/sync', function(){`\n        `$user = User::findOrFail(1);`\n        `$user->roles()->sync([6,7]);`\n    `});`\n\n    \n\n\n\n\n\n","source":"_posts/Lavarel-快速學習自我挑戰-Day7.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day7\nthumbnail:\n  - /images/learning/laravel/laravelday7.jpeg\ndate: 2017-04-28 23:21:35\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday7.jpeg\">\n\n***\n### One to Many Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel onetomany 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 model\n    `php artisan make:model Post -m`\n    - 新增欄位\n    `$table->integer('user_id')->unsigned()->nullable()->index();`\n    `$table->string('title');`\n    `$table->text('body');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 User.php 設定 Relation\n    `public function posts() {return $this->hasMany('App\\Post');}`\n    - 在 Post.php 新增 protected，讓資料可填入\n    `protected $fillable = ['title','body'];`\n4. 用 tinker 和 routes 新增資料\n    - 進入 tinker 模式\n    `php artisan tinker`\n    - 新增一筆 User\n    `App\\User::create(['name'=>'Edwin Diaz', 'email'=>'edwin@codingfaculty.com', 'password'=>bcrypt(\"123\")])`\n    - 離開 tinker 模式\n    `exit`\n    - 用 routes 的方式\n```\nRoute::get('/insert', function(){\n\n    $user = User::findOrFail(1);\n\n    $post = new Post(['title'=>'My first post with Edwin Diaz', 'body'=>'I love Laravel, with Edwin Diaz']);\n    \n    $user->posts()->save($post);\n    \n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $user = User::findOrFail(1);\n\n//    dd($user); //一種 collection object\n\n    foreach($user->posts as $post){\n\n        echo $post->title . \"<br>\";\n\n    }\n\n});\n```\n6. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $user = User::find(1);\n\n    $user->posts()->where('id', '=', '2')->update(['title'=>'I love laravel2', 'body'=>'This is awesome, thank you Edwin2']);\n\n\n});\n```\n7. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n   $user = User::find(1);\n\n   $user->posts()->whereId(1)->delete();\n\n//    $user->posts()->delete(); // 刪除全部\n\n});\n```\n### Many to Many Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel manytomany 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 model\n    `php artisan make:model Role -m`\n    - 新增 migration\n    `php artisan make:migration create_role_user_table --create=role_user`\n    - 在 create\\_role\\_user_table 新增欄位\n    `$table->integer('user_id')->unsigned()->nullable()->index();`\n    `$table->integer('role_id')->unsigned()->nullable()->index();`\n    - 在 create\\_roles_table 新增欄位\n    `$table->string('name');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 User.php 設定 Relation\n    `public function roles() {return $this->belongsToMany('App\\Role');}`\n    - 在 Post.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];`\n4. 新增資料\n    - 新增 routes\n```\nRoute::get('/create', function(){\n\n    $user = User::find(1);\n\n    $role = new Role(['name'=>'Administrator']);\n\n    $user->roles()->save($role);\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $user = User::findOrFail(1);\n\n    foreach($user->roles as $role){\n\n        echo $role->name;\n\n    }\n\n});\n```\n6. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $user = User::findOrFail(1);\n\n    if($user->has('roles')){\n\n        foreach($user->roles as $role){\n\n            if($role->name == 'Administrator'){\n\n                $role->name = \"subscriber\";\n\n                $role->save();\n\n            }\n\n        }\n\n    }\n\n});\n```\n7. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n   $user = User::findOrFail(1);\n\n   foreach($user->roles as $role){\n\n       $role->whereId(5)->delete();\n\n   }\n\n});\n```\n8. Attaching, Detaching and Syncing\n    - attach：新增 user 的 role\n    `Route::get('/attach', function(){`\n        `$user = User::findOrFail(1);`\n        `$user->roles()->attach(4);`\n    `});`\n    - detach：把 user 的 role 移除\n    `Route::get('/detach', function(){`\n        `$user = User::findOrFail(1);`\n        `$user->roles()->detach();`\n    `});`\n    - sync：把 user\\_id 和多個 role_id 做連結\n    `Route::get('/sync', function(){`\n        `$user = User::findOrFail(1);`\n        `$user->roles()->sync([6,7]);`\n    `});`\n\n    \n\n\n\n\n\n","slug":"Lavarel-快速學習自我挑戰-Day7","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx6002o7ifaibwxc8vm","content":"<img src=\"/images/learning/laravel/laravelday7.jpeg\">\n<hr>\n<h3>One to Many Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel onetomany 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 model<br>\n<code>php artisan make:model Post -m</code></li>\n<li>新增欄位<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned()-&gt;nullable()-&gt;index();</code><br>\n<code>$table-&gt;string('title');</code><br>\n<code>$table-&gt;text('body');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 User.php 設定 Relation<br>\n<code>public function posts() {return $this-&gt;hasMany('App\\Post');}</code></li>\n<li>在 Post.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['title','body'];</code></li>\n</ul>\n</li>\n<li>用 tinker 和 routes 新增資料\n<ul>\n<li>進入 tinker 模式<br>\n<code>php artisan tinker</code></li>\n<li>新增一筆 User<br>\n<code>App\\User::create(['name'=&gt;'Edwin Diaz', 'email'=&gt;'edwin@codingfaculty.com', 'password'=&gt;bcrypt(&quot;123&quot;)])</code></li>\n<li>離開 tinker 模式<br>\n<code>exit</code></li>\n<li>用 routes 的方式</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/insert&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $post = new Post([&apos;title&apos;=&gt;&apos;My first post with Edwin Diaz&apos;, &apos;body&apos;=&gt;&apos;I love Laravel, with Edwin Diaz&apos;]);</div><div class=\"line\">    </div><div class=\"line\">    $user-&gt;posts()-&gt;save($post);</div><div class=\"line\">    </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">//    dd($user); //一種 collection object</div><div class=\"line\"></div><div class=\"line\">    foreach($user-&gt;posts as $post)&#123;</div><div class=\"line\"></div><div class=\"line\">        echo $post-&gt;title . &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;posts()-&gt;where(&apos;id&apos;, &apos;=&apos;, &apos;2&apos;)-&gt;update([&apos;title&apos;=&gt;&apos;I love laravel2&apos;, &apos;body&apos;=&gt;&apos;This is awesome, thank you Edwin2&apos;]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">   $user-&gt;posts()-&gt;whereId(1)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">//    $user-&gt;posts()-&gt;delete(); // 刪除全部</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3>Many to Many Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel manytomany 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 model<br>\n<code>php artisan make:model Role -m</code></li>\n<li>新增 migration<br>\n<code>php artisan make:migration create_role_user_table --create=role_user</code></li>\n<li>在 create_role_user_table 新增欄位<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned()-&gt;nullable()-&gt;index();</code><br>\n<code>$table-&gt;integer('role_id')-&gt;unsigned()-&gt;nullable()-&gt;index();</code></li>\n<li>在 create_roles_table 新增欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 User.php 設定 Relation<br>\n<code>public function roles() {return $this-&gt;belongsToMany('App\\Role');}</code></li>\n<li>在 Post.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];</code></li>\n</ul>\n</li>\n<li>新增資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/create&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    $role = new Role([&apos;name&apos;=&gt;&apos;Administrator&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;roles()-&gt;save($role);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">        echo $role-&gt;name;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    if($user-&gt;has(&apos;roles&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">        foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">            if($role-&gt;name == &apos;Administrator&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">                $role-&gt;name = &quot;subscriber&quot;;</div><div class=\"line\"></div><div class=\"line\">                $role-&gt;save();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">   foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">       $role-&gt;whereId(5)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Attaching, Detaching and Syncing\n<ul>\n<li>attach：新增 user 的 role<br>\n<code>Route::get('/attach', function(){</code><br>\n<code>$user = User::findOrFail(1);</code><br>\n<code>$user-&gt;roles()-&gt;attach(4);</code><br>\n<code>});</code></li>\n<li>detach：把 user 的 role 移除<br>\n<code>Route::get('/detach', function(){</code><br>\n<code>$user = User::findOrFail(1);</code><br>\n<code>$user-&gt;roles()-&gt;detach();</code><br>\n<code>});</code></li>\n<li>sync：把 user_id 和多個 role_id 做連結<br>\n<code>Route::get('/sync', function(){</code><br>\n<code>$user = User::findOrFail(1);</code><br>\n<code>$user-&gt;roles()-&gt;sync([6,7]);</code><br>\n<code>});</code></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday7.jpeg\">\n<hr>\n<h3>One to Many Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel onetomany 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 model<br>\n<code>php artisan make:model Post -m</code></li>\n<li>新增欄位<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned()-&gt;nullable()-&gt;index();</code><br>\n<code>$table-&gt;string('title');</code><br>\n<code>$table-&gt;text('body');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 User.php 設定 Relation<br>\n<code>public function posts() {return $this-&gt;hasMany('App\\Post');}</code></li>\n<li>在 Post.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['title','body'];</code></li>\n</ul>\n</li>\n<li>用 tinker 和 routes 新增資料\n<ul>\n<li>進入 tinker 模式<br>\n<code>php artisan tinker</code></li>\n<li>新增一筆 User<br>\n<code>App\\User::create(['name'=&gt;'Edwin Diaz', 'email'=&gt;'edwin@codingfaculty.com', 'password'=&gt;bcrypt(&quot;123&quot;)])</code></li>\n<li>離開 tinker 模式<br>\n<code>exit</code></li>\n<li>用 routes 的方式</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/insert&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $post = new Post([&apos;title&apos;=&gt;&apos;My first post with Edwin Diaz&apos;, &apos;body&apos;=&gt;&apos;I love Laravel, with Edwin Diaz&apos;]);</div><div class=\"line\">    </div><div class=\"line\">    $user-&gt;posts()-&gt;save($post);</div><div class=\"line\">    </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">//    dd($user); //一種 collection object</div><div class=\"line\"></div><div class=\"line\">    foreach($user-&gt;posts as $post)&#123;</div><div class=\"line\"></div><div class=\"line\">        echo $post-&gt;title . &quot;&lt;br&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;posts()-&gt;where(&apos;id&apos;, &apos;=&apos;, &apos;2&apos;)-&gt;update([&apos;title&apos;=&gt;&apos;I love laravel2&apos;, &apos;body&apos;=&gt;&apos;This is awesome, thank you Edwin2&apos;]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">   $user-&gt;posts()-&gt;whereId(1)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">//    $user-&gt;posts()-&gt;delete(); // 刪除全部</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3>Many to Many Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel manytomany 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 model<br>\n<code>php artisan make:model Role -m</code></li>\n<li>新增 migration<br>\n<code>php artisan make:migration create_role_user_table --create=role_user</code></li>\n<li>在 create_role_user_table 新增欄位<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned()-&gt;nullable()-&gt;index();</code><br>\n<code>$table-&gt;integer('role_id')-&gt;unsigned()-&gt;nullable()-&gt;index();</code></li>\n<li>在 create_roles_table 新增欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 User.php 設定 Relation<br>\n<code>public function roles() {return $this-&gt;belongsToMany('App\\Role');}</code></li>\n<li>在 Post.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];</code></li>\n</ul>\n</li>\n<li>新增資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/create&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::find(1);</div><div class=\"line\"></div><div class=\"line\">    $role = new Role([&apos;name&apos;=&gt;&apos;Administrator&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $user-&gt;roles()-&gt;save($role);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">        echo $role-&gt;name;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    if($user-&gt;has(&apos;roles&apos;))&#123;</div><div class=\"line\"></div><div class=\"line\">        foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">            if($role-&gt;name == &apos;Administrator&apos;)&#123;</div><div class=\"line\"></div><div class=\"line\">                $role-&gt;name = &quot;subscriber&quot;;</div><div class=\"line\"></div><div class=\"line\">                $role-&gt;save();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">   $user = User::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">   foreach($user-&gt;roles as $role)&#123;</div><div class=\"line\"></div><div class=\"line\">       $role-&gt;whereId(5)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Attaching, Detaching and Syncing\n<ul>\n<li>attach：新增 user 的 role<br>\n<code>Route::get('/attach', function(){</code><br>\n<code>$user = User::findOrFail(1);</code><br>\n<code>$user-&gt;roles()-&gt;attach(4);</code><br>\n<code>});</code></li>\n<li>detach：把 user 的 role 移除<br>\n<code>Route::get('/detach', function(){</code><br>\n<code>$user = User::findOrFail(1);</code><br>\n<code>$user-&gt;roles()-&gt;detach();</code><br>\n<code>});</code></li>\n<li>sync：把 user_id 和多個 role_id 做連結<br>\n<code>Route::get('/sync', function(){</code><br>\n<code>$user = User::findOrFail(1);</code><br>\n<code>$user-&gt;roles()-&gt;sync([6,7]);</code><br>\n<code>});</code></li>\n</ul>\n</li>\n</ol>\n"},{"title":"Lavarel 快速學習自我挑戰 Day8","thumbnail":["/images/learning/laravel/laravelday8.png"],"date":"2017-04-29T15:21:35.000Z","_content":"<img src=\"/images/learning/laravel/laravelday8.png\">\n\n***\n### Polymorphic Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel polymorphic 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 三個model\n    `php artisan make:model Staff -m`\n    `php artisan make:model Product -m`\n    `php artisan make:model Photo -m`\n    - 新增 Staff 和 Product migration 欄位\n    `$table->string('name');`\n    - 新增 Photo migration 欄位\n    `$table->string('path');`\n    `$table->integer('imageable_id');`\n    `$table->string('imageable_type');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 Photo.php 設定 Relation\n    `public function imageable(){return $this->morphTo();}`\n    - 在 Photo.php 新增 protected，讓資料可填入\n    `protected $fillable = ['path'];`\n    - 在 Staff.php 和 Product.php 設定 Relation\n    `public function photos(){return $this->morphMany('App\\Photo', 'imageable');}`\n    - 在 Staff.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];`\n4. 新增資料\n    - 新增 routes\n```\nuse App\\Staff;\n\nRoute::get('/create', function(){\n\n    $staff = Staff::find(1);\n\n    $staff->photos()->create(['path'=>'example.jpg']);\n\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $staff = Staff::findOrFail(1);\n\n    foreach($staff->photos as $photo){\n\n        return $photo->path;\n\n    }\n\n});\n```\n6. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $staff = Staff::findOrFail(1);\n\n    $photo = $staff->photos()->whereId(1)->first();\n\n    $photo->path = \"Update example.jpg\";\n\n    $photo->save();\n\n});\n```\n7. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n    $staff = Staff::findOrFail(1);\n\n    $staff->photos()->whereId(1)->delete();\n\n});\n```\n8. Assign & Unassign\n    - assign\n    `Route::get('/assign', function(){`\n        `$staff = Staff::findOrFail(1);`\n        `$photo = Photo::findOrFail(4);`\n        `$staff->photos()->save($photo);`\n    `});`\n    - unassign\n    `Route::get('/un-assign', function(){`\n    `$staff = Staff::findOrFail(1);`\n    `$staff->photos()->whereId(4)->update(['imageable_id'=>'', 'imageable_type'=>'']);`\n    `});`\n### Polymorphic Many to Many Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel polymorphicmanytomany 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration \n    - 新增 三個model\n    `php artisan make:model Post -m`\n    `php artisan make:model Video -m`\n    `php artisan make:model Tag -m`\n    `php artisan make:model Taggable -m`\n    - 新增 Post、Video 和 Tag migration 欄位\n    `$table->string('name');`\n    - 新增 Taggable migration 欄位\n    `$table->integer('tag_id');`\n    `$table->integer('taggable_id');`\n    `$table->string('taggable_type');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 Post.php 和 Video.php 設定 Relation\n    `public function tags(){return $this->morphToMany('App\\Tag', 'taggable');}`\n    - 在 Post.php、Video.php 和 Tag.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];;`\n4. 新增資料\n    - 新增 routes\n```\nRoute::get('/create', function(){\n\n    $post = Post::create(['name'=>'My first post 1']);\n\n    $tag1 = Tag::find(1);\n\n    $post->tags()->save($tag1);\n\n    $video = Video::create(['name'=>'Video.mov']);\n\n    $tag2 = Tag::find(2);\n\n    $video->tags()->save($tag2);\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $post = Post::findOrFail(1);\n\n    foreach ($post->tags as $tag){\n\n        echo $tag;\n\n    }\n\n});\n```\n5. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n//    $post = Post::findOrFail(1);\n//\n//    foreach ($post->tags as $tag){\n//\n//        return $tag->whereName('PHP')->update(['name'=>'Updated PHP']);\n//\n//    }\n\n    $post = Post::findOrFail(1);\n\n    $tag = Tag::find(2);\n\n    $post->tags()->save($tag);\n\n//    $post->tags()->attach($tag);\n//\n//    $post->tags()->sync([1,2]);\n\n});\n```\n6. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n    $post = Post::find(2);\n\n    foreach ($post->tags as $tag){\n\n        $tag->whereId(4)->delete();\n\n    }\n\n\n});\n```","source":"_posts/Lavarel-快速學習自我挑戰-Day8.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day8\nthumbnail:\n  - /images/learning/laravel/laravelday8.png\ndate: 2017-04-29 23:21:35\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday8.png\">\n\n***\n### Polymorphic Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel polymorphic 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration\n    - 新增 三個model\n    `php artisan make:model Staff -m`\n    `php artisan make:model Product -m`\n    `php artisan make:model Photo -m`\n    - 新增 Staff 和 Product migration 欄位\n    `$table->string('name');`\n    - 新增 Photo migration 欄位\n    `$table->string('path');`\n    `$table->integer('imageable_id');`\n    `$table->string('imageable_type');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 Photo.php 設定 Relation\n    `public function imageable(){return $this->morphTo();}`\n    - 在 Photo.php 新增 protected，讓資料可填入\n    `protected $fillable = ['path'];`\n    - 在 Staff.php 和 Product.php 設定 Relation\n    `public function photos(){return $this->morphMany('App\\Photo', 'imageable');}`\n    - 在 Staff.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];`\n4. 新增資料\n    - 新增 routes\n```\nuse App\\Staff;\n\nRoute::get('/create', function(){\n\n    $staff = Staff::find(1);\n\n    $staff->photos()->create(['path'=>'example.jpg']);\n\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $staff = Staff::findOrFail(1);\n\n    foreach($staff->photos as $photo){\n\n        return $photo->path;\n\n    }\n\n});\n```\n6. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n    $staff = Staff::findOrFail(1);\n\n    $photo = $staff->photos()->whereId(1)->first();\n\n    $photo->path = \"Update example.jpg\";\n\n    $photo->save();\n\n});\n```\n7. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n    $staff = Staff::findOrFail(1);\n\n    $staff->photos()->whereId(1)->delete();\n\n});\n```\n8. Assign & Unassign\n    - assign\n    `Route::get('/assign', function(){`\n        `$staff = Staff::findOrFail(1);`\n        `$photo = Photo::findOrFail(4);`\n        `$staff->photos()->save($photo);`\n    `});`\n    - unassign\n    `Route::get('/un-assign', function(){`\n    `$staff = Staff::findOrFail(1);`\n    `$staff->photos()->whereId(4)->update(['imageable_id'=>'', 'imageable_type'=>'']);`\n    `});`\n### Polymorphic Many to Many Relationship (CRUD) - [Eloquent Relationship 設定官方文件](https://laravel.com/docs/5.2/eloquent-relationships)\n1. 安裝＋設定\n    - 新增一個專案\n    `composer create-project --prefer-dist laravel/laravel polymorphicmanytomany 5.2.29`\n    - 建立資料庫 & 設定 .env\n2. 資料庫設定和 migration \n    - 新增 三個model\n    `php artisan make:model Post -m`\n    `php artisan make:model Video -m`\n    `php artisan make:model Tag -m`\n    `php artisan make:model Taggable -m`\n    - 新增 Post、Video 和 Tag migration 欄位\n    `$table->string('name');`\n    - 新增 Taggable migration 欄位\n    `$table->integer('tag_id');`\n    `$table->integer('taggable_id');`\n    `$table->string('taggable_type');`\n    - 進行 migrate\n    `php artisan migrate`\n3. 設定 Relation 和 mass assignment\n    - 在 Post.php 和 Video.php 設定 Relation\n    `public function tags(){return $this->morphToMany('App\\Tag', 'taggable');}`\n    - 在 Post.php、Video.php 和 Tag.php 新增 protected，讓資料可填入\n    `protected $fillable = ['name'];;`\n4. 新增資料\n    - 新增 routes\n```\nRoute::get('/create', function(){\n\n    $post = Post::create(['name'=>'My first post 1']);\n\n    $tag1 = Tag::find(1);\n\n    $post->tags()->save($tag1);\n\n    $video = Video::create(['name'=>'Video.mov']);\n\n    $tag2 = Tag::find(2);\n\n    $video->tags()->save($tag2);\n\n});\n```\n5. 讀取資料\n    - 新增 routes\n```\nRoute::get('/read', function(){\n\n    $post = Post::findOrFail(1);\n\n    foreach ($post->tags as $tag){\n\n        echo $tag;\n\n    }\n\n});\n```\n5. 更新資料\n    - 新增 routes\n```\nRoute::get('/update', function(){\n\n//    $post = Post::findOrFail(1);\n//\n//    foreach ($post->tags as $tag){\n//\n//        return $tag->whereName('PHP')->update(['name'=>'Updated PHP']);\n//\n//    }\n\n    $post = Post::findOrFail(1);\n\n    $tag = Tag::find(2);\n\n    $post->tags()->save($tag);\n\n//    $post->tags()->attach($tag);\n//\n//    $post->tags()->sync([1,2]);\n\n});\n```\n6. 刪除資料\n    - 新增 routes\n```\nRoute::get('/delete', function(){\n\n    $post = Post::find(2);\n\n    foreach ($post->tags as $tag){\n\n        $tag->whereId(4)->delete();\n\n    }\n\n\n});\n```","slug":"Lavarel-快速學習自我挑戰-Day8","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx7002r7ifasxtmu8mt","content":"<img src=\"/images/learning/laravel/laravelday8.png\">\n<hr>\n<h3>Polymorphic Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel polymorphic 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 三個model<br>\n<code>php artisan make:model Staff -m</code><br>\n<code>php artisan make:model Product -m</code><br>\n<code>php artisan make:model Photo -m</code></li>\n<li>新增 Staff 和 Product migration 欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>新增 Photo migration 欄位<br>\n<code>$table-&gt;string('path');</code><br>\n<code>$table-&gt;integer('imageable_id');</code><br>\n<code>$table-&gt;string('imageable_type');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 Photo.php 設定 Relation<br>\n<code>public function imageable(){return $this-&gt;morphTo();}</code></li>\n<li>在 Photo.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['path'];</code></li>\n<li>在 Staff.php 和 Product.php 設定 Relation<br>\n<code>public function photos(){return $this-&gt;morphMany('App\\Photo', 'imageable');}</code></li>\n<li>在 Staff.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];</code></li>\n</ul>\n</li>\n<li>新增資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">use App\\Staff;</div><div class=\"line\"></div><div class=\"line\">Route::get(&apos;/create&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::find(1);</div><div class=\"line\"></div><div class=\"line\">    $staff-&gt;photos()-&gt;create([&apos;path&apos;=&gt;&apos;example.jpg&apos;]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    foreach($staff-&gt;photos as $photo)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $photo-&gt;path;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $photo = $staff-&gt;photos()-&gt;whereId(1)-&gt;first();</div><div class=\"line\"></div><div class=\"line\">    $photo-&gt;path = &quot;Update example.jpg&quot;;</div><div class=\"line\"></div><div class=\"line\">    $photo-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $staff-&gt;photos()-&gt;whereId(1)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Assign &amp; Unassign\n<ul>\n<li>assign<br>\n<code>Route::get('/assign', function(){</code><br>\n<code>$staff = Staff::findOrFail(1);</code><br>\n<code>$photo = Photo::findOrFail(4);</code><br>\n<code>$staff-&gt;photos()-&gt;save($photo);</code><br>\n<code>});</code></li>\n<li>unassign<br>\n<code>Route::get('/un-assign', function(){</code><br>\n<code>$staff = Staff::findOrFail(1);</code><br>\n<code>$staff-&gt;photos()-&gt;whereId(4)-&gt;update(['imageable_id'=&gt;'', 'imageable_type'=&gt;'']);</code><br>\n<code>});</code></li>\n</ul>\n</li>\n</ol>\n<h3>Polymorphic Many to Many Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel polymorphicmanytomany 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 三個model<br>\n<code>php artisan make:model Post -m</code><br>\n<code>php artisan make:model Video -m</code><br>\n<code>php artisan make:model Tag -m</code><br>\n<code>php artisan make:model Taggable -m</code></li>\n<li>新增 Post、Video 和 Tag migration 欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>新增 Taggable migration 欄位<br>\n<code>$table-&gt;integer('tag_id');</code><br>\n<code>$table-&gt;integer('taggable_id');</code><br>\n<code>$table-&gt;string('taggable_type');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 Post.php 和 Video.php 設定 Relation<br>\n<code>public function tags(){return $this-&gt;morphToMany('App\\Tag', 'taggable');}</code></li>\n<li>在 Post.php、Video.php 和 Tag.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];;</code></li>\n</ul>\n</li>\n<li>新增資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/create&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::create([&apos;name&apos;=&gt;&apos;My first post 1&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $tag1 = Tag::find(1);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;tags()-&gt;save($tag1);</div><div class=\"line\"></div><div class=\"line\">    $video = Video::create([&apos;name&apos;=&gt;&apos;Video.mov&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $tag2 = Tag::find(2);</div><div class=\"line\"></div><div class=\"line\">    $video-&gt;tags()-&gt;save($tag2);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    foreach ($post-&gt;tags as $tag)&#123;</div><div class=\"line\"></div><div class=\"line\">        echo $tag;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">//    $post = Post::findOrFail(1);</div><div class=\"line\">//</div><div class=\"line\">//    foreach ($post-&gt;tags as $tag)&#123;</div><div class=\"line\">//</div><div class=\"line\">//        return $tag-&gt;whereName(&apos;PHP&apos;)-&gt;update([&apos;name&apos;=&gt;&apos;Updated PHP&apos;]);</div><div class=\"line\">//</div><div class=\"line\">//    &#125;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $tag = Tag::find(2);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;tags()-&gt;save($tag);</div><div class=\"line\"></div><div class=\"line\">//    $post-&gt;tags()-&gt;attach($tag);</div><div class=\"line\">//</div><div class=\"line\">//    $post-&gt;tags()-&gt;sync([1,2]);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(2);</div><div class=\"line\"></div><div class=\"line\">    foreach ($post-&gt;tags as $tag)&#123;</div><div class=\"line\"></div><div class=\"line\">        $tag-&gt;whereId(4)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday8.png\">\n<hr>\n<h3>Polymorphic Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel polymorphic 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 三個model<br>\n<code>php artisan make:model Staff -m</code><br>\n<code>php artisan make:model Product -m</code><br>\n<code>php artisan make:model Photo -m</code></li>\n<li>新增 Staff 和 Product migration 欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>新增 Photo migration 欄位<br>\n<code>$table-&gt;string('path');</code><br>\n<code>$table-&gt;integer('imageable_id');</code><br>\n<code>$table-&gt;string('imageable_type');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 Photo.php 設定 Relation<br>\n<code>public function imageable(){return $this-&gt;morphTo();}</code></li>\n<li>在 Photo.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['path'];</code></li>\n<li>在 Staff.php 和 Product.php 設定 Relation<br>\n<code>public function photos(){return $this-&gt;morphMany('App\\Photo', 'imageable');}</code></li>\n<li>在 Staff.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];</code></li>\n</ul>\n</li>\n<li>新增資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">use App\\Staff;</div><div class=\"line\"></div><div class=\"line\">Route::get(&apos;/create&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::find(1);</div><div class=\"line\"></div><div class=\"line\">    $staff-&gt;photos()-&gt;create([&apos;path&apos;=&gt;&apos;example.jpg&apos;]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    foreach($staff-&gt;photos as $photo)&#123;</div><div class=\"line\"></div><div class=\"line\">        return $photo-&gt;path;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $photo = $staff-&gt;photos()-&gt;whereId(1)-&gt;first();</div><div class=\"line\"></div><div class=\"line\">    $photo-&gt;path = &quot;Update example.jpg&quot;;</div><div class=\"line\"></div><div class=\"line\">    $photo-&gt;save();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $staff = Staff::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $staff-&gt;photos()-&gt;whereId(1)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Assign &amp; Unassign\n<ul>\n<li>assign<br>\n<code>Route::get('/assign', function(){</code><br>\n<code>$staff = Staff::findOrFail(1);</code><br>\n<code>$photo = Photo::findOrFail(4);</code><br>\n<code>$staff-&gt;photos()-&gt;save($photo);</code><br>\n<code>});</code></li>\n<li>unassign<br>\n<code>Route::get('/un-assign', function(){</code><br>\n<code>$staff = Staff::findOrFail(1);</code><br>\n<code>$staff-&gt;photos()-&gt;whereId(4)-&gt;update(['imageable_id'=&gt;'', 'imageable_type'=&gt;'']);</code><br>\n<code>});</code></li>\n</ul>\n</li>\n</ol>\n<h3>Polymorphic Many to Many Relationship (CRUD) - <a href=\"https://laravel.com/docs/5.2/eloquent-relationships\" target=\"_blank\" rel=\"external\">Eloquent Relationship 設定官方文件</a></h3>\n<ol>\n<li>安裝＋設定\n<ul>\n<li>新增一個專案<br>\n<code>composer create-project --prefer-dist laravel/laravel polymorphicmanytomany 5.2.29</code></li>\n<li>建立資料庫 &amp; 設定 .env</li>\n</ul>\n</li>\n<li>資料庫設定和 migration\n<ul>\n<li>新增 三個model<br>\n<code>php artisan make:model Post -m</code><br>\n<code>php artisan make:model Video -m</code><br>\n<code>php artisan make:model Tag -m</code><br>\n<code>php artisan make:model Taggable -m</code></li>\n<li>新增 Post、Video 和 Tag migration 欄位<br>\n<code>$table-&gt;string('name');</code></li>\n<li>新增 Taggable migration 欄位<br>\n<code>$table-&gt;integer('tag_id');</code><br>\n<code>$table-&gt;integer('taggable_id');</code><br>\n<code>$table-&gt;string('taggable_type');</code></li>\n<li>進行 migrate<br>\n<code>php artisan migrate</code></li>\n</ul>\n</li>\n<li>設定 Relation 和 mass assignment\n<ul>\n<li>在 Post.php 和 Video.php 設定 Relation<br>\n<code>public function tags(){return $this-&gt;morphToMany('App\\Tag', 'taggable');}</code></li>\n<li>在 Post.php、Video.php 和 Tag.php 新增 protected，讓資料可填入<br>\n<code>protected $fillable = ['name'];;</code></li>\n</ul>\n</li>\n<li>新增資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/create&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::create([&apos;name&apos;=&gt;&apos;My first post 1&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $tag1 = Tag::find(1);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;tags()-&gt;save($tag1);</div><div class=\"line\"></div><div class=\"line\">    $video = Video::create([&apos;name&apos;=&gt;&apos;Video.mov&apos;]);</div><div class=\"line\"></div><div class=\"line\">    $tag2 = Tag::find(2);</div><div class=\"line\"></div><div class=\"line\">    $video-&gt;tags()-&gt;save($tag2);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>讀取資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/read&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    foreach ($post-&gt;tags as $tag)&#123;</div><div class=\"line\"></div><div class=\"line\">        echo $tag;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>更新資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/update&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">//    $post = Post::findOrFail(1);</div><div class=\"line\">//</div><div class=\"line\">//    foreach ($post-&gt;tags as $tag)&#123;</div><div class=\"line\">//</div><div class=\"line\">//        return $tag-&gt;whereName(&apos;PHP&apos;)-&gt;update([&apos;name&apos;=&gt;&apos;Updated PHP&apos;]);</div><div class=\"line\">//</div><div class=\"line\">//    &#125;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::findOrFail(1);</div><div class=\"line\"></div><div class=\"line\">    $tag = Tag::find(2);</div><div class=\"line\"></div><div class=\"line\">    $post-&gt;tags()-&gt;save($tag);</div><div class=\"line\"></div><div class=\"line\">//    $post-&gt;tags()-&gt;attach($tag);</div><div class=\"line\">//</div><div class=\"line\">//    $post-&gt;tags()-&gt;sync([1,2]);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>刪除資料\n<ul>\n<li>新增 routes</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/delete&apos;, function()&#123;</div><div class=\"line\"></div><div class=\"line\">    $post = Post::find(2);</div><div class=\"line\"></div><div class=\"line\">    foreach ($post-&gt;tags as $tag)&#123;</div><div class=\"line\"></div><div class=\"line\">        $tag-&gt;whereId(4)-&gt;delete();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Lavarel 快速學習自我挑戰 Day9","thumbnail":["/images/learning/laravel/laravelday9.png"],"date":"2017-04-30T15:21:35.000Z","_content":"<img src=\"/images/learning/laravel/laravelday9.png\">\n\n***\n### Form and Validation\n1. 設定 Migration & Relations\n    - 在 create\\_posts\\_table.php 新增 user\\_id\n    `$table->integer('user_id')->unsigned();`\n    - 重新將資料匯入資料庫\n    `php artisan migrate:refresh`\n2. 設定 Views & Routes\n    - 設定 Controller Route\n    `Route::resource('/posts', 'PostsController');`\n    - 在 resources/views 底下新增 posts，新增 index、edit、create、show 的 blade.php View 模板\n3. 設定 create 的 markup\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <form method=\"post\" action=\"/posts\">\n\n        <input type=\"text\" name=\"title\" placeholder=\"Enter title\">\n\n        // 避免 TokenMismatchException Error\n        {{csrf_field()}}\n\n        <input type=\"submit\" name=\"submit\">\n\n    </form>\n\n@stop\n\n@yield('footer')\n```\n4. 設定 Controller & View\n    - 在 PostsController 的 create 新增 View\n    `public function create(){return view('posts.create');}`\n    - 在 PostsController 的 store 回傳資料\n    `public function store(Request $request){return $request->all();}`\n5. 將資料傳送到資料庫\n    - 修改 PostsController 的 store function\n```\n    public function store(Request $request)\n    {\n\n//        return $request->all();\n\n        // First method\n        \n        Post::create($request->all());\n        \n          // second method\n\n//        $input = $request->all();\n//\n//        $input['title'] = $request->title;\n//\n//        Post::create($request->all());\n\n          // third method\n\n//        $post = new Post;\n//\n//        $post->title = $request->title;\n//\n//        $post->save();\n\n    }\n```\n6. 讀取資料\n    - 在 PostsController 的 store 新增導向函式\n    `return redirect('/posts')`\n    - 在 PostsController 的 index 讀取所有的 post 並傳送給 index 的 View 去呈現\n    `$posts = Post::all();`\n    `return view('posts.index', compact('posts'));`\n    - 修改 index.blade.php\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <ul>\n        @foreach($posts as $post)\n            <li>{{$post->title}}</li>\n        @endforeach\n    </ul>\n\n@endsection\n\n@yield('footer')\n```\n7. 顯示單一貼文並修改\n    - 在 PostsController 的 show 讀取特定 id 的 post 並傳送給 show 的 View 去呈現\n    `$post = Post::findOrFail($id);`\n    `return view('posts.show', compact('post'));`\n    - 修改 show.blade.php\n    `<h1>{{ \"{{$post->title\" }}}}</h1>`\n    - 讓 index.blade.php 可以超連結\n    `<li><a href=\"{{ \"{{route('posts.show', $post->id)\" }}}}\"> {{ \"{{$post->title}\" }}}}</a></li>`\n8. edit 頁面製作\n    - 在 PostsController 的 edit 讀取特定 id 的 post 並傳送給 edit 的 View 使用\n    `$post = Post::findOrFail($id);`\n    `return view('posts.edit', compact('post'));`\n    - 修改 edit.blade.php\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <h1>Edit Post</h1>\n\n    <form method=\"post\" action=\"/posts/{{$post->id}}}\">\n\n        //取得 Token\n        {{csrf_field()}}\n\n        <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n\n        <input type=\"text\" name=\"title\" placeholder=\"Enter title\" value=\"{{$post->title}}\">\n\n        <input type=\"submit\" name=\"submit\">\n\n    </form>\n\n@endsection\n\n@yield('footer')\n```\n9. 編輯紀錄並重新導向\n    - 修改 PostsController 的 update function\n        `$post = Post::findOrFail($id);`\n        `$post->update($request->all());`\n        `return redirect('/posts');`\n    - 在 show.blade.php 新增超連結到編輯\n    ` <h1><a href=\"{{ \"{{route('posts.edit', $post->id)\" }}}}\">{{ \"{{$post->title\" }}}}</a></h1>`\n10. 刪除貼文\n    - 修改 PostsController 的 delete function\n    `$post = Post::whereId($id)->delete();`\n    `return redirect('/posts');`\n    - 新增 delete button edit.blade.php\n```\n<form method=\"post\" action=\"/posts/{{$post->id}}\">\n\n        {{csrf_field()}}\n\n        <input type=\"hidden\" name=\"_method\" value=\"DELETE\">\n\n        <input type=\"submit\" value=\"DELETE\">\n\n    </form>\n```\n### Forms - Package and Validation - [Forms & HTML 設定官方文件](https://laravelcollective.com/docs/5.2/html)\n### [Validation 設定官方文件](https://laravel.com/docs/5.2/validation)\n1. 安裝套件 & 測試\n    - 在 composer.json 的 require 新增套件\n    `\"laravelcollective/html\":\"^5.2.0\"`\n    - 更新套件\n    `composer update`\n    - 在 config/app.php 的 provider 新增\n    `Collective\\Html\\HtmlServiceProvider::class,`\n    - 在 config/app.php 的 aliases 新增\n    `'Form' => Collective\\Html\\FormFacade::class,`\n    `'Html' => Collective\\Html\\HtmlFacade::class,`\n    - 在 create.blade.php 將 `<form method=\"post\" action=\"/posts\">` 取代來測試套件\n    `{!! Form::open() !!}`\n2. 修改 form 套件的內容\n    - 修改 form package 的傳遞方式 \n    `{!! Form::open(['method'=>'POST', 'action'=>'PostsController@store']) !!}`\n    `{!! Form::close() !!}`\n    - 將表單改為 form package 的形式，並使用 Bootstrap 的 class\n```\n<div class=\"form-group\">\n\n            {!! Form::label('title', 'Title:') !!}\n            {!! Form::text('title', null, ['class'=>'form-control']) !!}\n\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n\n            {!! Form::submit('Create Post', ['class'=>'btn btn-primary']) !!}\n\n        </div>\n```\n3. Update & Delete\n    - 修改 edit.blade.php\n```\n{!! Form::model($post, ['method'=>'PATCH', 'action'=>['PostsController@update', $post->id]]) !!}\n\n        {{csrf_field()}}\n\n        {!! Form::label('title', 'Title:') !!}\n        {!! Form::text('title', null, ['class'=>'form-control']) !!}\n\n        {!! Form::submit('Update Post', ['class'=>'btn btn-info']) !!}\n\n    {!! Form::close() !!}\n\n    {!! Form::open(['method'=>'DELETE', 'action'=>['PostsController@destroy', $post->id]]) !!}\n\n        {{csrf_field()}}\n\n    {!! Form::submit('Delete Post', ['class'=>'btn btn-danger']) !!}\n\n    {!! Form::close() !!}\n```\n4. Validation\n    - 將 validate function 新增到 PostsController 的 store function\n```\n$this->validate($request, [\n\n            'title'=> 'required',\n            'content'=> 'required'\n\n        ]);\n```\n5. 顯示錯誤\n    - 修改 validation\n    `$this->validate($request, [`\n        `'title'=> 'required|max:4'`\n    `]);`\n    - 在 create.blade.php 新增 error display\n```\n@if(count($errors) > 0)\n\n    <div class=\"alert alert-danger\">\n\n        <ul>\n\n            @foreach($errors->all() as $error)\n\n                <li>{{$error}}</li>\n\n            @endforeach\n\n        </ul>\n\n    </div>\n\n@endif\n```\n6. advanced validation\n    - 新增一個 request\n    `php artisan make:request CreatePostRequest`\n    - 修改 PostsController 的 store function，並 import Request\n    `public function store(Requests\\CreatePostRequest $request)`\n    - 修改 CreatePostRequest.php 的 authorize 為 `true`\n    - 修改 CreatePostRequest.php 的 rules 為 required (validation的效果)\n    `'title' => 'required'`\n    - 將 validation 註解掉\n    `$this->validate($request, [`\n    `'title'=> 'required|max:4'`\n    `]);`\n7. PhpStorm snippet\n    - PhpStorm->Preferences->Editor->Live template\n\n","source":"_posts/Lavarel-快速學習自我挑戰-Day9.md","raw":"---\ntitle: Lavarel 快速學習自我挑戰 Day9\nthumbnail:\n  - /images/learning/laravel/laravelday9.png\ndate: 2017-04-30 23:21:35\ncategories: 學習歷程\ntags: Laravel\n---\n<img src=\"/images/learning/laravel/laravelday9.png\">\n\n***\n### Form and Validation\n1. 設定 Migration & Relations\n    - 在 create\\_posts\\_table.php 新增 user\\_id\n    `$table->integer('user_id')->unsigned();`\n    - 重新將資料匯入資料庫\n    `php artisan migrate:refresh`\n2. 設定 Views & Routes\n    - 設定 Controller Route\n    `Route::resource('/posts', 'PostsController');`\n    - 在 resources/views 底下新增 posts，新增 index、edit、create、show 的 blade.php View 模板\n3. 設定 create 的 markup\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <form method=\"post\" action=\"/posts\">\n\n        <input type=\"text\" name=\"title\" placeholder=\"Enter title\">\n\n        // 避免 TokenMismatchException Error\n        {{csrf_field()}}\n\n        <input type=\"submit\" name=\"submit\">\n\n    </form>\n\n@stop\n\n@yield('footer')\n```\n4. 設定 Controller & View\n    - 在 PostsController 的 create 新增 View\n    `public function create(){return view('posts.create');}`\n    - 在 PostsController 的 store 回傳資料\n    `public function store(Request $request){return $request->all();}`\n5. 將資料傳送到資料庫\n    - 修改 PostsController 的 store function\n```\n    public function store(Request $request)\n    {\n\n//        return $request->all();\n\n        // First method\n        \n        Post::create($request->all());\n        \n          // second method\n\n//        $input = $request->all();\n//\n//        $input['title'] = $request->title;\n//\n//        Post::create($request->all());\n\n          // third method\n\n//        $post = new Post;\n//\n//        $post->title = $request->title;\n//\n//        $post->save();\n\n    }\n```\n6. 讀取資料\n    - 在 PostsController 的 store 新增導向函式\n    `return redirect('/posts')`\n    - 在 PostsController 的 index 讀取所有的 post 並傳送給 index 的 View 去呈現\n    `$posts = Post::all();`\n    `return view('posts.index', compact('posts'));`\n    - 修改 index.blade.php\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <ul>\n        @foreach($posts as $post)\n            <li>{{$post->title}}</li>\n        @endforeach\n    </ul>\n\n@endsection\n\n@yield('footer')\n```\n7. 顯示單一貼文並修改\n    - 在 PostsController 的 show 讀取特定 id 的 post 並傳送給 show 的 View 去呈現\n    `$post = Post::findOrFail($id);`\n    `return view('posts.show', compact('post'));`\n    - 修改 show.blade.php\n    `<h1>{{ \"{{$post->title\" }}}}</h1>`\n    - 讓 index.blade.php 可以超連結\n    `<li><a href=\"{{ \"{{route('posts.show', $post->id)\" }}}}\"> {{ \"{{$post->title}\" }}}}</a></li>`\n8. edit 頁面製作\n    - 在 PostsController 的 edit 讀取特定 id 的 post 並傳送給 edit 的 View 使用\n    `$post = Post::findOrFail($id);`\n    `return view('posts.edit', compact('post'));`\n    - 修改 edit.blade.php\n```\n@extends('layouts.app')\n\n@section('content')\n\n    <h1>Edit Post</h1>\n\n    <form method=\"post\" action=\"/posts/{{$post->id}}}\">\n\n        //取得 Token\n        {{csrf_field()}}\n\n        <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n\n        <input type=\"text\" name=\"title\" placeholder=\"Enter title\" value=\"{{$post->title}}\">\n\n        <input type=\"submit\" name=\"submit\">\n\n    </form>\n\n@endsection\n\n@yield('footer')\n```\n9. 編輯紀錄並重新導向\n    - 修改 PostsController 的 update function\n        `$post = Post::findOrFail($id);`\n        `$post->update($request->all());`\n        `return redirect('/posts');`\n    - 在 show.blade.php 新增超連結到編輯\n    ` <h1><a href=\"{{ \"{{route('posts.edit', $post->id)\" }}}}\">{{ \"{{$post->title\" }}}}</a></h1>`\n10. 刪除貼文\n    - 修改 PostsController 的 delete function\n    `$post = Post::whereId($id)->delete();`\n    `return redirect('/posts');`\n    - 新增 delete button edit.blade.php\n```\n<form method=\"post\" action=\"/posts/{{$post->id}}\">\n\n        {{csrf_field()}}\n\n        <input type=\"hidden\" name=\"_method\" value=\"DELETE\">\n\n        <input type=\"submit\" value=\"DELETE\">\n\n    </form>\n```\n### Forms - Package and Validation - [Forms & HTML 設定官方文件](https://laravelcollective.com/docs/5.2/html)\n### [Validation 設定官方文件](https://laravel.com/docs/5.2/validation)\n1. 安裝套件 & 測試\n    - 在 composer.json 的 require 新增套件\n    `\"laravelcollective/html\":\"^5.2.0\"`\n    - 更新套件\n    `composer update`\n    - 在 config/app.php 的 provider 新增\n    `Collective\\Html\\HtmlServiceProvider::class,`\n    - 在 config/app.php 的 aliases 新增\n    `'Form' => Collective\\Html\\FormFacade::class,`\n    `'Html' => Collective\\Html\\HtmlFacade::class,`\n    - 在 create.blade.php 將 `<form method=\"post\" action=\"/posts\">` 取代來測試套件\n    `{!! Form::open() !!}`\n2. 修改 form 套件的內容\n    - 修改 form package 的傳遞方式 \n    `{!! Form::open(['method'=>'POST', 'action'=>'PostsController@store']) !!}`\n    `{!! Form::close() !!}`\n    - 將表單改為 form package 的形式，並使用 Bootstrap 的 class\n```\n<div class=\"form-group\">\n\n            {!! Form::label('title', 'Title:') !!}\n            {!! Form::text('title', null, ['class'=>'form-control']) !!}\n\n        </div>\n\n        {{csrf_field()}}\n\n        <div class=\"form-group\">\n\n            {!! Form::submit('Create Post', ['class'=>'btn btn-primary']) !!}\n\n        </div>\n```\n3. Update & Delete\n    - 修改 edit.blade.php\n```\n{!! Form::model($post, ['method'=>'PATCH', 'action'=>['PostsController@update', $post->id]]) !!}\n\n        {{csrf_field()}}\n\n        {!! Form::label('title', 'Title:') !!}\n        {!! Form::text('title', null, ['class'=>'form-control']) !!}\n\n        {!! Form::submit('Update Post', ['class'=>'btn btn-info']) !!}\n\n    {!! Form::close() !!}\n\n    {!! Form::open(['method'=>'DELETE', 'action'=>['PostsController@destroy', $post->id]]) !!}\n\n        {{csrf_field()}}\n\n    {!! Form::submit('Delete Post', ['class'=>'btn btn-danger']) !!}\n\n    {!! Form::close() !!}\n```\n4. Validation\n    - 將 validate function 新增到 PostsController 的 store function\n```\n$this->validate($request, [\n\n            'title'=> 'required',\n            'content'=> 'required'\n\n        ]);\n```\n5. 顯示錯誤\n    - 修改 validation\n    `$this->validate($request, [`\n        `'title'=> 'required|max:4'`\n    `]);`\n    - 在 create.blade.php 新增 error display\n```\n@if(count($errors) > 0)\n\n    <div class=\"alert alert-danger\">\n\n        <ul>\n\n            @foreach($errors->all() as $error)\n\n                <li>{{$error}}</li>\n\n            @endforeach\n\n        </ul>\n\n    </div>\n\n@endif\n```\n6. advanced validation\n    - 新增一個 request\n    `php artisan make:request CreatePostRequest`\n    - 修改 PostsController 的 store function，並 import Request\n    `public function store(Requests\\CreatePostRequest $request)`\n    - 修改 CreatePostRequest.php 的 authorize 為 `true`\n    - 修改 CreatePostRequest.php 的 rules 為 required (validation的效果)\n    `'title' => 'required'`\n    - 將 validation 註解掉\n    `$this->validate($request, [`\n    `'title'=> 'required|max:4'`\n    `]);`\n7. PhpStorm snippet\n    - PhpStorm->Preferences->Editor->Live template\n\n","slug":"Lavarel-快速學習自我挑戰-Day9","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx8002v7ifaikqkdh45","content":"<img src=\"/images/learning/laravel/laravelday9.png\">\n<hr>\n<h3>Form and Validation</h3>\n<ol>\n<li>設定 Migration &amp; Relations\n<ul>\n<li>在 create_posts_table.php 新增 user_id<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned();</code></li>\n<li>重新將資料匯入資料庫<br>\n<code>php artisan migrate:refresh</code></li>\n</ul>\n</li>\n<li>設定 Views &amp; Routes\n<ul>\n<li>設定 Controller Route<br>\n<code>Route::resource('/posts', 'PostsController');</code></li>\n<li>在 resources/views 底下新增 posts，新增 index、edit、create、show 的 blade.php View 模板</li>\n</ul>\n</li>\n<li>設定 create 的 markup</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;form method=&quot;post&quot; action=&quot;/posts&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;Enter title&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        // 避免 TokenMismatchException Error</div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div><div class=\"line\"></div><div class=\"line\">@yield(&apos;footer&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>設定 Controller &amp; View\n<ul>\n<li>在 PostsController 的 create 新增 View<br>\n<code>public function create(){return view('posts.create');}</code></li>\n<li>在 PostsController 的 store 回傳資料<br>\n<code>public function store(Request $request){return $request-&gt;all();}</code></li>\n</ul>\n</li>\n<li>將資料傳送到資料庫\n<ul>\n<li>修改 PostsController 的 store function</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">    public function store(Request $request)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">//        return $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        // First method</div><div class=\"line\">        </div><div class=\"line\">        Post::create($request-&gt;all());</div><div class=\"line\">        </div><div class=\"line\">          // second method</div><div class=\"line\"></div><div class=\"line\">//        $input = $request-&gt;all();</div><div class=\"line\">//</div><div class=\"line\">//        $input[&apos;title&apos;] = $request-&gt;title;</div><div class=\"line\">//</div><div class=\"line\">//        Post::create($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">          // third method</div><div class=\"line\"></div><div class=\"line\">//        $post = new Post;</div><div class=\"line\">//</div><div class=\"line\">//        $post-&gt;title = $request-&gt;title;</div><div class=\"line\">//</div><div class=\"line\">//        $post-&gt;save();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>讀取資料\n<ul>\n<li>在 PostsController 的 store 新增導向函式<br>\n<code>return redirect('/posts')</code></li>\n<li>在 PostsController 的 index 讀取所有的 post 並傳送給 index 的 View 去呈現<br>\n<code>$posts = Post::all();</code><br>\n<code>return view('posts.index', compact('posts'));</code></li>\n<li>修改 index.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        @foreach($posts as $post)</div><div class=\"line\">            &lt;li&gt;&#123;&#123;$post-&gt;title&#125;&#125;&lt;/li&gt;</div><div class=\"line\">        @endforeach</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">@endsection</div><div class=\"line\"></div><div class=\"line\">@yield(&apos;footer&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>顯示單一貼文並修改\n<ul>\n<li>在 PostsController 的 show 讀取特定 id 的 post 並傳送給 show 的 View 去呈現<br>\n<code>$post = Post::findOrFail($id);</code><br>\n<code>return view('posts.show', compact('post'));</code></li>\n<li>修改 show.blade.php<br>\n<code>&lt;h1&gt;{{$post->title}}&lt;/h1&gt;</code></li>\n<li>讓 index.blade.php 可以超連結<br>\n<code>&lt;li&gt;&lt;a href=&quot;{{route('posts.show', $post->id)}}&quot;&gt; {{$post->title}}}&lt;/a&gt;&lt;/li&gt;</code></li>\n</ul>\n</li>\n<li>edit 頁面製作\n<ul>\n<li>在 PostsController 的 edit 讀取特定 id 的 post 並傳送給 edit 的 View 使用<br>\n<code>$post = Post::findOrFail($id);</code><br>\n<code>return view('posts.edit', compact('post'));</code></li>\n<li>修改 edit.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Edit Post&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;form method=&quot;post&quot; action=&quot;/posts/&#123;&#123;$post-&gt;id&#125;&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        //取得 Token</div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;Enter title&quot; value=&quot;&#123;&#123;$post-&gt;title&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">@endsection</div><div class=\"line\"></div><div class=\"line\">@yield(&apos;footer&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>編輯紀錄並重新導向\n<ul>\n<li>修改 PostsController 的 update function<br>\n<code>$post = Post::findOrFail($id);</code><br>\n<code>$post-&gt;update($request-&gt;all());</code><br>\n<code>return redirect('/posts');</code></li>\n<li>在 show.blade.php 新增超連結到編輯<br>\n<code>&lt;h1&gt;&lt;a href=&quot;{{route('posts.edit', $post->id)}}&quot;&gt;{{$post->title}}&lt;/a&gt;&lt;/h1&gt;</code></li>\n</ul>\n</li>\n<li>刪除貼文\n<ul>\n<li>修改 PostsController 的 delete function<br>\n<code>$post = Post::whereId($id)-&gt;delete();</code><br>\n<code>return redirect('/posts');</code></li>\n<li>新增 delete button edit.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form method=&quot;post&quot; action=&quot;/posts/&#123;&#123;$post-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;submit&quot; value=&quot;DELETE&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div></pre></td></tr></table></figure>\n<h3>Forms - Package and Validation - <a href=\"https://laravelcollective.com/docs/5.2/html\" target=\"_blank\" rel=\"external\">Forms &amp; HTML 設定官方文件</a></h3>\n<h3><a href=\"https://laravel.com/docs/5.2/validation\" target=\"_blank\" rel=\"external\">Validation 設定官方文件</a></h3>\n<ol>\n<li>安裝套件 &amp; 測試\n<ul>\n<li>在 composer.json 的 require 新增套件<br>\n<code>&quot;laravelcollective/html&quot;:&quot;^5.2.0&quot;</code></li>\n<li>更新套件<br>\n<code>composer update</code></li>\n<li>在 config/app.php 的 provider 新增<br>\n<code>Collective\\Html\\HtmlServiceProvider::class,</code></li>\n<li>在 config/app.php 的 aliases 新增<br>\n<code>'Form' =&gt; Collective\\Html\\FormFacade::class,</code><br>\n<code>'Html' =&gt; Collective\\Html\\HtmlFacade::class,</code></li>\n<li>在 create.blade.php 將 <code>&lt;form method=&quot;post&quot; action=&quot;/posts&quot;&gt;</code> 取代來測試套件<br>\n<code>{!! Form::open() !!}</code></li>\n</ul>\n</li>\n<li>修改 form 套件的內容\n<ul>\n<li>修改 form package 的傳遞方式<br>\n<code>{!! Form::open(['method'=&gt;'POST', 'action'=&gt;'PostsController@store']) !!}</code><br>\n<code>{!! Form::close() !!}</code></li>\n<li>將表單改為 form package 的形式，並使用 Bootstrap 的 class</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Update &amp; Delete\n<ul>\n<li>修改 edit.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::model($post, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;PostsController@update&apos;, $post-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::submit(&apos;Update Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-info&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;PostsController@destroy&apos;, $post-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Validation\n<ul>\n<li>將 validate function 新增到 PostsController 的 store function</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this-&gt;validate($request, [</div><div class=\"line\"></div><div class=\"line\">            &apos;title&apos;=&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;content&apos;=&gt; &apos;required&apos;</div><div class=\"line\"></div><div class=\"line\">        ]);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>顯示錯誤\n<ul>\n<li>修改 validation<br>\n<code>$this-&gt;validate($request, [</code><br>\n<code>'title'=&gt; 'required|max:4'</code><br>\n<code>]);</code></li>\n<li>在 create.blade.php 新增 error display</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($errors) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">            @foreach($errors-&gt;all() as $error)</div><div class=\"line\"></div><div class=\"line\">                &lt;li&gt;&#123;&#123;$error&#125;&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">            @endforeach</div><div class=\"line\"></div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>advanced validation\n<ul>\n<li>新增一個 request<br>\n<code>php artisan make:request CreatePostRequest</code></li>\n<li>修改 PostsController 的 store function，並 import Request<br>\n<code>public function store(Requests\\CreatePostRequest $request)</code></li>\n<li>修改 CreatePostRequest.php 的 authorize 為 <code>true</code></li>\n<li>修改 CreatePostRequest.php 的 rules 為 required (validation的效果)<br>\n<code>'title' =&gt; 'required'</code></li>\n<li>將 validation 註解掉<br>\n<code>$this-&gt;validate($request, [</code><br>\n<code>'title'=&gt; 'required|max:4'</code><br>\n<code>]);</code></li>\n</ul>\n</li>\n<li>PhpStorm snippet\n<ul>\n<li>PhpStorm-&gt;Preferences-&gt;Editor-&gt;Live template</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/laravel/laravelday9.png\">\n<hr>\n<h3>Form and Validation</h3>\n<ol>\n<li>設定 Migration &amp; Relations\n<ul>\n<li>在 create_posts_table.php 新增 user_id<br>\n<code>$table-&gt;integer('user_id')-&gt;unsigned();</code></li>\n<li>重新將資料匯入資料庫<br>\n<code>php artisan migrate:refresh</code></li>\n</ul>\n</li>\n<li>設定 Views &amp; Routes\n<ul>\n<li>設定 Controller Route<br>\n<code>Route::resource('/posts', 'PostsController');</code></li>\n<li>在 resources/views 底下新增 posts，新增 index、edit、create、show 的 blade.php View 模板</li>\n</ul>\n</li>\n<li>設定 create 的 markup</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;form method=&quot;post&quot; action=&quot;/posts&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;Enter title&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        // 避免 TokenMismatchException Error</div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">@stop</div><div class=\"line\"></div><div class=\"line\">@yield(&apos;footer&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>設定 Controller &amp; View\n<ul>\n<li>在 PostsController 的 create 新增 View<br>\n<code>public function create(){return view('posts.create');}</code></li>\n<li>在 PostsController 的 store 回傳資料<br>\n<code>public function store(Request $request){return $request-&gt;all();}</code></li>\n</ul>\n</li>\n<li>將資料傳送到資料庫\n<ul>\n<li>修改 PostsController 的 store function</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">    public function store(Request $request)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">//        return $request-&gt;all();</div><div class=\"line\"></div><div class=\"line\">        // First method</div><div class=\"line\">        </div><div class=\"line\">        Post::create($request-&gt;all());</div><div class=\"line\">        </div><div class=\"line\">          // second method</div><div class=\"line\"></div><div class=\"line\">//        $input = $request-&gt;all();</div><div class=\"line\">//</div><div class=\"line\">//        $input[&apos;title&apos;] = $request-&gt;title;</div><div class=\"line\">//</div><div class=\"line\">//        Post::create($request-&gt;all());</div><div class=\"line\"></div><div class=\"line\">          // third method</div><div class=\"line\"></div><div class=\"line\">//        $post = new Post;</div><div class=\"line\">//</div><div class=\"line\">//        $post-&gt;title = $request-&gt;title;</div><div class=\"line\">//</div><div class=\"line\">//        $post-&gt;save();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>讀取資料\n<ul>\n<li>在 PostsController 的 store 新增導向函式<br>\n<code>return redirect('/posts')</code></li>\n<li>在 PostsController 的 index 讀取所有的 post 並傳送給 index 的 View 去呈現<br>\n<code>$posts = Post::all();</code><br>\n<code>return view('posts.index', compact('posts'));</code></li>\n<li>修改 index.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        @foreach($posts as $post)</div><div class=\"line\">            &lt;li&gt;&#123;&#123;$post-&gt;title&#125;&#125;&lt;/li&gt;</div><div class=\"line\">        @endforeach</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">@endsection</div><div class=\"line\"></div><div class=\"line\">@yield(&apos;footer&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>顯示單一貼文並修改\n<ul>\n<li>在 PostsController 的 show 讀取特定 id 的 post 並傳送給 show 的 View 去呈現<br>\n<code>$post = Post::findOrFail($id);</code><br>\n<code>return view('posts.show', compact('post'));</code></li>\n<li>修改 show.blade.php<br>\n<code>&lt;h1&gt;{{$post->title}}&lt;/h1&gt;</code></li>\n<li>讓 index.blade.php 可以超連結<br>\n<code>&lt;li&gt;&lt;a href=&quot;{{route('posts.show', $post->id)}}&quot;&gt; {{$post->title}}}&lt;/a&gt;&lt;/li&gt;</code></li>\n</ul>\n</li>\n<li>edit 頁面製作\n<ul>\n<li>在 PostsController 的 edit 讀取特定 id 的 post 並傳送給 edit 的 View 使用<br>\n<code>$post = Post::findOrFail($id);</code><br>\n<code>return view('posts.edit', compact('post'));</code></li>\n<li>修改 edit.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@extends(&apos;layouts.app&apos;)</div><div class=\"line\"></div><div class=\"line\">@section(&apos;content&apos;)</div><div class=\"line\"></div><div class=\"line\">    &lt;h1&gt;Edit Post&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;form method=&quot;post&quot; action=&quot;/posts/&#123;&#123;$post-&gt;id&#125;&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        //取得 Token</div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;Enter title&quot; value=&quot;&#123;&#123;$post-&gt;title&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">@endsection</div><div class=\"line\"></div><div class=\"line\">@yield(&apos;footer&apos;)</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>編輯紀錄並重新導向\n<ul>\n<li>修改 PostsController 的 update function<br>\n<code>$post = Post::findOrFail($id);</code><br>\n<code>$post-&gt;update($request-&gt;all());</code><br>\n<code>return redirect('/posts');</code></li>\n<li>在 show.blade.php 新增超連結到編輯<br>\n<code>&lt;h1&gt;&lt;a href=&quot;{{route('posts.edit', $post->id)}}&quot;&gt;{{$post->title}}&lt;/a&gt;&lt;/h1&gt;</code></li>\n</ul>\n</li>\n<li>刪除貼文\n<ul>\n<li>修改 PostsController 的 delete function<br>\n<code>$post = Post::whereId($id)-&gt;delete();</code><br>\n<code>return redirect('/posts');</code></li>\n<li>新增 delete button edit.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form method=&quot;post&quot; action=&quot;/posts/&#123;&#123;$post-&gt;id&#125;&#125;&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;input type=&quot;submit&quot; value=&quot;DELETE&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/form&gt;</div></pre></td></tr></table></figure>\n<h3>Forms - Package and Validation - <a href=\"https://laravelcollective.com/docs/5.2/html\" target=\"_blank\" rel=\"external\">Forms &amp; HTML 設定官方文件</a></h3>\n<h3><a href=\"https://laravel.com/docs/5.2/validation\" target=\"_blank\" rel=\"external\">Validation 設定官方文件</a></h3>\n<ol>\n<li>安裝套件 &amp; 測試\n<ul>\n<li>在 composer.json 的 require 新增套件<br>\n<code>&quot;laravelcollective/html&quot;:&quot;^5.2.0&quot;</code></li>\n<li>更新套件<br>\n<code>composer update</code></li>\n<li>在 config/app.php 的 provider 新增<br>\n<code>Collective\\Html\\HtmlServiceProvider::class,</code></li>\n<li>在 config/app.php 的 aliases 新增<br>\n<code>'Form' =&gt; Collective\\Html\\FormFacade::class,</code><br>\n<code>'Html' =&gt; Collective\\Html\\HtmlFacade::class,</code></li>\n<li>在 create.blade.php 將 <code>&lt;form method=&quot;post&quot; action=&quot;/posts&quot;&gt;</code> 取代來測試套件<br>\n<code>{!! Form::open() !!}</code></li>\n</ul>\n</li>\n<li>修改 form 套件的內容\n<ul>\n<li>修改 form package 的傳遞方式<br>\n<code>{!! Form::open(['method'=&gt;'POST', 'action'=&gt;'PostsController@store']) !!}</code><br>\n<code>{!! Form::close() !!}</code></li>\n<li>將表單改為 form package 的形式，並使用 Bootstrap 的 class</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">            &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Update &amp; Delete\n<ul>\n<li>修改 edit.blade.php</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;!! Form::model($post, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;PostsController@update&apos;, $post-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125;</div><div class=\"line\">        &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;!! Form::submit(&apos;Update Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-info&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;PostsController@destroy&apos;, $post-&gt;id]]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">        &#123;&#123;csrf_field()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Validation\n<ul>\n<li>將 validate function 新增到 PostsController 的 store function</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this-&gt;validate($request, [</div><div class=\"line\"></div><div class=\"line\">            &apos;title&apos;=&gt; &apos;required&apos;,</div><div class=\"line\">            &apos;content&apos;=&gt; &apos;required&apos;</div><div class=\"line\"></div><div class=\"line\">        ]);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>顯示錯誤\n<ul>\n<li>修改 validation<br>\n<code>$this-&gt;validate($request, [</code><br>\n<code>'title'=&gt; 'required|max:4'</code><br>\n<code>]);</code></li>\n<li>在 create.blade.php 新增 error display</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@if(count($errors) &gt; 0)</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">            @foreach($errors-&gt;all() as $error)</div><div class=\"line\"></div><div class=\"line\">                &lt;li&gt;&#123;&#123;$error&#125;&#125;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">            @endforeach</div><div class=\"line\"></div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">@endif</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>advanced validation\n<ul>\n<li>新增一個 request<br>\n<code>php artisan make:request CreatePostRequest</code></li>\n<li>修改 PostsController 的 store function，並 import Request<br>\n<code>public function store(Requests\\CreatePostRequest $request)</code></li>\n<li>修改 CreatePostRequest.php 的 authorize 為 <code>true</code></li>\n<li>修改 CreatePostRequest.php 的 rules 為 required (validation的效果)<br>\n<code>'title' =&gt; 'required'</code></li>\n<li>將 validation 註解掉<br>\n<code>$this-&gt;validate($request, [</code><br>\n<code>'title'=&gt; 'required|max:4'</code><br>\n<code>]);</code></li>\n</ul>\n</li>\n<li>PhpStorm snippet\n<ul>\n<li>PhpStorm-&gt;Preferences-&gt;Editor-&gt;Live template</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Mac 開發環境建置","thumbnail":["/images/technique/MacEnvironment.jpg"],"date":"2017-09-13T13:07:44.000Z","_content":"<img src=\"/images/technique/MacEnvironment.jpg\">\n\n***\n### 內建工具\n#### 1. Xcode\n1. 到 App Store 下載\n2. 記得要打開 Xcode，並且同意服務條款\n\n### 生產力工具\n#### 1. Alfred + Powerbank (付費)\n[直接從官方網站下載應用](https://www.alfredapp.com/)\n#### 2. iTerm2\n[直接從官方網站下載應用](https://www.iterm2.com/)\n##### 設定：\n1. 把字體改大\n    - iTerm2 => Preferences => Profiles => Text => Font => 20px\n2. 讓 iTerm2 可以無限的往回滾動\n    - iTerm2 => Preferences => Profiles => Terminal => Scrollback Buffer => Unlimited scrollback\n3. 修改主題 - [下載 Dracula 主題](https://draculatheme.com/iterm/)\n    - iTerm2 => Preferences => Profiles => Color => 找到右下角的 Color Presets => Import => 選擇 Dracula\n#### 3. Wunderlist\n[直接從官方網站下載應用](https://www.wunderlist.com/)\n#### 4. Dropbox\n[直接從官方網站下載應用](https://www.dropbox.com/downloading)\n#### 5. MoneyPro (付費軟體)\n[直接從官方網站下載應用](http://ibearmoney.com/tw/pro/overview-mac.html)\n#### 6. Filezilla\n[直接從官方網站下載應用](https://filezilla-project.org/download.php?type=client)\n#### 7. Zoom\n[直接從官方網站下載應用](https://zoom.us/download)\n#### 8. VirtualBox\n[直接從官方網站下載應用](https://www.virtualbox.org/wiki/Downloads)\n#### 9. WebStorm\n[直接從官方網站下載應用](https://www.jetbrains.com/webstorm/download/#section=mac)\n#### 10. PhpStorm\n[直接從官方網站下載應用](https://www.jetbrains.com/phpstorm/download/#section=mac)\n#### 11. Visual Studio Code\n[直接從官方網站下載應用](https://code.visualstudio.com/)\n##### 設定：\n1. 常用套件\n    - Auto Close Tag\n    - Beautify\n    - ESLint\n    - Git History\n    - HTML Snippets\n    - Material Icon Theme\n    - Material Theme Kit\n2. 打開自動存檔 File => Auto Save\n3. 字體放大 Code => Preferences => Setting => \"editor.fontSize\": 16\n4. 修改佈景主題 Command+Shift+P => theme => Solarized Light\n#### 12. Enpass (密碼管理工具)\n[直接從官方網站下載應用](https://www.enpass.io/downloads/)\n#### 13. Anki\n[直接從官方網站下載應用](https://apps.ankiweb.net/)\n#### 14. Slack\n[直接從官方網站下載應用](https://slack.com/downloads/osx)\n#### 15. Karabiner (修改鍵盤工具)\n[直接從官方網站下載應用](https://pqrs.org/osx/karabiner/)\n\n### 套件 & 指令\n#### 1. zsh\n1. 安裝指令\n`sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n`\n2. 修改佈景主題\n`vim ~/.zshrc`\n修改 ZSH_THEME=\"cloud\"\n[相關主題參考](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n#### 2. Homebrew\n1. 安裝指令\n`/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n`\n#### 3. nvm\n1. 安裝指令\n[參考官方網站](https://github.com/creationix/nvm)\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash\n`\n2. 列出所有版本\n`nvm ls-remote`\n3. 安裝 TLS 版本\n`nvm install 6.11.3`\n#### 4. Git\n1. 安裝指令\n`brew update && brew install git`\n2. 設定全域 username 和 email\n`git config --global user.name \"tingsyuanwang\"`\n`git config --global user.email \"dtvgood202@gmail.com\"`\n#### 5. Hexo (部落格套件)\n1. 安裝指令\n`npm install -g hexo-cli`\n#### 6. Composer\n[進去 Composer 網站按照指令安裝](https://getcomposer.org/download/)\n#### 7. Docker\n[直接從官方網站下載應用](https://store.docker.com/editions/community/docker-ce-desktop-mac)\n#### 8. Kubectl (Kubernetes 指令)\n1. 安裝指令\n```\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl\n```\n\n### React Native 環境\n1. 安裝 node watchman\n`brew install node`\n`brew install watchman`\n2. 安裝 React Native CLI\n`npm install -g react-native-cli`\n3. Java Development Kit\n[從官方網站下載](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n4. Android Studio\n[從官方網站下載](https://developer.android.com/studio/index.html)\n5. 加到 .zshrc\n```\n# JDK configuration\nexport JAVA_HOME=`/usr/libexec/java_home`\n\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\n```\n6. React Native Debugger\n`brew update && brew cask install react-native-debugger`","source":"_posts/Mac-開發環境建置.md","raw":"---\ntitle: Mac 開發環境建置\nthumbnail:\n  - /images/technique/MacEnvironment.jpg\ndate: 2017-09-13 21:07:44\ncategories: 技術分享\ntags: Mac\n---\n<img src=\"/images/technique/MacEnvironment.jpg\">\n\n***\n### 內建工具\n#### 1. Xcode\n1. 到 App Store 下載\n2. 記得要打開 Xcode，並且同意服務條款\n\n### 生產力工具\n#### 1. Alfred + Powerbank (付費)\n[直接從官方網站下載應用](https://www.alfredapp.com/)\n#### 2. iTerm2\n[直接從官方網站下載應用](https://www.iterm2.com/)\n##### 設定：\n1. 把字體改大\n    - iTerm2 => Preferences => Profiles => Text => Font => 20px\n2. 讓 iTerm2 可以無限的往回滾動\n    - iTerm2 => Preferences => Profiles => Terminal => Scrollback Buffer => Unlimited scrollback\n3. 修改主題 - [下載 Dracula 主題](https://draculatheme.com/iterm/)\n    - iTerm2 => Preferences => Profiles => Color => 找到右下角的 Color Presets => Import => 選擇 Dracula\n#### 3. Wunderlist\n[直接從官方網站下載應用](https://www.wunderlist.com/)\n#### 4. Dropbox\n[直接從官方網站下載應用](https://www.dropbox.com/downloading)\n#### 5. MoneyPro (付費軟體)\n[直接從官方網站下載應用](http://ibearmoney.com/tw/pro/overview-mac.html)\n#### 6. Filezilla\n[直接從官方網站下載應用](https://filezilla-project.org/download.php?type=client)\n#### 7. Zoom\n[直接從官方網站下載應用](https://zoom.us/download)\n#### 8. VirtualBox\n[直接從官方網站下載應用](https://www.virtualbox.org/wiki/Downloads)\n#### 9. WebStorm\n[直接從官方網站下載應用](https://www.jetbrains.com/webstorm/download/#section=mac)\n#### 10. PhpStorm\n[直接從官方網站下載應用](https://www.jetbrains.com/phpstorm/download/#section=mac)\n#### 11. Visual Studio Code\n[直接從官方網站下載應用](https://code.visualstudio.com/)\n##### 設定：\n1. 常用套件\n    - Auto Close Tag\n    - Beautify\n    - ESLint\n    - Git History\n    - HTML Snippets\n    - Material Icon Theme\n    - Material Theme Kit\n2. 打開自動存檔 File => Auto Save\n3. 字體放大 Code => Preferences => Setting => \"editor.fontSize\": 16\n4. 修改佈景主題 Command+Shift+P => theme => Solarized Light\n#### 12. Enpass (密碼管理工具)\n[直接從官方網站下載應用](https://www.enpass.io/downloads/)\n#### 13. Anki\n[直接從官方網站下載應用](https://apps.ankiweb.net/)\n#### 14. Slack\n[直接從官方網站下載應用](https://slack.com/downloads/osx)\n#### 15. Karabiner (修改鍵盤工具)\n[直接從官方網站下載應用](https://pqrs.org/osx/karabiner/)\n\n### 套件 & 指令\n#### 1. zsh\n1. 安裝指令\n`sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n`\n2. 修改佈景主題\n`vim ~/.zshrc`\n修改 ZSH_THEME=\"cloud\"\n[相關主題參考](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n#### 2. Homebrew\n1. 安裝指令\n`/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n`\n#### 3. nvm\n1. 安裝指令\n[參考官方網站](https://github.com/creationix/nvm)\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash\n`\n2. 列出所有版本\n`nvm ls-remote`\n3. 安裝 TLS 版本\n`nvm install 6.11.3`\n#### 4. Git\n1. 安裝指令\n`brew update && brew install git`\n2. 設定全域 username 和 email\n`git config --global user.name \"tingsyuanwang\"`\n`git config --global user.email \"dtvgood202@gmail.com\"`\n#### 5. Hexo (部落格套件)\n1. 安裝指令\n`npm install -g hexo-cli`\n#### 6. Composer\n[進去 Composer 網站按照指令安裝](https://getcomposer.org/download/)\n#### 7. Docker\n[直接從官方網站下載應用](https://store.docker.com/editions/community/docker-ce-desktop-mac)\n#### 8. Kubectl (Kubernetes 指令)\n1. 安裝指令\n```\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl\n```\n\n### React Native 環境\n1. 安裝 node watchman\n`brew install node`\n`brew install watchman`\n2. 安裝 React Native CLI\n`npm install -g react-native-cli`\n3. Java Development Kit\n[從官方網站下載](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n4. Android Studio\n[從官方網站下載](https://developer.android.com/studio/index.html)\n5. 加到 .zshrc\n```\n# JDK configuration\nexport JAVA_HOME=`/usr/libexec/java_home`\n\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\n```\n6. React Native Debugger\n`brew update && brew cask install react-native-debugger`","slug":"Mac-開發環境建置","published":1,"updated":"2017-11-04T12:19:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwx9002y7ifahkub9wry","content":"<img src=\"/images/technique/MacEnvironment.jpg\">\n<hr>\n<h3>內建工具</h3>\n<h4>1. Xcode</h4>\n<ol>\n<li>到 App Store 下載</li>\n<li>記得要打開 Xcode，並且同意服務條款</li>\n</ol>\n<h3>生產力工具</h3>\n<h4>1. Alfred + Powerbank (付費)</h4>\n<p><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>2. iTerm2</h4>\n<p><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h5>設定：</h5>\n<ol>\n<li>把字體改大\n<ul>\n<li>iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Text =&gt; Font =&gt; 20px</li>\n</ul>\n</li>\n<li>讓 iTerm2 可以無限的往回滾動\n<ul>\n<li>iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Terminal =&gt; Scrollback Buffer =&gt; Unlimited scrollback</li>\n</ul>\n</li>\n<li>修改主題 - <a href=\"https://draculatheme.com/iterm/\" target=\"_blank\" rel=\"external\">下載 Dracula 主題</a>\n<ul>\n<li>iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Color =&gt; 找到右下角的 Color Presets =&gt; Import =&gt; 選擇 Dracula</li>\n</ul>\n</li>\n</ol>\n<h4>3. Wunderlist</h4>\n<p><a href=\"https://www.wunderlist.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>4. Dropbox</h4>\n<p><a href=\"https://www.dropbox.com/downloading\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>5. MoneyPro (付費軟體)</h4>\n<p><a href=\"http://ibearmoney.com/tw/pro/overview-mac.html\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>6. Filezilla</h4>\n<p><a href=\"https://filezilla-project.org/download.php?type=client\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>7. Zoom</h4>\n<p><a href=\"https://zoom.us/download\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>8. VirtualBox</h4>\n<p><a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>9. WebStorm</h4>\n<p><a href=\"https://www.jetbrains.com/webstorm/download/#section=mac\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>10. PhpStorm</h4>\n<p><a href=\"https://www.jetbrains.com/phpstorm/download/#section=mac\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>11. Visual Studio Code</h4>\n<p><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h5>設定：</h5>\n<ol>\n<li>常用套件\n<ul>\n<li>Auto Close Tag</li>\n<li>Beautify</li>\n<li>ESLint</li>\n<li>Git History</li>\n<li>HTML Snippets</li>\n<li>Material Icon Theme</li>\n<li>Material Theme Kit</li>\n</ul>\n</li>\n<li>打開自動存檔 File =&gt; Auto Save</li>\n<li>字體放大 Code =&gt; Preferences =&gt; Setting =&gt; “editor.fontSize”: 16</li>\n<li>修改佈景主題 Command+Shift+P =&gt; theme =&gt; Solarized Light</li>\n</ol>\n<h4>12. Enpass (密碼管理工具)</h4>\n<p><a href=\"https://www.enpass.io/downloads/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>13. Anki</h4>\n<p><a href=\"https://apps.ankiweb.net/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>14. Slack</h4>\n<p><a href=\"https://slack.com/downloads/osx\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>15. Karabiner (修改鍵盤工具)</h4>\n<p><a href=\"https://pqrs.org/osx/karabiner/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h3>套件 &amp; 指令</h3>\n<h4>1. zsh</h4>\n<ol>\n<li>安裝指令<br>\n<code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li>\n<li>修改佈景主題<br>\n<code>vim ~/.zshrc</code><br>\n修改 ZSH_THEME=&quot;cloud&quot;<br>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">相關主題參考</a></li>\n</ol>\n<h4>2. Homebrew</h4>\n<ol>\n<li>安裝指令<br>\n<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>\n</ol>\n<h4>3. nvm</h4>\n<ol>\n<li>安裝指令<br>\n<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">參考官方網站</a><br>\n<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash</code></li>\n<li>列出所有版本<br>\n<code>nvm ls-remote</code></li>\n<li>安裝 TLS 版本<br>\n<code>nvm install 6.11.3</code></li>\n</ol>\n<h4>4. Git</h4>\n<ol>\n<li>安裝指令<br>\n<code>brew update &amp;&amp; brew install git</code></li>\n<li>設定全域 username 和 email<br>\n<code>git config --global user.name &quot;tingsyuanwang&quot;</code><br>\n<code>git config --global user.email &quot;dtvgood202@gmail.com&quot;</code></li>\n</ol>\n<h4>5. Hexo (部落格套件)</h4>\n<ol>\n<li>安裝指令<br>\n<code>npm install -g hexo-cli</code></li>\n</ol>\n<h4>6. Composer</h4>\n<p><a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"external\">進去 Composer 網站按照指令安裝</a></p>\n<h4>7. Docker</h4>\n<p><a href=\"https://store.docker.com/editions/community/docker-ce-desktop-mac\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>8. Kubectl (Kubernetes 指令)</h4>\n<ol>\n<li>安裝指令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl</div></pre></td></tr></table></figure>\n<h3>React Native 環境</h3>\n<ol>\n<li>安裝 node watchman<br>\n<code>brew install node</code><br>\n<code>brew install watchman</code></li>\n<li>安裝 React Native CLI<br>\n<code>npm install -g react-native-cli</code></li>\n<li>Java Development Kit<br>\n<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">從官方網站下載</a></li>\n<li>Android Studio<br>\n<a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">從官方網站下載</a></li>\n<li>加到 .zshrc</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># JDK configuration</div><div class=\"line\">export JAVA_HOME=`/usr/libexec/java_home`</div><div class=\"line\"></div><div class=\"line\">export ANDROID_HOME=$HOME/Library/Android/sdk</div><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/tools</div><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/platform-tools</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>React Native Debugger<br>\n<code>brew update &amp;&amp; brew cask install react-native-debugger</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/technique/MacEnvironment.jpg\">\n<hr>\n<h3>內建工具</h3>\n<h4>1. Xcode</h4>\n<ol>\n<li>到 App Store 下載</li>\n<li>記得要打開 Xcode，並且同意服務條款</li>\n</ol>\n<h3>生產力工具</h3>\n<h4>1. Alfred + Powerbank (付費)</h4>\n<p><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>2. iTerm2</h4>\n<p><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h5>設定：</h5>\n<ol>\n<li>把字體改大\n<ul>\n<li>iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Text =&gt; Font =&gt; 20px</li>\n</ul>\n</li>\n<li>讓 iTerm2 可以無限的往回滾動\n<ul>\n<li>iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Terminal =&gt; Scrollback Buffer =&gt; Unlimited scrollback</li>\n</ul>\n</li>\n<li>修改主題 - <a href=\"https://draculatheme.com/iterm/\" target=\"_blank\" rel=\"external\">下載 Dracula 主題</a>\n<ul>\n<li>iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Color =&gt; 找到右下角的 Color Presets =&gt; Import =&gt; 選擇 Dracula</li>\n</ul>\n</li>\n</ol>\n<h4>3. Wunderlist</h4>\n<p><a href=\"https://www.wunderlist.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>4. Dropbox</h4>\n<p><a href=\"https://www.dropbox.com/downloading\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>5. MoneyPro (付費軟體)</h4>\n<p><a href=\"http://ibearmoney.com/tw/pro/overview-mac.html\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>6. Filezilla</h4>\n<p><a href=\"https://filezilla-project.org/download.php?type=client\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>7. Zoom</h4>\n<p><a href=\"https://zoom.us/download\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>8. VirtualBox</h4>\n<p><a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>9. WebStorm</h4>\n<p><a href=\"https://www.jetbrains.com/webstorm/download/#section=mac\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>10. PhpStorm</h4>\n<p><a href=\"https://www.jetbrains.com/phpstorm/download/#section=mac\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>11. Visual Studio Code</h4>\n<p><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h5>設定：</h5>\n<ol>\n<li>常用套件\n<ul>\n<li>Auto Close Tag</li>\n<li>Beautify</li>\n<li>ESLint</li>\n<li>Git History</li>\n<li>HTML Snippets</li>\n<li>Material Icon Theme</li>\n<li>Material Theme Kit</li>\n</ul>\n</li>\n<li>打開自動存檔 File =&gt; Auto Save</li>\n<li>字體放大 Code =&gt; Preferences =&gt; Setting =&gt; “editor.fontSize”: 16</li>\n<li>修改佈景主題 Command+Shift+P =&gt; theme =&gt; Solarized Light</li>\n</ol>\n<h4>12. Enpass (密碼管理工具)</h4>\n<p><a href=\"https://www.enpass.io/downloads/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>13. Anki</h4>\n<p><a href=\"https://apps.ankiweb.net/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>14. Slack</h4>\n<p><a href=\"https://slack.com/downloads/osx\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>15. Karabiner (修改鍵盤工具)</h4>\n<p><a href=\"https://pqrs.org/osx/karabiner/\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h3>套件 &amp; 指令</h3>\n<h4>1. zsh</h4>\n<ol>\n<li>安裝指令<br>\n<code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li>\n<li>修改佈景主題<br>\n<code>vim ~/.zshrc</code><br>\n修改 ZSH_THEME=&quot;cloud&quot;<br>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">相關主題參考</a></li>\n</ol>\n<h4>2. Homebrew</h4>\n<ol>\n<li>安裝指令<br>\n<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>\n</ol>\n<h4>3. nvm</h4>\n<ol>\n<li>安裝指令<br>\n<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">參考官方網站</a><br>\n<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash</code></li>\n<li>列出所有版本<br>\n<code>nvm ls-remote</code></li>\n<li>安裝 TLS 版本<br>\n<code>nvm install 6.11.3</code></li>\n</ol>\n<h4>4. Git</h4>\n<ol>\n<li>安裝指令<br>\n<code>brew update &amp;&amp; brew install git</code></li>\n<li>設定全域 username 和 email<br>\n<code>git config --global user.name &quot;tingsyuanwang&quot;</code><br>\n<code>git config --global user.email &quot;dtvgood202@gmail.com&quot;</code></li>\n</ol>\n<h4>5. Hexo (部落格套件)</h4>\n<ol>\n<li>安裝指令<br>\n<code>npm install -g hexo-cli</code></li>\n</ol>\n<h4>6. Composer</h4>\n<p><a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"external\">進去 Composer 網站按照指令安裝</a></p>\n<h4>7. Docker</h4>\n<p><a href=\"https://store.docker.com/editions/community/docker-ce-desktop-mac\" target=\"_blank\" rel=\"external\">直接從官方網站下載應用</a></p>\n<h4>8. Kubectl (Kubernetes 指令)</h4>\n<ol>\n<li>安裝指令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl</div></pre></td></tr></table></figure>\n<h3>React Native 環境</h3>\n<ol>\n<li>安裝 node watchman<br>\n<code>brew install node</code><br>\n<code>brew install watchman</code></li>\n<li>安裝 React Native CLI<br>\n<code>npm install -g react-native-cli</code></li>\n<li>Java Development Kit<br>\n<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">從官方網站下載</a></li>\n<li>Android Studio<br>\n<a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">從官方網站下載</a></li>\n<li>加到 .zshrc</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># JDK configuration</div><div class=\"line\">export JAVA_HOME=`/usr/libexec/java_home`</div><div class=\"line\"></div><div class=\"line\">export ANDROID_HOME=$HOME/Library/Android/sdk</div><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/tools</div><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/platform-tools</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>React Native Debugger<br>\n<code>brew update &amp;&amp; brew cask install react-native-debugger</code></li>\n</ol>\n"},{"title":"Mechanic: Resurrection (極速秒殺2) - 劇透","date":"2016-09-09T02:27:45.000Z","thumbnail":["/images/Mechanic＿Resurrection.jpg"],"_content":"<img src=\"/images/Mechanic＿Resurrection.jpg\">\n\n***\n#### 評價分數（滿分十分）：:star::star::star::star::star::star:\n#### 地點：台中新時代威秀影城\n#### 陪看：豪豪\n\n***\n#### 劇情簡介：\n&emsp;&emsp;男主角Bishop在一場假死之後住在里約熱內盧，過著愉快的隱居生活，突然有一位女性出現，表示他的老闆要他去殺死三個人，而且這三個人得死得像是意外，結果當然男主角不領情，拍一張她的照片之後逃走。後來，男主角為了躲避追擊逃到泰國的秘密基地，而他的朋友Mae正是男主角守護這個地方的人，男主角在秘密基地調查出襲擊他的人的老闆原來是Crain。\n&emsp;&emsp;隔天，女主角Gina出現，並向Mae索要急救物品，Mae注意到他裂開的嘴唇和瘀傷的手臂，而那天下午，Mae看到Gina在船上被毆打，所以說服Bishop去拯救女主角，男主角衝到船上警告毆打女主角的男子，結果那名男子完全不理會，所以當然被男主角殺了（看起來像是意外），這時，Mae來到船上把Gina接走，男主角在船上調查發現女主角原來叫做Gina，而且他還為Crain工作，最後，為了隱匿蹤跡，男主角放火把船燒了。\n&emsp;&emsp;男主角當面質問女主角，發現女主角在柬埔寨的兒童庇護所工作，Crain威脅她的那些小孩，強迫他到男主角所在的位置執行任務。男主角推斷Crain的計畫就是讓女主角在被Crain綁架之前，男主角會深深愛上她，最後男主角就不得不接受任務。男主角注意到Crain的特務正盯緊他，所以就故意牽起Gina的手，而且親密的互動，他告訴Gina其實他和Crain都是被賣到某個黑幫的孤兒，直到他逃離之前，他們都被當作戰士來訓練。最後，男主角順著Crain的計畫，就和女主角發生親密關係，等待明天被綁架。被綁架之後，男主角被帶去Crain面前，告訴他要殺哪三個人。\n&emsp;&emsp;男主角第一個要殺的是非洲的軍閥Krill，他被關在馬來西亞的監獄裡，男主角把自己弄得跟某個通緝犯很像，順利地進去監獄，男主角在裡面殺死了一位試圖殺死Krill的囚犯取得Krill的信任，最後在他們兩個獨處的時候把他殺死，然後在Crain特工們的幫忙下順利躲過鯊魚的追擊逃出監獄。\n&emsp;&emsp;男主角第二個要殺的是在澳洲做未成年人口販賣的Cook，男主角在Cook的露天游泳池下面鑽洞，導致游泳池漏水，然後Cook直接就從高樓墜下死亡。\n&emsp;&emsp;這個時候，Bishop找到女主角想要救他出來，可是失敗了。他只好去殺他的第三個目標保加利亞的軍火商Adams，結果男主角和Adams合作要殺死Crain，男主角讓Adams假死，然後讓Crain以為他已經死掉了，並告訴Crain任務已經完成，結果Crain本來就準備要把男主角殺死，就讓傭兵們衝到Adams的要賽裡面，結果被男主角佈局殺了精光。\n&emsp;&emsp;男主角回到船上找Crain，結果Crain已經設定了倒數計時的船隻引爆器，男主角把女主角放到水中的逃生艙裡面，自己去找Crain徒手單挑，最後男主角把Crain用鎖鏈鎖在甲板上面，在船爆炸之前往船裡面跑，爆炸之後，女主角被告知已經沒有任何生還者了。\n&emsp;&emsp;女主角回到柬埔寨繼續工作，當男主角出現的時候，她非常驚訝。最後一幕則是Adams看了監視器，發現男主角從船裡面的另外一個逃生艙走出來，Adams直接把影片刪除，再次偽造男主角的死亡。\n\n***\n#### 評論：\n&emsp;&emsp;評分給六分，因為劇情完全沒有可看性，可以像你思考的一樣去走，本來還期待會有一些意想不到的情節，不過深深地讓我失望了。不過以畫面和特效來說都非常到位，如果喜歡打鬥的視覺效果，這部電影可以大大的滿足你的需求。\n\n***\n圖片來源：[官方預告片](https://i.ytimg.com/vi/G-P3f_wDXvs/sddefault.jpg)\n","source":"_posts/Mechanic: Resurrection (極速秒殺2) - 劇透.md","raw":"---\ntitle: 'Mechanic: Resurrection (極速秒殺2) - 劇透'\ndate: 2016-09-09 10:27:45\ncategories: 閱讀賞析\ntags:\nthumbnail:\n  - /images/Mechanic＿Resurrection.jpg\n---\n<img src=\"/images/Mechanic＿Resurrection.jpg\">\n\n***\n#### 評價分數（滿分十分）：:star::star::star::star::star::star:\n#### 地點：台中新時代威秀影城\n#### 陪看：豪豪\n\n***\n#### 劇情簡介：\n&emsp;&emsp;男主角Bishop在一場假死之後住在里約熱內盧，過著愉快的隱居生活，突然有一位女性出現，表示他的老闆要他去殺死三個人，而且這三個人得死得像是意外，結果當然男主角不領情，拍一張她的照片之後逃走。後來，男主角為了躲避追擊逃到泰國的秘密基地，而他的朋友Mae正是男主角守護這個地方的人，男主角在秘密基地調查出襲擊他的人的老闆原來是Crain。\n&emsp;&emsp;隔天，女主角Gina出現，並向Mae索要急救物品，Mae注意到他裂開的嘴唇和瘀傷的手臂，而那天下午，Mae看到Gina在船上被毆打，所以說服Bishop去拯救女主角，男主角衝到船上警告毆打女主角的男子，結果那名男子完全不理會，所以當然被男主角殺了（看起來像是意外），這時，Mae來到船上把Gina接走，男主角在船上調查發現女主角原來叫做Gina，而且他還為Crain工作，最後，為了隱匿蹤跡，男主角放火把船燒了。\n&emsp;&emsp;男主角當面質問女主角，發現女主角在柬埔寨的兒童庇護所工作，Crain威脅她的那些小孩，強迫他到男主角所在的位置執行任務。男主角推斷Crain的計畫就是讓女主角在被Crain綁架之前，男主角會深深愛上她，最後男主角就不得不接受任務。男主角注意到Crain的特務正盯緊他，所以就故意牽起Gina的手，而且親密的互動，他告訴Gina其實他和Crain都是被賣到某個黑幫的孤兒，直到他逃離之前，他們都被當作戰士來訓練。最後，男主角順著Crain的計畫，就和女主角發生親密關係，等待明天被綁架。被綁架之後，男主角被帶去Crain面前，告訴他要殺哪三個人。\n&emsp;&emsp;男主角第一個要殺的是非洲的軍閥Krill，他被關在馬來西亞的監獄裡，男主角把自己弄得跟某個通緝犯很像，順利地進去監獄，男主角在裡面殺死了一位試圖殺死Krill的囚犯取得Krill的信任，最後在他們兩個獨處的時候把他殺死，然後在Crain特工們的幫忙下順利躲過鯊魚的追擊逃出監獄。\n&emsp;&emsp;男主角第二個要殺的是在澳洲做未成年人口販賣的Cook，男主角在Cook的露天游泳池下面鑽洞，導致游泳池漏水，然後Cook直接就從高樓墜下死亡。\n&emsp;&emsp;這個時候，Bishop找到女主角想要救他出來，可是失敗了。他只好去殺他的第三個目標保加利亞的軍火商Adams，結果男主角和Adams合作要殺死Crain，男主角讓Adams假死，然後讓Crain以為他已經死掉了，並告訴Crain任務已經完成，結果Crain本來就準備要把男主角殺死，就讓傭兵們衝到Adams的要賽裡面，結果被男主角佈局殺了精光。\n&emsp;&emsp;男主角回到船上找Crain，結果Crain已經設定了倒數計時的船隻引爆器，男主角把女主角放到水中的逃生艙裡面，自己去找Crain徒手單挑，最後男主角把Crain用鎖鏈鎖在甲板上面，在船爆炸之前往船裡面跑，爆炸之後，女主角被告知已經沒有任何生還者了。\n&emsp;&emsp;女主角回到柬埔寨繼續工作，當男主角出現的時候，她非常驚訝。最後一幕則是Adams看了監視器，發現男主角從船裡面的另外一個逃生艙走出來，Adams直接把影片刪除，再次偽造男主角的死亡。\n\n***\n#### 評論：\n&emsp;&emsp;評分給六分，因為劇情完全沒有可看性，可以像你思考的一樣去走，本來還期待會有一些意想不到的情節，不過深深地讓我失望了。不過以畫面和特效來說都非常到位，如果喜歡打鬥的視覺效果，這部電影可以大大的滿足你的需求。\n\n***\n圖片來源：[官方預告片](https://i.ytimg.com/vi/G-P3f_wDXvs/sddefault.jpg)\n","slug":"Mechanic: Resurrection (極速秒殺2) - 劇透","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxa00327ifa1bom3pdu","content":"<img src=\"/images/Mechanic＿Resurrection.jpg\">\n<hr>\n<h4>評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️</h4>\n<h4>地點：台中新時代威秀影城</h4>\n<h4>陪看：豪豪</h4>\n<hr>\n<h4>劇情簡介：</h4>\n<p>  男主角Bishop在一場假死之後住在里約熱內盧，過著愉快的隱居生活，突然有一位女性出現，表示他的老闆要他去殺死三個人，而且這三個人得死得像是意外，結果當然男主角不領情，拍一張她的照片之後逃走。後來，男主角為了躲避追擊逃到泰國的秘密基地，而他的朋友Mae正是男主角守護這個地方的人，男主角在秘密基地調查出襲擊他的人的老闆原來是Crain。<br>\n  隔天，女主角Gina出現，並向Mae索要急救物品，Mae注意到他裂開的嘴唇和瘀傷的手臂，而那天下午，Mae看到Gina在船上被毆打，所以說服Bishop去拯救女主角，男主角衝到船上警告毆打女主角的男子，結果那名男子完全不理會，所以當然被男主角殺了（看起來像是意外），這時，Mae來到船上把Gina接走，男主角在船上調查發現女主角原來叫做Gina，而且他還為Crain工作，最後，為了隱匿蹤跡，男主角放火把船燒了。<br>\n  男主角當面質問女主角，發現女主角在柬埔寨的兒童庇護所工作，Crain威脅她的那些小孩，強迫他到男主角所在的位置執行任務。男主角推斷Crain的計畫就是讓女主角在被Crain綁架之前，男主角會深深愛上她，最後男主角就不得不接受任務。男主角注意到Crain的特務正盯緊他，所以就故意牽起Gina的手，而且親密的互動，他告訴Gina其實他和Crain都是被賣到某個黑幫的孤兒，直到他逃離之前，他們都被當作戰士來訓練。最後，男主角順著Crain的計畫，就和女主角發生親密關係，等待明天被綁架。被綁架之後，男主角被帶去Crain面前，告訴他要殺哪三個人。<br>\n  男主角第一個要殺的是非洲的軍閥Krill，他被關在馬來西亞的監獄裡，男主角把自己弄得跟某個通緝犯很像，順利地進去監獄，男主角在裡面殺死了一位試圖殺死Krill的囚犯取得Krill的信任，最後在他們兩個獨處的時候把他殺死，然後在Crain特工們的幫忙下順利躲過鯊魚的追擊逃出監獄。<br>\n  男主角第二個要殺的是在澳洲做未成年人口販賣的Cook，男主角在Cook的露天游泳池下面鑽洞，導致游泳池漏水，然後Cook直接就從高樓墜下死亡。<br>\n  這個時候，Bishop找到女主角想要救他出來，可是失敗了。他只好去殺他的第三個目標保加利亞的軍火商Adams，結果男主角和Adams合作要殺死Crain，男主角讓Adams假死，然後讓Crain以為他已經死掉了，並告訴Crain任務已經完成，結果Crain本來就準備要把男主角殺死，就讓傭兵們衝到Adams的要賽裡面，結果被男主角佈局殺了精光。<br>\n  男主角回到船上找Crain，結果Crain已經設定了倒數計時的船隻引爆器，男主角把女主角放到水中的逃生艙裡面，自己去找Crain徒手單挑，最後男主角把Crain用鎖鏈鎖在甲板上面，在船爆炸之前往船裡面跑，爆炸之後，女主角被告知已經沒有任何生還者了。<br>\n  女主角回到柬埔寨繼續工作，當男主角出現的時候，她非常驚訝。最後一幕則是Adams看了監視器，發現男主角從船裡面的另外一個逃生艙走出來，Adams直接把影片刪除，再次偽造男主角的死亡。</p>\n<hr>\n<h4>評論：</h4>\n<p>  評分給六分，因為劇情完全沒有可看性，可以像你思考的一樣去走，本來還期待會有一些意想不到的情節，不過深深地讓我失望了。不過以畫面和特效來說都非常到位，如果喜歡打鬥的視覺效果，這部電影可以大大的滿足你的需求。</p>\n<hr>\n<p>圖片來源：<a href=\"https://i.ytimg.com/vi/G-P3f_wDXvs/sddefault.jpg\" target=\"_blank\" rel=\"external\">官方預告片</a></p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/Mechanic＿Resurrection.jpg\">\n<hr>\n<h4>評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️</h4>\n<h4>地點：台中新時代威秀影城</h4>\n<h4>陪看：豪豪</h4>\n<hr>\n<h4>劇情簡介：</h4>\n<p>  男主角Bishop在一場假死之後住在里約熱內盧，過著愉快的隱居生活，突然有一位女性出現，表示他的老闆要他去殺死三個人，而且這三個人得死得像是意外，結果當然男主角不領情，拍一張她的照片之後逃走。後來，男主角為了躲避追擊逃到泰國的秘密基地，而他的朋友Mae正是男主角守護這個地方的人，男主角在秘密基地調查出襲擊他的人的老闆原來是Crain。<br>\n  隔天，女主角Gina出現，並向Mae索要急救物品，Mae注意到他裂開的嘴唇和瘀傷的手臂，而那天下午，Mae看到Gina在船上被毆打，所以說服Bishop去拯救女主角，男主角衝到船上警告毆打女主角的男子，結果那名男子完全不理會，所以當然被男主角殺了（看起來像是意外），這時，Mae來到船上把Gina接走，男主角在船上調查發現女主角原來叫做Gina，而且他還為Crain工作，最後，為了隱匿蹤跡，男主角放火把船燒了。<br>\n  男主角當面質問女主角，發現女主角在柬埔寨的兒童庇護所工作，Crain威脅她的那些小孩，強迫他到男主角所在的位置執行任務。男主角推斷Crain的計畫就是讓女主角在被Crain綁架之前，男主角會深深愛上她，最後男主角就不得不接受任務。男主角注意到Crain的特務正盯緊他，所以就故意牽起Gina的手，而且親密的互動，他告訴Gina其實他和Crain都是被賣到某個黑幫的孤兒，直到他逃離之前，他們都被當作戰士來訓練。最後，男主角順著Crain的計畫，就和女主角發生親密關係，等待明天被綁架。被綁架之後，男主角被帶去Crain面前，告訴他要殺哪三個人。<br>\n  男主角第一個要殺的是非洲的軍閥Krill，他被關在馬來西亞的監獄裡，男主角把自己弄得跟某個通緝犯很像，順利地進去監獄，男主角在裡面殺死了一位試圖殺死Krill的囚犯取得Krill的信任，最後在他們兩個獨處的時候把他殺死，然後在Crain特工們的幫忙下順利躲過鯊魚的追擊逃出監獄。<br>\n  男主角第二個要殺的是在澳洲做未成年人口販賣的Cook，男主角在Cook的露天游泳池下面鑽洞，導致游泳池漏水，然後Cook直接就從高樓墜下死亡。<br>\n  這個時候，Bishop找到女主角想要救他出來，可是失敗了。他只好去殺他的第三個目標保加利亞的軍火商Adams，結果男主角和Adams合作要殺死Crain，男主角讓Adams假死，然後讓Crain以為他已經死掉了，並告訴Crain任務已經完成，結果Crain本來就準備要把男主角殺死，就讓傭兵們衝到Adams的要賽裡面，結果被男主角佈局殺了精光。<br>\n  男主角回到船上找Crain，結果Crain已經設定了倒數計時的船隻引爆器，男主角把女主角放到水中的逃生艙裡面，自己去找Crain徒手單挑，最後男主角把Crain用鎖鏈鎖在甲板上面，在船爆炸之前往船裡面跑，爆炸之後，女主角被告知已經沒有任何生還者了。<br>\n  女主角回到柬埔寨繼續工作，當男主角出現的時候，她非常驚訝。最後一幕則是Adams看了監視器，發現男主角從船裡面的另外一個逃生艙走出來，Adams直接把影片刪除，再次偽造男主角的死亡。</p>\n<hr>\n<h4>評論：</h4>\n<p>  評分給六分，因為劇情完全沒有可看性，可以像你思考的一樣去走，本來還期待會有一些意想不到的情節，不過深深地讓我失望了。不過以畫面和特效來說都非常到位，如果喜歡打鬥的視覺效果，這部電影可以大大的滿足你的需求。</p>\n<hr>\n<p>圖片來源：<a href=\"https://i.ytimg.com/vi/G-P3f_wDXvs/sddefault.jpg\" target=\"_blank\" rel=\"external\">官方預告片</a></p>\n"},{"title":"Nodejs II 快速學習自我挑戰 Day1","thumbnail":["/images/learning/nodejsII/NodejsIIDay01.png"],"date":"2017-11-02T08:36:32.000Z","_content":"<img src=\"/images/learning/nodejsII/NodejsIIDay01.png\">\n\n***\n### 課程簡介\n1. 課程內容\n    - 使用 Node/Express/Mongo 創建 Server Side Application\n    - 很多 node modules/packages\n    - 從手稿到專案部署\n    - 2 個有一步步解說的深度專案\n2. 課程內容沒有的\n    - 沒有 Nodejs 簡介\n    - 沒有簡單的 todo List 或 REST API\n    - 不會只告訴你讓你自己線上部署你自己的應用\n3. 課程的先備知識\n    - HTML/CSS/JavaScript\n    - 基礎的 Node.js/Express 知識\n    - 如果沒有 Node/Express/MongoDB 的知識，我會解說\n4. 課程可以學到的東西\n    - 如何從無到有包含部署製作一個 server-side 應用\n    - 都是關於 Express 框架\n    - 在本地工作和遠端 MongoDB 部署\n    - 處理本地和 Google OAuth 認證\n    - 在 Server 處理畫面和編排\n    - ES6 JavaScript 觀念\n5. 專案一：VidJot - 可以讓創作者註冊且寫下他們對下一個影片的想法\n    - 使用 Express、Mongoose、Passport、Bcrypt、Express-Session、Handlebars.js、Bootstrap 4 beta\n6. 專案二：StoryBooks - 社交網路，用來創建公開和私有的故事，使用者可以使用 Google OAuth 選擇允許或關閉留言\n    - 使用 Express、Mongoose、Passport、Google OAuth、Private/Public Stories、Helper Functions、Moment.js、Materialize CSS\n### 環境設定\n#### 開發環境設定\n1. VS code 設定檔案\n```\n{\n  \"editor.fontSize\": 26,\n  \"terminal.integrated.fontSize\": 26,\n  \"terminal.integrated.shell.windows\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\"\n  \"editor.wordWrap\": \"on\"\n  \"editor.tabSize\": 2,\n}\n```\n#### 什麼是 Node.js\n1. 什麼是 Node.js?\n    - JavaScript runtime 使用 V8 JavaScript Engine，正是 Google 瀏覽器所使用的 Engine\n    - V8 Engine 用 C++ 寫的，用來幫助 JavaScript 編譯到非常快的機器\n    - 允許我們在 Server 上面運行 JS (像是 PHP、Rails、Java...等等)\n    - 跨平台執行 (Windows、Linux、MacOS)\n    - 用來建立非常快速且可規模化的 Real-time Application，因為他有非同步式的特色\n    - 使用事件驅動，非阻塞式 I/O model\n2. 可以用 Node 做什麼？\n    - 用 filesystem 操作檔案\n    - 建立網頁伺服器，處理進來的 Http 請求和回傳回應，可以使用像是 express 的框架讓這件事情更簡單\n    - 與資料庫連線 (MongoDB、MySQL、Postgres、Redis... 等等)\n    - 強大的 APIs 和後端介面\n    - 強大的 Server side apps 且可以讀取 views\n3. Blocking Model vs. Non-Blocking\n    - Blocking 要等事件完成才進行下一件事情，Non-Blocking 在事情完成前，先繼續做其它事情，等到事情完成會有 callback，然後回去執行 callback 的動作\n#### 安裝和探索 Node.js\n1. chrome 可以使用的語法\n    - `document`\n2. Node server 可以用的語法\n    - `global`\n    - `process.env.USER`\n#### 安裝本地 MongoDB\n1. [下載 MongoDB](https://www.mongodb.com/download-center?jmp=nav#community)\n2. 安裝在 C 槽，在 mongodb 根目錄新增 data 的資料夾，在 data 的資料夾再新增 db 的資料夾。在 mongodb 根目錄新增 log，在 log 的資料夾新增檔案 `mongo.log`\n3. 用系統管理員打開 cmd，跳到 mongodb bin 目錄，`cd c:/mongodb/bin`\n4. `mongod --directoryperdb --dbpath C:\\mongodb\\data\\db --logpath C:\\mongodb\\log\\mongo.log --logappend --rest --install`\n5. `net start MongoDB`\n6. `mongo`\n7. `show databases`\n#### 註冊 mlab\n1. [mLab](https://mlab.com/)\n#### 註冊 Heroku\n1. [Heroku](https://www.heroku.com/)\n### VidJot Project\n#### 介紹\n1. [VidJot](http://www.vidjot.tech/)\n#### 安裝和啟動 Express\n1. [Express 官方網站](http://expressjs.com/)\n2. 設定 npm 預設值\n    - `npm set init-author-name=\"Vincent Adler\"`\n    - `npm set init-license=\"MIT\"`\n3. 開新專案 `npm init`\n    - `description: App to create video ideas`\n    - `entry point: (index.js) app.js`\n4. 安裝 express `npm install express --save`\n5. 在根目錄新增 app.js\n```\nconst express = require('express');\n\nconst app = express();\n\nconst port = 5000;\n\napp.listen(port, () => {\n    console.log(`Server started on Port ${port}`);\n});\n```\n#### 基礎路由和 Nodemon\n1. 在 app.js 新增路由\n```\n// Index Route\napp.get('/', (req, res) => {\n    res.send('INDEX');\n});\n\n// About Route\napp.get('/about', (req, res) => {\n    res.send('ABOUT')\n});\n```\n2. 安裝 nodemon `npm install -g nodemon`\n3. 檢查 npm 套件安裝位置 `npm root -g`\n4. 使用 nodemon `nodemon`\n#### Express Middleware\n1. [Middleware 簡介](http://expressjs.com/en/guide/using-middleware.html)\n2. 在 app.js 新增 middleware\n```\napp.use(function(req, res, next) {\n    console.log(Date.now());\n    next();\n});\n```\n3. 在 middleware 放入 req.name 可以在 app.get 取得\n```\napp.use(function(req, res, next) {\n    req.name = 'Vincent Adler';\n    next();\n});\n```\n```\napp.get('/', (req, res) => {\n    res.send(req.name);\n});\n```\n#### 使用模板\n1. [handlebars.js 官方網站](http://handlebarsjs.com/)\n2. [在 express 使用 handlebars](https://github.com/ericf/express-handlebars)\n3. [EJS](https://github.com/mde/ejs)\n4. 安裝 express-handlebars `npm install express-handlebars --save`\n5. 引入 express-handlebars\n`const exphbs  = require('express-handlebars');`\n6. 新增 handlebars middleware\n```\napp.engine('handlebars', exphbs({\n    defaultLayout: 'main'\n}));\napp.set('view engine', 'handlebars');\n```\n7. 新增 views/index.handlebars `<h1>Welcome</h1>`\n8. 新增 views/layouts/main.handlebars，`{% raw %}{{{body}}}{% endraw %}` 會讀出被 render 的 view\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>VidJot</title>\n</head>\n<body>\n    {{{body}}}\n</body>\n</html>\n```\n9. 把 app.js route 的 send 都改成 render\n```\napp.get('/', (req, res) => {\n    res.render('index');\n});\n\napp.get('/about', (req, res) => {\n    res.render('about')\n});\n```\n10. 新增 views/about.handlebars `<h1>About</h1>`\n11. 讓讀取的資料變成動態\n```\napp.get('/', (req, res) => {\n    const title = 'Welcome';\n    res.render('index', {\n        title: title\n    });\n});\n```\n12. 修改 views/index.handlebars `<h1>{{\"{{title\"}}}}</h1>`\n#### Bootstrap 和 Partials\n1. [取得 Bootstrap 的 CDN](http://getbootstrap.com/docs/4.0/getting-started/introduction/)\n2. 在 views/layouts/main.handlebars 引入 CDN\n```\n// CSS\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n\n// JS\n<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n```\n3. 在 views/layouts/main.handlebars，body 用 container 包住\n```\n<div class=\"container\">\n    {{{body}}}\n</div>\n```\n4. 新增 views/partials/_navbar.handlebars\n```\n<nav class=\"navbar navbar-expand-sm navbar-dark bg-primary\">\n    <div class=\"container\">\n        <a class=\"navbar-brand\" href=\"#\">VidJot</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/about\">About</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>\n```\n5. 在 views/layouts/main.handlebars 引入 navbar partial `{{\"{{> _navbar\"}}}}`\n6. 包裝一下 views/index.handlebars\n```\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-3\">{{title}}</h1>\n    <p class=\"lead\">Jot down ideas for your next YouTube Videos</p>\n    <a href=\"/ideas/add\" class=\"btn btn-dark btn-lg\">Add Video Idea</a>\n</div>\n```\n7. 包裝一下 views/about.handlebars\n```\n<h1>About</h1>\n<p>This is a Node/Express app for jotting down ideas for future Youtube videos</p>\n<p>Version: 1.0.0</p>\n```","source":"_posts/Nodejs-II-快速學習自我挑戰-Day1.md","raw":"---\ntitle: Nodejs II 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/nodejsII/NodejsIIDay01.png\ndate: 2017-11-02 16:36:32\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejsII/NodejsIIDay01.png\">\n\n***\n### 課程簡介\n1. 課程內容\n    - 使用 Node/Express/Mongo 創建 Server Side Application\n    - 很多 node modules/packages\n    - 從手稿到專案部署\n    - 2 個有一步步解說的深度專案\n2. 課程內容沒有的\n    - 沒有 Nodejs 簡介\n    - 沒有簡單的 todo List 或 REST API\n    - 不會只告訴你讓你自己線上部署你自己的應用\n3. 課程的先備知識\n    - HTML/CSS/JavaScript\n    - 基礎的 Node.js/Express 知識\n    - 如果沒有 Node/Express/MongoDB 的知識，我會解說\n4. 課程可以學到的東西\n    - 如何從無到有包含部署製作一個 server-side 應用\n    - 都是關於 Express 框架\n    - 在本地工作和遠端 MongoDB 部署\n    - 處理本地和 Google OAuth 認證\n    - 在 Server 處理畫面和編排\n    - ES6 JavaScript 觀念\n5. 專案一：VidJot - 可以讓創作者註冊且寫下他們對下一個影片的想法\n    - 使用 Express、Mongoose、Passport、Bcrypt、Express-Session、Handlebars.js、Bootstrap 4 beta\n6. 專案二：StoryBooks - 社交網路，用來創建公開和私有的故事，使用者可以使用 Google OAuth 選擇允許或關閉留言\n    - 使用 Express、Mongoose、Passport、Google OAuth、Private/Public Stories、Helper Functions、Moment.js、Materialize CSS\n### 環境設定\n#### 開發環境設定\n1. VS code 設定檔案\n```\n{\n  \"editor.fontSize\": 26,\n  \"terminal.integrated.fontSize\": 26,\n  \"terminal.integrated.shell.windows\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\"\n  \"editor.wordWrap\": \"on\"\n  \"editor.tabSize\": 2,\n}\n```\n#### 什麼是 Node.js\n1. 什麼是 Node.js?\n    - JavaScript runtime 使用 V8 JavaScript Engine，正是 Google 瀏覽器所使用的 Engine\n    - V8 Engine 用 C++ 寫的，用來幫助 JavaScript 編譯到非常快的機器\n    - 允許我們在 Server 上面運行 JS (像是 PHP、Rails、Java...等等)\n    - 跨平台執行 (Windows、Linux、MacOS)\n    - 用來建立非常快速且可規模化的 Real-time Application，因為他有非同步式的特色\n    - 使用事件驅動，非阻塞式 I/O model\n2. 可以用 Node 做什麼？\n    - 用 filesystem 操作檔案\n    - 建立網頁伺服器，處理進來的 Http 請求和回傳回應，可以使用像是 express 的框架讓這件事情更簡單\n    - 與資料庫連線 (MongoDB、MySQL、Postgres、Redis... 等等)\n    - 強大的 APIs 和後端介面\n    - 強大的 Server side apps 且可以讀取 views\n3. Blocking Model vs. Non-Blocking\n    - Blocking 要等事件完成才進行下一件事情，Non-Blocking 在事情完成前，先繼續做其它事情，等到事情完成會有 callback，然後回去執行 callback 的動作\n#### 安裝和探索 Node.js\n1. chrome 可以使用的語法\n    - `document`\n2. Node server 可以用的語法\n    - `global`\n    - `process.env.USER`\n#### 安裝本地 MongoDB\n1. [下載 MongoDB](https://www.mongodb.com/download-center?jmp=nav#community)\n2. 安裝在 C 槽，在 mongodb 根目錄新增 data 的資料夾，在 data 的資料夾再新增 db 的資料夾。在 mongodb 根目錄新增 log，在 log 的資料夾新增檔案 `mongo.log`\n3. 用系統管理員打開 cmd，跳到 mongodb bin 目錄，`cd c:/mongodb/bin`\n4. `mongod --directoryperdb --dbpath C:\\mongodb\\data\\db --logpath C:\\mongodb\\log\\mongo.log --logappend --rest --install`\n5. `net start MongoDB`\n6. `mongo`\n7. `show databases`\n#### 註冊 mlab\n1. [mLab](https://mlab.com/)\n#### 註冊 Heroku\n1. [Heroku](https://www.heroku.com/)\n### VidJot Project\n#### 介紹\n1. [VidJot](http://www.vidjot.tech/)\n#### 安裝和啟動 Express\n1. [Express 官方網站](http://expressjs.com/)\n2. 設定 npm 預設值\n    - `npm set init-author-name=\"Vincent Adler\"`\n    - `npm set init-license=\"MIT\"`\n3. 開新專案 `npm init`\n    - `description: App to create video ideas`\n    - `entry point: (index.js) app.js`\n4. 安裝 express `npm install express --save`\n5. 在根目錄新增 app.js\n```\nconst express = require('express');\n\nconst app = express();\n\nconst port = 5000;\n\napp.listen(port, () => {\n    console.log(`Server started on Port ${port}`);\n});\n```\n#### 基礎路由和 Nodemon\n1. 在 app.js 新增路由\n```\n// Index Route\napp.get('/', (req, res) => {\n    res.send('INDEX');\n});\n\n// About Route\napp.get('/about', (req, res) => {\n    res.send('ABOUT')\n});\n```\n2. 安裝 nodemon `npm install -g nodemon`\n3. 檢查 npm 套件安裝位置 `npm root -g`\n4. 使用 nodemon `nodemon`\n#### Express Middleware\n1. [Middleware 簡介](http://expressjs.com/en/guide/using-middleware.html)\n2. 在 app.js 新增 middleware\n```\napp.use(function(req, res, next) {\n    console.log(Date.now());\n    next();\n});\n```\n3. 在 middleware 放入 req.name 可以在 app.get 取得\n```\napp.use(function(req, res, next) {\n    req.name = 'Vincent Adler';\n    next();\n});\n```\n```\napp.get('/', (req, res) => {\n    res.send(req.name);\n});\n```\n#### 使用模板\n1. [handlebars.js 官方網站](http://handlebarsjs.com/)\n2. [在 express 使用 handlebars](https://github.com/ericf/express-handlebars)\n3. [EJS](https://github.com/mde/ejs)\n4. 安裝 express-handlebars `npm install express-handlebars --save`\n5. 引入 express-handlebars\n`const exphbs  = require('express-handlebars');`\n6. 新增 handlebars middleware\n```\napp.engine('handlebars', exphbs({\n    defaultLayout: 'main'\n}));\napp.set('view engine', 'handlebars');\n```\n7. 新增 views/index.handlebars `<h1>Welcome</h1>`\n8. 新增 views/layouts/main.handlebars，`{% raw %}{{{body}}}{% endraw %}` 會讀出被 render 的 view\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>VidJot</title>\n</head>\n<body>\n    {{{body}}}\n</body>\n</html>\n```\n9. 把 app.js route 的 send 都改成 render\n```\napp.get('/', (req, res) => {\n    res.render('index');\n});\n\napp.get('/about', (req, res) => {\n    res.render('about')\n});\n```\n10. 新增 views/about.handlebars `<h1>About</h1>`\n11. 讓讀取的資料變成動態\n```\napp.get('/', (req, res) => {\n    const title = 'Welcome';\n    res.render('index', {\n        title: title\n    });\n});\n```\n12. 修改 views/index.handlebars `<h1>{{\"{{title\"}}}}</h1>`\n#### Bootstrap 和 Partials\n1. [取得 Bootstrap 的 CDN](http://getbootstrap.com/docs/4.0/getting-started/introduction/)\n2. 在 views/layouts/main.handlebars 引入 CDN\n```\n// CSS\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\">\n\n// JS\n<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"></script>\n```\n3. 在 views/layouts/main.handlebars，body 用 container 包住\n```\n<div class=\"container\">\n    {{{body}}}\n</div>\n```\n4. 新增 views/partials/_navbar.handlebars\n```\n<nav class=\"navbar navbar-expand-sm navbar-dark bg-primary\">\n    <div class=\"container\">\n        <a class=\"navbar-brand\" href=\"#\">VidJot</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/about\">About</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>\n```\n5. 在 views/layouts/main.handlebars 引入 navbar partial `{{\"{{> _navbar\"}}}}`\n6. 包裝一下 views/index.handlebars\n```\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-3\">{{title}}</h1>\n    <p class=\"lead\">Jot down ideas for your next YouTube Videos</p>\n    <a href=\"/ideas/add\" class=\"btn btn-dark btn-lg\">Add Video Idea</a>\n</div>\n```\n7. 包裝一下 views/about.handlebars\n```\n<h1>About</h1>\n<p>This is a Node/Express app for jotting down ideas for future Youtube videos</p>\n<p>Version: 1.0.0</p>\n```","slug":"Nodejs-II-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-04T21:30:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxb00357ifawl2zj746","content":"<img src=\"/images/learning/nodejsII/NodejsIIDay01.png\">\n<hr>\n<h3>課程簡介</h3>\n<ol>\n<li>課程內容\n<ul>\n<li>使用 Node/Express/Mongo 創建 Server Side Application</li>\n<li>很多 node modules/packages</li>\n<li>從手稿到專案部署</li>\n<li>2 個有一步步解說的深度專案</li>\n</ul>\n</li>\n<li>課程內容沒有的\n<ul>\n<li>沒有 Nodejs 簡介</li>\n<li>沒有簡單的 todo List 或 REST API</li>\n<li>不會只告訴你讓你自己線上部署你自己的應用</li>\n</ul>\n</li>\n<li>課程的先備知識\n<ul>\n<li>HTML/CSS/JavaScript</li>\n<li>基礎的 Node.js/Express 知識</li>\n<li>如果沒有 Node/Express/MongoDB 的知識，我會解說</li>\n</ul>\n</li>\n<li>課程可以學到的東西\n<ul>\n<li>如何從無到有包含部署製作一個 server-side 應用</li>\n<li>都是關於 Express 框架</li>\n<li>在本地工作和遠端 MongoDB 部署</li>\n<li>處理本地和 Google OAuth 認證</li>\n<li>在 Server 處理畫面和編排</li>\n<li>ES6 JavaScript 觀念</li>\n</ul>\n</li>\n<li>專案一：VidJot - 可以讓創作者註冊且寫下他們對下一個影片的想法\n<ul>\n<li>使用 Express、Mongoose、Passport、Bcrypt、Express-Session、Handlebars.js、Bootstrap 4 beta</li>\n</ul>\n</li>\n<li>專案二：StoryBooks - 社交網路，用來創建公開和私有的故事，使用者可以使用 Google OAuth 選擇允許或關閉留言\n<ul>\n<li>使用 Express、Mongoose、Passport、Google OAuth、Private/Public Stories、Helper Functions、Moment.js、Materialize CSS</li>\n</ul>\n</li>\n</ol>\n<h3>環境設定</h3>\n<h4>開發環境設定</h4>\n<ol>\n<li>VS code 設定檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;editor.fontSize&quot;: 26,</div><div class=\"line\">  &quot;terminal.integrated.fontSize&quot;: 26,</div><div class=\"line\">  &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;</div><div class=\"line\">  &quot;editor.wordWrap&quot;: &quot;on&quot;</div><div class=\"line\">  &quot;editor.tabSize&quot;: 2,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>什麼是 Node.js</h4>\n<ol>\n<li>什麼是 Node.js?\n<ul>\n<li>JavaScript runtime 使用 V8 JavaScript Engine，正是 Google 瀏覽器所使用的 Engine</li>\n<li>V8 Engine 用 C++ 寫的，用來幫助 JavaScript 編譯到非常快的機器</li>\n<li>允許我們在 Server 上面運行 JS (像是 PHP、Rails、Java…等等)</li>\n<li>跨平台執行 (Windows、Linux、MacOS)</li>\n<li>用來建立非常快速且可規模化的 Real-time Application，因為他有非同步式的特色</li>\n<li>使用事件驅動，非阻塞式 I/O model</li>\n</ul>\n</li>\n<li>可以用 Node 做什麼？\n<ul>\n<li>用 filesystem 操作檔案</li>\n<li>建立網頁伺服器，處理進來的 Http 請求和回傳回應，可以使用像是 express 的框架讓這件事情更簡單</li>\n<li>與資料庫連線 (MongoDB、MySQL、Postgres、Redis… 等等)</li>\n<li>強大的 APIs 和後端介面</li>\n<li>強大的 Server side apps 且可以讀取 views</li>\n</ul>\n</li>\n<li>Blocking Model vs. Non-Blocking\n<ul>\n<li>Blocking 要等事件完成才進行下一件事情，Non-Blocking 在事情完成前，先繼續做其它事情，等到事情完成會有 callback，然後回去執行 callback 的動作</li>\n</ul>\n</li>\n</ol>\n<h4>安裝和探索 Node.js</h4>\n<ol>\n<li>chrome 可以使用的語法\n<ul>\n<li><code>document</code></li>\n</ul>\n</li>\n<li>Node server 可以用的語法\n<ul>\n<li><code>global</code></li>\n<li><code>process.env.USER</code></li>\n</ul>\n</li>\n</ol>\n<h4>安裝本地 MongoDB</h4>\n<ol>\n<li><a href=\"https://www.mongodb.com/download-center?jmp=nav#community\" target=\"_blank\" rel=\"external\">下載 MongoDB</a></li>\n<li>安裝在 C 槽，在 mongodb 根目錄新增 data 的資料夾，在 data 的資料夾再新增 db 的資料夾。在 mongodb 根目錄新增 log，在 log 的資料夾新增檔案 <code>mongo.log</code></li>\n<li>用系統管理員打開 cmd，跳到 mongodb bin 目錄，<code>cd c:/mongodb/bin</code></li>\n<li><code>mongod --directoryperdb --dbpath C:\\mongodb\\data\\db --logpath C:\\mongodb\\log\\mongo.log --logappend --rest --install</code></li>\n<li><code>net start MongoDB</code></li>\n<li><code>mongo</code></li>\n<li><code>show databases</code></li>\n</ol>\n<h4>註冊 mlab</h4>\n<ol>\n<li><a href=\"https://mlab.com/\" target=\"_blank\" rel=\"external\">mLab</a></li>\n</ol>\n<h4>註冊 Heroku</h4>\n<ol>\n<li><a href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"external\">Heroku</a></li>\n</ol>\n<h3>VidJot Project</h3>\n<h4>介紹</h4>\n<ol>\n<li><a href=\"http://www.vidjot.tech/\" target=\"_blank\" rel=\"external\">VidJot</a></li>\n</ol>\n<h4>安裝和啟動 Express</h4>\n<ol>\n<li><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">Express 官方網站</a></li>\n<li>設定 npm 預設值\n<ul>\n<li><code>npm set init-author-name=&quot;Vincent Adler&quot;</code></li>\n<li><code>npm set init-license=&quot;MIT&quot;</code></li>\n</ul>\n</li>\n<li>開新專案 <code>npm init</code>\n<ul>\n<li><code>description: App to create video ideas</code></li>\n<li><code>entry point: (index.js) app.js</code></li>\n</ul>\n</li>\n<li>安裝 express <code>npm install express --save</code></li>\n<li>在根目錄新增 app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">const app = express();</div><div class=\"line\"></div><div class=\"line\">const port = 5000;</div><div class=\"line\"></div><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server started on Port $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>基礎路由和 Nodemon</h4>\n<ol>\n<li>在 app.js 新增路由</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Index Route</div><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;INDEX&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// About Route</div><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;ABOUT&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安裝 nodemon <code>npm install -g nodemon</code></li>\n<li>檢查 npm 套件安裝位置 <code>npm root -g</code></li>\n<li>使用 nodemon <code>nodemon</code></li>\n</ol>\n<h4>Express Middleware</h4>\n<ol>\n<li><a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"external\">Middleware 簡介</a></li>\n<li>在 app.js 新增 middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(function(req, res, next) &#123;</div><div class=\"line\">    console.log(Date.now());</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 middleware 放入 <a href=\"http://req.name\" target=\"_blank\" rel=\"external\">req.name</a> 可以在 app.get 取得</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(function(req, res, next) &#123;</div><div class=\"line\">    req.name = &apos;Vincent Adler&apos;;</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(req.name);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>使用模板</h4>\n<ol>\n<li><a href=\"http://handlebarsjs.com/\" target=\"_blank\" rel=\"external\">handlebars.js 官方網站</a></li>\n<li><a href=\"https://github.com/ericf/express-handlebars\" target=\"_blank\" rel=\"external\">在 express 使用 handlebars</a></li>\n<li><a href=\"https://github.com/mde/ejs\" target=\"_blank\" rel=\"external\">EJS</a></li>\n<li>安裝 express-handlebars <code>npm install express-handlebars --save</code></li>\n<li>引入 express-handlebars<br>\n<code>const exphbs = require('express-handlebars');</code></li>\n<li>新增 handlebars middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.engine(&apos;handlebars&apos;, exphbs(&#123;</div><div class=\"line\">    defaultLayout: &apos;main&apos;</div><div class=\"line\">&#125;));</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;handlebars&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增 views/index.handlebars <code>&lt;h1&gt;Welcome&lt;/h1&gt;</code></li>\n<li>新增 views/layouts/main.handlebars，<code>{{{body}}}</code> 會讀出被 render 的 view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot;</div><div class=\"line\">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;VidJot&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &#123;&#123;&#123;body&#125;&#125;&#125;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>把 app.js route 的 send 都改成 render</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;index&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;about&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>新增 views/about.handlebars <code>&lt;h1&gt;About&lt;/h1&gt;</code></li>\n<li>讓讀取的資料變成動態</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    const title = &apos;Welcome&apos;;</div><div class=\"line\">    res.render(&apos;index&apos;, &#123;</div><div class=\"line\">        title: title</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>修改 views/index.handlebars <code>&lt;h1&gt;{{title}}&lt;/h1&gt;</code></li>\n</ol>\n<h4>Bootstrap 和 Partials</h4>\n<ol>\n<li><a href=\"http://getbootstrap.com/docs/4.0/getting-started/introduction/\" target=\"_blank\" rel=\"external\">取得 Bootstrap 的 CDN</a></li>\n<li>在 views/layouts/main.handlebars 引入 CDN</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// CSS</div><div class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css&quot; integrity=&quot;sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb&quot; crossorigin=&quot;anonymous&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">// JS</div><div class=\"line\">&lt;script src=&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot; integrity=&quot;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js&quot; integrity=&quot;sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js&quot; integrity=&quot;sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 views/layouts/main.handlebars，body 用 container 包住</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &#123;&#123;&#123;body&#125;&#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 views/partials/_navbar.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;nav class=&quot;navbar navbar-expand-sm navbar-dark bg-primary&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;VidJot&lt;/a&gt;</div><div class=\"line\">        &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarNav&quot; aria-controls=&quot;navbarNav&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;</div><div class=\"line\">            &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">        &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNav&quot;&gt;</div><div class=\"line\">            &lt;ul class=&quot;navbar-nav&quot;&gt;</div><div class=\"line\">                &lt;li class=&quot;nav-item&quot;&gt;</div><div class=\"line\">                    &lt;a class=&quot;nav-link&quot; href=&quot;/&quot;&gt;Home&lt;/a&gt;</div><div class=\"line\">                &lt;/li&gt;</div><div class=\"line\">                &lt;li class=&quot;nav-item&quot;&gt;</div><div class=\"line\">                    &lt;a class=&quot;nav-link&quot; href=&quot;/about&quot;&gt;About&lt;/a&gt;</div><div class=\"line\">                &lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 views/layouts/main.handlebars 引入 navbar partial <code>{{> _navbar}}</code></li>\n<li>包裝一下 views/index.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;jumbotron text-center&quot;&gt;</div><div class=\"line\">    &lt;h1 class=&quot;display-3&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">    &lt;p class=&quot;lead&quot;&gt;Jot down ideas for your next YouTube Videos&lt;/p&gt;</div><div class=\"line\">    &lt;a href=&quot;/ideas/add&quot; class=&quot;btn btn-dark btn-lg&quot;&gt;Add Video Idea&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>包裝一下 views/about.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;About&lt;/h1&gt;</div><div class=\"line\">&lt;p&gt;This is a Node/Express app for jotting down ideas for future Youtube videos&lt;/p&gt;</div><div class=\"line\">&lt;p&gt;Version: 1.0.0&lt;/p&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejsII/NodejsIIDay01.png\">\n<hr>\n<h3>課程簡介</h3>\n<ol>\n<li>課程內容\n<ul>\n<li>使用 Node/Express/Mongo 創建 Server Side Application</li>\n<li>很多 node modules/packages</li>\n<li>從手稿到專案部署</li>\n<li>2 個有一步步解說的深度專案</li>\n</ul>\n</li>\n<li>課程內容沒有的\n<ul>\n<li>沒有 Nodejs 簡介</li>\n<li>沒有簡單的 todo List 或 REST API</li>\n<li>不會只告訴你讓你自己線上部署你自己的應用</li>\n</ul>\n</li>\n<li>課程的先備知識\n<ul>\n<li>HTML/CSS/JavaScript</li>\n<li>基礎的 Node.js/Express 知識</li>\n<li>如果沒有 Node/Express/MongoDB 的知識，我會解說</li>\n</ul>\n</li>\n<li>課程可以學到的東西\n<ul>\n<li>如何從無到有包含部署製作一個 server-side 應用</li>\n<li>都是關於 Express 框架</li>\n<li>在本地工作和遠端 MongoDB 部署</li>\n<li>處理本地和 Google OAuth 認證</li>\n<li>在 Server 處理畫面和編排</li>\n<li>ES6 JavaScript 觀念</li>\n</ul>\n</li>\n<li>專案一：VidJot - 可以讓創作者註冊且寫下他們對下一個影片的想法\n<ul>\n<li>使用 Express、Mongoose、Passport、Bcrypt、Express-Session、Handlebars.js、Bootstrap 4 beta</li>\n</ul>\n</li>\n<li>專案二：StoryBooks - 社交網路，用來創建公開和私有的故事，使用者可以使用 Google OAuth 選擇允許或關閉留言\n<ul>\n<li>使用 Express、Mongoose、Passport、Google OAuth、Private/Public Stories、Helper Functions、Moment.js、Materialize CSS</li>\n</ul>\n</li>\n</ol>\n<h3>環境設定</h3>\n<h4>開發環境設定</h4>\n<ol>\n<li>VS code 設定檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;editor.fontSize&quot;: 26,</div><div class=\"line\">  &quot;terminal.integrated.fontSize&quot;: 26,</div><div class=\"line\">  &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;</div><div class=\"line\">  &quot;editor.wordWrap&quot;: &quot;on&quot;</div><div class=\"line\">  &quot;editor.tabSize&quot;: 2,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>什麼是 Node.js</h4>\n<ol>\n<li>什麼是 Node.js?\n<ul>\n<li>JavaScript runtime 使用 V8 JavaScript Engine，正是 Google 瀏覽器所使用的 Engine</li>\n<li>V8 Engine 用 C++ 寫的，用來幫助 JavaScript 編譯到非常快的機器</li>\n<li>允許我們在 Server 上面運行 JS (像是 PHP、Rails、Java…等等)</li>\n<li>跨平台執行 (Windows、Linux、MacOS)</li>\n<li>用來建立非常快速且可規模化的 Real-time Application，因為他有非同步式的特色</li>\n<li>使用事件驅動，非阻塞式 I/O model</li>\n</ul>\n</li>\n<li>可以用 Node 做什麼？\n<ul>\n<li>用 filesystem 操作檔案</li>\n<li>建立網頁伺服器，處理進來的 Http 請求和回傳回應，可以使用像是 express 的框架讓這件事情更簡單</li>\n<li>與資料庫連線 (MongoDB、MySQL、Postgres、Redis… 等等)</li>\n<li>強大的 APIs 和後端介面</li>\n<li>強大的 Server side apps 且可以讀取 views</li>\n</ul>\n</li>\n<li>Blocking Model vs. Non-Blocking\n<ul>\n<li>Blocking 要等事件完成才進行下一件事情，Non-Blocking 在事情完成前，先繼續做其它事情，等到事情完成會有 callback，然後回去執行 callback 的動作</li>\n</ul>\n</li>\n</ol>\n<h4>安裝和探索 Node.js</h4>\n<ol>\n<li>chrome 可以使用的語法\n<ul>\n<li><code>document</code></li>\n</ul>\n</li>\n<li>Node server 可以用的語法\n<ul>\n<li><code>global</code></li>\n<li><code>process.env.USER</code></li>\n</ul>\n</li>\n</ol>\n<h4>安裝本地 MongoDB</h4>\n<ol>\n<li><a href=\"https://www.mongodb.com/download-center?jmp=nav#community\" target=\"_blank\" rel=\"external\">下載 MongoDB</a></li>\n<li>安裝在 C 槽，在 mongodb 根目錄新增 data 的資料夾，在 data 的資料夾再新增 db 的資料夾。在 mongodb 根目錄新增 log，在 log 的資料夾新增檔案 <code>mongo.log</code></li>\n<li>用系統管理員打開 cmd，跳到 mongodb bin 目錄，<code>cd c:/mongodb/bin</code></li>\n<li><code>mongod --directoryperdb --dbpath C:\\mongodb\\data\\db --logpath C:\\mongodb\\log\\mongo.log --logappend --rest --install</code></li>\n<li><code>net start MongoDB</code></li>\n<li><code>mongo</code></li>\n<li><code>show databases</code></li>\n</ol>\n<h4>註冊 mlab</h4>\n<ol>\n<li><a href=\"https://mlab.com/\" target=\"_blank\" rel=\"external\">mLab</a></li>\n</ol>\n<h4>註冊 Heroku</h4>\n<ol>\n<li><a href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"external\">Heroku</a></li>\n</ol>\n<h3>VidJot Project</h3>\n<h4>介紹</h4>\n<ol>\n<li><a href=\"http://www.vidjot.tech/\" target=\"_blank\" rel=\"external\">VidJot</a></li>\n</ol>\n<h4>安裝和啟動 Express</h4>\n<ol>\n<li><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">Express 官方網站</a></li>\n<li>設定 npm 預設值\n<ul>\n<li><code>npm set init-author-name=&quot;Vincent Adler&quot;</code></li>\n<li><code>npm set init-license=&quot;MIT&quot;</code></li>\n</ul>\n</li>\n<li>開新專案 <code>npm init</code>\n<ul>\n<li><code>description: App to create video ideas</code></li>\n<li><code>entry point: (index.js) app.js</code></li>\n</ul>\n</li>\n<li>安裝 express <code>npm install express --save</code></li>\n<li>在根目錄新增 app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">const app = express();</div><div class=\"line\"></div><div class=\"line\">const port = 5000;</div><div class=\"line\"></div><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server started on Port $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>基礎路由和 Nodemon</h4>\n<ol>\n<li>在 app.js 新增路由</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Index Route</div><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;INDEX&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// About Route</div><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;ABOUT&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安裝 nodemon <code>npm install -g nodemon</code></li>\n<li>檢查 npm 套件安裝位置 <code>npm root -g</code></li>\n<li>使用 nodemon <code>nodemon</code></li>\n</ol>\n<h4>Express Middleware</h4>\n<ol>\n<li><a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"external\">Middleware 簡介</a></li>\n<li>在 app.js 新增 middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(function(req, res, next) &#123;</div><div class=\"line\">    console.log(Date.now());</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 middleware 放入 <a href=\"http://req.name\" target=\"_blank\" rel=\"external\">req.name</a> 可以在 app.get 取得</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(function(req, res, next) &#123;</div><div class=\"line\">    req.name = &apos;Vincent Adler&apos;;</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(req.name);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>使用模板</h4>\n<ol>\n<li><a href=\"http://handlebarsjs.com/\" target=\"_blank\" rel=\"external\">handlebars.js 官方網站</a></li>\n<li><a href=\"https://github.com/ericf/express-handlebars\" target=\"_blank\" rel=\"external\">在 express 使用 handlebars</a></li>\n<li><a href=\"https://github.com/mde/ejs\" target=\"_blank\" rel=\"external\">EJS</a></li>\n<li>安裝 express-handlebars <code>npm install express-handlebars --save</code></li>\n<li>引入 express-handlebars<br>\n<code>const exphbs = require('express-handlebars');</code></li>\n<li>新增 handlebars middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.engine(&apos;handlebars&apos;, exphbs(&#123;</div><div class=\"line\">    defaultLayout: &apos;main&apos;</div><div class=\"line\">&#125;));</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;handlebars&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增 views/index.handlebars <code>&lt;h1&gt;Welcome&lt;/h1&gt;</code></li>\n<li>新增 views/layouts/main.handlebars，<code>{{{body}}}</code> 會讀出被 render 的 view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot;</div><div class=\"line\">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;VidJot&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &#123;&#123;&#123;body&#125;&#125;&#125;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>把 app.js route 的 send 都改成 render</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;index&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;about&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>新增 views/about.handlebars <code>&lt;h1&gt;About&lt;/h1&gt;</code></li>\n<li>讓讀取的資料變成動態</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    const title = &apos;Welcome&apos;;</div><div class=\"line\">    res.render(&apos;index&apos;, &#123;</div><div class=\"line\">        title: title</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>修改 views/index.handlebars <code>&lt;h1&gt;{{title}}&lt;/h1&gt;</code></li>\n</ol>\n<h4>Bootstrap 和 Partials</h4>\n<ol>\n<li><a href=\"http://getbootstrap.com/docs/4.0/getting-started/introduction/\" target=\"_blank\" rel=\"external\">取得 Bootstrap 的 CDN</a></li>\n<li>在 views/layouts/main.handlebars 引入 CDN</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// CSS</div><div class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css&quot; integrity=&quot;sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb&quot; crossorigin=&quot;anonymous&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">// JS</div><div class=\"line\">&lt;script src=&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot; integrity=&quot;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js&quot; integrity=&quot;sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js&quot; integrity=&quot;sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 views/layouts/main.handlebars，body 用 container 包住</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &#123;&#123;&#123;body&#125;&#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 views/partials/_navbar.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;nav class=&quot;navbar navbar-expand-sm navbar-dark bg-primary&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;VidJot&lt;/a&gt;</div><div class=\"line\">        &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarNav&quot; aria-controls=&quot;navbarNav&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;</div><div class=\"line\">            &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">        &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNav&quot;&gt;</div><div class=\"line\">            &lt;ul class=&quot;navbar-nav&quot;&gt;</div><div class=\"line\">                &lt;li class=&quot;nav-item&quot;&gt;</div><div class=\"line\">                    &lt;a class=&quot;nav-link&quot; href=&quot;/&quot;&gt;Home&lt;/a&gt;</div><div class=\"line\">                &lt;/li&gt;</div><div class=\"line\">                &lt;li class=&quot;nav-item&quot;&gt;</div><div class=\"line\">                    &lt;a class=&quot;nav-link&quot; href=&quot;/about&quot;&gt;About&lt;/a&gt;</div><div class=\"line\">                &lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 views/layouts/main.handlebars 引入 navbar partial <code>{{> _navbar}}</code></li>\n<li>包裝一下 views/index.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;jumbotron text-center&quot;&gt;</div><div class=\"line\">    &lt;h1 class=&quot;display-3&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">    &lt;p class=&quot;lead&quot;&gt;Jot down ideas for your next YouTube Videos&lt;/p&gt;</div><div class=\"line\">    &lt;a href=&quot;/ideas/add&quot; class=&quot;btn btn-dark btn-lg&quot;&gt;Add Video Idea&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>包裝一下 views/about.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;About&lt;/h1&gt;</div><div class=\"line\">&lt;p&gt;This is a Node/Express app for jotting down ideas for future Youtube videos&lt;/p&gt;</div><div class=\"line\">&lt;p&gt;Version: 1.0.0&lt;/p&gt;</div></pre></td></tr></table></figure>"},{"title":"Nodejs II 快速學習自我挑戰 Day2","thumbnail":["/images/learning/nodejsII/NodejsIIDay02.png"],"date":"2017-11-10T09:32:45.000Z","_content":"<img src=\"/images/learning/nodejsII/NodejsIIDay02.png\">\n\n***\n### Mongoose 和本地端 MongoDB\n#### 安裝 Mongoose 和連接\n1. 安裝 Mongoose `npm install --save mongoose`\n2. [Mongoose 官方網站](http://mongoosejs.com/)\n3. 在 app.js 新增 mongoose connect 連接到本地端伺服器，記得要使用 useMongoClient，不然會出現奇怪的錯誤，如果連接成功，顯示 MongoDB connected，失敗則出現錯誤\n```\nmongoose.connect('mongodb://localhost/vidjot-dev', {\n    useMongoClient: true\n})\n    .then(() => console.log('MongoDB connected...'))\n    .catch(err => console.log(err));\n```\n4. 加入這一行避免 deprecation 警告出現，把預設已經 deprecated 的 library 用 global promise 取代\n`mongoose.Promise = global.Promise;`\n#### 建立理想的 Model\n1. 新增 models/Idea.js，新增 ideas 的 model\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\n// Create Schema\nconst IdeaSchema = new Schema({\n    title: {\n        type: String,\n        required: true,\n    },\n    details: {\n        type: String,\n        required: true\n    },\n    data: {\n        type: Date,\n        default: Date.now\n    }\n});\n\nmongoose.model('ideas', IdeaSchema);\n```\n2. 在 app.js 讀取 models\n```\nrequire('./models/Idea');\nconst Idea = mongoose.model('ideas');\n```\n#### 新增 Idea Form\n1. 在 views/partials/_navbar.handlebars 加入右側選單，直接加在左側選單的 ul 下面\n```\n<ul class=\"navbar-nav ml-auto\">\n    <li class=\"nav-item dropdown\">\n        <a href=\"#\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" id=\"navbarDropdownMenuLink\">Video Ideas</a>\n        <div class=\"dropdown-menu\">\n            <a href=\"/ideas\" class=\"dropdown-item\">Ideas</a>\n            <a href=\"/ideas/add\" class=\"dropdown-item\">Add Ideas</a>\n        </div>\n    </li>\n</ul>\n```\n2. 在 app.js 新增 ideas/add 的路由\n```\napp.get('/ideas/add', (req, res) => {\n    res.render('ideas/add');\n});\n```\n3. 新增 views/ideas/add.handlebars\n```\n<div class=\"card card-body\">\n    <h3>Video Idea</h3>\n    <form action=\"/ideas\" method=\"post\">\n        <div class=\"form-group\">\n            <label for=\"title\">Title</label>\n            <input type=\"text\" class=\"form-control\" name=\"title\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"details\">Details</label>\n            <textarea class=\"form-control\" name=\"details\"></textarea>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form>\n</div>\n```\n#### 伺服端的 Form Validation\n1. [Body-Parser 外掛](https://github.com/expressjs/body-parser)\n2. 安裝 body-parser `npm install body-parser --save`\n3. 在 app.js 引入 body-parser `const bodyParser = require('body-parser');`\n4. 在 app.js 呼叫 Body parser middleware\n```\n// Body parser middleware\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(bodyParser.json())\n```\n5. Server Side 處理表單，如果沒有資料，回傳 text，並且將本來有輸入的值放回去，最後，如果全部都有資料則 passed\n```\n// Process Form\napp.post('/ideas', (req, res) => {\n    let errors = [];\n\n    if(!req.body.title) {\n        errors.push({text:'Please add a title'});\n    }\n    if(!req.body.details) {\n        errors.push({text:'Please add some details'});\n    }\n\n    if(errors.length > 0){\n        res.render('ideas/add', {\n            errors: errors,\n            title: req.body.title,\n            details: req.body.details\n        })\n    } else {\n        res.send('passed');\n    }\n});\n```\n6. 在 views/ideas/add.handlebars 新增錯誤訊息，將剛剛回傳的 errors 放進來\n```\n{{#each errors}}\n    <div class=\"alert alert-danger\">{{text}}</div>\n{{else}}\n\n{{/each}}\n```\n7. 在 views/ideas/add.handlebars 的表單輸入加入 required，可使用前端認證\n```\n<input type=\"text\" class=\"form-control\" name=\"title\" required>\n<textarea class=\"form-control\" name=\"details\" required></textarea>\n```\n#### 將 Idea 存到 MongoDB\n1. 在 app.js 確認沒有錯誤的話則寫入資料庫\n```\n} else {\n    const newUser = {\n        title: req.body.title,\n        details: req.body.details,\n    }\n    new Idea(newUser)\n        .save()\n        .then(idea => {\n            res.redirect('/ideas');\n        })\n}\n```\n2. 進入 mongo 模式 `mongo`\n3. 查詢資料庫\n    - 顯示資料庫 `show dbs`\n    - 進入資料庫 `use vidjot-dev`\n    - 顯示資料庫內的 collections `show collections`\n    - 讀取指定 collection 的內容 `db.ideas.find();`\n#### 從 MongoDB 讀取 Ideas\n1. 在 app.js 新增 ideas 的路由，然後傳送資料過去，且排列順序按照 date 降冪排列\n```\napp.get('/ideas', (req, res) => {\n    Idea.find({})\n        .sort({date: 'desc'})\n        .then(ideas => {\n            res.render('ideas/index', {\n                ideas: ideas\n            });\n        });\n});\n```\n2. 新增 views/ideas/index.handlebars 並用 each 讀出資料\n```\n{{#each ideas}}\n    <div class=\"card card-body mb-2\">\n        <h4>{{title}}</h4>\n        <p>{{details}}</p>\n    </div>\n{{else}}\n    <p>No video ideas listed</p>\n{{/each}}\n```\n#### 編輯 Idea Form\n1. 在 app.js 新增編輯 Idea Form 的路由，只找尋一個然後傳過去下個頁面\n```\n// Edit Idea Form\napp.get('/ideas/edit/:id', (req, res) => {\n    Idea.findOne({\n        _id: req.params.id,\n    })\n    .then(idea => {\n        res.render('ideas/edit', {\n            idea: idea\n        });\n    });\n});\n```\n2. 在 views/ideas/index.handlebars 新增一個 Edit 的連結\n`<a class=\"btn btn-dark btn-block\" href=\"/ideas/edit/{{id}}\">Edit</a>`\n3. 從 views/ideas/add.handlebars 複製新增到 views/ideas/edit.handlebars，且將值放進去\n```\n{{#each errors}}\n    <div class=\"alert alert-danger\">{{text}}</div>\n{{else}}\n\n{{/each}}\n\n<div class=\"card card-body\">\n    <h3>Edit Video Idea</h3>\n    <form action=\"/ideas\" method=\"post\">\n        <div class=\"form-group\">\n            <label for=\"title\">Title</label>\n            <input type=\"text\" class=\"form-control\" name=\"title\" value=\"{{idea.title}}\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"details\">Details</label>\n            <textarea class=\"form-control\" name=\"details\" required>{{idea.details}}</textarea>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form>\n</div>\n```\n#### 更新 Idea Data\n1. [Method Override](https://github.com/expressjs/method-override)\n2. 安裝 method-override `npm install method-override --save`\n3. 在 app.js 引入 `const methodOverride = require('method-override');`\n4. 在 app.js 新增 method-override 的 middleware `app.use(methodOverride('_method'));`\n5. 修改 views/ideas/edit.handlebars 的表單 action 且新增 hidden input\n```\n<form action=\"/ideas/{{idea.id}}?_method=PUT\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n```\n6. 在 app.js 更新表單，然後將值存到資料庫\n```\n// Edit Form process\napp.put('/ideas/:id', (req, res) => {\n    Idea.findOne({\n        _id: req.params.id\n    })\n    .then(idea => {\n        // new values\n        idea.title = req.body.title;\n        idea.details = req.body.details;\n\n        idea.save()\n            .then(idea => {\n                res.redirect('/ideas');\n            })\n    });\n});\n```\n#### 移除 Idea Data\n1. 在 views/ideas/index.handlebars 新增 Delete 按鈕\n```\n<form action=\"/ideas/{{id}}?_method=DELETE\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"DELETE\">\n    <input type=\"submit\" class=\"btn btn-danger btn-block\" value=\"Delete\">\n</form>\n```\n2. 在 app.js 新增刪除路由，用 remove 直接把檔案從資料庫刪除\n```\n// Delete Idea\napp.delete('/ideas/:id', (req, res) => {\n    Idea.remove({_id: req.params.id})\n        .then(() => {\n            res.redirect('/ideas');\n        });\n});\n```\n#### Flashing Messaging\n1. [Express Session](https://www.npmjs.com/package/express-session)\n2. [Connect Flash](https://github.com/jaredhanson/connect-flash)\n3. 安裝 Express Session 和 Connect Flash `npm install express-session connect-flash --save`\n4. 在 app.js 引入 Express Session 和 Connect Flash\n```\nconst flash = require('connect-flash');\nconst session = require('express-session');\n```\n5. 在 app.js 把 Express Session 和 Connect Flash 的 middleware\n```\n// Express session middleware\napp.use(session({\n    secret: 'secret',\n    resave: true,\n    saveUninitialized: true\n}));\n\napp.use(flash());\n```\n6. 在 app.js 把區域變數變成全域變數，這樣訊息就可以在 handlebars 的頁面顯示\n```\n// Global variables\napp.use(function(req, res, next) {\n    res.locals.success_msg = req.flash('success_msg');\n    res.locals.error_msg = req.flash('error_msg');\n    res.locals.error = req.flash('error');\n    next();\n});\n```\n7. app.js 在所有路由跳轉之前，送出 flash 訊息\n`req.flash('success_msg', 'Video Idea added');`\n`req.flash('success_msg', 'Video Idea updated');`\n`req.flash('success_msg', 'Video Idea removed');`\n8. 新增 views/partials/_msg.handlebars\n```\n{{#if success_msg}}\n    <div class=\"alert alert-success\">{{success_msg}}</div>\n{{/if}}\n\n{{#if error_msg}}\n    <div class=\"alert alert-danger\">{{error_msg}}</div>\n{{/if}}\n```\n9. 在 views/layouts/main.handlebars 的 `{{\"{{body\"}}}}` 上方引入 `{{\"{{> _msg\"}}}}`","source":"_posts/Nodejs-II-快速學習自我挑戰-Day2.md","raw":"---\ntitle: Nodejs II 快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/nodejsII/NodejsIIDay02.png\ndate: 2017-11-10 17:32:45\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejsII/NodejsIIDay02.png\">\n\n***\n### Mongoose 和本地端 MongoDB\n#### 安裝 Mongoose 和連接\n1. 安裝 Mongoose `npm install --save mongoose`\n2. [Mongoose 官方網站](http://mongoosejs.com/)\n3. 在 app.js 新增 mongoose connect 連接到本地端伺服器，記得要使用 useMongoClient，不然會出現奇怪的錯誤，如果連接成功，顯示 MongoDB connected，失敗則出現錯誤\n```\nmongoose.connect('mongodb://localhost/vidjot-dev', {\n    useMongoClient: true\n})\n    .then(() => console.log('MongoDB connected...'))\n    .catch(err => console.log(err));\n```\n4. 加入這一行避免 deprecation 警告出現，把預設已經 deprecated 的 library 用 global promise 取代\n`mongoose.Promise = global.Promise;`\n#### 建立理想的 Model\n1. 新增 models/Idea.js，新增 ideas 的 model\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\n// Create Schema\nconst IdeaSchema = new Schema({\n    title: {\n        type: String,\n        required: true,\n    },\n    details: {\n        type: String,\n        required: true\n    },\n    data: {\n        type: Date,\n        default: Date.now\n    }\n});\n\nmongoose.model('ideas', IdeaSchema);\n```\n2. 在 app.js 讀取 models\n```\nrequire('./models/Idea');\nconst Idea = mongoose.model('ideas');\n```\n#### 新增 Idea Form\n1. 在 views/partials/_navbar.handlebars 加入右側選單，直接加在左側選單的 ul 下面\n```\n<ul class=\"navbar-nav ml-auto\">\n    <li class=\"nav-item dropdown\">\n        <a href=\"#\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" id=\"navbarDropdownMenuLink\">Video Ideas</a>\n        <div class=\"dropdown-menu\">\n            <a href=\"/ideas\" class=\"dropdown-item\">Ideas</a>\n            <a href=\"/ideas/add\" class=\"dropdown-item\">Add Ideas</a>\n        </div>\n    </li>\n</ul>\n```\n2. 在 app.js 新增 ideas/add 的路由\n```\napp.get('/ideas/add', (req, res) => {\n    res.render('ideas/add');\n});\n```\n3. 新增 views/ideas/add.handlebars\n```\n<div class=\"card card-body\">\n    <h3>Video Idea</h3>\n    <form action=\"/ideas\" method=\"post\">\n        <div class=\"form-group\">\n            <label for=\"title\">Title</label>\n            <input type=\"text\" class=\"form-control\" name=\"title\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"details\">Details</label>\n            <textarea class=\"form-control\" name=\"details\"></textarea>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form>\n</div>\n```\n#### 伺服端的 Form Validation\n1. [Body-Parser 外掛](https://github.com/expressjs/body-parser)\n2. 安裝 body-parser `npm install body-parser --save`\n3. 在 app.js 引入 body-parser `const bodyParser = require('body-parser');`\n4. 在 app.js 呼叫 Body parser middleware\n```\n// Body parser middleware\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(bodyParser.json())\n```\n5. Server Side 處理表單，如果沒有資料，回傳 text，並且將本來有輸入的值放回去，最後，如果全部都有資料則 passed\n```\n// Process Form\napp.post('/ideas', (req, res) => {\n    let errors = [];\n\n    if(!req.body.title) {\n        errors.push({text:'Please add a title'});\n    }\n    if(!req.body.details) {\n        errors.push({text:'Please add some details'});\n    }\n\n    if(errors.length > 0){\n        res.render('ideas/add', {\n            errors: errors,\n            title: req.body.title,\n            details: req.body.details\n        })\n    } else {\n        res.send('passed');\n    }\n});\n```\n6. 在 views/ideas/add.handlebars 新增錯誤訊息，將剛剛回傳的 errors 放進來\n```\n{{#each errors}}\n    <div class=\"alert alert-danger\">{{text}}</div>\n{{else}}\n\n{{/each}}\n```\n7. 在 views/ideas/add.handlebars 的表單輸入加入 required，可使用前端認證\n```\n<input type=\"text\" class=\"form-control\" name=\"title\" required>\n<textarea class=\"form-control\" name=\"details\" required></textarea>\n```\n#### 將 Idea 存到 MongoDB\n1. 在 app.js 確認沒有錯誤的話則寫入資料庫\n```\n} else {\n    const newUser = {\n        title: req.body.title,\n        details: req.body.details,\n    }\n    new Idea(newUser)\n        .save()\n        .then(idea => {\n            res.redirect('/ideas');\n        })\n}\n```\n2. 進入 mongo 模式 `mongo`\n3. 查詢資料庫\n    - 顯示資料庫 `show dbs`\n    - 進入資料庫 `use vidjot-dev`\n    - 顯示資料庫內的 collections `show collections`\n    - 讀取指定 collection 的內容 `db.ideas.find();`\n#### 從 MongoDB 讀取 Ideas\n1. 在 app.js 新增 ideas 的路由，然後傳送資料過去，且排列順序按照 date 降冪排列\n```\napp.get('/ideas', (req, res) => {\n    Idea.find({})\n        .sort({date: 'desc'})\n        .then(ideas => {\n            res.render('ideas/index', {\n                ideas: ideas\n            });\n        });\n});\n```\n2. 新增 views/ideas/index.handlebars 並用 each 讀出資料\n```\n{{#each ideas}}\n    <div class=\"card card-body mb-2\">\n        <h4>{{title}}</h4>\n        <p>{{details}}</p>\n    </div>\n{{else}}\n    <p>No video ideas listed</p>\n{{/each}}\n```\n#### 編輯 Idea Form\n1. 在 app.js 新增編輯 Idea Form 的路由，只找尋一個然後傳過去下個頁面\n```\n// Edit Idea Form\napp.get('/ideas/edit/:id', (req, res) => {\n    Idea.findOne({\n        _id: req.params.id,\n    })\n    .then(idea => {\n        res.render('ideas/edit', {\n            idea: idea\n        });\n    });\n});\n```\n2. 在 views/ideas/index.handlebars 新增一個 Edit 的連結\n`<a class=\"btn btn-dark btn-block\" href=\"/ideas/edit/{{id}}\">Edit</a>`\n3. 從 views/ideas/add.handlebars 複製新增到 views/ideas/edit.handlebars，且將值放進去\n```\n{{#each errors}}\n    <div class=\"alert alert-danger\">{{text}}</div>\n{{else}}\n\n{{/each}}\n\n<div class=\"card card-body\">\n    <h3>Edit Video Idea</h3>\n    <form action=\"/ideas\" method=\"post\">\n        <div class=\"form-group\">\n            <label for=\"title\">Title</label>\n            <input type=\"text\" class=\"form-control\" name=\"title\" value=\"{{idea.title}}\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"details\">Details</label>\n            <textarea class=\"form-control\" name=\"details\" required>{{idea.details}}</textarea>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form>\n</div>\n```\n#### 更新 Idea Data\n1. [Method Override](https://github.com/expressjs/method-override)\n2. 安裝 method-override `npm install method-override --save`\n3. 在 app.js 引入 `const methodOverride = require('method-override');`\n4. 在 app.js 新增 method-override 的 middleware `app.use(methodOverride('_method'));`\n5. 修改 views/ideas/edit.handlebars 的表單 action 且新增 hidden input\n```\n<form action=\"/ideas/{{idea.id}}?_method=PUT\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n```\n6. 在 app.js 更新表單，然後將值存到資料庫\n```\n// Edit Form process\napp.put('/ideas/:id', (req, res) => {\n    Idea.findOne({\n        _id: req.params.id\n    })\n    .then(idea => {\n        // new values\n        idea.title = req.body.title;\n        idea.details = req.body.details;\n\n        idea.save()\n            .then(idea => {\n                res.redirect('/ideas');\n            })\n    });\n});\n```\n#### 移除 Idea Data\n1. 在 views/ideas/index.handlebars 新增 Delete 按鈕\n```\n<form action=\"/ideas/{{id}}?_method=DELETE\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"DELETE\">\n    <input type=\"submit\" class=\"btn btn-danger btn-block\" value=\"Delete\">\n</form>\n```\n2. 在 app.js 新增刪除路由，用 remove 直接把檔案從資料庫刪除\n```\n// Delete Idea\napp.delete('/ideas/:id', (req, res) => {\n    Idea.remove({_id: req.params.id})\n        .then(() => {\n            res.redirect('/ideas');\n        });\n});\n```\n#### Flashing Messaging\n1. [Express Session](https://www.npmjs.com/package/express-session)\n2. [Connect Flash](https://github.com/jaredhanson/connect-flash)\n3. 安裝 Express Session 和 Connect Flash `npm install express-session connect-flash --save`\n4. 在 app.js 引入 Express Session 和 Connect Flash\n```\nconst flash = require('connect-flash');\nconst session = require('express-session');\n```\n5. 在 app.js 把 Express Session 和 Connect Flash 的 middleware\n```\n// Express session middleware\napp.use(session({\n    secret: 'secret',\n    resave: true,\n    saveUninitialized: true\n}));\n\napp.use(flash());\n```\n6. 在 app.js 把區域變數變成全域變數，這樣訊息就可以在 handlebars 的頁面顯示\n```\n// Global variables\napp.use(function(req, res, next) {\n    res.locals.success_msg = req.flash('success_msg');\n    res.locals.error_msg = req.flash('error_msg');\n    res.locals.error = req.flash('error');\n    next();\n});\n```\n7. app.js 在所有路由跳轉之前，送出 flash 訊息\n`req.flash('success_msg', 'Video Idea added');`\n`req.flash('success_msg', 'Video Idea updated');`\n`req.flash('success_msg', 'Video Idea removed');`\n8. 新增 views/partials/_msg.handlebars\n```\n{{#if success_msg}}\n    <div class=\"alert alert-success\">{{success_msg}}</div>\n{{/if}}\n\n{{#if error_msg}}\n    <div class=\"alert alert-danger\">{{error_msg}}</div>\n{{/if}}\n```\n9. 在 views/layouts/main.handlebars 的 `{{\"{{body\"}}}}` 上方引入 `{{\"{{> _msg\"}}}}`","slug":"Nodejs-II-快速學習自我挑戰-Day2","published":1,"updated":"2017-11-19T04:02:50.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxd003a7ifaq4c4bz5g","content":"<img src=\"/images/learning/nodejsII/NodejsIIDay02.png\">\n<hr>\n<h3>Mongoose 和本地端 MongoDB</h3>\n<h4>安裝 Mongoose 和連接</h4>\n<ol>\n<li>安裝 Mongoose <code>npm install --save mongoose</code></li>\n<li><a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"external\">Mongoose 官方網站</a></li>\n<li>在 app.js 新增 mongoose connect 連接到本地端伺服器，記得要使用 useMongoClient，不然會出現奇怪的錯誤，如果連接成功，顯示 MongoDB connected，失敗則出現錯誤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoose.connect(&apos;mongodb://localhost/vidjot-dev&apos;, &#123;</div><div class=\"line\">    useMongoClient: true</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(() =&gt; console.log(&apos;MongoDB connected...&apos;))</div><div class=\"line\">    .catch(err =&gt; console.log(err));</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>加入這一行避免 deprecation 警告出現，把預設已經 deprecated 的 library 用 global promise 取代<br>\n<code>mongoose.Promise = global.Promise;</code></li>\n</ol>\n<h4>建立理想的 Model</h4>\n<ol>\n<li>新增 models/Idea.js，新增 ideas 的 model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\">const Schema = mongoose.Schema;</div><div class=\"line\"></div><div class=\"line\">// Create Schema</div><div class=\"line\">const IdeaSchema = new Schema(&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    details: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true</div><div class=\"line\">    &#125;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">        type: Date,</div><div class=\"line\">        default: Date.now</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">mongoose.model(&apos;ideas&apos;, IdeaSchema);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 讀取 models</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;./models/Idea&apos;);</div><div class=\"line\">const Idea = mongoose.model(&apos;ideas&apos;);</div></pre></td></tr></table></figure>\n<h4>新增 Idea Form</h4>\n<ol>\n<li>在 views/partials/_navbar.handlebars 加入右側選單，直接加在左側選單的 ul 下面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul class=&quot;navbar-nav ml-auto&quot;&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item dropdown&quot;&gt;</div><div class=\"line\">        &lt;a href=&quot;#&quot; class=&quot;nav-link dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; id=&quot;navbarDropdownMenuLink&quot;&gt;Video Ideas&lt;/a&gt;</div><div class=\"line\">        &lt;div class=&quot;dropdown-menu&quot;&gt;</div><div class=\"line\">            &lt;a href=&quot;/ideas&quot; class=&quot;dropdown-item&quot;&gt;Ideas&lt;/a&gt;</div><div class=\"line\">            &lt;a href=&quot;/ideas/add&quot; class=&quot;dropdown-item&quot;&gt;Add Ideas&lt;/a&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 新增 ideas/add 的路由</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/ideas/add&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;ideas/add&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 views/ideas/add.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;card card-body&quot;&gt;</div><div class=\"line\">    &lt;h3&gt;Video Idea&lt;/h3&gt;</div><div class=\"line\">    &lt;form action=&quot;/ideas&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;title&quot;&gt;Title&lt;/label&gt;</div><div class=\"line\">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;title&quot;&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;details&quot;&gt;Details&lt;/label&gt;</div><div class=\"line\">            &lt;textarea class=&quot;form-control&quot; name=&quot;details&quot;&gt;&lt;/textarea&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>伺服端的 Form Validation</h4>\n<ol>\n<li><a href=\"https://github.com/expressjs/body-parser\" target=\"_blank\" rel=\"external\">Body-Parser 外掛</a></li>\n<li>安裝 body-parser <code>npm install body-parser --save</code></li>\n<li>在 app.js 引入 body-parser <code>const bodyParser = require('body-parser');</code></li>\n<li>在 app.js 呼叫 Body parser middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Body parser middleware</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</div><div class=\"line\">app.use(bodyParser.json())</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>Server Side 處理表單，如果沒有資料，回傳 text，並且將本來有輸入的值放回去，最後，如果全部都有資料則 passed</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Process Form</div><div class=\"line\">app.post(&apos;/ideas&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let errors = [];</div><div class=\"line\"></div><div class=\"line\">    if(!req.body.title) &#123;</div><div class=\"line\">        errors.push(&#123;text:&apos;Please add a title&apos;&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(!req.body.details) &#123;</div><div class=\"line\">        errors.push(&#123;text:&apos;Please add some details&apos;&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(errors.length &gt; 0)&#123;</div><div class=\"line\">        res.render(&apos;ideas/add&apos;, &#123;</div><div class=\"line\">            errors: errors,</div><div class=\"line\">            title: req.body.title,</div><div class=\"line\">            details: req.body.details</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        res.send(&apos;passed&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 views/ideas/add.handlebars 新增錯誤訊息，將剛剛回傳的 errors 放進來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#each errors&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;else&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 views/ideas/add.handlebars 的表單輸入加入 required，可使用前端認證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;title&quot; required&gt;</div><div class=\"line\">&lt;textarea class=&quot;form-control&quot; name=&quot;details&quot; required&gt;&lt;/textarea&gt;</div></pre></td></tr></table></figure>\n<h4>將 Idea 存到 MongoDB</h4>\n<ol>\n<li>在 app.js 確認沒有錯誤的話則寫入資料庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    const newUser = &#123;</div><div class=\"line\">        title: req.body.title,</div><div class=\"line\">        details: req.body.details,</div><div class=\"line\">    &#125;</div><div class=\"line\">    new Idea(newUser)</div><div class=\"line\">        .save()</div><div class=\"line\">        .then(idea =&gt; &#123;</div><div class=\"line\">            res.redirect(&apos;/ideas&apos;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>進入 mongo 模式 <code>mongo</code></li>\n<li>查詢資料庫\n<ul>\n<li>顯示資料庫 <code>show dbs</code></li>\n<li>進入資料庫 <code>use vidjot-dev</code></li>\n<li>顯示資料庫內的 collections <code>show collections</code></li>\n<li>讀取指定 collection 的內容 <code>db.ideas.find();</code></li>\n</ul>\n</li>\n</ol>\n<h4>從 MongoDB 讀取 Ideas</h4>\n<ol>\n<li>在 app.js 新增 ideas 的路由，然後傳送資料過去，且排列順序按照 date 降冪排列</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/ideas&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.find(&#123;&#125;)</div><div class=\"line\">        .sort(&#123;date: &apos;desc&apos;&#125;)</div><div class=\"line\">        .then(ideas =&gt; &#123;</div><div class=\"line\">            res.render(&apos;ideas/index&apos;, &#123;</div><div class=\"line\">                ideas: ideas</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 views/ideas/index.handlebars 並用 each 讀出資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#each ideas&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;card card-body mb-2&quot;&gt;</div><div class=\"line\">        &lt;h4&gt;&#123;&#123;title&#125;&#125;&lt;/h4&gt;</div><div class=\"line\">        &lt;p&gt;&#123;&#123;details&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&#123;&#123;else&#125;&#125;</div><div class=\"line\">    &lt;p&gt;No video ideas listed&lt;/p&gt;</div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div></pre></td></tr></table></figure>\n<h4>編輯 Idea Form</h4>\n<ol>\n<li>在 app.js 新增編輯 Idea Form 的路由，只找尋一個然後傳過去下個頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Edit Idea Form</div><div class=\"line\">app.get(&apos;/ideas/edit/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.findOne(&#123;</div><div class=\"line\">        _id: req.params.id,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(idea =&gt; &#123;</div><div class=\"line\">        res.render(&apos;ideas/edit&apos;, &#123;</div><div class=\"line\">            idea: idea</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 views/ideas/index.handlebars 新增一個 Edit 的連結<br>\n<code>&lt;a class=&quot;btn btn-dark btn-block&quot; href=&quot;/ideas/edit/&quot;&gt;Edit&lt;/a&gt;</code></li>\n<li>從 views/ideas/add.handlebars 複製新增到 views/ideas/edit.handlebars，且將值放進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#each errors&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;else&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;card card-body&quot;&gt;</div><div class=\"line\">    &lt;h3&gt;Edit Video Idea&lt;/h3&gt;</div><div class=\"line\">    &lt;form action=&quot;/ideas&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;title&quot;&gt;Title&lt;/label&gt;</div><div class=\"line\">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;title&quot; value=&quot;&#123;&#123;idea.title&#125;&#125;&quot; required&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;details&quot;&gt;Details&lt;/label&gt;</div><div class=\"line\">            &lt;textarea class=&quot;form-control&quot; name=&quot;details&quot; required&gt;&#123;&#123;idea.details&#125;&#125;&lt;/textarea&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>更新 Idea Data</h4>\n<ol>\n<li><a href=\"https://github.com/expressjs/method-override\" target=\"_blank\" rel=\"external\">Method Override</a></li>\n<li>安裝 method-override <code>npm install method-override --save</code></li>\n<li>在 app.js 引入 <code>const methodOverride = require('method-override');</code></li>\n<li>在 app.js 新增 method-override 的 middleware <code>app.use(methodOverride('_method'));</code></li>\n<li>修改 views/ideas/edit.handlebars 的表單 action 且新增 hidden input</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;/ideas/&#123;&#123;idea.id&#125;&#125;?_method=PUT&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 app.js 更新表單，然後將值存到資料庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Edit Form process</div><div class=\"line\">app.put(&apos;/ideas/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.findOne(&#123;</div><div class=\"line\">        _id: req.params.id</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(idea =&gt; &#123;</div><div class=\"line\">        // new values</div><div class=\"line\">        idea.title = req.body.title;</div><div class=\"line\">        idea.details = req.body.details;</div><div class=\"line\"></div><div class=\"line\">        idea.save()</div><div class=\"line\">            .then(idea =&gt; &#123;</div><div class=\"line\">                res.redirect(&apos;/ideas&apos;);</div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>移除 Idea Data</h4>\n<ol>\n<li>在 views/ideas/index.handlebars 新增 Delete 按鈕</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;/ideas/&#123;&#123;id&#125;&#125;?_method=DELETE&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;submit&quot; class=&quot;btn btn-danger btn-block&quot; value=&quot;Delete&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 新增刪除路由，用 remove 直接把檔案從資料庫刪除</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Delete Idea</div><div class=\"line\">app.delete(&apos;/ideas/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.remove(&#123;_id: req.params.id&#125;)</div><div class=\"line\">        .then(() =&gt; &#123;</div><div class=\"line\">            res.redirect(&apos;/ideas&apos;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Flashing Messaging</h4>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/express-session\" target=\"_blank\" rel=\"external\">Express Session</a></li>\n<li><a href=\"https://github.com/jaredhanson/connect-flash\" target=\"_blank\" rel=\"external\">Connect Flash</a></li>\n<li>安裝 Express Session 和 Connect Flash <code>npm install express-session connect-flash --save</code></li>\n<li>在 app.js 引入 Express Session 和 Connect Flash</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">const flash = require(&apos;connect-flash&apos;);</div><div class=\"line\">const session = require(&apos;express-session&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 app.js 把 Express Session 和 Connect Flash 的 middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Express session middleware</div><div class=\"line\">app.use(session(&#123;</div><div class=\"line\">    secret: &apos;secret&apos;,</div><div class=\"line\">    resave: true,</div><div class=\"line\">    saveUninitialized: true</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">app.use(flash());</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 app.js 把區域變數變成全域變數，這樣訊息就可以在 handlebars 的頁面顯示</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Global variables</div><div class=\"line\">app.use(function(req, res, next) &#123;</div><div class=\"line\">    res.locals.success_msg = req.flash(&apos;success_msg&apos;);</div><div class=\"line\">    res.locals.error_msg = req.flash(&apos;error_msg&apos;);</div><div class=\"line\">    res.locals.error = req.flash(&apos;error&apos;);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>app.js 在所有路由跳轉之前，送出 flash 訊息<br>\n<code>req.flash('success_msg', 'Video Idea added');</code><br>\n<code>req.flash('success_msg', 'Video Idea updated');</code><br>\n<code>req.flash('success_msg', 'Video Idea removed');</code></li>\n<li>新增 views/partials/_msg.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#if success_msg&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-success&quot;&gt;&#123;&#123;success_msg&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;#if error_msg&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;&#123;&#123;error_msg&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 views/layouts/main.handlebars 的 <code>{{body}}</code> 上方引入 <code>{{> _msg}}</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejsII/NodejsIIDay02.png\">\n<hr>\n<h3>Mongoose 和本地端 MongoDB</h3>\n<h4>安裝 Mongoose 和連接</h4>\n<ol>\n<li>安裝 Mongoose <code>npm install --save mongoose</code></li>\n<li><a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"external\">Mongoose 官方網站</a></li>\n<li>在 app.js 新增 mongoose connect 連接到本地端伺服器，記得要使用 useMongoClient，不然會出現奇怪的錯誤，如果連接成功，顯示 MongoDB connected，失敗則出現錯誤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoose.connect(&apos;mongodb://localhost/vidjot-dev&apos;, &#123;</div><div class=\"line\">    useMongoClient: true</div><div class=\"line\">&#125;)</div><div class=\"line\">    .then(() =&gt; console.log(&apos;MongoDB connected...&apos;))</div><div class=\"line\">    .catch(err =&gt; console.log(err));</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>加入這一行避免 deprecation 警告出現，把預設已經 deprecated 的 library 用 global promise 取代<br>\n<code>mongoose.Promise = global.Promise;</code></li>\n</ol>\n<h4>建立理想的 Model</h4>\n<ol>\n<li>新增 models/Idea.js，新增 ideas 的 model</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\">const Schema = mongoose.Schema;</div><div class=\"line\"></div><div class=\"line\">// Create Schema</div><div class=\"line\">const IdeaSchema = new Schema(&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    details: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true</div><div class=\"line\">    &#125;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">        type: Date,</div><div class=\"line\">        default: Date.now</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">mongoose.model(&apos;ideas&apos;, IdeaSchema);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 讀取 models</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&apos;./models/Idea&apos;);</div><div class=\"line\">const Idea = mongoose.model(&apos;ideas&apos;);</div></pre></td></tr></table></figure>\n<h4>新增 Idea Form</h4>\n<ol>\n<li>在 views/partials/_navbar.handlebars 加入右側選單，直接加在左側選單的 ul 下面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul class=&quot;navbar-nav ml-auto&quot;&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item dropdown&quot;&gt;</div><div class=\"line\">        &lt;a href=&quot;#&quot; class=&quot;nav-link dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; id=&quot;navbarDropdownMenuLink&quot;&gt;Video Ideas&lt;/a&gt;</div><div class=\"line\">        &lt;div class=&quot;dropdown-menu&quot;&gt;</div><div class=\"line\">            &lt;a href=&quot;/ideas&quot; class=&quot;dropdown-item&quot;&gt;Ideas&lt;/a&gt;</div><div class=\"line\">            &lt;a href=&quot;/ideas/add&quot; class=&quot;dropdown-item&quot;&gt;Add Ideas&lt;/a&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 新增 ideas/add 的路由</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/ideas/add&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;ideas/add&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 views/ideas/add.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;card card-body&quot;&gt;</div><div class=\"line\">    &lt;h3&gt;Video Idea&lt;/h3&gt;</div><div class=\"line\">    &lt;form action=&quot;/ideas&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;title&quot;&gt;Title&lt;/label&gt;</div><div class=\"line\">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;title&quot;&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;details&quot;&gt;Details&lt;/label&gt;</div><div class=\"line\">            &lt;textarea class=&quot;form-control&quot; name=&quot;details&quot;&gt;&lt;/textarea&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>伺服端的 Form Validation</h4>\n<ol>\n<li><a href=\"https://github.com/expressjs/body-parser\" target=\"_blank\" rel=\"external\">Body-Parser 外掛</a></li>\n<li>安裝 body-parser <code>npm install body-parser --save</code></li>\n<li>在 app.js 引入 body-parser <code>const bodyParser = require('body-parser');</code></li>\n<li>在 app.js 呼叫 Body parser middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Body parser middleware</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</div><div class=\"line\">app.use(bodyParser.json())</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>Server Side 處理表單，如果沒有資料，回傳 text，並且將本來有輸入的值放回去，最後，如果全部都有資料則 passed</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Process Form</div><div class=\"line\">app.post(&apos;/ideas&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    let errors = [];</div><div class=\"line\"></div><div class=\"line\">    if(!req.body.title) &#123;</div><div class=\"line\">        errors.push(&#123;text:&apos;Please add a title&apos;&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(!req.body.details) &#123;</div><div class=\"line\">        errors.push(&#123;text:&apos;Please add some details&apos;&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(errors.length &gt; 0)&#123;</div><div class=\"line\">        res.render(&apos;ideas/add&apos;, &#123;</div><div class=\"line\">            errors: errors,</div><div class=\"line\">            title: req.body.title,</div><div class=\"line\">            details: req.body.details</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        res.send(&apos;passed&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 views/ideas/add.handlebars 新增錯誤訊息，將剛剛回傳的 errors 放進來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#each errors&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;else&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 views/ideas/add.handlebars 的表單輸入加入 required，可使用前端認證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;title&quot; required&gt;</div><div class=\"line\">&lt;textarea class=&quot;form-control&quot; name=&quot;details&quot; required&gt;&lt;/textarea&gt;</div></pre></td></tr></table></figure>\n<h4>將 Idea 存到 MongoDB</h4>\n<ol>\n<li>在 app.js 確認沒有錯誤的話則寫入資料庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    const newUser = &#123;</div><div class=\"line\">        title: req.body.title,</div><div class=\"line\">        details: req.body.details,</div><div class=\"line\">    &#125;</div><div class=\"line\">    new Idea(newUser)</div><div class=\"line\">        .save()</div><div class=\"line\">        .then(idea =&gt; &#123;</div><div class=\"line\">            res.redirect(&apos;/ideas&apos;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>進入 mongo 模式 <code>mongo</code></li>\n<li>查詢資料庫\n<ul>\n<li>顯示資料庫 <code>show dbs</code></li>\n<li>進入資料庫 <code>use vidjot-dev</code></li>\n<li>顯示資料庫內的 collections <code>show collections</code></li>\n<li>讀取指定 collection 的內容 <code>db.ideas.find();</code></li>\n</ul>\n</li>\n</ol>\n<h4>從 MongoDB 讀取 Ideas</h4>\n<ol>\n<li>在 app.js 新增 ideas 的路由，然後傳送資料過去，且排列順序按照 date 降冪排列</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/ideas&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.find(&#123;&#125;)</div><div class=\"line\">        .sort(&#123;date: &apos;desc&apos;&#125;)</div><div class=\"line\">        .then(ideas =&gt; &#123;</div><div class=\"line\">            res.render(&apos;ideas/index&apos;, &#123;</div><div class=\"line\">                ideas: ideas</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 views/ideas/index.handlebars 並用 each 讀出資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#each ideas&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;card card-body mb-2&quot;&gt;</div><div class=\"line\">        &lt;h4&gt;&#123;&#123;title&#125;&#125;&lt;/h4&gt;</div><div class=\"line\">        &lt;p&gt;&#123;&#123;details&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&#123;&#123;else&#125;&#125;</div><div class=\"line\">    &lt;p&gt;No video ideas listed&lt;/p&gt;</div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div></pre></td></tr></table></figure>\n<h4>編輯 Idea Form</h4>\n<ol>\n<li>在 app.js 新增編輯 Idea Form 的路由，只找尋一個然後傳過去下個頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Edit Idea Form</div><div class=\"line\">app.get(&apos;/ideas/edit/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.findOne(&#123;</div><div class=\"line\">        _id: req.params.id,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(idea =&gt; &#123;</div><div class=\"line\">        res.render(&apos;ideas/edit&apos;, &#123;</div><div class=\"line\">            idea: idea</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 views/ideas/index.handlebars 新增一個 Edit 的連結<br>\n<code>&lt;a class=&quot;btn btn-dark btn-block&quot; href=&quot;/ideas/edit/&quot;&gt;Edit&lt;/a&gt;</code></li>\n<li>從 views/ideas/add.handlebars 複製新增到 views/ideas/edit.handlebars，且將值放進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#each errors&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;else&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;card card-body&quot;&gt;</div><div class=\"line\">    &lt;h3&gt;Edit Video Idea&lt;/h3&gt;</div><div class=\"line\">    &lt;form action=&quot;/ideas&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;title&quot;&gt;Title&lt;/label&gt;</div><div class=\"line\">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;title&quot; value=&quot;&#123;&#123;idea.title&#125;&#125;&quot; required&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label for=&quot;details&quot;&gt;Details&lt;/label&gt;</div><div class=\"line\">            &lt;textarea class=&quot;form-control&quot; name=&quot;details&quot; required&gt;&#123;&#123;idea.details&#125;&#125;&lt;/textarea&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;</div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4>更新 Idea Data</h4>\n<ol>\n<li><a href=\"https://github.com/expressjs/method-override\" target=\"_blank\" rel=\"external\">Method Override</a></li>\n<li>安裝 method-override <code>npm install method-override --save</code></li>\n<li>在 app.js 引入 <code>const methodOverride = require('method-override');</code></li>\n<li>在 app.js 新增 method-override 的 middleware <code>app.use(methodOverride('_method'));</code></li>\n<li>修改 views/ideas/edit.handlebars 的表單 action 且新增 hidden input</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;/ideas/&#123;&#123;idea.id&#125;&#125;?_method=PUT&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 app.js 更新表單，然後將值存到資料庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Edit Form process</div><div class=\"line\">app.put(&apos;/ideas/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.findOne(&#123;</div><div class=\"line\">        _id: req.params.id</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(idea =&gt; &#123;</div><div class=\"line\">        // new values</div><div class=\"line\">        idea.title = req.body.title;</div><div class=\"line\">        idea.details = req.body.details;</div><div class=\"line\"></div><div class=\"line\">        idea.save()</div><div class=\"line\">            .then(idea =&gt; &#123;</div><div class=\"line\">                res.redirect(&apos;/ideas&apos;);</div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>移除 Idea Data</h4>\n<ol>\n<li>在 views/ideas/index.handlebars 新增 Delete 按鈕</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;/ideas/&#123;&#123;id&#125;&#125;?_method=DELETE&quot; method=&quot;post&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;submit&quot; class=&quot;btn btn-danger btn-block&quot; value=&quot;Delete&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 新增刪除路由，用 remove 直接把檔案從資料庫刪除</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Delete Idea</div><div class=\"line\">app.delete(&apos;/ideas/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Idea.remove(&#123;_id: req.params.id&#125;)</div><div class=\"line\">        .then(() =&gt; &#123;</div><div class=\"line\">            res.redirect(&apos;/ideas&apos;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Flashing Messaging</h4>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/express-session\" target=\"_blank\" rel=\"external\">Express Session</a></li>\n<li><a href=\"https://github.com/jaredhanson/connect-flash\" target=\"_blank\" rel=\"external\">Connect Flash</a></li>\n<li>安裝 Express Session 和 Connect Flash <code>npm install express-session connect-flash --save</code></li>\n<li>在 app.js 引入 Express Session 和 Connect Flash</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">const flash = require(&apos;connect-flash&apos;);</div><div class=\"line\">const session = require(&apos;express-session&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 app.js 把 Express Session 和 Connect Flash 的 middleware</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Express session middleware</div><div class=\"line\">app.use(session(&#123;</div><div class=\"line\">    secret: &apos;secret&apos;,</div><div class=\"line\">    resave: true,</div><div class=\"line\">    saveUninitialized: true</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">app.use(flash());</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 app.js 把區域變數變成全域變數，這樣訊息就可以在 handlebars 的頁面顯示</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Global variables</div><div class=\"line\">app.use(function(req, res, next) &#123;</div><div class=\"line\">    res.locals.success_msg = req.flash(&apos;success_msg&apos;);</div><div class=\"line\">    res.locals.error_msg = req.flash(&apos;error_msg&apos;);</div><div class=\"line\">    res.locals.error = req.flash(&apos;error&apos;);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>app.js 在所有路由跳轉之前，送出 flash 訊息<br>\n<code>req.flash('success_msg', 'Video Idea added');</code><br>\n<code>req.flash('success_msg', 'Video Idea updated');</code><br>\n<code>req.flash('success_msg', 'Video Idea removed');</code></li>\n<li>新增 views/partials/_msg.handlebars</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;#if success_msg&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-success&quot;&gt;&#123;&#123;success_msg&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;#if error_msg&#125;&#125;</div><div class=\"line\">    &lt;div class=&quot;alert alert-danger&quot;&gt;&#123;&#123;error_msg&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 views/layouts/main.handlebars 的 <code>{{body}}</code> 上方引入 <code>{{> _msg}}</code></li>\n</ol>\n"},{"title":"Nodejs 快速學習自我挑戰 Day1","thumbnail":["/images/learning/nodejs/nodejsday1.png"],"date":"2017-06-10T15:32:55.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday1.png\">\n\n***\n### 環境設定\n#### 安裝\n1. 安裝 [node](https://nodejs.org/en/)\n#### 什麼是 Node\n1. JavaScript 本來是用於瀏覽器的，現在可以用在 Server 端，node 是一套用 JavaScript Syntax 且可以用來建立程式、檔案系統，還可以直接跟資料庫溝通，甚至可以直接用 node 來建立伺服器。\n2. Node 和 JavaScript 在瀏覽器裡執行都是使用同個引擎，叫做 JavaScript V8 runtime engine，這是一個開源軟體，將 JavaScript 的程式編譯成較快的機器語言，機器語言是低階語言，電腦可以直接執行不需經過轉譯，少了必須轉譯的動作，電腦只能執行特定程式碼，舉例來說，機器可以執行 JavaScript 程式碼、PHP 程式碼不需要轉譯成機器本來就知道的東西，因為 V8 引擎做得很好，Node 非常的快，使用 V8 引擎，我們可以將 JavaScript 程式碼編譯成較快速的機器語言，然後執行它，V8 引擎是用 C++ 寫的，所以如果想拓展 Node 語言，就要學用 C++。\n3. Node 有檔案系統的功能，瀏覽器則控制什麼出現在視窗裡面。瀏覽器使用 `window` 呼叫指令，Node 用 `global`。\n4. 瀏覽器使用 `document` 顯示 DOM，Node 使用 `process` 顯示進程。`process.exit(0);` 離開執行狀態(或用兩次 ctrl+C 也可以)。\n#### 為什麼使用 Nodejs\n1. Nodejs 使用事件驅動、非阻塞式 I/O 模型讓它非常輕量而且高效。I/O 是電腦非常常做的事情，當資料讀取或是寫入資料庫，就是 I/O，也稱為輸入和輸出，這是一個用來溝通物聯網和應用程式的東西，包含資料庫讀取或寫入 request，或是改變檔案系統裡的檔案，或者是傳送 http request 到伺服器，例如：Google API 取得用戶的位置。至於非阻塞式 (non-blocking) 是當有用戶從Google request URL，另外一個用戶可以讀取資料庫的資料而不需等待其他用戶的 request 完成。\n2. Nodejs 套件的生態系系統 [npm](https://www.npmjs.com/) ，是世界上最大的開源資料庫生態系統。\n### Note App\n#### Using Require\n1. Module 是單元功能，Require 是用來取用單元功能的 Node 函式。\n2. [Modules](https://nodejs.org/api/)\n3. 新增根目錄檔案 `app.js`\n4. 先 console.log `console.log('Starting app.');`\n5. 引入 filesystem `const fs = require('fs');`\n6. 使用函式庫新增檔案 `fs.appendFile('greeting.txt', 'Hello world!');`\n7. 如果使用函式庫新增檔案出現錯誤，有其他兩種解法\n```\nOption1\nfs.appendFile('greeting.txt', 'Hello world!', function (err) {\n   if (err) {\n        console.log('Unable to write to file');\n   }\n});\n\nOption2\nfs.appendFileSync('greeting.txt', 'Hello world!');\n```\n7. 引入 os `const os = require('os');`\n8. 使用函式庫調出 user 資料 `var user = os.userInfo();`\n9. ES5 輸出資料 `fs.appendFile('greeting.txt', 'Hello ' + user.username + '!');`\n10. ES6 輸出資料 \n```\nfs.appendFile('greeting.txt', `Hello ${user.username}!`);\n```\n#### Require 自己的檔案\n1. 新增根目錄檔案 notes.js 加入一行 `console.log('Starting notes.js')`\n2. 在 app.js require 檔案 `const notes = require('./notes.js');`\n3. 在 notes.js 新增 addNote function\n```\nmodule.exports.addNote = () => {\n    console.log('addNote');\n    return 'New note';\n};\n```\n4. 在 app.js 使用 function\n```\nvar res = notes.addNote();\nconsole.log(res);\n```\n5. 在 notes.js 新增 add function\n```\nmodule.exports.add = (a, b) => {\n    return a + b;\n};\n```\n6. 在 app.js 使用 function\n`console.log('Result:', notes.add(9, -2));`\n#### 使用第三方套件\n1. 啟動 npm 專案 `npm init`\n2. 安裝 lodash ` npm install lodash --save`\n3. Require module 到 app.js `const _ = requrie('lodash');`\n4. 使用 lodash function 去除陣列中一樣的內容\n```\nvar filteredArray = _.uniq(['Vincent', 1, 'Vincent', 1, 2, 3, 4]);\nconsole.log(filteredArray);\n```\n#### 使用 Nodemon 開始專案\n1. 安裝 Nodemon `npm install nodemon -g`\n2. 啟動 Nodemon 來監控專案 `nodemon app.js`\n#### 從使用者取得 input\n1. 在 app.js 新增 process.argv 監控 command\n```\nvar command = process.argv[2];\nconsole.log('Command:', command);\nconsole.log(process.argv);\n```\n2. 在 app.js 新增 if else function 給不同的 command 不同 output\n```\nif (command === 'add') {\n    console.log('Adding new note');\n} else if (command === 'list') {\n    console.log('Listing all notes');\n} else if (command === 'read') {\n    console.log('Reading note');\n} else if (command === 'remove') {\n    console.log('Removing note');\n} else {\n    console.log('Command not recognized');\n}\n```\n3. 檢查 command `node app.js remove`\n### 使用 Yargs 簡化 input\n1. 安裝 Yargs `npm install yargs@4.7.1 --save`\n2. Require Yargs `const yargs = require('yargs');`\n3. 修改 app.js 的 if function\n```\nif (command === 'add') {\n    notes.addNote(argv.title, argv.body);\n} else if (command === 'list') {\n    notes.getAll();\n} else if (command === 'read') {\n    notes.getNote(argv.title);\n} else if (command === 'remove') {\n    notes.removeNote(argv.title);\n} else {\n    console.log('Command not recognized');\n}\n```\n4. 在 notes.js 新增 addNote, getAll, getNote, removeNote function\n```\nvar addNote = (title, body) => {\n    console.log('Adding note', title, body);\n};\n\nvar getAll = () => {\n    console.log('Getting all notes');\n};\n\nvar getNote = (title) => {\n    console.log('Getting note', title);\n};\n\nvar removeNote = (title) => {\n    console.log('Removing note', title);\n};\n```\n5. 在 notes.js 輸出 function (ES6)\n```\nmodule.exports = {\n    addNote,\n    getAll,\n    getNote,\n    removeNote\n};\n```\n#### 使用 JSON\n1. 先引入 fileSystem，然後用 originalNote 新增 JSON 物件，新增一個變數 originalNoteString 用 stringify 將 originalNote 轉為 String，然後再新增一個變數 note 將 originalNoteString parse 回 JSON 物件。\n```\nconst fs = require('fs');\n\nvar originalNote = {\n    title: 'Some title',\n    body: 'Some body'\n};\nvar originalNoteString = JSON.stringify(originalNote);\nfs.writeFileSync('notes.json', originalNoteString);\n\nvar noteString = fs.readFileSync('notes.json');\nvar note = JSON.parse(originalNoteString);\nconsole.log(typeof note);\nconsole.log(note.title);\n```\n#### 新增和儲存 Note\n1. 首先在 addNote 傳入 title 和 body 兩個變數，然後用 notes.push 把得到的兩個變數傳進去 notes 陣列裡面，最後用 String 的方式寫入 notes-data.json。過程中，為了避免資料重複，用 notesString 取得檔案內的所有 note，然後用 notes.filter 檢查 title 是不是一樣，最後，如果不一樣，再將檔案寫入 notes-data.json。\n```\nvar addNote = (title, body) => {\n    var notes = [];\n    var note = {\n        title,\n        body\n    };\n\n    try {\n        var notesString = fs.readFileSync('notes-data.json');\n        notes = JSON.parse(notesString);\n    } catch (e) {\n\n    }\n\n    var duplicateNotes = notes.filter((note) => note.title === title);\n\n    if (duplicateNotes.length === 0) {\n        notes.push(note);\n        fs.writeFileSync('notes-data.json', JSON.stringify(notes));\n    }\n};\n```\n#### 重複使用 function\n1. 將本來在 addNote 的 fucntion 移出來\n```\nvar fetchNotes = () => {\n    try {\n        var notesString = fs.readFileSync('notes-data.json');\n        return JSON.parse(notesString);\n    } catch (e) {\n        return [];\n    }\n};\n\nvar saveNotes = (notes) => {\n    fs.writeFileSync('notes-data.json', JSON.stringify(notes));\n};\n```\n2. addNote function 移出來的 function 用 fetchNotes 和 saveNotes 取代\n```\nvar addNote = (title, body) => {\n    var notes = fetchNotes();\n    var note = {\n        title,\n        body\n    };\n    var duplicateNotes = notes.filter((note) => note.title === title);\n\n    if (duplicateNotes.length === 0) {\n        notes.push(note);\n        saveNotes(notes);\n        return note;\n    }\n};\n```\n3. 將從 notes.js return 出來的 note 用 if else function 來顯示是否完成新增 notes 的動作\n```\nif (command === 'add') {\n    var note = notes.addNote(argv.title, argv.body);\n    if (note) {\n        console.log('Note created');\n        console.log('--');\n        console.log(`Title: ${note.title}`);\n        console.log(`Body: ${note.body}`);\n    } else {\n        console.log('Note title taken');\n    }\n}\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day1.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/nodejs/nodejsday1.png\ndate: 2017-06-10 23:32:55\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday1.png\">\n\n***\n### 環境設定\n#### 安裝\n1. 安裝 [node](https://nodejs.org/en/)\n#### 什麼是 Node\n1. JavaScript 本來是用於瀏覽器的，現在可以用在 Server 端，node 是一套用 JavaScript Syntax 且可以用來建立程式、檔案系統，還可以直接跟資料庫溝通，甚至可以直接用 node 來建立伺服器。\n2. Node 和 JavaScript 在瀏覽器裡執行都是使用同個引擎，叫做 JavaScript V8 runtime engine，這是一個開源軟體，將 JavaScript 的程式編譯成較快的機器語言，機器語言是低階語言，電腦可以直接執行不需經過轉譯，少了必須轉譯的動作，電腦只能執行特定程式碼，舉例來說，機器可以執行 JavaScript 程式碼、PHP 程式碼不需要轉譯成機器本來就知道的東西，因為 V8 引擎做得很好，Node 非常的快，使用 V8 引擎，我們可以將 JavaScript 程式碼編譯成較快速的機器語言，然後執行它，V8 引擎是用 C++ 寫的，所以如果想拓展 Node 語言，就要學用 C++。\n3. Node 有檔案系統的功能，瀏覽器則控制什麼出現在視窗裡面。瀏覽器使用 `window` 呼叫指令，Node 用 `global`。\n4. 瀏覽器使用 `document` 顯示 DOM，Node 使用 `process` 顯示進程。`process.exit(0);` 離開執行狀態(或用兩次 ctrl+C 也可以)。\n#### 為什麼使用 Nodejs\n1. Nodejs 使用事件驅動、非阻塞式 I/O 模型讓它非常輕量而且高效。I/O 是電腦非常常做的事情，當資料讀取或是寫入資料庫，就是 I/O，也稱為輸入和輸出，這是一個用來溝通物聯網和應用程式的東西，包含資料庫讀取或寫入 request，或是改變檔案系統裡的檔案，或者是傳送 http request 到伺服器，例如：Google API 取得用戶的位置。至於非阻塞式 (non-blocking) 是當有用戶從Google request URL，另外一個用戶可以讀取資料庫的資料而不需等待其他用戶的 request 完成。\n2. Nodejs 套件的生態系系統 [npm](https://www.npmjs.com/) ，是世界上最大的開源資料庫生態系統。\n### Note App\n#### Using Require\n1. Module 是單元功能，Require 是用來取用單元功能的 Node 函式。\n2. [Modules](https://nodejs.org/api/)\n3. 新增根目錄檔案 `app.js`\n4. 先 console.log `console.log('Starting app.');`\n5. 引入 filesystem `const fs = require('fs');`\n6. 使用函式庫新增檔案 `fs.appendFile('greeting.txt', 'Hello world!');`\n7. 如果使用函式庫新增檔案出現錯誤，有其他兩種解法\n```\nOption1\nfs.appendFile('greeting.txt', 'Hello world!', function (err) {\n   if (err) {\n        console.log('Unable to write to file');\n   }\n});\n\nOption2\nfs.appendFileSync('greeting.txt', 'Hello world!');\n```\n7. 引入 os `const os = require('os');`\n8. 使用函式庫調出 user 資料 `var user = os.userInfo();`\n9. ES5 輸出資料 `fs.appendFile('greeting.txt', 'Hello ' + user.username + '!');`\n10. ES6 輸出資料 \n```\nfs.appendFile('greeting.txt', `Hello ${user.username}!`);\n```\n#### Require 自己的檔案\n1. 新增根目錄檔案 notes.js 加入一行 `console.log('Starting notes.js')`\n2. 在 app.js require 檔案 `const notes = require('./notes.js');`\n3. 在 notes.js 新增 addNote function\n```\nmodule.exports.addNote = () => {\n    console.log('addNote');\n    return 'New note';\n};\n```\n4. 在 app.js 使用 function\n```\nvar res = notes.addNote();\nconsole.log(res);\n```\n5. 在 notes.js 新增 add function\n```\nmodule.exports.add = (a, b) => {\n    return a + b;\n};\n```\n6. 在 app.js 使用 function\n`console.log('Result:', notes.add(9, -2));`\n#### 使用第三方套件\n1. 啟動 npm 專案 `npm init`\n2. 安裝 lodash ` npm install lodash --save`\n3. Require module 到 app.js `const _ = requrie('lodash');`\n4. 使用 lodash function 去除陣列中一樣的內容\n```\nvar filteredArray = _.uniq(['Vincent', 1, 'Vincent', 1, 2, 3, 4]);\nconsole.log(filteredArray);\n```\n#### 使用 Nodemon 開始專案\n1. 安裝 Nodemon `npm install nodemon -g`\n2. 啟動 Nodemon 來監控專案 `nodemon app.js`\n#### 從使用者取得 input\n1. 在 app.js 新增 process.argv 監控 command\n```\nvar command = process.argv[2];\nconsole.log('Command:', command);\nconsole.log(process.argv);\n```\n2. 在 app.js 新增 if else function 給不同的 command 不同 output\n```\nif (command === 'add') {\n    console.log('Adding new note');\n} else if (command === 'list') {\n    console.log('Listing all notes');\n} else if (command === 'read') {\n    console.log('Reading note');\n} else if (command === 'remove') {\n    console.log('Removing note');\n} else {\n    console.log('Command not recognized');\n}\n```\n3. 檢查 command `node app.js remove`\n### 使用 Yargs 簡化 input\n1. 安裝 Yargs `npm install yargs@4.7.1 --save`\n2. Require Yargs `const yargs = require('yargs');`\n3. 修改 app.js 的 if function\n```\nif (command === 'add') {\n    notes.addNote(argv.title, argv.body);\n} else if (command === 'list') {\n    notes.getAll();\n} else if (command === 'read') {\n    notes.getNote(argv.title);\n} else if (command === 'remove') {\n    notes.removeNote(argv.title);\n} else {\n    console.log('Command not recognized');\n}\n```\n4. 在 notes.js 新增 addNote, getAll, getNote, removeNote function\n```\nvar addNote = (title, body) => {\n    console.log('Adding note', title, body);\n};\n\nvar getAll = () => {\n    console.log('Getting all notes');\n};\n\nvar getNote = (title) => {\n    console.log('Getting note', title);\n};\n\nvar removeNote = (title) => {\n    console.log('Removing note', title);\n};\n```\n5. 在 notes.js 輸出 function (ES6)\n```\nmodule.exports = {\n    addNote,\n    getAll,\n    getNote,\n    removeNote\n};\n```\n#### 使用 JSON\n1. 先引入 fileSystem，然後用 originalNote 新增 JSON 物件，新增一個變數 originalNoteString 用 stringify 將 originalNote 轉為 String，然後再新增一個變數 note 將 originalNoteString parse 回 JSON 物件。\n```\nconst fs = require('fs');\n\nvar originalNote = {\n    title: 'Some title',\n    body: 'Some body'\n};\nvar originalNoteString = JSON.stringify(originalNote);\nfs.writeFileSync('notes.json', originalNoteString);\n\nvar noteString = fs.readFileSync('notes.json');\nvar note = JSON.parse(originalNoteString);\nconsole.log(typeof note);\nconsole.log(note.title);\n```\n#### 新增和儲存 Note\n1. 首先在 addNote 傳入 title 和 body 兩個變數，然後用 notes.push 把得到的兩個變數傳進去 notes 陣列裡面，最後用 String 的方式寫入 notes-data.json。過程中，為了避免資料重複，用 notesString 取得檔案內的所有 note，然後用 notes.filter 檢查 title 是不是一樣，最後，如果不一樣，再將檔案寫入 notes-data.json。\n```\nvar addNote = (title, body) => {\n    var notes = [];\n    var note = {\n        title,\n        body\n    };\n\n    try {\n        var notesString = fs.readFileSync('notes-data.json');\n        notes = JSON.parse(notesString);\n    } catch (e) {\n\n    }\n\n    var duplicateNotes = notes.filter((note) => note.title === title);\n\n    if (duplicateNotes.length === 0) {\n        notes.push(note);\n        fs.writeFileSync('notes-data.json', JSON.stringify(notes));\n    }\n};\n```\n#### 重複使用 function\n1. 將本來在 addNote 的 fucntion 移出來\n```\nvar fetchNotes = () => {\n    try {\n        var notesString = fs.readFileSync('notes-data.json');\n        return JSON.parse(notesString);\n    } catch (e) {\n        return [];\n    }\n};\n\nvar saveNotes = (notes) => {\n    fs.writeFileSync('notes-data.json', JSON.stringify(notes));\n};\n```\n2. addNote function 移出來的 function 用 fetchNotes 和 saveNotes 取代\n```\nvar addNote = (title, body) => {\n    var notes = fetchNotes();\n    var note = {\n        title,\n        body\n    };\n    var duplicateNotes = notes.filter((note) => note.title === title);\n\n    if (duplicateNotes.length === 0) {\n        notes.push(note);\n        saveNotes(notes);\n        return note;\n    }\n};\n```\n3. 將從 notes.js return 出來的 note 用 if else function 來顯示是否完成新增 notes 的動作\n```\nif (command === 'add') {\n    var note = notes.addNote(argv.title, argv.body);\n    if (note) {\n        console.log('Note created');\n        console.log('--');\n        console.log(`Title: ${note.title}`);\n        console.log(`Body: ${note.body}`);\n    } else {\n        console.log('Note title taken');\n    }\n}\n```","slug":"Nodejs-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxe003d7ifate7k0xr4","content":"<img src=\"/images/learning/nodejs/nodejsday1.png\">\n<hr>\n<h3>環境設定</h3>\n<h4>安裝</h4>\n<ol>\n<li>安裝 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node</a></li>\n</ol>\n<h4>什麼是 Node</h4>\n<ol>\n<li>JavaScript 本來是用於瀏覽器的，現在可以用在 Server 端，node 是一套用 JavaScript Syntax 且可以用來建立程式、檔案系統，還可以直接跟資料庫溝通，甚至可以直接用 node 來建立伺服器。</li>\n<li>Node 和 JavaScript 在瀏覽器裡執行都是使用同個引擎，叫做 JavaScript V8 runtime engine，這是一個開源軟體，將 JavaScript 的程式編譯成較快的機器語言，機器語言是低階語言，電腦可以直接執行不需經過轉譯，少了必須轉譯的動作，電腦只能執行特定程式碼，舉例來說，機器可以執行 JavaScript 程式碼、PHP 程式碼不需要轉譯成機器本來就知道的東西，因為 V8 引擎做得很好，Node 非常的快，使用 V8 引擎，我們可以將 JavaScript 程式碼編譯成較快速的機器語言，然後執行它，V8 引擎是用 C++ 寫的，所以如果想拓展 Node 語言，就要學用 C++。</li>\n<li>Node 有檔案系統的功能，瀏覽器則控制什麼出現在視窗裡面。瀏覽器使用 <code>window</code> 呼叫指令，Node 用 <code>global</code>。</li>\n<li>瀏覽器使用 <code>document</code> 顯示 DOM，Node 使用 <code>process</code> 顯示進程。<code>process.exit(0);</code> 離開執行狀態(或用兩次 ctrl+C 也可以)。</li>\n</ol>\n<h4>為什麼使用 Nodejs</h4>\n<ol>\n<li>Nodejs 使用事件驅動、非阻塞式 I/O 模型讓它非常輕量而且高效。I/O 是電腦非常常做的事情，當資料讀取或是寫入資料庫，就是 I/O，也稱為輸入和輸出，這是一個用來溝通物聯網和應用程式的東西，包含資料庫讀取或寫入 request，或是改變檔案系統裡的檔案，或者是傳送 http request 到伺服器，例如：Google API 取得用戶的位置。至於非阻塞式 (non-blocking) 是當有用戶從Google request URL，另外一個用戶可以讀取資料庫的資料而不需等待其他用戶的 request 完成。</li>\n<li>Nodejs 套件的生態系系統 <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">npm</a> ，是世界上最大的開源資料庫生態系統。</li>\n</ol>\n<h3>Note App</h3>\n<h4>Using Require</h4>\n<ol>\n<li>Module 是單元功能，Require 是用來取用單元功能的 Node 函式。</li>\n<li><a href=\"https://nodejs.org/api/\" target=\"_blank\" rel=\"external\">Modules</a></li>\n<li>新增根目錄檔案 <code>app.js</code></li>\n<li>先 console.log <code>console.log('Starting app.');</code></li>\n<li>引入 filesystem <code>const fs = require('fs');</code></li>\n<li>使用函式庫新增檔案 <code>fs.appendFile('greeting.txt', 'Hello world!');</code></li>\n<li>如果使用函式庫新增檔案出現錯誤，有其他兩種解法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Option1</div><div class=\"line\">fs.appendFile(&apos;greeting.txt&apos;, &apos;Hello world!&apos;, function (err) &#123;</div><div class=\"line\">   if (err) &#123;</div><div class=\"line\">        console.log(&apos;Unable to write to file&apos;);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Option2</div><div class=\"line\">fs.appendFileSync(&apos;greeting.txt&apos;, &apos;Hello world!&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>引入 os <code>const os = require('os');</code></li>\n<li>使用函式庫調出 user 資料 <code>var user = os.userInfo();</code></li>\n<li>ES5 輸出資料 <code>fs.appendFile('greeting.txt', 'Hello ' + user.username + '!');</code></li>\n<li>ES6 輸出資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.appendFile(&apos;greeting.txt&apos;, `Hello $&#123;user.username&#125;!`);</div></pre></td></tr></table></figure>\n<h4>Require 自己的檔案</h4>\n<ol>\n<li>新增根目錄檔案 notes.js 加入一行 <code>console.log('Starting notes.js')</code></li>\n<li>在 app.js require 檔案 <code>const notes = require('./notes.js');</code></li>\n<li>在 notes.js 新增 addNote function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.addNote = () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;addNote&apos;);</div><div class=\"line\">    return &apos;New note&apos;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 app.js 使用 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var res = notes.addNote();</div><div class=\"line\">console.log(res);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 notes.js 新增 add function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.add = (a, b) =&gt; &#123;</div><div class=\"line\">    return a + b;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 app.js 使用 function<br>\n<code>console.log('Result:', notes.add(9, -2));</code></li>\n</ol>\n<h4>使用第三方套件</h4>\n<ol>\n<li>啟動 npm 專案 <code>npm init</code></li>\n<li>安裝 lodash <code>npm install lodash --save</code></li>\n<li>Require module 到 app.js <code>const _ = requrie('lodash');</code></li>\n<li>使用 lodash function 去除陣列中一樣的內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var filteredArray = _.uniq([&apos;Vincent&apos;, 1, &apos;Vincent&apos;, 1, 2, 3, 4]);</div><div class=\"line\">console.log(filteredArray);</div></pre></td></tr></table></figure>\n<h4>使用 Nodemon 開始專案</h4>\n<ol>\n<li>安裝 Nodemon <code>npm install nodemon -g</code></li>\n<li>啟動 Nodemon 來監控專案 <code>nodemon app.js</code></li>\n</ol>\n<h4>從使用者取得 input</h4>\n<ol>\n<li>在 app.js 新增 process.argv 監控 command</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var command = process.argv[2];</div><div class=\"line\">console.log(&apos;Command:&apos;, command);</div><div class=\"line\">console.log(process.argv);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 新增 if else function 給不同的 command 不同 output</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (command === &apos;add&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Adding new note&apos;);</div><div class=\"line\">&#125; else if (command === &apos;list&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Listing all notes&apos;);</div><div class=\"line\">&#125; else if (command === &apos;read&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Reading note&apos;);</div><div class=\"line\">&#125; else if (command === &apos;remove&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Removing note&apos;);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    console.log(&apos;Command not recognized&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>檢查 command <code>node app.js remove</code></li>\n</ol>\n<h3>使用 Yargs 簡化 input</h3>\n<ol>\n<li>安裝 Yargs <code>npm install yargs@4.7.1 --save</code></li>\n<li>Require Yargs <code>const yargs = require('yargs');</code></li>\n<li>修改 app.js 的 if function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (command === &apos;add&apos;) &#123;</div><div class=\"line\">    notes.addNote(argv.title, argv.body);</div><div class=\"line\">&#125; else if (command === &apos;list&apos;) &#123;</div><div class=\"line\">    notes.getAll();</div><div class=\"line\">&#125; else if (command === &apos;read&apos;) &#123;</div><div class=\"line\">    notes.getNote(argv.title);</div><div class=\"line\">&#125; else if (command === &apos;remove&apos;) &#123;</div><div class=\"line\">    notes.removeNote(argv.title);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    console.log(&apos;Command not recognized&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 notes.js 新增 addNote, getAll, getNote, removeNote function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addNote = (title, body) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Adding note&apos;, title, body);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getAll = () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Getting all notes&apos;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getNote = (title) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Getting note&apos;, title);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var removeNote = (title) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Removing note&apos;, title);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 notes.js 輸出 function (ES6)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    addNote,</div><div class=\"line\">    getAll,</div><div class=\"line\">    getNote,</div><div class=\"line\">    removeNote</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>使用 JSON</h4>\n<ol>\n<li>先引入 fileSystem，然後用 originalNote 新增 JSON 物件，新增一個變數 originalNoteString 用 stringify 將 originalNote 轉為 String，然後再新增一個變數 note 將 originalNoteString parse 回 JSON 物件。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">const fs = require(&apos;fs&apos;);</div><div class=\"line\"></div><div class=\"line\">var originalNote = &#123;</div><div class=\"line\">    title: &apos;Some title&apos;,</div><div class=\"line\">    body: &apos;Some body&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\">var originalNoteString = JSON.stringify(originalNote);</div><div class=\"line\">fs.writeFileSync(&apos;notes.json&apos;, originalNoteString);</div><div class=\"line\"></div><div class=\"line\">var noteString = fs.readFileSync(&apos;notes.json&apos;);</div><div class=\"line\">var note = JSON.parse(originalNoteString);</div><div class=\"line\">console.log(typeof note);</div><div class=\"line\">console.log(note.title);</div></pre></td></tr></table></figure>\n<h4>新增和儲存 Note</h4>\n<ol>\n<li>首先在 addNote 傳入 title 和 body 兩個變數，然後用 notes.push 把得到的兩個變數傳進去 notes 陣列裡面，最後用 String 的方式寫入 notes-data.json。過程中，為了避免資料重複，用 notesString 取得檔案內的所有 note，然後用 notes.filter 檢查 title 是不是一樣，最後，如果不一樣，再將檔案寫入 notes-data.json。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addNote = (title, body) =&gt; &#123;</div><div class=\"line\">    var notes = [];</div><div class=\"line\">    var note = &#123;</div><div class=\"line\">        title,</div><div class=\"line\">        body</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">        var notesString = fs.readFileSync(&apos;notes-data.json&apos;);</div><div class=\"line\">        notes = JSON.parse(notesString);</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var duplicateNotes = notes.filter((note) =&gt; note.title === title);</div><div class=\"line\"></div><div class=\"line\">    if (duplicateNotes.length === 0) &#123;</div><div class=\"line\">        notes.push(note);</div><div class=\"line\">        fs.writeFileSync(&apos;notes-data.json&apos;, JSON.stringify(notes));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>重複使用 function</h4>\n<ol>\n<li>將本來在 addNote 的 fucntion 移出來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fetchNotes = () =&gt; &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        var notesString = fs.readFileSync(&apos;notes-data.json&apos;);</div><div class=\"line\">        return JSON.parse(notesString);</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">        return [];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var saveNotes = (notes) =&gt; &#123;</div><div class=\"line\">    fs.writeFileSync(&apos;notes-data.json&apos;, JSON.stringify(notes));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>addNote function 移出來的 function 用 fetchNotes 和 saveNotes 取代</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addNote = (title, body) =&gt; &#123;</div><div class=\"line\">    var notes = fetchNotes();</div><div class=\"line\">    var note = &#123;</div><div class=\"line\">        title,</div><div class=\"line\">        body</div><div class=\"line\">    &#125;;</div><div class=\"line\">    var duplicateNotes = notes.filter((note) =&gt; note.title === title);</div><div class=\"line\"></div><div class=\"line\">    if (duplicateNotes.length === 0) &#123;</div><div class=\"line\">        notes.push(note);</div><div class=\"line\">        saveNotes(notes);</div><div class=\"line\">        return note;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將從 notes.js return 出來的 note 用 if else function 來顯示是否完成新增 notes 的動作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (command === &apos;add&apos;) &#123;</div><div class=\"line\">    var note = notes.addNote(argv.title, argv.body);</div><div class=\"line\">    if (note) &#123;</div><div class=\"line\">        console.log(&apos;Note created&apos;);</div><div class=\"line\">        console.log(&apos;--&apos;);</div><div class=\"line\">        console.log(`Title: $&#123;note.title&#125;`);</div><div class=\"line\">        console.log(`Body: $&#123;note.body&#125;`);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(&apos;Note title taken&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday1.png\">\n<hr>\n<h3>環境設定</h3>\n<h4>安裝</h4>\n<ol>\n<li>安裝 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node</a></li>\n</ol>\n<h4>什麼是 Node</h4>\n<ol>\n<li>JavaScript 本來是用於瀏覽器的，現在可以用在 Server 端，node 是一套用 JavaScript Syntax 且可以用來建立程式、檔案系統，還可以直接跟資料庫溝通，甚至可以直接用 node 來建立伺服器。</li>\n<li>Node 和 JavaScript 在瀏覽器裡執行都是使用同個引擎，叫做 JavaScript V8 runtime engine，這是一個開源軟體，將 JavaScript 的程式編譯成較快的機器語言，機器語言是低階語言，電腦可以直接執行不需經過轉譯，少了必須轉譯的動作，電腦只能執行特定程式碼，舉例來說，機器可以執行 JavaScript 程式碼、PHP 程式碼不需要轉譯成機器本來就知道的東西，因為 V8 引擎做得很好，Node 非常的快，使用 V8 引擎，我們可以將 JavaScript 程式碼編譯成較快速的機器語言，然後執行它，V8 引擎是用 C++ 寫的，所以如果想拓展 Node 語言，就要學用 C++。</li>\n<li>Node 有檔案系統的功能，瀏覽器則控制什麼出現在視窗裡面。瀏覽器使用 <code>window</code> 呼叫指令，Node 用 <code>global</code>。</li>\n<li>瀏覽器使用 <code>document</code> 顯示 DOM，Node 使用 <code>process</code> 顯示進程。<code>process.exit(0);</code> 離開執行狀態(或用兩次 ctrl+C 也可以)。</li>\n</ol>\n<h4>為什麼使用 Nodejs</h4>\n<ol>\n<li>Nodejs 使用事件驅動、非阻塞式 I/O 模型讓它非常輕量而且高效。I/O 是電腦非常常做的事情，當資料讀取或是寫入資料庫，就是 I/O，也稱為輸入和輸出，這是一個用來溝通物聯網和應用程式的東西，包含資料庫讀取或寫入 request，或是改變檔案系統裡的檔案，或者是傳送 http request 到伺服器，例如：Google API 取得用戶的位置。至於非阻塞式 (non-blocking) 是當有用戶從Google request URL，另外一個用戶可以讀取資料庫的資料而不需等待其他用戶的 request 完成。</li>\n<li>Nodejs 套件的生態系系統 <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">npm</a> ，是世界上最大的開源資料庫生態系統。</li>\n</ol>\n<h3>Note App</h3>\n<h4>Using Require</h4>\n<ol>\n<li>Module 是單元功能，Require 是用來取用單元功能的 Node 函式。</li>\n<li><a href=\"https://nodejs.org/api/\" target=\"_blank\" rel=\"external\">Modules</a></li>\n<li>新增根目錄檔案 <code>app.js</code></li>\n<li>先 console.log <code>console.log('Starting app.');</code></li>\n<li>引入 filesystem <code>const fs = require('fs');</code></li>\n<li>使用函式庫新增檔案 <code>fs.appendFile('greeting.txt', 'Hello world!');</code></li>\n<li>如果使用函式庫新增檔案出現錯誤，有其他兩種解法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Option1</div><div class=\"line\">fs.appendFile(&apos;greeting.txt&apos;, &apos;Hello world!&apos;, function (err) &#123;</div><div class=\"line\">   if (err) &#123;</div><div class=\"line\">        console.log(&apos;Unable to write to file&apos;);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Option2</div><div class=\"line\">fs.appendFileSync(&apos;greeting.txt&apos;, &apos;Hello world!&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>引入 os <code>const os = require('os');</code></li>\n<li>使用函式庫調出 user 資料 <code>var user = os.userInfo();</code></li>\n<li>ES5 輸出資料 <code>fs.appendFile('greeting.txt', 'Hello ' + user.username + '!');</code></li>\n<li>ES6 輸出資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.appendFile(&apos;greeting.txt&apos;, `Hello $&#123;user.username&#125;!`);</div></pre></td></tr></table></figure>\n<h4>Require 自己的檔案</h4>\n<ol>\n<li>新增根目錄檔案 notes.js 加入一行 <code>console.log('Starting notes.js')</code></li>\n<li>在 app.js require 檔案 <code>const notes = require('./notes.js');</code></li>\n<li>在 notes.js 新增 addNote function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.addNote = () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;addNote&apos;);</div><div class=\"line\">    return &apos;New note&apos;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 app.js 使用 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var res = notes.addNote();</div><div class=\"line\">console.log(res);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 notes.js 新增 add function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.add = (a, b) =&gt; &#123;</div><div class=\"line\">    return a + b;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 app.js 使用 function<br>\n<code>console.log('Result:', notes.add(9, -2));</code></li>\n</ol>\n<h4>使用第三方套件</h4>\n<ol>\n<li>啟動 npm 專案 <code>npm init</code></li>\n<li>安裝 lodash <code>npm install lodash --save</code></li>\n<li>Require module 到 app.js <code>const _ = requrie('lodash');</code></li>\n<li>使用 lodash function 去除陣列中一樣的內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var filteredArray = _.uniq([&apos;Vincent&apos;, 1, &apos;Vincent&apos;, 1, 2, 3, 4]);</div><div class=\"line\">console.log(filteredArray);</div></pre></td></tr></table></figure>\n<h4>使用 Nodemon 開始專案</h4>\n<ol>\n<li>安裝 Nodemon <code>npm install nodemon -g</code></li>\n<li>啟動 Nodemon 來監控專案 <code>nodemon app.js</code></li>\n</ol>\n<h4>從使用者取得 input</h4>\n<ol>\n<li>在 app.js 新增 process.argv 監控 command</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var command = process.argv[2];</div><div class=\"line\">console.log(&apos;Command:&apos;, command);</div><div class=\"line\">console.log(process.argv);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 新增 if else function 給不同的 command 不同 output</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (command === &apos;add&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Adding new note&apos;);</div><div class=\"line\">&#125; else if (command === &apos;list&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Listing all notes&apos;);</div><div class=\"line\">&#125; else if (command === &apos;read&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Reading note&apos;);</div><div class=\"line\">&#125; else if (command === &apos;remove&apos;) &#123;</div><div class=\"line\">    console.log(&apos;Removing note&apos;);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    console.log(&apos;Command not recognized&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>檢查 command <code>node app.js remove</code></li>\n</ol>\n<h3>使用 Yargs 簡化 input</h3>\n<ol>\n<li>安裝 Yargs <code>npm install yargs@4.7.1 --save</code></li>\n<li>Require Yargs <code>const yargs = require('yargs');</code></li>\n<li>修改 app.js 的 if function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (command === &apos;add&apos;) &#123;</div><div class=\"line\">    notes.addNote(argv.title, argv.body);</div><div class=\"line\">&#125; else if (command === &apos;list&apos;) &#123;</div><div class=\"line\">    notes.getAll();</div><div class=\"line\">&#125; else if (command === &apos;read&apos;) &#123;</div><div class=\"line\">    notes.getNote(argv.title);</div><div class=\"line\">&#125; else if (command === &apos;remove&apos;) &#123;</div><div class=\"line\">    notes.removeNote(argv.title);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    console.log(&apos;Command not recognized&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 notes.js 新增 addNote, getAll, getNote, removeNote function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addNote = (title, body) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Adding note&apos;, title, body);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getAll = () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Getting all notes&apos;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getNote = (title) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Getting note&apos;, title);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var removeNote = (title) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Removing note&apos;, title);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 notes.js 輸出 function (ES6)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    addNote,</div><div class=\"line\">    getAll,</div><div class=\"line\">    getNote,</div><div class=\"line\">    removeNote</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>使用 JSON</h4>\n<ol>\n<li>先引入 fileSystem，然後用 originalNote 新增 JSON 物件，新增一個變數 originalNoteString 用 stringify 將 originalNote 轉為 String，然後再新增一個變數 note 將 originalNoteString parse 回 JSON 物件。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">const fs = require(&apos;fs&apos;);</div><div class=\"line\"></div><div class=\"line\">var originalNote = &#123;</div><div class=\"line\">    title: &apos;Some title&apos;,</div><div class=\"line\">    body: &apos;Some body&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\">var originalNoteString = JSON.stringify(originalNote);</div><div class=\"line\">fs.writeFileSync(&apos;notes.json&apos;, originalNoteString);</div><div class=\"line\"></div><div class=\"line\">var noteString = fs.readFileSync(&apos;notes.json&apos;);</div><div class=\"line\">var note = JSON.parse(originalNoteString);</div><div class=\"line\">console.log(typeof note);</div><div class=\"line\">console.log(note.title);</div></pre></td></tr></table></figure>\n<h4>新增和儲存 Note</h4>\n<ol>\n<li>首先在 addNote 傳入 title 和 body 兩個變數，然後用 notes.push 把得到的兩個變數傳進去 notes 陣列裡面，最後用 String 的方式寫入 notes-data.json。過程中，為了避免資料重複，用 notesString 取得檔案內的所有 note，然後用 notes.filter 檢查 title 是不是一樣，最後，如果不一樣，再將檔案寫入 notes-data.json。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addNote = (title, body) =&gt; &#123;</div><div class=\"line\">    var notes = [];</div><div class=\"line\">    var note = &#123;</div><div class=\"line\">        title,</div><div class=\"line\">        body</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">        var notesString = fs.readFileSync(&apos;notes-data.json&apos;);</div><div class=\"line\">        notes = JSON.parse(notesString);</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var duplicateNotes = notes.filter((note) =&gt; note.title === title);</div><div class=\"line\"></div><div class=\"line\">    if (duplicateNotes.length === 0) &#123;</div><div class=\"line\">        notes.push(note);</div><div class=\"line\">        fs.writeFileSync(&apos;notes-data.json&apos;, JSON.stringify(notes));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>重複使用 function</h4>\n<ol>\n<li>將本來在 addNote 的 fucntion 移出來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fetchNotes = () =&gt; &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        var notesString = fs.readFileSync(&apos;notes-data.json&apos;);</div><div class=\"line\">        return JSON.parse(notesString);</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\">        return [];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var saveNotes = (notes) =&gt; &#123;</div><div class=\"line\">    fs.writeFileSync(&apos;notes-data.json&apos;, JSON.stringify(notes));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>addNote function 移出來的 function 用 fetchNotes 和 saveNotes 取代</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addNote = (title, body) =&gt; &#123;</div><div class=\"line\">    var notes = fetchNotes();</div><div class=\"line\">    var note = &#123;</div><div class=\"line\">        title,</div><div class=\"line\">        body</div><div class=\"line\">    &#125;;</div><div class=\"line\">    var duplicateNotes = notes.filter((note) =&gt; note.title === title);</div><div class=\"line\"></div><div class=\"line\">    if (duplicateNotes.length === 0) &#123;</div><div class=\"line\">        notes.push(note);</div><div class=\"line\">        saveNotes(notes);</div><div class=\"line\">        return note;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將從 notes.js return 出來的 note 用 if else function 來顯示是否完成新增 notes 的動作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (command === &apos;add&apos;) &#123;</div><div class=\"line\">    var note = notes.addNote(argv.title, argv.body);</div><div class=\"line\">    if (note) &#123;</div><div class=\"line\">        console.log(&apos;Note created&apos;);</div><div class=\"line\">        console.log(&apos;--&apos;);</div><div class=\"line\">        console.log(`Title: $&#123;note.title&#125;`);</div><div class=\"line\">        console.log(`Body: $&#123;note.body&#125;`);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(&apos;Note title taken&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Nodejs 快速學習自我挑戰 Day10","thumbnail":["/images/learning/nodejs/nodejsday10.jpg"],"date":"2017-10-07T16:37:59.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday10.jpg\">\n\n***\n### 安全和認證\n#### 讓 Todo Routes Private\n1. 修改 server/models/todo.js 新增 _creator\n```\n_creator: {\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n}\n```\n2. 修改 server/tests/seed/seed.js 新增 _creator\n```\nconst todos = [{\n    _id: new ObjectID(),\n    text: 'First test todo',\n    _creator: userOneId\n}, {\n    _id: new ObjectID(),\n    text: 'Second test todo',\n    completed: true,\n    completedAt: 333,\n    _creator: userTwoId\n}];\n```\n3. 修改 server/server.js，加入 authenticate，然後新增 _creator\n```\napp.post('/todos', authenticate, (req, res) => {\n    var todo = new Todo({\n        text: req.body.text,\n        _creator: req.user._id\n    });\n\n    todo.save().then((doc) => {\n        res.send(doc);\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n\napp.get('/todos', authenticate, (req, res) => {\n    Todo.find({\n        _creator: req.user._id\n    }).then((todos) => {\n        res.send({todos});\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n```\n4. 在 server/tests/server.test.js 的 POST 部分設置 x-auth\n`.set('x-auth', users[0].tokens[0].token)`\n5. 在 server/tests/server.test.js 的 GET 部分設置 x-auth，並在回送時設定長度為 1，因為設置了 creator，只會回傳一個 todo\n```\ndescribe('GET /todos', () => {\n    it('should get all todos', (done) => {\n        request(app)\n            .get('/todos')\n            .set('x-auth', users[0].tokens[0].token)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todos.length).toBe(1);\n            })\n            .end(done);\n    });\n});\n```\n6. 在 server/server.js 修改 POST /users/login 的 token 為 1\n```\nexpect(user.tokens[1]).toInclude({\n    access: 'auth',\n    token: res.headers['x-auth']\n});\n```\n7. 在 server/server.js 修改 GET /todos/:id'，新增 authenticate middleware，且修改 findById 成 findOne\n```\napp.get('/todos/:id', authenticate, (req, res) => {\n\nTodo.findOne({\n    _id: id,\n    _creator: req.user._id\n}\n```\n8. 在 server/tests/server.test.js 修改 GET /todos 和 GET /todo/:id 都加上 `.set('x-auth', users[0].tokens[0].token)`\n9. 在 server/server.js 修改 DELETE /todos/:id'，新增 authenticate middleware，且修改 findByIdAndRemove 成 findOneAndRemove\n```\napp.delete('/todos/:id', authenticate, (req, res) => {\n\nTodo.findOneAndRemove({\n    _id: id,\n    _creator: req.user._id\n}\n```\n10. 在 server/tests/server.test.js 的 describe('GET /todo/:id') 加上一個測試，如果被其他使用者建立的 todo 則 404\n```\nit('should not return todo doc created by other user', (done) => {\n    request(app)\n        .get(`/todos/${todos[1]._id.toHexString()}`)\n        .set('x-auth', users[0].tokens[0].token)\n        .expect(404)\n        .end(done);\n});\n```\n11. 在 server/tests/server.test.js 的 DELETE /todos/:id 的每個測試都加上\n`.set('x-auth', users[1].tokens[0].token)`\n12. 在新增一個測試，如果 todo 對不上 user 就回傳 404\n```\nit('should not remove a todo', (done) => {\n    var hexId = todos[0]._id.toHexString();\n\n    request(app)\n        .delete(`/todos/${hexId}`)\n        .set('x-auth', users[1].tokens[0].token)\n        .expect(404)\n        .end((err, res) => {\n            if (err) {\n                return done(err);\n            }\n\n            Todo.findById(hexId).then((todo) => {\n                expect(todo).toExist();\n                done();\n            }).catch((e) => done(e));\n        });\n});\n```\n13. 在 server/server.js 修改 PATCH /todos/:id'，新增 authenticate middleware，且修改 findByIdAndUpdate 成 findOneAndUpdate\n```\napp.patch('/todos/:id', authenticate, (req, res) => {\n\nTodo.findOneAndUpdate({_id: id, _creator: req.user._id}, {$set: body}, {new: true})\n```\n#### 改善 App 組態設定\n1. 在 server/config/config.js 修改成用 json 的方式讀取環境變數\n```\nvar env = process.env.NODE_ENV || 'development';\n\nif (env === 'development' || env === 'test') {\n    var config = require('./config.json');\n    var envConfig = config[env];\n\n    Object.keys(envConfig).forEach((key) => {\n        process.env[key] = envConfig[key];\n    });\n}\n```\n2. 新增 server/config/config.json，把組態檔放進去\n```\n{\n  \"test\": {\n    \"PORT\": 3000,\n    \"MONGODB_URI\": \"mongodb://localhost:27017/TodoAppTest\",\n    \"JWT_SECRET\": \"fadskljfalkfwerlkmvvsfgreio3\"\n  },\n  \"development\": {\n    \"PORT\": 3000,\n    \"MONGODB_URI\": \"mongodb://localhost:27017/TodoApp\",\n    \"JWT_SECRET\": \"fadskljfa3kfwe345mvvsfgreio3\"\n  }\n}\n```\n3. 在 server/tests/seed/seed.js 的 jwt.sign 值都改為 `process.env.JWT_SECRET`\n4. 在 server/tests/seed/user.js 的 jwt.sign 和 jwt.verify 值都改為 `process.env.JWT_SECRET`\n5. 在 heroku 設定 JWT_SECRET\n`heroku config:set JWT_SECRET=fadskljfa3kfwe345mvvs2g3eio3`\n#### 部署到 Heroku\n1. 取得 MONGODB_URI\n`heroku config:get MONGODB_URI`\n2. 取得值 - mongodb://帳號:密碼@連線網址:39994/資料庫名稱\n3. 進入 Robo 3T 進行新的連線並測試\n4. `git push master heroku`\n#### 進階的 Postman\n1. 在 POST /users 和 /users/login 的 Test 選項寫入下面兩行，在送出時就會設定 x-auth 為全域的變數\n```\nvar token = postman.getResponseHeader('x-auth');\npostman.setEnvironmentVariable('x-auth', token);\n```\n2. 在其他的 header 加上 {{\"{{x-auth\" }}}} 取得變數\n3. 在 POST /todos 的 Test 選項寫入下面兩行，在送出時就會設定 todoId 為全域的變數\n```\nvar body = JSON.parse(responseBody);\npostman.setEnvironmentVariable('todoId', body._id);\n```\n4. 在其他有 id 的 url 上面加上 {{\"{{todoId\" }}}}\n#### 升級 expect\n1. `npm install expect@21.2.1 --save-dev`\n2. 把 server/tests/server.test.js 的 toNotExist 改成 toBeFalsy，把 toExist 改成 toBeTruthy\n3. 在 PATCH /todos/:id 的部份把 `expect(res.body.todo.completedAt).toBeA('number');` 取代為 `expect(typeof res.body.todo.completedAt).toBe('number');`\n4. 將 .toNotBe 改為 .not.toBe\n5. 將 toInclude 改為 toMatchObject，toObject 會拋回原始的 user 資料\n`expect(user.toObject().tokens[1]).toMatchObject({`\n### 使用 Socket.io 的即時 Web Apps\n#### 創建一個專案\n1. `mkdir node-chat-app`\n2. `cd node-chat-app`\n3. `npm init`\n4. `git init`\n5. 新增 server/server.js\n```\nconst path = require('path');\nconst express = require('express');\n\nconst publicPath = path.join(__dirname, '../public');\nconst port = process.env.PORT || 3000;\nvar app = express();\n\napp.use(express.static(publicPath));\n\napp.listen(port, () => {\n    console.log(`Server is up on ${port}`);\n});\n```\n6. 新增 public/index.html\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <p>Welcome to the chat app</p>\n</body>\n</html>\n```\n7. `npm i express --save`\n8. 推到 Github\n```\ngit add .\ngit commit -m 'Init commit'\ngit remote add origin https://github.com/TingSyuanWang/node-chat-app.git\ngit push -u origin master\n```\n9. 發佈到 heroku\n```\nheroku create\ngit push heroku master\n```\n#### 增加 Socket.io 到 App\n1. `npm i socket.io --save`\n2. 新增 http 和 socketIO 到 server/server.js，\n```\nconst http = require('http');\nconst socketIO = require('socket.io');\n\nvar server = http.createServer(app);\nvar io = socketIO(server);\n\nio.on('connection', (socket) => {\n    console.log('New user connected');\n\n    socket.on('disconnect', () => {\n        console.log('User was disconnected');\n    });\n});\n\nserver.listen(port, () => {\n    console.log(`Server is up on ${port}`);\n});\n```\n3. 新增 socket.io 到 index.html\n```\n<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n    var socket = io();\n\n    socket.on('connect', () => {\n        console.log('Connected to server');\n    });\n\n    socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n    });\n</script>\n```\n#### Events 的 Emitting 和 Listening\n1. 新增 public/js/index.js\n```\nvar socket = io();\n\nsocket.on('connect', function () {\n    console.log('Connected to server');\n\n    socket.emit('createEmail', {\n        to: 'jen@example.com',\n        text: 'Hey. This is Andrew.'\n    });\n});\n\nsocket.on('disconnect', function () {\n    console.log('Disconnected from server');\n});\n\nsocket.on('newEmail', function (email) {\n    console.log('New email', email);\n});\n```\n2. 在 public/index.html 引入 script\n`<script src=\"js/index.js\"></script>`\n3. 在 server/server.js 在 connect 的時候，傳出 newEmail，然後等待接收 createEmail\n```\nsocket.emit('newEmail', {\n    from: 'mike@example.com',\n    text: 'Hey. What is going on',\n    createdAt: 123\n});\n\nsocket.on('createEmail', (newEmail) => {\n    console.log('createEmail', newEmail);\n});\n```\n4. 在 public/js/index.js 新增 emit\n```\nsocket.emit('createMessage', {\n    from: 'Andrew',\n    text: 'Yup, that works for me.'\n});\n```\n5. 在 server/server.js 接收 client 的 emit\n```\nsocket.on('createMessage', (message) => {\n    console.log('createMessage', message);\n});\n```\n6. 在 server/server.js 新增 emit\n```\nsocket.emit('newMessage', {\n    from: 'John',\n    text: 'See you then',\n    createdAt: 123123\n});\n```\n7. 在 public/js/index.js 把接收的 Message console 出來\n```\nsocket.on('newMessage', function (message) {\n    console.log('newMessage', message);\n});\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day10.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day10\nthumbnail:\n  - /images/learning/nodejs/nodejsday10.jpg\ndate: 2017-10-08 00:37:59\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday10.jpg\">\n\n***\n### 安全和認證\n#### 讓 Todo Routes Private\n1. 修改 server/models/todo.js 新增 _creator\n```\n_creator: {\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n}\n```\n2. 修改 server/tests/seed/seed.js 新增 _creator\n```\nconst todos = [{\n    _id: new ObjectID(),\n    text: 'First test todo',\n    _creator: userOneId\n}, {\n    _id: new ObjectID(),\n    text: 'Second test todo',\n    completed: true,\n    completedAt: 333,\n    _creator: userTwoId\n}];\n```\n3. 修改 server/server.js，加入 authenticate，然後新增 _creator\n```\napp.post('/todos', authenticate, (req, res) => {\n    var todo = new Todo({\n        text: req.body.text,\n        _creator: req.user._id\n    });\n\n    todo.save().then((doc) => {\n        res.send(doc);\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n\napp.get('/todos', authenticate, (req, res) => {\n    Todo.find({\n        _creator: req.user._id\n    }).then((todos) => {\n        res.send({todos});\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n```\n4. 在 server/tests/server.test.js 的 POST 部分設置 x-auth\n`.set('x-auth', users[0].tokens[0].token)`\n5. 在 server/tests/server.test.js 的 GET 部分設置 x-auth，並在回送時設定長度為 1，因為設置了 creator，只會回傳一個 todo\n```\ndescribe('GET /todos', () => {\n    it('should get all todos', (done) => {\n        request(app)\n            .get('/todos')\n            .set('x-auth', users[0].tokens[0].token)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todos.length).toBe(1);\n            })\n            .end(done);\n    });\n});\n```\n6. 在 server/server.js 修改 POST /users/login 的 token 為 1\n```\nexpect(user.tokens[1]).toInclude({\n    access: 'auth',\n    token: res.headers['x-auth']\n});\n```\n7. 在 server/server.js 修改 GET /todos/:id'，新增 authenticate middleware，且修改 findById 成 findOne\n```\napp.get('/todos/:id', authenticate, (req, res) => {\n\nTodo.findOne({\n    _id: id,\n    _creator: req.user._id\n}\n```\n8. 在 server/tests/server.test.js 修改 GET /todos 和 GET /todo/:id 都加上 `.set('x-auth', users[0].tokens[0].token)`\n9. 在 server/server.js 修改 DELETE /todos/:id'，新增 authenticate middleware，且修改 findByIdAndRemove 成 findOneAndRemove\n```\napp.delete('/todos/:id', authenticate, (req, res) => {\n\nTodo.findOneAndRemove({\n    _id: id,\n    _creator: req.user._id\n}\n```\n10. 在 server/tests/server.test.js 的 describe('GET /todo/:id') 加上一個測試，如果被其他使用者建立的 todo 則 404\n```\nit('should not return todo doc created by other user', (done) => {\n    request(app)\n        .get(`/todos/${todos[1]._id.toHexString()}`)\n        .set('x-auth', users[0].tokens[0].token)\n        .expect(404)\n        .end(done);\n});\n```\n11. 在 server/tests/server.test.js 的 DELETE /todos/:id 的每個測試都加上\n`.set('x-auth', users[1].tokens[0].token)`\n12. 在新增一個測試，如果 todo 對不上 user 就回傳 404\n```\nit('should not remove a todo', (done) => {\n    var hexId = todos[0]._id.toHexString();\n\n    request(app)\n        .delete(`/todos/${hexId}`)\n        .set('x-auth', users[1].tokens[0].token)\n        .expect(404)\n        .end((err, res) => {\n            if (err) {\n                return done(err);\n            }\n\n            Todo.findById(hexId).then((todo) => {\n                expect(todo).toExist();\n                done();\n            }).catch((e) => done(e));\n        });\n});\n```\n13. 在 server/server.js 修改 PATCH /todos/:id'，新增 authenticate middleware，且修改 findByIdAndUpdate 成 findOneAndUpdate\n```\napp.patch('/todos/:id', authenticate, (req, res) => {\n\nTodo.findOneAndUpdate({_id: id, _creator: req.user._id}, {$set: body}, {new: true})\n```\n#### 改善 App 組態設定\n1. 在 server/config/config.js 修改成用 json 的方式讀取環境變數\n```\nvar env = process.env.NODE_ENV || 'development';\n\nif (env === 'development' || env === 'test') {\n    var config = require('./config.json');\n    var envConfig = config[env];\n\n    Object.keys(envConfig).forEach((key) => {\n        process.env[key] = envConfig[key];\n    });\n}\n```\n2. 新增 server/config/config.json，把組態檔放進去\n```\n{\n  \"test\": {\n    \"PORT\": 3000,\n    \"MONGODB_URI\": \"mongodb://localhost:27017/TodoAppTest\",\n    \"JWT_SECRET\": \"fadskljfalkfwerlkmvvsfgreio3\"\n  },\n  \"development\": {\n    \"PORT\": 3000,\n    \"MONGODB_URI\": \"mongodb://localhost:27017/TodoApp\",\n    \"JWT_SECRET\": \"fadskljfa3kfwe345mvvsfgreio3\"\n  }\n}\n```\n3. 在 server/tests/seed/seed.js 的 jwt.sign 值都改為 `process.env.JWT_SECRET`\n4. 在 server/tests/seed/user.js 的 jwt.sign 和 jwt.verify 值都改為 `process.env.JWT_SECRET`\n5. 在 heroku 設定 JWT_SECRET\n`heroku config:set JWT_SECRET=fadskljfa3kfwe345mvvs2g3eio3`\n#### 部署到 Heroku\n1. 取得 MONGODB_URI\n`heroku config:get MONGODB_URI`\n2. 取得值 - mongodb://帳號:密碼@連線網址:39994/資料庫名稱\n3. 進入 Robo 3T 進行新的連線並測試\n4. `git push master heroku`\n#### 進階的 Postman\n1. 在 POST /users 和 /users/login 的 Test 選項寫入下面兩行，在送出時就會設定 x-auth 為全域的變數\n```\nvar token = postman.getResponseHeader('x-auth');\npostman.setEnvironmentVariable('x-auth', token);\n```\n2. 在其他的 header 加上 {{\"{{x-auth\" }}}} 取得變數\n3. 在 POST /todos 的 Test 選項寫入下面兩行，在送出時就會設定 todoId 為全域的變數\n```\nvar body = JSON.parse(responseBody);\npostman.setEnvironmentVariable('todoId', body._id);\n```\n4. 在其他有 id 的 url 上面加上 {{\"{{todoId\" }}}}\n#### 升級 expect\n1. `npm install expect@21.2.1 --save-dev`\n2. 把 server/tests/server.test.js 的 toNotExist 改成 toBeFalsy，把 toExist 改成 toBeTruthy\n3. 在 PATCH /todos/:id 的部份把 `expect(res.body.todo.completedAt).toBeA('number');` 取代為 `expect(typeof res.body.todo.completedAt).toBe('number');`\n4. 將 .toNotBe 改為 .not.toBe\n5. 將 toInclude 改為 toMatchObject，toObject 會拋回原始的 user 資料\n`expect(user.toObject().tokens[1]).toMatchObject({`\n### 使用 Socket.io 的即時 Web Apps\n#### 創建一個專案\n1. `mkdir node-chat-app`\n2. `cd node-chat-app`\n3. `npm init`\n4. `git init`\n5. 新增 server/server.js\n```\nconst path = require('path');\nconst express = require('express');\n\nconst publicPath = path.join(__dirname, '../public');\nconst port = process.env.PORT || 3000;\nvar app = express();\n\napp.use(express.static(publicPath));\n\napp.listen(port, () => {\n    console.log(`Server is up on ${port}`);\n});\n```\n6. 新增 public/index.html\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <p>Welcome to the chat app</p>\n</body>\n</html>\n```\n7. `npm i express --save`\n8. 推到 Github\n```\ngit add .\ngit commit -m 'Init commit'\ngit remote add origin https://github.com/TingSyuanWang/node-chat-app.git\ngit push -u origin master\n```\n9. 發佈到 heroku\n```\nheroku create\ngit push heroku master\n```\n#### 增加 Socket.io 到 App\n1. `npm i socket.io --save`\n2. 新增 http 和 socketIO 到 server/server.js，\n```\nconst http = require('http');\nconst socketIO = require('socket.io');\n\nvar server = http.createServer(app);\nvar io = socketIO(server);\n\nio.on('connection', (socket) => {\n    console.log('New user connected');\n\n    socket.on('disconnect', () => {\n        console.log('User was disconnected');\n    });\n});\n\nserver.listen(port, () => {\n    console.log(`Server is up on ${port}`);\n});\n```\n3. 新增 socket.io 到 index.html\n```\n<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n    var socket = io();\n\n    socket.on('connect', () => {\n        console.log('Connected to server');\n    });\n\n    socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n    });\n</script>\n```\n#### Events 的 Emitting 和 Listening\n1. 新增 public/js/index.js\n```\nvar socket = io();\n\nsocket.on('connect', function () {\n    console.log('Connected to server');\n\n    socket.emit('createEmail', {\n        to: 'jen@example.com',\n        text: 'Hey. This is Andrew.'\n    });\n});\n\nsocket.on('disconnect', function () {\n    console.log('Disconnected from server');\n});\n\nsocket.on('newEmail', function (email) {\n    console.log('New email', email);\n});\n```\n2. 在 public/index.html 引入 script\n`<script src=\"js/index.js\"></script>`\n3. 在 server/server.js 在 connect 的時候，傳出 newEmail，然後等待接收 createEmail\n```\nsocket.emit('newEmail', {\n    from: 'mike@example.com',\n    text: 'Hey. What is going on',\n    createdAt: 123\n});\n\nsocket.on('createEmail', (newEmail) => {\n    console.log('createEmail', newEmail);\n});\n```\n4. 在 public/js/index.js 新增 emit\n```\nsocket.emit('createMessage', {\n    from: 'Andrew',\n    text: 'Yup, that works for me.'\n});\n```\n5. 在 server/server.js 接收 client 的 emit\n```\nsocket.on('createMessage', (message) => {\n    console.log('createMessage', message);\n});\n```\n6. 在 server/server.js 新增 emit\n```\nsocket.emit('newMessage', {\n    from: 'John',\n    text: 'See you then',\n    createdAt: 123123\n});\n```\n7. 在 public/js/index.js 把接收的 Message console 出來\n```\nsocket.on('newMessage', function (message) {\n    console.log('newMessage', message);\n});\n```","slug":"Nodejs-快速學習自我挑戰-Day10","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxf003h7ifan9i43o0r","content":"<img src=\"/images/learning/nodejs/nodejsday10.jpg\">\n<hr>\n<h3>安全和認證</h3>\n<h4>讓 Todo Routes Private</h4>\n<ol>\n<li>修改 server/models/todo.js 新增 _creator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_creator: &#123;</div><div class=\"line\">    type: mongoose.Schema.Types.ObjectId,</div><div class=\"line\">    required: true,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/tests/seed/seed.js 新增 _creator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;First test todo&apos;,</div><div class=\"line\">    _creator: userOneId</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;Second test todo&apos;,</div><div class=\"line\">    completed: true,</div><div class=\"line\">    completedAt: 333,</div><div class=\"line\">    _creator: userTwoId</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 server/server.js，加入 authenticate，然後新增 _creator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/todos&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    var todo = new Todo(&#123;</div><div class=\"line\">        text: req.body.text,</div><div class=\"line\">        _creator: req.user._id</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    todo.save().then((doc) =&gt; &#123;</div><div class=\"line\">        res.send(doc);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/todos&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    Todo.find(&#123;</div><div class=\"line\">        _creator: req.user._id</div><div class=\"line\">    &#125;).then((todos) =&gt; &#123;</div><div class=\"line\">        res.send(&#123;todos&#125;);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/tests/server.test.js 的 POST 部分設置 x-auth<br>\n<code>.set('x-auth', users[0].tokens[0].token)</code></li>\n<li>在 server/tests/server.test.js 的 GET 部分設置 x-auth，並在回送時設定長度為 1，因為設置了 creator，只會回傳一個 todo</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /todos&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should get all todos&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/todos&apos;)</div><div class=\"line\">            .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todos.length).toBe(1);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/server.js 修改 POST /users/login 的 token 為 1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(user.tokens[1]).toInclude(&#123;</div><div class=\"line\">    access: &apos;auth&apos;,</div><div class=\"line\">    token: res.headers[&apos;x-auth&apos;]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 server/server.js 修改 GET /todos/:id’，新增 authenticate middleware，且修改 findById 成 findOne</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/todos/:id&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">Todo.findOne(&#123;</div><div class=\"line\">    _id: id,</div><div class=\"line\">    _creator: req.user._id</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 server/tests/server.test.js 修改 GET /todos 和 GET /todo/:id 都加上 <code>.set('x-auth', users[0].tokens[0].token)</code></li>\n<li>在 server/server.js 修改 DELETE /todos/:id’，新增 authenticate middleware，且修改 findByIdAndRemove 成 findOneAndRemove</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.delete(&apos;/todos/:id&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">Todo.findOneAndRemove(&#123;</div><div class=\"line\">    _id: id,</div><div class=\"line\">    _creator: req.user._id</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>在 server/tests/server.test.js 的 describe(‘GET /todo/:id’) 加上一個測試，如果被其他使用者建立的 todo 則 404</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should not return todo doc created by other user&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(`/todos/$&#123;todos[1]._id.toHexString()&#125;`)</div><div class=\"line\">        .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>在 server/tests/server.test.js 的 DELETE /todos/:id 的每個測試都加上<br>\n<code>.set('x-auth', users[1].tokens[0].token)</code></li>\n<li>在新增一個測試，如果 todo 對不上 user 就回傳 404</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should not remove a todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = todos[0]._id.toHexString();</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .delete(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .set(&apos;x-auth&apos;, users[1].tokens[0].token)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end((err, res) =&gt; &#123;</div><div class=\"line\">            if (err) &#123;</div><div class=\"line\">                return done(err);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Todo.findById(hexId).then((todo) =&gt; &#123;</div><div class=\"line\">                expect(todo).toExist();</div><div class=\"line\">                done();</div><div class=\"line\">            &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 server/server.js 修改 PATCH /todos/:id’，新增 authenticate middleware，且修改 findByIdAndUpdate 成 findOneAndUpdate</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.patch(&apos;/todos/:id&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">Todo.findOneAndUpdate(&#123;_id: id, _creator: req.user._id&#125;, &#123;$set: body&#125;, &#123;new: true&#125;)</div></pre></td></tr></table></figure>\n<h4>改善 App 組態設定</h4>\n<ol>\n<li>在 server/config/config.js 修改成用 json 的方式讀取環境變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var env = process.env.NODE_ENV || &apos;development&apos;;</div><div class=\"line\"></div><div class=\"line\">if (env === &apos;development&apos; || env === &apos;test&apos;) &#123;</div><div class=\"line\">    var config = require(&apos;./config.json&apos;);</div><div class=\"line\">    var envConfig = config[env];</div><div class=\"line\"></div><div class=\"line\">    Object.keys(envConfig).forEach((key) =&gt; &#123;</div><div class=\"line\">        process.env[key] = envConfig[key];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 server/config/config.json，把組態檔放進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;test&quot;: &#123;</div><div class=\"line\">    &quot;PORT&quot;: 3000,</div><div class=\"line\">    &quot;MONGODB_URI&quot;: &quot;mongodb://localhost:27017/TodoAppTest&quot;,</div><div class=\"line\">    &quot;JWT_SECRET&quot;: &quot;fadskljfalkfwerlkmvvsfgreio3&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;development&quot;: &#123;</div><div class=\"line\">    &quot;PORT&quot;: 3000,</div><div class=\"line\">    &quot;MONGODB_URI&quot;: &quot;mongodb://localhost:27017/TodoApp&quot;,</div><div class=\"line\">    &quot;JWT_SECRET&quot;: &quot;fadskljfa3kfwe345mvvsfgreio3&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 server/tests/seed/seed.js 的 jwt.sign 值都改為 <code>process.env.JWT_SECRET</code></li>\n<li>在 server/tests/seed/user.js 的 jwt.sign 和 jwt.verify 值都改為 <code>process.env.JWT_SECRET</code></li>\n<li>在 heroku 設定 JWT_SECRET<br>\n<code>heroku config:set JWT_SECRET=fadskljfa3kfwe345mvvs2g3eio3</code></li>\n</ol>\n<h4>部署到 Heroku</h4>\n<ol>\n<li>取得 MONGODB_URI<br>\n<code>heroku config:get MONGODB_URI</code></li>\n<li>取得值 - mongodb://帳號:密碼@連線網址:39994/資料庫名稱</li>\n<li>進入 Robo 3T 進行新的連線並測試</li>\n<li><code>git push master heroku</code></li>\n</ol>\n<h4>進階的 Postman</h4>\n<ol>\n<li>在 POST /users 和 /users/login 的 Test 選項寫入下面兩行，在送出時就會設定 x-auth 為全域的變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var token = postman.getResponseHeader(&apos;x-auth&apos;);</div><div class=\"line\">postman.setEnvironmentVariable(&apos;x-auth&apos;, token);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在其他的 header 加上 {{x-auth}} 取得變數</li>\n<li>在 POST /todos 的 Test 選項寫入下面兩行，在送出時就會設定 todoId 為全域的變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var body = JSON.parse(responseBody);</div><div class=\"line\">postman.setEnvironmentVariable(&apos;todoId&apos;, body._id);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在其他有 id 的 url 上面加上 {{todoId}}</li>\n</ol>\n<h4>升級 expect</h4>\n<ol>\n<li><code>npm install expect@21.2.1 --save-dev</code></li>\n<li>把 server/tests/server.test.js 的 toNotExist 改成 toBeFalsy，把 toExist 改成 toBeTruthy</li>\n<li>在 PATCH /todos/:id 的部份把 <code>expect(res.body.todo.completedAt).toBeA('number');</code> 取代為 <code>expect(typeof res.body.todo.completedAt).toBe('number');</code></li>\n<li>將 .toNotBe 改為 .not.toBe</li>\n<li>將 toInclude 改為 toMatchObject，toObject 會拋回原始的 user 資料<br>\n<code>expect(user.toObject().tokens[1]).toMatchObject({</code></li>\n</ol>\n<h3>使用 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 的即時 Web Apps</h3>\n<h4>創建一個專案</h4>\n<ol>\n<li><code>mkdir node-chat-app</code></li>\n<li><code>cd node-chat-app</code></li>\n<li><code>npm init</code></li>\n<li><code>git init</code></li>\n<li>新增 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const path = require(&apos;path&apos;);</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">const publicPath = path.join(__dirname, &apos;../public&apos;);</div><div class=\"line\">const port = process.env.PORT || 3000;</div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(publicPath));</div><div class=\"line\"></div><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server is up on $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>新增 public/index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot;</div><div class=\"line\">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;p&gt;Welcome to the chat app&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li><code>npm i express --save</code></li>\n<li>推到 Github</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;Init commit&apos;</div><div class=\"line\">git remote add origin https://github.com/TingSyuanWang/node-chat-app.git</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>發佈到 heroku</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">heroku create</div><div class=\"line\">git push heroku master</div></pre></td></tr></table></figure>\n<h4>增加 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 到 App</h4>\n<ol>\n<li><code>npm i socket.io --save</code></li>\n<li>新增 http 和 socketIO 到 server/server.js，</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const http = require(&apos;http&apos;);</div><div class=\"line\">const socketIO = require(&apos;socket.io&apos;);</div><div class=\"line\"></div><div class=\"line\">var server = http.createServer(app);</div><div class=\"line\">var io = socketIO(server);</div><div class=\"line\"></div><div class=\"line\">io.on(&apos;connection&apos;, (socket) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;New user connected&apos;);</div><div class=\"line\"></div><div class=\"line\">    socket.on(&apos;disconnect&apos;, () =&gt; &#123;</div><div class=\"line\">        console.log(&apos;User was disconnected&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server is up on $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 <a href=\"http://socket.io\" target=\"_blank\" rel=\"external\">socket.io</a> 到 index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var socket = io();</div><div class=\"line\"></div><div class=\"line\">    socket.on(&apos;connect&apos;, () =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Connected to server&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    socket.on(&apos;disconnect&apos;, () =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Disconnected from server&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h4>Events 的 Emitting 和 Listening</h4>\n<ol>\n<li>新增 public/js/index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var socket = io();</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;connect&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;Connected to server&apos;);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;createEmail&apos;, &#123;</div><div class=\"line\">        to: &apos;jen@example.com&apos;,</div><div class=\"line\">        text: &apos;Hey. This is Andrew.&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;disconnect&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;Disconnected from server&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;newEmail&apos;, function (email) &#123;</div><div class=\"line\">    console.log(&apos;New email&apos;, email);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 public/index.html 引入 script<br>\n<code>&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 server/server.js 在 connect 的時候，傳出 newEmail，然後等待接收 createEmail</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newEmail&apos;, &#123;</div><div class=\"line\">    from: &apos;mike@example.com&apos;,</div><div class=\"line\">    text: &apos;Hey. What is going on&apos;,</div><div class=\"line\">    createdAt: 123</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;createEmail&apos;, (newEmail) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createEmail&apos;, newEmail);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 public/js/index.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Andrew&apos;,</div><div class=\"line\">    text: &apos;Yup, that works for me.&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 server/server.js 接收 client 的 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/server.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;John&apos;,</div><div class=\"line\">    text: &apos;See you then&apos;,</div><div class=\"line\">    createdAt: 123123</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 public/js/index.js 把接收的 Message console 出來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newMessage&apos;, function (message) &#123;</div><div class=\"line\">    console.log(&apos;newMessage&apos;, message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday10.jpg\">\n<hr>\n<h3>安全和認證</h3>\n<h4>讓 Todo Routes Private</h4>\n<ol>\n<li>修改 server/models/todo.js 新增 _creator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_creator: &#123;</div><div class=\"line\">    type: mongoose.Schema.Types.ObjectId,</div><div class=\"line\">    required: true,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/tests/seed/seed.js 新增 _creator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;First test todo&apos;,</div><div class=\"line\">    _creator: userOneId</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;Second test todo&apos;,</div><div class=\"line\">    completed: true,</div><div class=\"line\">    completedAt: 333,</div><div class=\"line\">    _creator: userTwoId</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 server/server.js，加入 authenticate，然後新增 _creator</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/todos&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    var todo = new Todo(&#123;</div><div class=\"line\">        text: req.body.text,</div><div class=\"line\">        _creator: req.user._id</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    todo.save().then((doc) =&gt; &#123;</div><div class=\"line\">        res.send(doc);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/todos&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    Todo.find(&#123;</div><div class=\"line\">        _creator: req.user._id</div><div class=\"line\">    &#125;).then((todos) =&gt; &#123;</div><div class=\"line\">        res.send(&#123;todos&#125;);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/tests/server.test.js 的 POST 部分設置 x-auth<br>\n<code>.set('x-auth', users[0].tokens[0].token)</code></li>\n<li>在 server/tests/server.test.js 的 GET 部分設置 x-auth，並在回送時設定長度為 1，因為設置了 creator，只會回傳一個 todo</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /todos&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should get all todos&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/todos&apos;)</div><div class=\"line\">            .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todos.length).toBe(1);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/server.js 修改 POST /users/login 的 token 為 1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(user.tokens[1]).toInclude(&#123;</div><div class=\"line\">    access: &apos;auth&apos;,</div><div class=\"line\">    token: res.headers[&apos;x-auth&apos;]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 server/server.js 修改 GET /todos/:id’，新增 authenticate middleware，且修改 findById 成 findOne</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/todos/:id&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">Todo.findOne(&#123;</div><div class=\"line\">    _id: id,</div><div class=\"line\">    _creator: req.user._id</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 server/tests/server.test.js 修改 GET /todos 和 GET /todo/:id 都加上 <code>.set('x-auth', users[0].tokens[0].token)</code></li>\n<li>在 server/server.js 修改 DELETE /todos/:id’，新增 authenticate middleware，且修改 findByIdAndRemove 成 findOneAndRemove</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.delete(&apos;/todos/:id&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">Todo.findOneAndRemove(&#123;</div><div class=\"line\">    _id: id,</div><div class=\"line\">    _creator: req.user._id</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>在 server/tests/server.test.js 的 describe(‘GET /todo/:id’) 加上一個測試，如果被其他使用者建立的 todo 則 404</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should not return todo doc created by other user&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(`/todos/$&#123;todos[1]._id.toHexString()&#125;`)</div><div class=\"line\">        .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>在 server/tests/server.test.js 的 DELETE /todos/:id 的每個測試都加上<br>\n<code>.set('x-auth', users[1].tokens[0].token)</code></li>\n<li>在新增一個測試，如果 todo 對不上 user 就回傳 404</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should not remove a todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = todos[0]._id.toHexString();</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .delete(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .set(&apos;x-auth&apos;, users[1].tokens[0].token)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end((err, res) =&gt; &#123;</div><div class=\"line\">            if (err) &#123;</div><div class=\"line\">                return done(err);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Todo.findById(hexId).then((todo) =&gt; &#123;</div><div class=\"line\">                expect(todo).toExist();</div><div class=\"line\">                done();</div><div class=\"line\">            &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 server/server.js 修改 PATCH /todos/:id’，新增 authenticate middleware，且修改 findByIdAndUpdate 成 findOneAndUpdate</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.patch(&apos;/todos/:id&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">Todo.findOneAndUpdate(&#123;_id: id, _creator: req.user._id&#125;, &#123;$set: body&#125;, &#123;new: true&#125;)</div></pre></td></tr></table></figure>\n<h4>改善 App 組態設定</h4>\n<ol>\n<li>在 server/config/config.js 修改成用 json 的方式讀取環境變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var env = process.env.NODE_ENV || &apos;development&apos;;</div><div class=\"line\"></div><div class=\"line\">if (env === &apos;development&apos; || env === &apos;test&apos;) &#123;</div><div class=\"line\">    var config = require(&apos;./config.json&apos;);</div><div class=\"line\">    var envConfig = config[env];</div><div class=\"line\"></div><div class=\"line\">    Object.keys(envConfig).forEach((key) =&gt; &#123;</div><div class=\"line\">        process.env[key] = envConfig[key];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 server/config/config.json，把組態檔放進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;test&quot;: &#123;</div><div class=\"line\">    &quot;PORT&quot;: 3000,</div><div class=\"line\">    &quot;MONGODB_URI&quot;: &quot;mongodb://localhost:27017/TodoAppTest&quot;,</div><div class=\"line\">    &quot;JWT_SECRET&quot;: &quot;fadskljfalkfwerlkmvvsfgreio3&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;development&quot;: &#123;</div><div class=\"line\">    &quot;PORT&quot;: 3000,</div><div class=\"line\">    &quot;MONGODB_URI&quot;: &quot;mongodb://localhost:27017/TodoApp&quot;,</div><div class=\"line\">    &quot;JWT_SECRET&quot;: &quot;fadskljfa3kfwe345mvvsfgreio3&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 server/tests/seed/seed.js 的 jwt.sign 值都改為 <code>process.env.JWT_SECRET</code></li>\n<li>在 server/tests/seed/user.js 的 jwt.sign 和 jwt.verify 值都改為 <code>process.env.JWT_SECRET</code></li>\n<li>在 heroku 設定 JWT_SECRET<br>\n<code>heroku config:set JWT_SECRET=fadskljfa3kfwe345mvvs2g3eio3</code></li>\n</ol>\n<h4>部署到 Heroku</h4>\n<ol>\n<li>取得 MONGODB_URI<br>\n<code>heroku config:get MONGODB_URI</code></li>\n<li>取得值 - mongodb://帳號:密碼@連線網址:39994/資料庫名稱</li>\n<li>進入 Robo 3T 進行新的連線並測試</li>\n<li><code>git push master heroku</code></li>\n</ol>\n<h4>進階的 Postman</h4>\n<ol>\n<li>在 POST /users 和 /users/login 的 Test 選項寫入下面兩行，在送出時就會設定 x-auth 為全域的變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var token = postman.getResponseHeader(&apos;x-auth&apos;);</div><div class=\"line\">postman.setEnvironmentVariable(&apos;x-auth&apos;, token);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在其他的 header 加上 {{x-auth}} 取得變數</li>\n<li>在 POST /todos 的 Test 選項寫入下面兩行，在送出時就會設定 todoId 為全域的變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var body = JSON.parse(responseBody);</div><div class=\"line\">postman.setEnvironmentVariable(&apos;todoId&apos;, body._id);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在其他有 id 的 url 上面加上 {{todoId}}</li>\n</ol>\n<h4>升級 expect</h4>\n<ol>\n<li><code>npm install expect@21.2.1 --save-dev</code></li>\n<li>把 server/tests/server.test.js 的 toNotExist 改成 toBeFalsy，把 toExist 改成 toBeTruthy</li>\n<li>在 PATCH /todos/:id 的部份把 <code>expect(res.body.todo.completedAt).toBeA('number');</code> 取代為 <code>expect(typeof res.body.todo.completedAt).toBe('number');</code></li>\n<li>將 .toNotBe 改為 .not.toBe</li>\n<li>將 toInclude 改為 toMatchObject，toObject 會拋回原始的 user 資料<br>\n<code>expect(user.toObject().tokens[1]).toMatchObject({</code></li>\n</ol>\n<h3>使用 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 的即時 Web Apps</h3>\n<h4>創建一個專案</h4>\n<ol>\n<li><code>mkdir node-chat-app</code></li>\n<li><code>cd node-chat-app</code></li>\n<li><code>npm init</code></li>\n<li><code>git init</code></li>\n<li>新增 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const path = require(&apos;path&apos;);</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">const publicPath = path.join(__dirname, &apos;../public&apos;);</div><div class=\"line\">const port = process.env.PORT || 3000;</div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(publicPath));</div><div class=\"line\"></div><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server is up on $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>新增 public/index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot;</div><div class=\"line\">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;p&gt;Welcome to the chat app&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li><code>npm i express --save</code></li>\n<li>推到 Github</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;Init commit&apos;</div><div class=\"line\">git remote add origin https://github.com/TingSyuanWang/node-chat-app.git</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>發佈到 heroku</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">heroku create</div><div class=\"line\">git push heroku master</div></pre></td></tr></table></figure>\n<h4>增加 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 到 App</h4>\n<ol>\n<li><code>npm i socket.io --save</code></li>\n<li>新增 http 和 socketIO 到 server/server.js，</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const http = require(&apos;http&apos;);</div><div class=\"line\">const socketIO = require(&apos;socket.io&apos;);</div><div class=\"line\"></div><div class=\"line\">var server = http.createServer(app);</div><div class=\"line\">var io = socketIO(server);</div><div class=\"line\"></div><div class=\"line\">io.on(&apos;connection&apos;, (socket) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;New user connected&apos;);</div><div class=\"line\"></div><div class=\"line\">    socket.on(&apos;disconnect&apos;, () =&gt; &#123;</div><div class=\"line\">        console.log(&apos;User was disconnected&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server is up on $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 <a href=\"http://socket.io\" target=\"_blank\" rel=\"external\">socket.io</a> 到 index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var socket = io();</div><div class=\"line\"></div><div class=\"line\">    socket.on(&apos;connect&apos;, () =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Connected to server&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    socket.on(&apos;disconnect&apos;, () =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Disconnected from server&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h4>Events 的 Emitting 和 Listening</h4>\n<ol>\n<li>新增 public/js/index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var socket = io();</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;connect&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;Connected to server&apos;);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;createEmail&apos;, &#123;</div><div class=\"line\">        to: &apos;jen@example.com&apos;,</div><div class=\"line\">        text: &apos;Hey. This is Andrew.&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;disconnect&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;Disconnected from server&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;newEmail&apos;, function (email) &#123;</div><div class=\"line\">    console.log(&apos;New email&apos;, email);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 public/index.html 引入 script<br>\n<code>&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 server/server.js 在 connect 的時候，傳出 newEmail，然後等待接收 createEmail</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newEmail&apos;, &#123;</div><div class=\"line\">    from: &apos;mike@example.com&apos;,</div><div class=\"line\">    text: &apos;Hey. What is going on&apos;,</div><div class=\"line\">    createdAt: 123</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;createEmail&apos;, (newEmail) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createEmail&apos;, newEmail);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 public/js/index.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Andrew&apos;,</div><div class=\"line\">    text: &apos;Yup, that works for me.&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 server/server.js 接收 client 的 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/server.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;John&apos;,</div><div class=\"line\">    text: &apos;See you then&apos;,</div><div class=\"line\">    createdAt: 123123</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 public/js/index.js 把接收的 Message console 出來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newMessage&apos;, function (message) &#123;</div><div class=\"line\">    console.log(&apos;newMessage&apos;, message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Nodejs 快速學習自我挑戰 Day11","thumbnail":["/images/learning/nodejs/nodejsday11.jpeg"],"date":"2017-10-09T23:12:56.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday11.jpeg\">\n\n***\n### 使用 Socket.io 的即時 Web Apps\n#### Broadcasting Events\n1. 刪除 server/server.js 和 public/js/index.js 的 socket.emit\n2. 在 server/server.js 新增 io.emit\n```\nsocket.on('createMessage', (message) => {\n    console.log('createMessage', message);\n    io.emit('newMessage', {\n        from: message.from,\n        text: message.text,\n        CreatedAt: new Date().getTime()\n    });\n});\n```\n3. `git push heroku master`\n4. 在 server/server.js 新增兩種 emit，如果 connect 就傳送歡迎，如果有新用戶進來，就 broadcast 新用戶加入\n```\nsocket.emit('newMessage', {\n    from: 'Admin',\n    text: 'Welcome to the chat app'\n});\n\nsocket.broadcast.emit('newMessage', {\n    from: 'Admin',\n    text: 'New user joined',\n    createdAt: new Date().getTime()\n});\n```\n#### 訊息產生器和測試\n1. 新增 server/utils/message.js\n```\nvar generateMessage = (from, text) => {\n    return {\n        from,\n        text,\n        createdAt: new Date().getTime()\n    };\n};\n\nmodule.exports = {generateMessage};\n```\n2. `npm install expect mocha --save-dev`\n3. 修改 package.json\n```\n\"test\": \"mocha server/**/*.test.js\",\n\"test-watch\": \"nodemon --exec 'npm test'\"\n```\n4. 新增 server/utils/message.test.js\n5. `npm test`\n6. 修改 server/utils/message.test.js\n```\nvar expect = require('expect');\n\nvar {generateMessage} = require('./message');\n\ndescribe('generateMessage', () => {\n    it('should generate correct message object', () => {\n        var from = 'Jen';\n        var text = 'Some message';\n        var message = generateMessage(from, text);\n\n        expect(typeof message.createdAt).toBe('number');\n        expect(message).toMatchObject({from, text});\n    });\n});\n```\n7. 在 server/server.js 引入 `const {generateMessage} = require('./utils/message');`\n8. 將 server/server.js 的 object 換成 function\n```\nsocket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app'));\n\nsocket.broadcast.emit('newMessage', generateMessage('Admin', 'New user joined'));\n\nio.emit('newMessage', generateMessage(message.from, message.text));\n```\n#### Event Acknowledgements\n1. 在 public/js/index.js 新增 emit\n```\nsocket.emit('createMessage', {\n    from: 'Frank',\n    test: 'Hi'\n}, function (data) {\n    console.log('Got it', data);\n});\n```\n2. 在 server/server.js 新增 callback function\n```\nsocket.on('createMessage', (message, callback) => {\n    console.log('createMessage', message);\n    io.emit('newMessage', generateMessage(message.from, message.text));\n    callback('This is from the server');\n});\n```\n#### 訊息表單和 jQuery\n1. [下載最新版的 jQuery](http://jquery.com/download/)\n2. 放到 public/js/libs/jquery.js\n3. 在 public/index.html 引入 `<script src=\"/js/libs/jquery-3.2.1.min.js\"></script>`\n4. 在 public/index.html 新增 form\n```\n<form id=\"message-form\">\n    <input name=\"message\" type=\"text\" placeholder=\"Message\" />\n    <button>Send</button>\n</form>\n```\n5. 在 public/js/index.js 新增 jQuery 來取得 form 傳出來的訊息\n```\njQuery('#message-form').on('submit', function (e) {\n    e.preventDefault();\n\n    socket.emit('createMessage', {\n        from: 'User',\n        text: jQuery('[name=message]').val()\n    }, function () {\n\n    });\n});\n```\n6. 在 public/index.html 新增 `<ol id=\"messages\"></ol>` 讓傳出得的訊息 console 在頁面上\n7. 在 public/js/index.js 將取得的文字用 jQuery 創建元素並顯示在前端\n```\nsocket.on('newMessage', function (message) {\n    console.log('newMessage', message);\n    var li = jQuery('<li></li>');\n    li.text(`${message.from}: ${message.text}`);\n\n    jQuery('#messages').append(li);\n});\n```\n8. `git push heroku master`\n#### Geolocation\n1. [Geolocation 官方文件](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation)\n2. 在 public/index.html 新增 button\n`<button id=\"send-location\">Send Location</button>`\n3. 在 public/js/index.js 新增 click 事件，當點擊時傳送出 location 的資訊\n```\nvar locationButton = jQuery('#send-location');\nlocationButton.on('click', function () {\n    if (!navigator.geolocation) {\n        return alert('Geolocation not supported by your browser');\n    }\n\n    navigator.geolocation.getCurrentPosition(function (position) {\n        socket.emit('createLocationMessage', {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        });\n    }, function () {\n        alert('Unable to fetch location');\n    });\n});\n```\n4. 在 server/server.js 新增 newMessage 把訊息傳到前端頁面\n```\nsocket.on('createLocationMessage', (coords) => {\n    io.emit('newMessage', generateMessage('Admin', `${coords.latitude}, ${coords.longitude}`));\n});\n```\n5. 在 server/server.js 新增新的 message，讓 locaiton 可以超連結\n```\nsocket.on('createLocationMessage', (coords) => {\n    io.emit('newLocationMessage', generateLocationMessage('Admin', coords.latitude, coords.longitude));\n});\n```\n6. 在 server/utils/message.js 新增 generateLocationMessage 並 export\n```\nvar generateLocationMessage = (from, latitude, longitude) => {\n    return {\n        from,\n        url: `https://www.google.com/maps?q=${latitude},${longitude}`,\n        createdAt: new Date().getTime()\n    };\n};\n\nmodule.exports = {generateMessage, generateLocationMessage};\n```\n7. 在 public/js/index.js 將取得的 location 傳送到前端頁面\n```\nsocket.on('newLocationMessage', function (message) {\n    var li = jQuery('<li></li>');\n    var a = jQuery('<a target=\"_blank\">My current location</a>');\n\n    li.text(`${message.from}: `);\n    a.attr('href', message.url);\n    li.append(a);\n    jQuery('#messages').append(li);\n});\n```\n8. 在 server/utils/message.test.js 測試 generateLocationMessage 可以運作\n```\ndescribe('generateLocationMessage', () => {\n    it('should generate correct location object', () => {\n        var from = 'Deb';\n        var latitude = 15;\n        var longitude = 19;\n        var url = 'https://www.google.com/maps?q=15,19';\n        var message = generateLocationMessage(from, latitude, longitude);\n\n        expect(typeof message.createdAt).toBe('number');\n        expect(message).toMatchObject({from, url});\n    });\n});\n```\n9. `git push heroku master`\n#### 裝飾聊天頁面\n1. [樣式](https://gist.github.com/andrewjmead/4783dec59ba2d1e5bcf3e1c301c5858d)\n2. 新增 public/css/styles.css\n```\nbutton,button:hover{border:none;color:#fff;padding:10px}.chat__messages,.chat__sidebar ul{list-style-type:none}*{box-sizing:border-box;margin:0;padding:0;font-family:HelveticaNeue-Light,\"Helvetica Neue Light\",\"Helvetica Neue\",Helvetica,Arial,\"Lucida Grande\",sans-serif;font-weight:300;font-size:.95rem}li,ul{list-style-position:inside}h3{font-weight:600;text-align:center;font-size:1.5rem}button{background:#265f82;cursor:pointer;transition:background .3s ease}button:hover{background:#1F4C69}button:disabled{cursor:default;background:#698ea5}.centered-form{display:flex;align-items:center;height:100vh;width:100vw;justify-content:center;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)}.centered-form__form{background:rgba(250,250,250,.9);border:1px solid #e1e1e1;border-radius:5px;padding:0 20px;margin:20px;width:230px}.form-field{margin:20px 0}.form-field>*{width:100%}.form-field label{display:block;margin-bottom:7px}.form-field input,.form-field select{border:1px solid #e1e1e1;padding:10px}.chat{display:flex}.chat__sidebar{overflow-y:scroll;width:260px;height:100vh;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)}.chat__footer,.chat__sidebar li{background:#e6eaee;padding:10px}.chat__sidebar h3{color:#e6eaee;margin:10px 20px;text-align:left}.chat__sidebar li{border:1px solid #e1e1e1;border-radius:5px;margin:10px}.chat__main{display:flex;flex-direction:column;height:100vh;width:100%}.chat__messages{flex-grow:1;overflow-y:scroll;-webkit-overflow-scrolling:touch;padding:10px}.chat__footer{display:flex;flex-shrink:0}.chat__footer form{flex-grow:1;display:flex}.chat__footer form *{margin-right:10px}.chat__footer input{border:none;padding:10px;flex-grow:1}.message{padding:10px}.message__title{display:flex;margin-bottom:5px}.message__title h4{font-weight:600;margin-right:10px}.message__title span{color:#999}@media (max-width:600px){*{font-size:1rem}.chat__sidebar{display:none}.chat__footer{flex-direction:column}.chat__footer form{margin-bottom:10px}.chat__footer button{margin-right:0}}\n```\n2. 在 public/index.html 引入 `<link rel=\"stylesheet\" href=\"/css/styles.css\">`\n3. 在 public/index.html 加入樣式\n```\n<body class=\"body\">\n\n    <div class=\"chat__sidebar\">\n        <h3>People</h3>\n        <div id=\"users\"></div>\n    </div>\n\n    <div class=\"chat__main\">\n        <ol id=\"messages\" class=\"chat__messages\"></ol>\n\n        <div class=\"chat__footer\">\n            <form id=\"message-form\">\n                <input name=\"message\" type=\"text\" placeholder=\"Message\" autofocus autocomplete=\"off\" />\n                <button>Send</button>\n            </form>\n            <button id=\"send-location\">Send Location</button>\n        </div>\n    </div>\n\n    <script src=\"/socket.io/socket.io.js\"></script>\n    <script src=\"/js/libs/jquery-3.2.1.min.js\"></script>\n    <script src=\"/js/index.js\"></script>\n</body>\n```\n4. 在 server/server.js 把 callback 改為空值\n```\nsocket.on('createMessage', (message, callback) => {\n    console.log('createMessage', message);\n    io.emit('newMessage', generateMessage(message.from, message.text));\n    callback('');\n});\n```\n5. 修改 public/js/index.js 用 jQuery 取得值，然後送到 server\n```\njQuery('#message-form').on('submit', function (e) {\n    e.preventDefault();\n\n    var messageTextbox = jQuery('[name=message]');\n\n    socket.emit('createMessage', {\n        from: 'User',\n        text: messageTextbox.val()\n    }, function () {\n        messageTextbox.val('')\n    });\n});\n```\n6. 修改 public/js/index.js 當送出的時候把按鈕變成無法點擊，完成之後就移除無法點擊的效果\n```\nlocationButton.on('click', function () {\n    if (!navigator.geolocation) {\n        return alert('Geolocation not supported by your browser');\n    }\n\n    locationButton.attr('disabled', 'disabled').text('Sending location...');\n\n    navigator.geolocation.getCurrentPosition(function (position) {\n        locationButton.removeAttr('disabled').text('Send location');\n        socket.emit('createLocationMessage', {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        });\n    }, function () {\n        locationButton.removeAttr('disabled').text('Send location');\n        alert('Unable to fetch location');\n    });\n});\n```\n#### Timestamps 和使用 Moment 格式化\n1. `npm i moment --save`\n2. [Momentjs 官方網站](http://momentjs.com/)\n3. 新增 playground/time.js 測試 moment.js\n```\nvar moment = require('moment');\n\nvar date = moment();\ndate.add(1, 'years').subtract(9, 'months');\nconsole.log(date.format('MMM Do, YYYY'));\nconsole.log(date.format('h:mm a'));\n```\n#### Printing Message Timestamps\n1. 修改 server/utils/message.js，引入 moment，然後將 createdAt 改為 moment().valueOf();\n```\nvar moment = require('moment');\n\ncreatedAt: moment().valueOf()\n```\n2. `npm test`，確定測試可以通過\n3. 從 node_modules/moment/moment.js 複製檔案到 public/js/libs/moment.js\n4. 在 public/index.html 引入 `<script src=\"/js/libs/moment.js\"></script>`\n5. 讓訊息送出時，同時顯示時間\n```\nvar formattedTime = moment(message.createdAt).format('h:mm a');\n\nli.text(`${message.from} ${formattedTime}: ${message.text}`);\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day11.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day11\nthumbnail:\n  - /images/learning/nodejs/nodejsday11.jpeg\ndate: 2017-10-10 07:12:56\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday11.jpeg\">\n\n***\n### 使用 Socket.io 的即時 Web Apps\n#### Broadcasting Events\n1. 刪除 server/server.js 和 public/js/index.js 的 socket.emit\n2. 在 server/server.js 新增 io.emit\n```\nsocket.on('createMessage', (message) => {\n    console.log('createMessage', message);\n    io.emit('newMessage', {\n        from: message.from,\n        text: message.text,\n        CreatedAt: new Date().getTime()\n    });\n});\n```\n3. `git push heroku master`\n4. 在 server/server.js 新增兩種 emit，如果 connect 就傳送歡迎，如果有新用戶進來，就 broadcast 新用戶加入\n```\nsocket.emit('newMessage', {\n    from: 'Admin',\n    text: 'Welcome to the chat app'\n});\n\nsocket.broadcast.emit('newMessage', {\n    from: 'Admin',\n    text: 'New user joined',\n    createdAt: new Date().getTime()\n});\n```\n#### 訊息產生器和測試\n1. 新增 server/utils/message.js\n```\nvar generateMessage = (from, text) => {\n    return {\n        from,\n        text,\n        createdAt: new Date().getTime()\n    };\n};\n\nmodule.exports = {generateMessage};\n```\n2. `npm install expect mocha --save-dev`\n3. 修改 package.json\n```\n\"test\": \"mocha server/**/*.test.js\",\n\"test-watch\": \"nodemon --exec 'npm test'\"\n```\n4. 新增 server/utils/message.test.js\n5. `npm test`\n6. 修改 server/utils/message.test.js\n```\nvar expect = require('expect');\n\nvar {generateMessage} = require('./message');\n\ndescribe('generateMessage', () => {\n    it('should generate correct message object', () => {\n        var from = 'Jen';\n        var text = 'Some message';\n        var message = generateMessage(from, text);\n\n        expect(typeof message.createdAt).toBe('number');\n        expect(message).toMatchObject({from, text});\n    });\n});\n```\n7. 在 server/server.js 引入 `const {generateMessage} = require('./utils/message');`\n8. 將 server/server.js 的 object 換成 function\n```\nsocket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app'));\n\nsocket.broadcast.emit('newMessage', generateMessage('Admin', 'New user joined'));\n\nio.emit('newMessage', generateMessage(message.from, message.text));\n```\n#### Event Acknowledgements\n1. 在 public/js/index.js 新增 emit\n```\nsocket.emit('createMessage', {\n    from: 'Frank',\n    test: 'Hi'\n}, function (data) {\n    console.log('Got it', data);\n});\n```\n2. 在 server/server.js 新增 callback function\n```\nsocket.on('createMessage', (message, callback) => {\n    console.log('createMessage', message);\n    io.emit('newMessage', generateMessage(message.from, message.text));\n    callback('This is from the server');\n});\n```\n#### 訊息表單和 jQuery\n1. [下載最新版的 jQuery](http://jquery.com/download/)\n2. 放到 public/js/libs/jquery.js\n3. 在 public/index.html 引入 `<script src=\"/js/libs/jquery-3.2.1.min.js\"></script>`\n4. 在 public/index.html 新增 form\n```\n<form id=\"message-form\">\n    <input name=\"message\" type=\"text\" placeholder=\"Message\" />\n    <button>Send</button>\n</form>\n```\n5. 在 public/js/index.js 新增 jQuery 來取得 form 傳出來的訊息\n```\njQuery('#message-form').on('submit', function (e) {\n    e.preventDefault();\n\n    socket.emit('createMessage', {\n        from: 'User',\n        text: jQuery('[name=message]').val()\n    }, function () {\n\n    });\n});\n```\n6. 在 public/index.html 新增 `<ol id=\"messages\"></ol>` 讓傳出得的訊息 console 在頁面上\n7. 在 public/js/index.js 將取得的文字用 jQuery 創建元素並顯示在前端\n```\nsocket.on('newMessage', function (message) {\n    console.log('newMessage', message);\n    var li = jQuery('<li></li>');\n    li.text(`${message.from}: ${message.text}`);\n\n    jQuery('#messages').append(li);\n});\n```\n8. `git push heroku master`\n#### Geolocation\n1. [Geolocation 官方文件](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation)\n2. 在 public/index.html 新增 button\n`<button id=\"send-location\">Send Location</button>`\n3. 在 public/js/index.js 新增 click 事件，當點擊時傳送出 location 的資訊\n```\nvar locationButton = jQuery('#send-location');\nlocationButton.on('click', function () {\n    if (!navigator.geolocation) {\n        return alert('Geolocation not supported by your browser');\n    }\n\n    navigator.geolocation.getCurrentPosition(function (position) {\n        socket.emit('createLocationMessage', {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        });\n    }, function () {\n        alert('Unable to fetch location');\n    });\n});\n```\n4. 在 server/server.js 新增 newMessage 把訊息傳到前端頁面\n```\nsocket.on('createLocationMessage', (coords) => {\n    io.emit('newMessage', generateMessage('Admin', `${coords.latitude}, ${coords.longitude}`));\n});\n```\n5. 在 server/server.js 新增新的 message，讓 locaiton 可以超連結\n```\nsocket.on('createLocationMessage', (coords) => {\n    io.emit('newLocationMessage', generateLocationMessage('Admin', coords.latitude, coords.longitude));\n});\n```\n6. 在 server/utils/message.js 新增 generateLocationMessage 並 export\n```\nvar generateLocationMessage = (from, latitude, longitude) => {\n    return {\n        from,\n        url: `https://www.google.com/maps?q=${latitude},${longitude}`,\n        createdAt: new Date().getTime()\n    };\n};\n\nmodule.exports = {generateMessage, generateLocationMessage};\n```\n7. 在 public/js/index.js 將取得的 location 傳送到前端頁面\n```\nsocket.on('newLocationMessage', function (message) {\n    var li = jQuery('<li></li>');\n    var a = jQuery('<a target=\"_blank\">My current location</a>');\n\n    li.text(`${message.from}: `);\n    a.attr('href', message.url);\n    li.append(a);\n    jQuery('#messages').append(li);\n});\n```\n8. 在 server/utils/message.test.js 測試 generateLocationMessage 可以運作\n```\ndescribe('generateLocationMessage', () => {\n    it('should generate correct location object', () => {\n        var from = 'Deb';\n        var latitude = 15;\n        var longitude = 19;\n        var url = 'https://www.google.com/maps?q=15,19';\n        var message = generateLocationMessage(from, latitude, longitude);\n\n        expect(typeof message.createdAt).toBe('number');\n        expect(message).toMatchObject({from, url});\n    });\n});\n```\n9. `git push heroku master`\n#### 裝飾聊天頁面\n1. [樣式](https://gist.github.com/andrewjmead/4783dec59ba2d1e5bcf3e1c301c5858d)\n2. 新增 public/css/styles.css\n```\nbutton,button:hover{border:none;color:#fff;padding:10px}.chat__messages,.chat__sidebar ul{list-style-type:none}*{box-sizing:border-box;margin:0;padding:0;font-family:HelveticaNeue-Light,\"Helvetica Neue Light\",\"Helvetica Neue\",Helvetica,Arial,\"Lucida Grande\",sans-serif;font-weight:300;font-size:.95rem}li,ul{list-style-position:inside}h3{font-weight:600;text-align:center;font-size:1.5rem}button{background:#265f82;cursor:pointer;transition:background .3s ease}button:hover{background:#1F4C69}button:disabled{cursor:default;background:#698ea5}.centered-form{display:flex;align-items:center;height:100vh;width:100vw;justify-content:center;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)}.centered-form__form{background:rgba(250,250,250,.9);border:1px solid #e1e1e1;border-radius:5px;padding:0 20px;margin:20px;width:230px}.form-field{margin:20px 0}.form-field>*{width:100%}.form-field label{display:block;margin-bottom:7px}.form-field input,.form-field select{border:1px solid #e1e1e1;padding:10px}.chat{display:flex}.chat__sidebar{overflow-y:scroll;width:260px;height:100vh;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)}.chat__footer,.chat__sidebar li{background:#e6eaee;padding:10px}.chat__sidebar h3{color:#e6eaee;margin:10px 20px;text-align:left}.chat__sidebar li{border:1px solid #e1e1e1;border-radius:5px;margin:10px}.chat__main{display:flex;flex-direction:column;height:100vh;width:100%}.chat__messages{flex-grow:1;overflow-y:scroll;-webkit-overflow-scrolling:touch;padding:10px}.chat__footer{display:flex;flex-shrink:0}.chat__footer form{flex-grow:1;display:flex}.chat__footer form *{margin-right:10px}.chat__footer input{border:none;padding:10px;flex-grow:1}.message{padding:10px}.message__title{display:flex;margin-bottom:5px}.message__title h4{font-weight:600;margin-right:10px}.message__title span{color:#999}@media (max-width:600px){*{font-size:1rem}.chat__sidebar{display:none}.chat__footer{flex-direction:column}.chat__footer form{margin-bottom:10px}.chat__footer button{margin-right:0}}\n```\n2. 在 public/index.html 引入 `<link rel=\"stylesheet\" href=\"/css/styles.css\">`\n3. 在 public/index.html 加入樣式\n```\n<body class=\"body\">\n\n    <div class=\"chat__sidebar\">\n        <h3>People</h3>\n        <div id=\"users\"></div>\n    </div>\n\n    <div class=\"chat__main\">\n        <ol id=\"messages\" class=\"chat__messages\"></ol>\n\n        <div class=\"chat__footer\">\n            <form id=\"message-form\">\n                <input name=\"message\" type=\"text\" placeholder=\"Message\" autofocus autocomplete=\"off\" />\n                <button>Send</button>\n            </form>\n            <button id=\"send-location\">Send Location</button>\n        </div>\n    </div>\n\n    <script src=\"/socket.io/socket.io.js\"></script>\n    <script src=\"/js/libs/jquery-3.2.1.min.js\"></script>\n    <script src=\"/js/index.js\"></script>\n</body>\n```\n4. 在 server/server.js 把 callback 改為空值\n```\nsocket.on('createMessage', (message, callback) => {\n    console.log('createMessage', message);\n    io.emit('newMessage', generateMessage(message.from, message.text));\n    callback('');\n});\n```\n5. 修改 public/js/index.js 用 jQuery 取得值，然後送到 server\n```\njQuery('#message-form').on('submit', function (e) {\n    e.preventDefault();\n\n    var messageTextbox = jQuery('[name=message]');\n\n    socket.emit('createMessage', {\n        from: 'User',\n        text: messageTextbox.val()\n    }, function () {\n        messageTextbox.val('')\n    });\n});\n```\n6. 修改 public/js/index.js 當送出的時候把按鈕變成無法點擊，完成之後就移除無法點擊的效果\n```\nlocationButton.on('click', function () {\n    if (!navigator.geolocation) {\n        return alert('Geolocation not supported by your browser');\n    }\n\n    locationButton.attr('disabled', 'disabled').text('Sending location...');\n\n    navigator.geolocation.getCurrentPosition(function (position) {\n        locationButton.removeAttr('disabled').text('Send location');\n        socket.emit('createLocationMessage', {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        });\n    }, function () {\n        locationButton.removeAttr('disabled').text('Send location');\n        alert('Unable to fetch location');\n    });\n});\n```\n#### Timestamps 和使用 Moment 格式化\n1. `npm i moment --save`\n2. [Momentjs 官方網站](http://momentjs.com/)\n3. 新增 playground/time.js 測試 moment.js\n```\nvar moment = require('moment');\n\nvar date = moment();\ndate.add(1, 'years').subtract(9, 'months');\nconsole.log(date.format('MMM Do, YYYY'));\nconsole.log(date.format('h:mm a'));\n```\n#### Printing Message Timestamps\n1. 修改 server/utils/message.js，引入 moment，然後將 createdAt 改為 moment().valueOf();\n```\nvar moment = require('moment');\n\ncreatedAt: moment().valueOf()\n```\n2. `npm test`，確定測試可以通過\n3. 從 node_modules/moment/moment.js 複製檔案到 public/js/libs/moment.js\n4. 在 public/index.html 引入 `<script src=\"/js/libs/moment.js\"></script>`\n5. 讓訊息送出時，同時顯示時間\n```\nvar formattedTime = moment(message.createdAt).format('h:mm a');\n\nli.text(`${message.from} ${formattedTime}: ${message.text}`);\n```","slug":"Nodejs-快速學習自我挑戰-Day11","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxg003k7ifa0grw8eu3","content":"<img src=\"/images/learning/nodejs/nodejsday11.jpeg\">\n<hr>\n<h3>使用 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 的即時 Web Apps</h3>\n<h4>Broadcasting Events</h4>\n<ol>\n<li>刪除 server/server.js 和 public/js/index.js 的 socket.emit</li>\n<li>在 server/server.js 新增 io.emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">        from: message.from,</div><div class=\"line\">        text: message.text,</div><div class=\"line\">        CreatedAt: new Date().getTime()</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>git push heroku master</code></li>\n<li>在 server/server.js 新增兩種 emit，如果 connect 就傳送歡迎，如果有新用戶進來，就 broadcast 新用戶加入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Admin&apos;,</div><div class=\"line\">    text: &apos;Welcome to the chat app&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.broadcast.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Admin&apos;,</div><div class=\"line\">    text: &apos;New user joined&apos;,</div><div class=\"line\">    createdAt: new Date().getTime()</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>訊息產生器和測試</h4>\n<ol>\n<li>新增 server/utils/message.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var generateMessage = (from, text) =&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        from,</div><div class=\"line\">        text,</div><div class=\"line\">        createdAt: new Date().getTime()</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;generateMessage&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>npm install expect mocha --save-dev</code></li>\n<li>修改 package.json</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;test&quot;: &quot;mocha server/**/*.test.js&quot;,</div><div class=\"line\">&quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 server/utils/message.test.js</li>\n<li><code>npm test</code></li>\n<li>修改 server/utils/message.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">var &#123;generateMessage&#125; = require(&apos;./message&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;generateMessage&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should generate correct message object&apos;, () =&gt; &#123;</div><div class=\"line\">        var from = &apos;Jen&apos;;</div><div class=\"line\">        var text = &apos;Some message&apos;;</div><div class=\"line\">        var message = generateMessage(from, text);</div><div class=\"line\"></div><div class=\"line\">        expect(typeof message.createdAt).toBe(&apos;number&apos;);</div><div class=\"line\">        expect(message).toMatchObject(&#123;from, text&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 server/server.js 引入 <code>const {generateMessage} = require('./utils/message');</code></li>\n<li>將 server/server.js 的 object 換成 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, &apos;Welcome to the chat app&apos;));</div><div class=\"line\"></div><div class=\"line\">socket.broadcast.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, &apos;New user joined&apos;));</div><div class=\"line\"></div><div class=\"line\">io.emit(&apos;newMessage&apos;, generateMessage(message.from, message.text));</div></pre></td></tr></table></figure>\n<h4>Event Acknowledgements</h4>\n<ol>\n<li>在 public/js/index.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Frank&apos;,</div><div class=\"line\">    test: &apos;Hi&apos;</div><div class=\"line\">&#125;, function (data) &#123;</div><div class=\"line\">    console.log(&apos;Got it&apos;, data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 新增 callback function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message, callback) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, generateMessage(message.from, message.text));</div><div class=\"line\">    callback(&apos;This is from the server&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>訊息表單和 jQuery</h4>\n<ol>\n<li><a href=\"http://jquery.com/download/\" target=\"_blank\" rel=\"external\">下載最新版的 jQuery</a></li>\n<li>放到 public/js/libs/jquery.js</li>\n<li>在 public/index.html 引入 <code>&lt;script src=&quot;/js/libs/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 public/index.html 新增 form</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=&quot;message-form&quot;&gt;</div><div class=\"line\">    &lt;input name=&quot;message&quot; type=&quot;text&quot; placeholder=&quot;Message&quot; /&gt;</div><div class=\"line\">    &lt;button&gt;Send&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 public/js/index.js 新增 jQuery 來取得 form 傳出來的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery(&apos;#message-form&apos;).on(&apos;submit&apos;, function (e) &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">        from: &apos;User&apos;,</div><div class=\"line\">        text: jQuery(&apos;[name=message]&apos;).val()</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 public/index.html 新增 <code>&lt;ol id=&quot;messages&quot;&gt;&lt;/ol&gt;</code> 讓傳出得的訊息 console 在頁面上</li>\n<li>在 public/js/index.js 將取得的文字用 jQuery 創建元素並顯示在前端</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newMessage&apos;, function (message) &#123;</div><div class=\"line\">    console.log(&apos;newMessage&apos;, message);</div><div class=\"line\">    var li = jQuery(&apos;&lt;li&gt;&lt;/li&gt;&apos;);</div><div class=\"line\">    li.text(`$&#123;message.from&#125;: $&#123;message.text&#125;`);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(li);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><code>git push heroku master</code></li>\n</ol>\n<h4>Geolocation</h4>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\" target=\"_blank\" rel=\"external\">Geolocation 官方文件</a></li>\n<li>在 public/index.html 新增 button<br>\n<code>&lt;button id=&quot;send-location&quot;&gt;Send Location&lt;/button&gt;</code></li>\n<li>在 public/js/index.js 新增 click 事件，當點擊時傳送出 location 的資訊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var locationButton = jQuery(&apos;#send-location&apos;);</div><div class=\"line\">locationButton.on(&apos;click&apos;, function () &#123;</div><div class=\"line\">    if (!navigator.geolocation) &#123;</div><div class=\"line\">        return alert(&apos;Geolocation not supported by your browser&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    navigator.geolocation.getCurrentPosition(function (position) &#123;</div><div class=\"line\">        socket.emit(&apos;createLocationMessage&apos;, &#123;</div><div class=\"line\">            latitude: position.coords.latitude,</div><div class=\"line\">            longitude: position.coords.longitude</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\">        alert(&apos;Unable to fetch location&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/server.js 新增 newMessage 把訊息傳到前端頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createLocationMessage&apos;, (coords) =&gt; &#123;</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, `$&#123;coords.latitude&#125;, $&#123;coords.longitude&#125;`));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 server/server.js 新增新的 message，讓 locaiton 可以超連結</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createLocationMessage&apos;, (coords) =&gt; &#123;</div><div class=\"line\">    io.emit(&apos;newLocationMessage&apos;, generateLocationMessage(&apos;Admin&apos;, coords.latitude, coords.longitude));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/utils/message.js 新增 generateLocationMessage 並 export</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var generateLocationMessage = (from, latitude, longitude) =&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        from,</div><div class=\"line\">        url: `https://www.google.com/maps?q=$&#123;latitude&#125;,$&#123;longitude&#125;`,</div><div class=\"line\">        createdAt: new Date().getTime()</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;generateMessage, generateLocationMessage&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 public/js/index.js 將取得的 location 傳送到前端頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newLocationMessage&apos;, function (message) &#123;</div><div class=\"line\">    var li = jQuery(&apos;&lt;li&gt;&lt;/li&gt;&apos;);</div><div class=\"line\">    var a = jQuery(&apos;&lt;a target=&quot;_blank&quot;&gt;My current location&lt;/a&gt;&apos;);</div><div class=\"line\"></div><div class=\"line\">    li.text(`$&#123;message.from&#125;: `);</div><div class=\"line\">    a.attr(&apos;href&apos;, message.url);</div><div class=\"line\">    li.append(a);</div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(li);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 server/utils/message.test.js 測試 generateLocationMessage 可以運作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;generateLocationMessage&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should generate correct location object&apos;, () =&gt; &#123;</div><div class=\"line\">        var from = &apos;Deb&apos;;</div><div class=\"line\">        var latitude = 15;</div><div class=\"line\">        var longitude = 19;</div><div class=\"line\">        var url = &apos;https://www.google.com/maps?q=15,19&apos;;</div><div class=\"line\">        var message = generateLocationMessage(from, latitude, longitude);</div><div class=\"line\"></div><div class=\"line\">        expect(typeof message.createdAt).toBe(&apos;number&apos;);</div><div class=\"line\">        expect(message).toMatchObject(&#123;from, url&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><code>git push heroku master</code></li>\n</ol>\n<h4>裝飾聊天頁面</h4>\n<ol>\n<li><a href=\"https://gist.github.com/andrewjmead/4783dec59ba2d1e5bcf3e1c301c5858d\" target=\"_blank\" rel=\"external\">樣式</a></li>\n<li>新增 public/css/styles.css</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">button,button:hover&#123;border:none;color:#fff;padding:10px&#125;.chat__messages,.chat__sidebar ul&#123;list-style-type:none&#125;*&#123;box-sizing:border-box;margin:0;padding:0;font-family:HelveticaNeue-Light,&quot;Helvetica Neue Light&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,&quot;Lucida Grande&quot;,sans-serif;font-weight:300;font-size:.95rem&#125;li,ul&#123;list-style-position:inside&#125;h3&#123;font-weight:600;text-align:center;font-size:1.5rem&#125;button&#123;background:#265f82;cursor:pointer;transition:background .3s ease&#125;button:hover&#123;background:#1F4C69&#125;button:disabled&#123;cursor:default;background:#698ea5&#125;.centered-form&#123;display:flex;align-items:center;height:100vh;width:100vw;justify-content:center;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)&#125;.centered-form__form&#123;background:rgba(250,250,250,.9);border:1px solid #e1e1e1;border-radius:5px;padding:0 20px;margin:20px;width:230px&#125;.form-field&#123;margin:20px 0&#125;.form-field&gt;*&#123;width:100%&#125;.form-field label&#123;display:block;margin-bottom:7px&#125;.form-field input,.form-field select&#123;border:1px solid #e1e1e1;padding:10px&#125;.chat&#123;display:flex&#125;.chat__sidebar&#123;overflow-y:scroll;width:260px;height:100vh;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)&#125;.chat__footer,.chat__sidebar li&#123;background:#e6eaee;padding:10px&#125;.chat__sidebar h3&#123;color:#e6eaee;margin:10px 20px;text-align:left&#125;.chat__sidebar li&#123;border:1px solid #e1e1e1;border-radius:5px;margin:10px&#125;.chat__main&#123;display:flex;flex-direction:column;height:100vh;width:100%&#125;.chat__messages&#123;flex-grow:1;overflow-y:scroll;-webkit-overflow-scrolling:touch;padding:10px&#125;.chat__footer&#123;display:flex;flex-shrink:0&#125;.chat__footer form&#123;flex-grow:1;display:flex&#125;.chat__footer form *&#123;margin-right:10px&#125;.chat__footer input&#123;border:none;padding:10px;flex-grow:1&#125;.message&#123;padding:10px&#125;.message__title&#123;display:flex;margin-bottom:5px&#125;.message__title h4&#123;font-weight:600;margin-right:10px&#125;.message__title span&#123;color:#999&#125;@media (max-width:600px)&#123;*&#123;font-size:1rem&#125;.chat__sidebar&#123;display:none&#125;.chat__footer&#123;flex-direction:column&#125;.chat__footer form&#123;margin-bottom:10px&#125;.chat__footer button&#123;margin-right:0&#125;&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 public/index.html 引入 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/styles.css&quot;&gt;</code></li>\n<li>在 public/index.html 加入樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body class=&quot;body&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;chat__sidebar&quot;&gt;</div><div class=\"line\">        &lt;h3&gt;People&lt;/h3&gt;</div><div class=\"line\">        &lt;div id=&quot;users&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;chat__main&quot;&gt;</div><div class=\"line\">        &lt;ol id=&quot;messages&quot; class=&quot;chat__messages&quot;&gt;&lt;/ol&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;chat__footer&quot;&gt;</div><div class=\"line\">            &lt;form id=&quot;message-form&quot;&gt;</div><div class=\"line\">                &lt;input name=&quot;message&quot; type=&quot;text&quot; placeholder=&quot;Message&quot; autofocus autocomplete=&quot;off&quot; /&gt;</div><div class=\"line\">                &lt;button&gt;Send&lt;/button&gt;</div><div class=\"line\">            &lt;/form&gt;</div><div class=\"line\">            &lt;button id=&quot;send-location&quot;&gt;Send Location&lt;/button&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/libs/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/index.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/server.js 把 callback 改為空值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message, callback) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, generateMessage(message.from, message.text));</div><div class=\"line\">    callback(&apos;&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 public/js/index.js 用 jQuery 取得值，然後送到 server</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery(&apos;#message-form&apos;).on(&apos;submit&apos;, function (e) &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    var messageTextbox = jQuery(&apos;[name=message]&apos;);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">        from: &apos;User&apos;,</div><div class=\"line\">        text: messageTextbox.val()</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\">        messageTextbox.val(&apos;&apos;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改 public/js/index.js 當送出的時候把按鈕變成無法點擊，完成之後就移除無法點擊的效果</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">locationButton.on(&apos;click&apos;, function () &#123;</div><div class=\"line\">    if (!navigator.geolocation) &#123;</div><div class=\"line\">        return alert(&apos;Geolocation not supported by your browser&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    locationButton.attr(&apos;disabled&apos;, &apos;disabled&apos;).text(&apos;Sending location...&apos;);</div><div class=\"line\"></div><div class=\"line\">    navigator.geolocation.getCurrentPosition(function (position) &#123;</div><div class=\"line\">        locationButton.removeAttr(&apos;disabled&apos;).text(&apos;Send location&apos;);</div><div class=\"line\">        socket.emit(&apos;createLocationMessage&apos;, &#123;</div><div class=\"line\">            latitude: position.coords.latitude,</div><div class=\"line\">            longitude: position.coords.longitude</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\">        locationButton.removeAttr(&apos;disabled&apos;).text(&apos;Send location&apos;);</div><div class=\"line\">        alert(&apos;Unable to fetch location&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Timestamps 和使用 Moment 格式化</h4>\n<ol>\n<li><code>npm i moment --save</code></li>\n<li><a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"external\">Momentjs 官方網站</a></li>\n<li>新增 playground/time.js 測試 moment.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var moment = require(&apos;moment&apos;);</div><div class=\"line\"></div><div class=\"line\">var date = moment();</div><div class=\"line\">date.add(1, &apos;years&apos;).subtract(9, &apos;months&apos;);</div><div class=\"line\">console.log(date.format(&apos;MMM Do, YYYY&apos;));</div><div class=\"line\">console.log(date.format(&apos;h:mm a&apos;));</div></pre></td></tr></table></figure>\n<h4>Printing Message Timestamps</h4>\n<ol>\n<li>修改 server/utils/message.js，引入 moment，然後將 createdAt 改為 moment().valueOf();</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var moment = require(&apos;moment&apos;);</div><div class=\"line\"></div><div class=\"line\">createdAt: moment().valueOf()</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>npm test</code>，確定測試可以通過</li>\n<li>從 node_modules/moment/moment.js 複製檔案到 public/js/libs/moment.js</li>\n<li>在 public/index.html 引入 <code>&lt;script src=&quot;/js/libs/moment.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>讓訊息送出時，同時顯示時間</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var formattedTime = moment(message.createdAt).format(&apos;h:mm a&apos;);</div><div class=\"line\"></div><div class=\"line\">li.text(`$&#123;message.from&#125; $&#123;formattedTime&#125;: $&#123;message.text&#125;`);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday11.jpeg\">\n<hr>\n<h3>使用 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 的即時 Web Apps</h3>\n<h4>Broadcasting Events</h4>\n<ol>\n<li>刪除 server/server.js 和 public/js/index.js 的 socket.emit</li>\n<li>在 server/server.js 新增 io.emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">        from: message.from,</div><div class=\"line\">        text: message.text,</div><div class=\"line\">        CreatedAt: new Date().getTime()</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>git push heroku master</code></li>\n<li>在 server/server.js 新增兩種 emit，如果 connect 就傳送歡迎，如果有新用戶進來，就 broadcast 新用戶加入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Admin&apos;,</div><div class=\"line\">    text: &apos;Welcome to the chat app&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.broadcast.emit(&apos;newMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Admin&apos;,</div><div class=\"line\">    text: &apos;New user joined&apos;,</div><div class=\"line\">    createdAt: new Date().getTime()</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>訊息產生器和測試</h4>\n<ol>\n<li>新增 server/utils/message.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var generateMessage = (from, text) =&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        from,</div><div class=\"line\">        text,</div><div class=\"line\">        createdAt: new Date().getTime()</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;generateMessage&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>npm install expect mocha --save-dev</code></li>\n<li>修改 package.json</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;test&quot;: &quot;mocha server/**/*.test.js&quot;,</div><div class=\"line\">&quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 server/utils/message.test.js</li>\n<li><code>npm test</code></li>\n<li>修改 server/utils/message.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">var &#123;generateMessage&#125; = require(&apos;./message&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;generateMessage&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should generate correct message object&apos;, () =&gt; &#123;</div><div class=\"line\">        var from = &apos;Jen&apos;;</div><div class=\"line\">        var text = &apos;Some message&apos;;</div><div class=\"line\">        var message = generateMessage(from, text);</div><div class=\"line\"></div><div class=\"line\">        expect(typeof message.createdAt).toBe(&apos;number&apos;);</div><div class=\"line\">        expect(message).toMatchObject(&#123;from, text&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 server/server.js 引入 <code>const {generateMessage} = require('./utils/message');</code></li>\n<li>將 server/server.js 的 object 換成 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, &apos;Welcome to the chat app&apos;));</div><div class=\"line\"></div><div class=\"line\">socket.broadcast.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, &apos;New user joined&apos;));</div><div class=\"line\"></div><div class=\"line\">io.emit(&apos;newMessage&apos;, generateMessage(message.from, message.text));</div></pre></td></tr></table></figure>\n<h4>Event Acknowledgements</h4>\n<ol>\n<li>在 public/js/index.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">    from: &apos;Frank&apos;,</div><div class=\"line\">    test: &apos;Hi&apos;</div><div class=\"line\">&#125;, function (data) &#123;</div><div class=\"line\">    console.log(&apos;Got it&apos;, data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 新增 callback function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message, callback) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, generateMessage(message.from, message.text));</div><div class=\"line\">    callback(&apos;This is from the server&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>訊息表單和 jQuery</h4>\n<ol>\n<li><a href=\"http://jquery.com/download/\" target=\"_blank\" rel=\"external\">下載最新版的 jQuery</a></li>\n<li>放到 public/js/libs/jquery.js</li>\n<li>在 public/index.html 引入 <code>&lt;script src=&quot;/js/libs/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 public/index.html 新增 form</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=&quot;message-form&quot;&gt;</div><div class=\"line\">    &lt;input name=&quot;message&quot; type=&quot;text&quot; placeholder=&quot;Message&quot; /&gt;</div><div class=\"line\">    &lt;button&gt;Send&lt;/button&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 public/js/index.js 新增 jQuery 來取得 form 傳出來的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery(&apos;#message-form&apos;).on(&apos;submit&apos;, function (e) &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">        from: &apos;User&apos;,</div><div class=\"line\">        text: jQuery(&apos;[name=message]&apos;).val()</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 public/index.html 新增 <code>&lt;ol id=&quot;messages&quot;&gt;&lt;/ol&gt;</code> 讓傳出得的訊息 console 在頁面上</li>\n<li>在 public/js/index.js 將取得的文字用 jQuery 創建元素並顯示在前端</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newMessage&apos;, function (message) &#123;</div><div class=\"line\">    console.log(&apos;newMessage&apos;, message);</div><div class=\"line\">    var li = jQuery(&apos;&lt;li&gt;&lt;/li&gt;&apos;);</div><div class=\"line\">    li.text(`$&#123;message.from&#125;: $&#123;message.text&#125;`);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(li);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><code>git push heroku master</code></li>\n</ol>\n<h4>Geolocation</h4>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\" target=\"_blank\" rel=\"external\">Geolocation 官方文件</a></li>\n<li>在 public/index.html 新增 button<br>\n<code>&lt;button id=&quot;send-location&quot;&gt;Send Location&lt;/button&gt;</code></li>\n<li>在 public/js/index.js 新增 click 事件，當點擊時傳送出 location 的資訊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var locationButton = jQuery(&apos;#send-location&apos;);</div><div class=\"line\">locationButton.on(&apos;click&apos;, function () &#123;</div><div class=\"line\">    if (!navigator.geolocation) &#123;</div><div class=\"line\">        return alert(&apos;Geolocation not supported by your browser&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    navigator.geolocation.getCurrentPosition(function (position) &#123;</div><div class=\"line\">        socket.emit(&apos;createLocationMessage&apos;, &#123;</div><div class=\"line\">            latitude: position.coords.latitude,</div><div class=\"line\">            longitude: position.coords.longitude</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\">        alert(&apos;Unable to fetch location&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/server.js 新增 newMessage 把訊息傳到前端頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createLocationMessage&apos;, (coords) =&gt; &#123;</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, `$&#123;coords.latitude&#125;, $&#123;coords.longitude&#125;`));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 server/server.js 新增新的 message，讓 locaiton 可以超連結</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createLocationMessage&apos;, (coords) =&gt; &#123;</div><div class=\"line\">    io.emit(&apos;newLocationMessage&apos;, generateLocationMessage(&apos;Admin&apos;, coords.latitude, coords.longitude));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/utils/message.js 新增 generateLocationMessage 並 export</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var generateLocationMessage = (from, latitude, longitude) =&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        from,</div><div class=\"line\">        url: `https://www.google.com/maps?q=$&#123;latitude&#125;,$&#123;longitude&#125;`,</div><div class=\"line\">        createdAt: new Date().getTime()</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;generateMessage, generateLocationMessage&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 public/js/index.js 將取得的 location 傳送到前端頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newLocationMessage&apos;, function (message) &#123;</div><div class=\"line\">    var li = jQuery(&apos;&lt;li&gt;&lt;/li&gt;&apos;);</div><div class=\"line\">    var a = jQuery(&apos;&lt;a target=&quot;_blank&quot;&gt;My current location&lt;/a&gt;&apos;);</div><div class=\"line\"></div><div class=\"line\">    li.text(`$&#123;message.from&#125;: `);</div><div class=\"line\">    a.attr(&apos;href&apos;, message.url);</div><div class=\"line\">    li.append(a);</div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(li);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 server/utils/message.test.js 測試 generateLocationMessage 可以運作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;generateLocationMessage&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should generate correct location object&apos;, () =&gt; &#123;</div><div class=\"line\">        var from = &apos;Deb&apos;;</div><div class=\"line\">        var latitude = 15;</div><div class=\"line\">        var longitude = 19;</div><div class=\"line\">        var url = &apos;https://www.google.com/maps?q=15,19&apos;;</div><div class=\"line\">        var message = generateLocationMessage(from, latitude, longitude);</div><div class=\"line\"></div><div class=\"line\">        expect(typeof message.createdAt).toBe(&apos;number&apos;);</div><div class=\"line\">        expect(message).toMatchObject(&#123;from, url&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><code>git push heroku master</code></li>\n</ol>\n<h4>裝飾聊天頁面</h4>\n<ol>\n<li><a href=\"https://gist.github.com/andrewjmead/4783dec59ba2d1e5bcf3e1c301c5858d\" target=\"_blank\" rel=\"external\">樣式</a></li>\n<li>新增 public/css/styles.css</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">button,button:hover&#123;border:none;color:#fff;padding:10px&#125;.chat__messages,.chat__sidebar ul&#123;list-style-type:none&#125;*&#123;box-sizing:border-box;margin:0;padding:0;font-family:HelveticaNeue-Light,&quot;Helvetica Neue Light&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,&quot;Lucida Grande&quot;,sans-serif;font-weight:300;font-size:.95rem&#125;li,ul&#123;list-style-position:inside&#125;h3&#123;font-weight:600;text-align:center;font-size:1.5rem&#125;button&#123;background:#265f82;cursor:pointer;transition:background .3s ease&#125;button:hover&#123;background:#1F4C69&#125;button:disabled&#123;cursor:default;background:#698ea5&#125;.centered-form&#123;display:flex;align-items:center;height:100vh;width:100vw;justify-content:center;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)&#125;.centered-form__form&#123;background:rgba(250,250,250,.9);border:1px solid #e1e1e1;border-radius:5px;padding:0 20px;margin:20px;width:230px&#125;.form-field&#123;margin:20px 0&#125;.form-field&gt;*&#123;width:100%&#125;.form-field label&#123;display:block;margin-bottom:7px&#125;.form-field input,.form-field select&#123;border:1px solid #e1e1e1;padding:10px&#125;.chat&#123;display:flex&#125;.chat__sidebar&#123;overflow-y:scroll;width:260px;height:100vh;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)&#125;.chat__footer,.chat__sidebar li&#123;background:#e6eaee;padding:10px&#125;.chat__sidebar h3&#123;color:#e6eaee;margin:10px 20px;text-align:left&#125;.chat__sidebar li&#123;border:1px solid #e1e1e1;border-radius:5px;margin:10px&#125;.chat__main&#123;display:flex;flex-direction:column;height:100vh;width:100%&#125;.chat__messages&#123;flex-grow:1;overflow-y:scroll;-webkit-overflow-scrolling:touch;padding:10px&#125;.chat__footer&#123;display:flex;flex-shrink:0&#125;.chat__footer form&#123;flex-grow:1;display:flex&#125;.chat__footer form *&#123;margin-right:10px&#125;.chat__footer input&#123;border:none;padding:10px;flex-grow:1&#125;.message&#123;padding:10px&#125;.message__title&#123;display:flex;margin-bottom:5px&#125;.message__title h4&#123;font-weight:600;margin-right:10px&#125;.message__title span&#123;color:#999&#125;@media (max-width:600px)&#123;*&#123;font-size:1rem&#125;.chat__sidebar&#123;display:none&#125;.chat__footer&#123;flex-direction:column&#125;.chat__footer form&#123;margin-bottom:10px&#125;.chat__footer button&#123;margin-right:0&#125;&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 public/index.html 引入 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/styles.css&quot;&gt;</code></li>\n<li>在 public/index.html 加入樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body class=&quot;body&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;chat__sidebar&quot;&gt;</div><div class=\"line\">        &lt;h3&gt;People&lt;/h3&gt;</div><div class=\"line\">        &lt;div id=&quot;users&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;chat__main&quot;&gt;</div><div class=\"line\">        &lt;ol id=&quot;messages&quot; class=&quot;chat__messages&quot;&gt;&lt;/ol&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;div class=&quot;chat__footer&quot;&gt;</div><div class=\"line\">            &lt;form id=&quot;message-form&quot;&gt;</div><div class=\"line\">                &lt;input name=&quot;message&quot; type=&quot;text&quot; placeholder=&quot;Message&quot; autofocus autocomplete=&quot;off&quot; /&gt;</div><div class=\"line\">                &lt;button&gt;Send&lt;/button&gt;</div><div class=\"line\">            &lt;/form&gt;</div><div class=\"line\">            &lt;button id=&quot;send-location&quot;&gt;Send Location&lt;/button&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/libs/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/index.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/server.js 把 callback 改為空值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message, callback) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;createMessage&apos;, message);</div><div class=\"line\">    io.emit(&apos;newMessage&apos;, generateMessage(message.from, message.text));</div><div class=\"line\">    callback(&apos;&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 public/js/index.js 用 jQuery 取得值，然後送到 server</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery(&apos;#message-form&apos;).on(&apos;submit&apos;, function (e) &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    var messageTextbox = jQuery(&apos;[name=message]&apos;);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;createMessage&apos;, &#123;</div><div class=\"line\">        from: &apos;User&apos;,</div><div class=\"line\">        text: messageTextbox.val()</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\">        messageTextbox.val(&apos;&apos;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改 public/js/index.js 當送出的時候把按鈕變成無法點擊，完成之後就移除無法點擊的效果</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">locationButton.on(&apos;click&apos;, function () &#123;</div><div class=\"line\">    if (!navigator.geolocation) &#123;</div><div class=\"line\">        return alert(&apos;Geolocation not supported by your browser&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    locationButton.attr(&apos;disabled&apos;, &apos;disabled&apos;).text(&apos;Sending location...&apos;);</div><div class=\"line\"></div><div class=\"line\">    navigator.geolocation.getCurrentPosition(function (position) &#123;</div><div class=\"line\">        locationButton.removeAttr(&apos;disabled&apos;).text(&apos;Send location&apos;);</div><div class=\"line\">        socket.emit(&apos;createLocationMessage&apos;, &#123;</div><div class=\"line\">            latitude: position.coords.latitude,</div><div class=\"line\">            longitude: position.coords.longitude</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;, function () &#123;</div><div class=\"line\">        locationButton.removeAttr(&apos;disabled&apos;).text(&apos;Send location&apos;);</div><div class=\"line\">        alert(&apos;Unable to fetch location&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Timestamps 和使用 Moment 格式化</h4>\n<ol>\n<li><code>npm i moment --save</code></li>\n<li><a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"external\">Momentjs 官方網站</a></li>\n<li>新增 playground/time.js 測試 moment.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var moment = require(&apos;moment&apos;);</div><div class=\"line\"></div><div class=\"line\">var date = moment();</div><div class=\"line\">date.add(1, &apos;years&apos;).subtract(9, &apos;months&apos;);</div><div class=\"line\">console.log(date.format(&apos;MMM Do, YYYY&apos;));</div><div class=\"line\">console.log(date.format(&apos;h:mm a&apos;));</div></pre></td></tr></table></figure>\n<h4>Printing Message Timestamps</h4>\n<ol>\n<li>修改 server/utils/message.js，引入 moment，然後將 createdAt 改為 moment().valueOf();</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var moment = require(&apos;moment&apos;);</div><div class=\"line\"></div><div class=\"line\">createdAt: moment().valueOf()</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>npm test</code>，確定測試可以通過</li>\n<li>從 node_modules/moment/moment.js 複製檔案到 public/js/libs/moment.js</li>\n<li>在 public/index.html 引入 <code>&lt;script src=&quot;/js/libs/moment.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>讓訊息送出時，同時顯示時間</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var formattedTime = moment(message.createdAt).format(&apos;h:mm a&apos;);</div><div class=\"line\"></div><div class=\"line\">li.text(`$&#123;message.from&#125; $&#123;formattedTime&#125;: $&#123;message.text&#125;`);</div></pre></td></tr></table></figure>"},{"title":"Nodejs 快速學習自我挑戰 Day12","thumbnail":["/images/learning/nodejs/nodejsday12.jpg"],"date":"2017-10-14T00:51:23.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday12.jpg\">\n\n***\n### 使用 Socket.io 的即時 Web Apps\n#### Mustache.js\n1. [下載 Mustache 最新版](https://github.com/janl/mustache.js/)，儲存到 public/js/libs/mustache.js\n2. 在 public/index.html 引入 `<script src=\"js/libs/mustache.js\"></script>`\n3. 在 public/index.html 加入 template\n```\n<script id=\"message-template\" type=\"text/template\">\n    <li class=\"message\">\n        <div class=\"message__title\">\n            <h4>{{from}}</h4>\n            <span>{{createdAt}}</span>\n        </div>\n        <div class=\"message__body\">\n            <p>{{text}}</p>\n        </div>\n    </li>\n</script>\n\n<script id=\"location-message-template\" type=\"text/template\">\n    <li class=\"message\">\n        <div class=\"message__title\">\n            <h4>{{from}}</h4>\n            <span>{{createdAt}}</span>\n        </div>\n        <div class=\"message__body\">\n            <p>\n                <a href=\"{{url}}\" target=\"_blank\">My current location</a>\n            </p>\n        </div>\n    </li>\n</script>\n```\n4. 在 public/js/index.js 使用 Mustache 來顯示 template\n```\nsocket.on('newMessage', function (message) {\n    var formattedTime = moment(message.createdAt).format('h:mm a');\n    var template = jQuery('#message-template').html();\n    var html = Mustache.render(template, {\n        text: message.text,\n        from: message.from,\n        createdAt: formattedTime\n    });\n\n    jQuery('#messages').append(html);\n});\n\nsocket.on('newLocationMessage', function (message) {\n    var formattedTime = moment(message.createdAt).format('h:mm a');\n    var template = jQuery('#location-message-template').html();\n    var html = Mustache.render(template, {\n        from: message.from,\n        url: message.url,\n        createdAt: formattedTime\n    });\n\n    jQuery('#messages').append(html);\n});\n```\n5. `git push heroku master`\n#### Autoscrolling\n1. 在 public/js/index.js 新增 scrollToBottom function\n```\nfunction scrollToBottom () {\n    // Selectors\n    var messages = jQuery('#messages');\n    var newMessage = messages.children('li:last-child');\n    // Height\n    var clientHeight = messages.prop('clientHeight');\n    var scrollTop = messages.prop('scrollTop');\n    var scrollHeight = messages.prop('scrollHeight');\n    var newMessageHeight = newMessage.innerHeight();\n    var lastMessageHeight = newMessage.prev().innerHeight();\n\n    if (clientHeight + scrollTop + newMessageHeight + lastMessageHeight >= scrollHeight) {\n        messages.scrollTop(scrollHeight);\n    }\n}\n```\n2. 在 public/js/index.js 的 newMessage 和 newLocationMessage 新增 scrollToBottom\n`scrollToBottom();`\n#### 新增一個 join page\n1. 將本來的 index.html 和 index.js 改為 chat.html 和 chat.js\n2. 新增 public/index.html\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scale=1, user-scalable=no\">\n    <title>Join | ChatApp</title>\n    <link rel=\"stylesheet\" href=\"css/styles.css\">\n</head>\n\n<body class=\"centered-form\">\n    <div class=\"centered-form__form\">\n        <form action=\"chat.html\">\n            <div class=\"form-field\">\n                <h3>Join a Chat</h3>\n            </div>\n            <div class=\"form-field\">\n                <label>Display name</label>\n                <input type=\"text\" name=\"name\" autofocus />\n            </div>\n            <div class=\"form-field\">\n                <label>Room name</label>\n                <input type=\"text\" name=\"room\" />\n            </div>\n            <div class=\"form-field\">\n                <button>Join</button>\n            </div>\n        </form>\n    </div>\n\n</body>\n</html>\n```\n#### 傳送 Room 資訊\n1. [deparam function](https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401)\n2. 把檔案下載到 public/js/libs/deparam.js\n3. 在 public/chat.html 引入 `<script src=\"js/libs/deparam.js\"></script>`\n4. 在 public/js/chat.js 新增 emit\n```\nsocket.on('connect', function () {\n    var params = jQuery.deparam(window.location.search);\n\n    socket.emit('join', params, function (err) {\n        if (err) {\n            alert(err);\n            window.location.href = '/';\n        } else {\n            console.log('No error');\n        }\n    });\n});\n```\n5. 新增 server/utils/validation.js\n```\nvar isRealString = (str) => {\n    return typeof str === 'string' && str.trim().length > 0;\n};\n\nmodule.exports = {isRealString};\n```\n6. 在 server/server.js 引入 `const {isRealString} = require('./utils/validation');`\n7. 在 server/server.js 新增 socket.on 取得資訊，並做驗證\n```\nsocket.on('join', (params, callback) => {\n    if (!isRealString(params.name) || !isRealString(params.room)) {\n        callback('Name and room name are required.');\n    }\n\n    callback();\n});\n```\n8. 新增 server/utils/validation.test.js\n    - 引入 isRealString\n    - 測試一：拒絕不是 string 的值\n    - 測試二：拒絕只有空白的 string\n    - 測試三：接受沒有空格的 string\n9. 新增 server/utils/validation.test.js\n```\nconst expect = require('expect');\n\nconst {isRealString} = require('./validation');\n\ndescribe('isRealString', () => {\n    it('should reject non-string values', () => {\n        var res = isRealString(98);\n        expect(res).toBe(false);\n    });\n\n    it('should reject string with only spaces', () => {\n        var res = isRealString('    ');\n        expect(res).toBe(false);\n    });\n\n    it('should allow string with non-space characters', () => {\n        var res = isRealString('  Andrew  ');\n        expect(res).toBe(true);\n    });\n});\n```\n#### Socket.io Rooms\n1. 在 server/server.js 新增 socket.join，然後把上面的 newMessage 放到下面，動態產生使用者加入的訊息\n```\nsocket.on('join', (params, callback) => {\n    if (!isRealString(params.name) || !isRealString(params.room)) {\n        callback('Name and room name are required.');\n    }\n\n    socket.join(params.room);\n\n    socket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app'));\n    socket.broadcast.to(params.room).emit('newMessage', generateMessage('Admin', `${params.name} has joined`));\n    callback();\n});\n```\n#### 使用 ES6 classes 來儲存用戶\n1. 新增 server/utils/users.js\n```\nclass Person {\n    constructor (name, age) {\n        console.log(name, age);\n    }\n}\n\nvar me = new Person('Andrew', 25);\n```\n2. `node server/utils/users.js` 就會出現 Andrew 25\n3. 在 class 新增 getUserDescription \n```\ngetUserDescription () {\n    return `${this.name} is ${this.age} year(s) old.`;\n}\n```\n4. 新增變數，然後讀出變數\n```\nvar description = me.getUserDescription();\nconsole.log(description);\n```\n5. `console.log(description);` 就會顯示出 Andrew is 25 year(s) old.\n6. 在 server/utils/users.js 新增 Users class\n```\nclass Users {\n    constructor () {\n        this.users = [];\n    }\n    addUser (id, name, room) {\n        var user = {id, name, room};\n        this.users.push(user);\n        return user;\n    }\n}\n\nmodule.exports = {Users};\n```\n7. 新增 server/utils/users.test.js\n```\nconst expect = require('expect');\n\nconst {Users} = require('./users');\n\ndescribe('Users', () => {\n    it('should add new user', () => {\n        var users = new Users();\n        var user = {\n            id: '123',\n            name: 'Andrew',\n            room: 'The Office Fans'\n        };\n        var resUser = users.addUser(user.id, user.name, user.room);\n\n        expect(users.users).toEqual([user]);\n    });\n});\n```\n8. `npm test`\n9. 在 server/utils/users.test.js 丟 data 進去\n```\nvar users;\n\nbeforeEach(() => {\n    users = new Users();\n    users.users = [{\n        id: '1',\n        name: 'Mike',\n        room: 'Node Course'\n    },{\n        id: '2',\n        name: 'Jen',\n        room: 'React Course'\n    },{\n        id: '3',\n        name: 'Julie',\n        room: 'Node Course'\n    }];\n});\n```\n10. `npm run test-watch`\n11. 在 server/utils/user.js 新增 getUserList\n```\ngetUserList (room) {\n    var users = this.users.filter((user) => user.room === room);\n    var namesArray = users.map((user) => user.name);\n\n    return namesArray;\n}\n```\n12. 在 server/utils/user.test.js 新增 getUserList 測試\n```\nit('should return names for node course', () => {\n    var userList = users.getUserList('Node Course');\n\n    expect(userList).toEqual(['Mike', 'Julie']);\n});\n\nit('should return names for react course', () => {\n    var userList = users.getUserList('React Course');\n\n    expect(userList).toEqual(['Jen']);\n});\n```\n13. 在 server/utils/user.js 新增 getUser\n```\ngetUser (id) {\n    return this.users.filter((user) => user.id === id)[0];\n}\n```\n14. 在 server/utils/user.test.js 新增 getUser 測試\n```\nit('should find user', () => {\n    var userId = '2';\n    var user = users.getUser(userId);\n\n    expect(user.id).toBe(userId);\n});\n\nit('should not find user', () => {\n    var userId = '99';\n    var user = users.getUser(userId);\n\n    expect(user).toBeUndefined();\n});\n```\n15. 在 server/utils/user.js 新增 removeUser\n```\nremoveUser (id) {\n    var user = this.getUser(id);\n\n    if (user) {\n        this.users = this.users.filter((user) => user.id !== id);\n    }\n\n    return user;\n}\n```\n16. 在 server/utils/user.test.js 新增 removeUser 測試\n```\nit('should remove a user', () => {\n    var userId = '1';\n    var user = users.removeUser(userId);\n\n    expect(user.id).toBe(userId);\n    expect(users.users.length).toBe(2);\n});\n\nit('should not remove user', () => {\n    var userId = '99';\n    var user = users.removeUser(userId);\n\n    expect(user).toBeUndefined();\n    expect(users.users.length).toBe(3);\n});\n```\n#### Wiring up User List\n1. 在 public/js/chat.js 新增 updateUserList\n```\nsocket.on('updateUserList', function (users) {\n    console.log('Users list', users);\n});\n```\n2. 在 server/server.js 引入 `const {Users} = require('./utils/users');`\n3. 在 server/server.js 新增 users `var users = new Users();`\n4. 在 server/server.js 的 connect 部分，當連線時，先 removeUser，然後再重新 addUser，最後將 userList 傳送到前端頁面\n```\nusers.removeUser(socket.id);\nusers.addUser(socket.id, params.name, params.room);\n\nio.to(params.room).emit('updateUserList', users.getUserList(params.room));\n```\n5. 在 server/server.js 的 disconnect 部分，踢除 user，如果 user 存在，就更新 UserList，然後在前端頁面顯示 user 離開的訊息\n```\nsocket.on('disconnect', () => {\n    var user = users.removeUser(socket.id);\n\n    if (user) {\n        io.to(user.room).emit('updateUserList', users.getUserList(user.room));\n        io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left.`));\n    }\n});\n```\n6. 修改 public/js/chat.js 的 updateUserList，把 user 顯示在前端\n```\nsocket.on('updateUserList', function (users) {\n    var ol = jQuery('<ol></ol>');\n\n    users.forEach(function (user) {\n        ol.append(jQuery('<li></li>').text(user));\n    });\n\n    jQuery('#users').html(ol);\n});\n```\n#### 只傳送訊息到同一個 Room\n1. 在 public/js/chat.js 的 submit 刪掉 `from: 'User',`\n2. 在 server/server.js 修改 createMessage 讓 message 只在指定的 room 發佈訊息\n```\nsocket.on('createMessage', (message, callback) => {\n    var user = users.getUser(socket.id);\n\n    if (user && isRealString(message.text)) {\n        io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));\n    }\n\n    callback('');\n});\n```\n3. 在 server/server.js 修改 createLocationMessage 如上\n```\nsocket.on('createLocationMessage', (coords) => {\n    var user = users.getUser(socket.id);\n\n    if (user) {\n        io.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));\n    }\n\n});\n```\n#### 新功能開發\n1. 不管字母大小寫，都是同一個房間\n2. 拒絕同樣名稱的用戶\n3. 在進去聊天室的時候，列出正在聊天的聊天室名稱 (dropdown)","source":"_posts/Nodejs-快速學習自我挑戰-Day12.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day12\nthumbnail:\n  - /images/learning/nodejs/nodejsday12.jpg\ndate: 2017-10-14 08:51:23\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday12.jpg\">\n\n***\n### 使用 Socket.io 的即時 Web Apps\n#### Mustache.js\n1. [下載 Mustache 最新版](https://github.com/janl/mustache.js/)，儲存到 public/js/libs/mustache.js\n2. 在 public/index.html 引入 `<script src=\"js/libs/mustache.js\"></script>`\n3. 在 public/index.html 加入 template\n```\n<script id=\"message-template\" type=\"text/template\">\n    <li class=\"message\">\n        <div class=\"message__title\">\n            <h4>{{from}}</h4>\n            <span>{{createdAt}}</span>\n        </div>\n        <div class=\"message__body\">\n            <p>{{text}}</p>\n        </div>\n    </li>\n</script>\n\n<script id=\"location-message-template\" type=\"text/template\">\n    <li class=\"message\">\n        <div class=\"message__title\">\n            <h4>{{from}}</h4>\n            <span>{{createdAt}}</span>\n        </div>\n        <div class=\"message__body\">\n            <p>\n                <a href=\"{{url}}\" target=\"_blank\">My current location</a>\n            </p>\n        </div>\n    </li>\n</script>\n```\n4. 在 public/js/index.js 使用 Mustache 來顯示 template\n```\nsocket.on('newMessage', function (message) {\n    var formattedTime = moment(message.createdAt).format('h:mm a');\n    var template = jQuery('#message-template').html();\n    var html = Mustache.render(template, {\n        text: message.text,\n        from: message.from,\n        createdAt: formattedTime\n    });\n\n    jQuery('#messages').append(html);\n});\n\nsocket.on('newLocationMessage', function (message) {\n    var formattedTime = moment(message.createdAt).format('h:mm a');\n    var template = jQuery('#location-message-template').html();\n    var html = Mustache.render(template, {\n        from: message.from,\n        url: message.url,\n        createdAt: formattedTime\n    });\n\n    jQuery('#messages').append(html);\n});\n```\n5. `git push heroku master`\n#### Autoscrolling\n1. 在 public/js/index.js 新增 scrollToBottom function\n```\nfunction scrollToBottom () {\n    // Selectors\n    var messages = jQuery('#messages');\n    var newMessage = messages.children('li:last-child');\n    // Height\n    var clientHeight = messages.prop('clientHeight');\n    var scrollTop = messages.prop('scrollTop');\n    var scrollHeight = messages.prop('scrollHeight');\n    var newMessageHeight = newMessage.innerHeight();\n    var lastMessageHeight = newMessage.prev().innerHeight();\n\n    if (clientHeight + scrollTop + newMessageHeight + lastMessageHeight >= scrollHeight) {\n        messages.scrollTop(scrollHeight);\n    }\n}\n```\n2. 在 public/js/index.js 的 newMessage 和 newLocationMessage 新增 scrollToBottom\n`scrollToBottom();`\n#### 新增一個 join page\n1. 將本來的 index.html 和 index.js 改為 chat.html 和 chat.js\n2. 新增 public/index.html\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scale=1, user-scalable=no\">\n    <title>Join | ChatApp</title>\n    <link rel=\"stylesheet\" href=\"css/styles.css\">\n</head>\n\n<body class=\"centered-form\">\n    <div class=\"centered-form__form\">\n        <form action=\"chat.html\">\n            <div class=\"form-field\">\n                <h3>Join a Chat</h3>\n            </div>\n            <div class=\"form-field\">\n                <label>Display name</label>\n                <input type=\"text\" name=\"name\" autofocus />\n            </div>\n            <div class=\"form-field\">\n                <label>Room name</label>\n                <input type=\"text\" name=\"room\" />\n            </div>\n            <div class=\"form-field\">\n                <button>Join</button>\n            </div>\n        </form>\n    </div>\n\n</body>\n</html>\n```\n#### 傳送 Room 資訊\n1. [deparam function](https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401)\n2. 把檔案下載到 public/js/libs/deparam.js\n3. 在 public/chat.html 引入 `<script src=\"js/libs/deparam.js\"></script>`\n4. 在 public/js/chat.js 新增 emit\n```\nsocket.on('connect', function () {\n    var params = jQuery.deparam(window.location.search);\n\n    socket.emit('join', params, function (err) {\n        if (err) {\n            alert(err);\n            window.location.href = '/';\n        } else {\n            console.log('No error');\n        }\n    });\n});\n```\n5. 新增 server/utils/validation.js\n```\nvar isRealString = (str) => {\n    return typeof str === 'string' && str.trim().length > 0;\n};\n\nmodule.exports = {isRealString};\n```\n6. 在 server/server.js 引入 `const {isRealString} = require('./utils/validation');`\n7. 在 server/server.js 新增 socket.on 取得資訊，並做驗證\n```\nsocket.on('join', (params, callback) => {\n    if (!isRealString(params.name) || !isRealString(params.room)) {\n        callback('Name and room name are required.');\n    }\n\n    callback();\n});\n```\n8. 新增 server/utils/validation.test.js\n    - 引入 isRealString\n    - 測試一：拒絕不是 string 的值\n    - 測試二：拒絕只有空白的 string\n    - 測試三：接受沒有空格的 string\n9. 新增 server/utils/validation.test.js\n```\nconst expect = require('expect');\n\nconst {isRealString} = require('./validation');\n\ndescribe('isRealString', () => {\n    it('should reject non-string values', () => {\n        var res = isRealString(98);\n        expect(res).toBe(false);\n    });\n\n    it('should reject string with only spaces', () => {\n        var res = isRealString('    ');\n        expect(res).toBe(false);\n    });\n\n    it('should allow string with non-space characters', () => {\n        var res = isRealString('  Andrew  ');\n        expect(res).toBe(true);\n    });\n});\n```\n#### Socket.io Rooms\n1. 在 server/server.js 新增 socket.join，然後把上面的 newMessage 放到下面，動態產生使用者加入的訊息\n```\nsocket.on('join', (params, callback) => {\n    if (!isRealString(params.name) || !isRealString(params.room)) {\n        callback('Name and room name are required.');\n    }\n\n    socket.join(params.room);\n\n    socket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app'));\n    socket.broadcast.to(params.room).emit('newMessage', generateMessage('Admin', `${params.name} has joined`));\n    callback();\n});\n```\n#### 使用 ES6 classes 來儲存用戶\n1. 新增 server/utils/users.js\n```\nclass Person {\n    constructor (name, age) {\n        console.log(name, age);\n    }\n}\n\nvar me = new Person('Andrew', 25);\n```\n2. `node server/utils/users.js` 就會出現 Andrew 25\n3. 在 class 新增 getUserDescription \n```\ngetUserDescription () {\n    return `${this.name} is ${this.age} year(s) old.`;\n}\n```\n4. 新增變數，然後讀出變數\n```\nvar description = me.getUserDescription();\nconsole.log(description);\n```\n5. `console.log(description);` 就會顯示出 Andrew is 25 year(s) old.\n6. 在 server/utils/users.js 新增 Users class\n```\nclass Users {\n    constructor () {\n        this.users = [];\n    }\n    addUser (id, name, room) {\n        var user = {id, name, room};\n        this.users.push(user);\n        return user;\n    }\n}\n\nmodule.exports = {Users};\n```\n7. 新增 server/utils/users.test.js\n```\nconst expect = require('expect');\n\nconst {Users} = require('./users');\n\ndescribe('Users', () => {\n    it('should add new user', () => {\n        var users = new Users();\n        var user = {\n            id: '123',\n            name: 'Andrew',\n            room: 'The Office Fans'\n        };\n        var resUser = users.addUser(user.id, user.name, user.room);\n\n        expect(users.users).toEqual([user]);\n    });\n});\n```\n8. `npm test`\n9. 在 server/utils/users.test.js 丟 data 進去\n```\nvar users;\n\nbeforeEach(() => {\n    users = new Users();\n    users.users = [{\n        id: '1',\n        name: 'Mike',\n        room: 'Node Course'\n    },{\n        id: '2',\n        name: 'Jen',\n        room: 'React Course'\n    },{\n        id: '3',\n        name: 'Julie',\n        room: 'Node Course'\n    }];\n});\n```\n10. `npm run test-watch`\n11. 在 server/utils/user.js 新增 getUserList\n```\ngetUserList (room) {\n    var users = this.users.filter((user) => user.room === room);\n    var namesArray = users.map((user) => user.name);\n\n    return namesArray;\n}\n```\n12. 在 server/utils/user.test.js 新增 getUserList 測試\n```\nit('should return names for node course', () => {\n    var userList = users.getUserList('Node Course');\n\n    expect(userList).toEqual(['Mike', 'Julie']);\n});\n\nit('should return names for react course', () => {\n    var userList = users.getUserList('React Course');\n\n    expect(userList).toEqual(['Jen']);\n});\n```\n13. 在 server/utils/user.js 新增 getUser\n```\ngetUser (id) {\n    return this.users.filter((user) => user.id === id)[0];\n}\n```\n14. 在 server/utils/user.test.js 新增 getUser 測試\n```\nit('should find user', () => {\n    var userId = '2';\n    var user = users.getUser(userId);\n\n    expect(user.id).toBe(userId);\n});\n\nit('should not find user', () => {\n    var userId = '99';\n    var user = users.getUser(userId);\n\n    expect(user).toBeUndefined();\n});\n```\n15. 在 server/utils/user.js 新增 removeUser\n```\nremoveUser (id) {\n    var user = this.getUser(id);\n\n    if (user) {\n        this.users = this.users.filter((user) => user.id !== id);\n    }\n\n    return user;\n}\n```\n16. 在 server/utils/user.test.js 新增 removeUser 測試\n```\nit('should remove a user', () => {\n    var userId = '1';\n    var user = users.removeUser(userId);\n\n    expect(user.id).toBe(userId);\n    expect(users.users.length).toBe(2);\n});\n\nit('should not remove user', () => {\n    var userId = '99';\n    var user = users.removeUser(userId);\n\n    expect(user).toBeUndefined();\n    expect(users.users.length).toBe(3);\n});\n```\n#### Wiring up User List\n1. 在 public/js/chat.js 新增 updateUserList\n```\nsocket.on('updateUserList', function (users) {\n    console.log('Users list', users);\n});\n```\n2. 在 server/server.js 引入 `const {Users} = require('./utils/users');`\n3. 在 server/server.js 新增 users `var users = new Users();`\n4. 在 server/server.js 的 connect 部分，當連線時，先 removeUser，然後再重新 addUser，最後將 userList 傳送到前端頁面\n```\nusers.removeUser(socket.id);\nusers.addUser(socket.id, params.name, params.room);\n\nio.to(params.room).emit('updateUserList', users.getUserList(params.room));\n```\n5. 在 server/server.js 的 disconnect 部分，踢除 user，如果 user 存在，就更新 UserList，然後在前端頁面顯示 user 離開的訊息\n```\nsocket.on('disconnect', () => {\n    var user = users.removeUser(socket.id);\n\n    if (user) {\n        io.to(user.room).emit('updateUserList', users.getUserList(user.room));\n        io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left.`));\n    }\n});\n```\n6. 修改 public/js/chat.js 的 updateUserList，把 user 顯示在前端\n```\nsocket.on('updateUserList', function (users) {\n    var ol = jQuery('<ol></ol>');\n\n    users.forEach(function (user) {\n        ol.append(jQuery('<li></li>').text(user));\n    });\n\n    jQuery('#users').html(ol);\n});\n```\n#### 只傳送訊息到同一個 Room\n1. 在 public/js/chat.js 的 submit 刪掉 `from: 'User',`\n2. 在 server/server.js 修改 createMessage 讓 message 只在指定的 room 發佈訊息\n```\nsocket.on('createMessage', (message, callback) => {\n    var user = users.getUser(socket.id);\n\n    if (user && isRealString(message.text)) {\n        io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));\n    }\n\n    callback('');\n});\n```\n3. 在 server/server.js 修改 createLocationMessage 如上\n```\nsocket.on('createLocationMessage', (coords) => {\n    var user = users.getUser(socket.id);\n\n    if (user) {\n        io.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));\n    }\n\n});\n```\n#### 新功能開發\n1. 不管字母大小寫，都是同一個房間\n2. 拒絕同樣名稱的用戶\n3. 在進去聊天室的時候，列出正在聊天的聊天室名稱 (dropdown)","slug":"Nodejs-快速學習自我挑戰-Day12","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxh003o7ifale1fwfuk","content":"<img src=\"/images/learning/nodejs/nodejsday12.jpg\">\n<hr>\n<h3>使用 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 的即時 Web Apps</h3>\n<h4>Mustache.js</h4>\n<ol>\n<li><a href=\"https://github.com/janl/mustache.js/\" target=\"_blank\" rel=\"external\">下載 Mustache 最新版</a>，儲存到 public/js/libs/mustache.js</li>\n<li>在 public/index.html 引入 <code>&lt;script src=&quot;js/libs/mustache.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 public/index.html 加入 template</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=&quot;message-template&quot; type=&quot;text/template&quot;&gt;</div><div class=\"line\">    &lt;li class=&quot;message&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;message__title&quot;&gt;</div><div class=\"line\">            &lt;h4&gt;&#123;&#123;from&#125;&#125;&lt;/h4&gt;</div><div class=\"line\">            &lt;span&gt;&#123;&#123;createdAt&#125;&#125;&lt;/span&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;message__body&quot;&gt;</div><div class=\"line\">            &lt;p&gt;&#123;&#123;text&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script id=&quot;location-message-template&quot; type=&quot;text/template&quot;&gt;</div><div class=\"line\">    &lt;li class=&quot;message&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;message__title&quot;&gt;</div><div class=\"line\">            &lt;h4&gt;&#123;&#123;from&#125;&#125;&lt;/h4&gt;</div><div class=\"line\">            &lt;span&gt;&#123;&#123;createdAt&#125;&#125;&lt;/span&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;message__body&quot;&gt;</div><div class=\"line\">            &lt;p&gt;</div><div class=\"line\">                &lt;a href=&quot;&#123;&#123;url&#125;&#125;&quot; target=&quot;_blank&quot;&gt;My current location&lt;/a&gt;</div><div class=\"line\">            &lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 public/js/index.js 使用 Mustache 來顯示 template</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newMessage&apos;, function (message) &#123;</div><div class=\"line\">    var formattedTime = moment(message.createdAt).format(&apos;h:mm a&apos;);</div><div class=\"line\">    var template = jQuery(&apos;#message-template&apos;).html();</div><div class=\"line\">    var html = Mustache.render(template, &#123;</div><div class=\"line\">        text: message.text,</div><div class=\"line\">        from: message.from,</div><div class=\"line\">        createdAt: formattedTime</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;newLocationMessage&apos;, function (message) &#123;</div><div class=\"line\">    var formattedTime = moment(message.createdAt).format(&apos;h:mm a&apos;);</div><div class=\"line\">    var template = jQuery(&apos;#location-message-template&apos;).html();</div><div class=\"line\">    var html = Mustache.render(template, &#123;</div><div class=\"line\">        from: message.from,</div><div class=\"line\">        url: message.url,</div><div class=\"line\">        createdAt: formattedTime</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(html);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><code>git push heroku master</code></li>\n</ol>\n<h4>Autoscrolling</h4>\n<ol>\n<li>在 public/js/index.js 新增 scrollToBottom function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function scrollToBottom () &#123;</div><div class=\"line\">    // Selectors</div><div class=\"line\">    var messages = jQuery(&apos;#messages&apos;);</div><div class=\"line\">    var newMessage = messages.children(&apos;li:last-child&apos;);</div><div class=\"line\">    // Height</div><div class=\"line\">    var clientHeight = messages.prop(&apos;clientHeight&apos;);</div><div class=\"line\">    var scrollTop = messages.prop(&apos;scrollTop&apos;);</div><div class=\"line\">    var scrollHeight = messages.prop(&apos;scrollHeight&apos;);</div><div class=\"line\">    var newMessageHeight = newMessage.innerHeight();</div><div class=\"line\">    var lastMessageHeight = newMessage.prev().innerHeight();</div><div class=\"line\"></div><div class=\"line\">    if (clientHeight + scrollTop + newMessageHeight + lastMessageHeight &gt;= scrollHeight) &#123;</div><div class=\"line\">        messages.scrollTop(scrollHeight);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 public/js/index.js 的 newMessage 和 newLocationMessage 新增 scrollToBottom<br>\n<code>scrollToBottom();</code></li>\n</ol>\n<h4>新增一個 join page</h4>\n<ol>\n<li>將本來的 index.html 和 index.js 改為 chat.html 和 chat.js</li>\n<li>新增 public/index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot;</div><div class=\"line\">          content=&quot;width=device-width, user-scale=1, user-scalable=no&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Join | ChatApp&lt;/title&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body class=&quot;centered-form&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;centered-form__form&quot;&gt;</div><div class=\"line\">        &lt;form action=&quot;chat.html&quot;&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;h3&gt;Join a Chat&lt;/h3&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;label&gt;Display name&lt;/label&gt;</div><div class=\"line\">                &lt;input type=&quot;text&quot; name=&quot;name&quot; autofocus /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;label&gt;Room name&lt;/label&gt;</div><div class=\"line\">                &lt;input type=&quot;text&quot; name=&quot;room&quot; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;button&gt;Join&lt;/button&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h4>傳送 Room 資訊</h4>\n<ol>\n<li><a href=\"https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401\" target=\"_blank\" rel=\"external\">deparam function</a></li>\n<li>把檔案下載到 public/js/libs/deparam.js</li>\n<li>在 public/chat.html 引入 <code>&lt;script src=&quot;js/libs/deparam.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 public/js/chat.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;connect&apos;, function () &#123;</div><div class=\"line\">    var params = jQuery.deparam(window.location.search);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;join&apos;, params, function (err) &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">            alert(err);</div><div class=\"line\">            window.location.href = &apos;/&apos;;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            console.log(&apos;No error&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 server/utils/validation.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var isRealString = (str) =&gt; &#123;</div><div class=\"line\">    return typeof str === &apos;string&apos; &amp;&amp; str.trim().length &gt; 0;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;isRealString&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/server.js 引入 <code>const {isRealString} = require('./utils/validation');</code></li>\n<li>在 server/server.js 新增 socket.on 取得資訊，並做驗證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;join&apos;, (params, callback) =&gt; &#123;</div><div class=\"line\">    if (!isRealString(params.name) || !isRealString(params.room)) &#123;</div><div class=\"line\">        callback(&apos;Name and room name are required.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    callback();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>新增 server/utils/validation.test.js\n<ul>\n<li>引入 isRealString</li>\n<li>測試一：拒絕不是 string 的值</li>\n<li>測試二：拒絕只有空白的 string</li>\n<li>測試三：接受沒有空格的 string</li>\n</ul>\n</li>\n<li>新增 server/utils/validation.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;isRealString&#125; = require(&apos;./validation&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;isRealString&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should reject non-string values&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = isRealString(98);</div><div class=\"line\">        expect(res).toBe(false);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should reject string with only spaces&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = isRealString(&apos;    &apos;);</div><div class=\"line\">        expect(res).toBe(false);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should allow string with non-space characters&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = isRealString(&apos;  Andrew  &apos;);</div><div class=\"line\">        expect(res).toBe(true);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4><a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> Rooms</h4>\n<ol>\n<li>在 server/server.js 新增 socket.join，然後把上面的 newMessage 放到下面，動態產生使用者加入的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;join&apos;, (params, callback) =&gt; &#123;</div><div class=\"line\">    if (!isRealString(params.name) || !isRealString(params.room)) &#123;</div><div class=\"line\">        callback(&apos;Name and room name are required.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    socket.join(params.room);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, &apos;Welcome to the chat app&apos;));</div><div class=\"line\">    socket.broadcast.to(params.room).emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, `$&#123;params.name&#125; has joined`));</div><div class=\"line\">    callback();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>使用 ES6 classes 來儲存用戶</h4>\n<ol>\n<li>新增 server/utils/users.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person &#123;</div><div class=\"line\">    constructor (name, age) &#123;</div><div class=\"line\">        console.log(name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var me = new Person(&apos;Andrew&apos;, 25);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>node server/utils/users.js</code> 就會出現 Andrew 25</li>\n<li>在 class 新增 getUserDescription</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserDescription () &#123;</div><div class=\"line\">    return `$&#123;this.name&#125; is $&#123;this.age&#125; year(s) old.`;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增變數，然後讀出變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var description = me.getUserDescription();</div><div class=\"line\">console.log(description);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><code>console.log(description);</code> 就會顯示出 Andrew is 25 year(s) old.</li>\n<li>在 server/utils/users.js 新增 Users class</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Users &#123;</div><div class=\"line\">    constructor () &#123;</div><div class=\"line\">        this.users = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    addUser (id, name, room) &#123;</div><div class=\"line\">        var user = &#123;id, name, room&#125;;</div><div class=\"line\">        this.users.push(user);</div><div class=\"line\">        return user;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;Users&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增 server/utils/users.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;Users&#125; = require(&apos;./users&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Users&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should add new user&apos;, () =&gt; &#123;</div><div class=\"line\">        var users = new Users();</div><div class=\"line\">        var user = &#123;</div><div class=\"line\">            id: &apos;123&apos;,</div><div class=\"line\">            name: &apos;Andrew&apos;,</div><div class=\"line\">            room: &apos;The Office Fans&apos;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        var resUser = users.addUser(user.id, user.name, user.room);</div><div class=\"line\"></div><div class=\"line\">        expect(users.users).toEqual([user]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><code>npm test</code></li>\n<li>在 server/utils/users.test.js 丟 data 進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users;</div><div class=\"line\"></div><div class=\"line\">beforeEach(() =&gt; &#123;</div><div class=\"line\">    users = new Users();</div><div class=\"line\">    users.users = [&#123;</div><div class=\"line\">        id: &apos;1&apos;,</div><div class=\"line\">        name: &apos;Mike&apos;,</div><div class=\"line\">        room: &apos;Node Course&apos;</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        id: &apos;2&apos;,</div><div class=\"line\">        name: &apos;Jen&apos;,</div><div class=\"line\">        room: &apos;React Course&apos;</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        id: &apos;3&apos;,</div><div class=\"line\">        name: &apos;Julie&apos;,</div><div class=\"line\">        room: &apos;Node Course&apos;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><code>npm run test-watch</code></li>\n<li>在 server/utils/user.js 新增 getUserList</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserList (room) &#123;</div><div class=\"line\">    var users = this.users.filter((user) =&gt; user.room === room);</div><div class=\"line\">    var namesArray = users.map((user) =&gt; user.name);</div><div class=\"line\"></div><div class=\"line\">    return namesArray;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>在 server/utils/user.test.js 新增 getUserList 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should return names for node course&apos;, () =&gt; &#123;</div><div class=\"line\">    var userList = users.getUserList(&apos;Node Course&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(userList).toEqual([&apos;Mike&apos;, &apos;Julie&apos;]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return names for react course&apos;, () =&gt; &#123;</div><div class=\"line\">    var userList = users.getUserList(&apos;React Course&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(userList).toEqual([&apos;Jen&apos;]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 server/utils/user.js 新增 getUser</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUser (id) &#123;</div><div class=\"line\">    return this.users.filter((user) =&gt; user.id === id)[0];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li>在 server/utils/user.test.js 新增 getUser 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should find user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;2&apos;;</div><div class=\"line\">    var user = users.getUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user.id).toBe(userId);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should not find user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;99&apos;;</div><div class=\"line\">    var user = users.getUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user).toBeUndefined();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li>在 server/utils/user.js 新增 removeUser</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">removeUser (id) &#123;</div><div class=\"line\">    var user = this.getUser(id);</div><div class=\"line\"></div><div class=\"line\">    if (user) &#123;</div><div class=\"line\">        this.users = this.users.filter((user) =&gt; user.id !== id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"16\">\n<li>在 server/utils/user.test.js 新增 removeUser 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should remove a user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;1&apos;;</div><div class=\"line\">    var user = users.removeUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user.id).toBe(userId);</div><div class=\"line\">    expect(users.users.length).toBe(2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should not remove user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;99&apos;;</div><div class=\"line\">    var user = users.removeUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user).toBeUndefined();</div><div class=\"line\">    expect(users.users.length).toBe(3);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Wiring up User List</h4>\n<ol>\n<li>在 public/js/chat.js 新增 updateUserList</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;updateUserList&apos;, function (users) &#123;</div><div class=\"line\">    console.log(&apos;Users list&apos;, users);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 引入 <code>const {Users} = require('./utils/users');</code></li>\n<li>在 server/server.js 新增 users <code>var users = new Users();</code></li>\n<li>在 server/server.js 的 connect 部分，當連線時，先 removeUser，然後再重新 addUser，最後將 userList 傳送到前端頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">users.removeUser(socket.id);</div><div class=\"line\">users.addUser(socket.id, params.name, params.room);</div><div class=\"line\"></div><div class=\"line\">io.to(params.room).emit(&apos;updateUserList&apos;, users.getUserList(params.room));</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 server/server.js 的 disconnect 部分，踢除 user，如果 user 存在，就更新 UserList，然後在前端頁面顯示 user 離開的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;disconnect&apos;, () =&gt; &#123;</div><div class=\"line\">    var user = users.removeUser(socket.id);</div><div class=\"line\"></div><div class=\"line\">    if (user) &#123;</div><div class=\"line\">        io.to(user.room).emit(&apos;updateUserList&apos;, users.getUserList(user.room));</div><div class=\"line\">        io.to(user.room).emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, `$&#123;user.name&#125; has left.`));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改 public/js/chat.js 的 updateUserList，把 user 顯示在前端</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;updateUserList&apos;, function (users) &#123;</div><div class=\"line\">    var ol = jQuery(&apos;&lt;ol&gt;&lt;/ol&gt;&apos;);</div><div class=\"line\"></div><div class=\"line\">    users.forEach(function (user) &#123;</div><div class=\"line\">        ol.append(jQuery(&apos;&lt;li&gt;&lt;/li&gt;&apos;).text(user));</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#users&apos;).html(ol);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>只傳送訊息到同一個 Room</h4>\n<ol>\n<li>在 public/js/chat.js 的 submit 刪掉 <code>from: 'User',</code></li>\n<li>在 server/server.js 修改 createMessage 讓 message 只在指定的 room 發佈訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message, callback) =&gt; &#123;</div><div class=\"line\">    var user = users.getUser(socket.id);</div><div class=\"line\"></div><div class=\"line\">    if (user &amp;&amp; isRealString(message.text)) &#123;</div><div class=\"line\">        io.to(user.room).emit(&apos;newMessage&apos;, generateMessage(user.name, message.text));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    callback(&apos;&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 server/server.js 修改 createLocationMessage 如上</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createLocationMessage&apos;, (coords) =&gt; &#123;</div><div class=\"line\">    var user = users.getUser(socket.id);</div><div class=\"line\"></div><div class=\"line\">    if (user) &#123;</div><div class=\"line\">        io.to(user.room).emit(&apos;newLocationMessage&apos;, generateLocationMessage(user.name, coords.latitude, coords.longitude));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>新功能開發</h4>\n<ol>\n<li>不管字母大小寫，都是同一個房間</li>\n<li>拒絕同樣名稱的用戶</li>\n<li>在進去聊天室的時候，列出正在聊天的聊天室名稱 (dropdown)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday12.jpg\">\n<hr>\n<h3>使用 <a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> 的即時 Web Apps</h3>\n<h4>Mustache.js</h4>\n<ol>\n<li><a href=\"https://github.com/janl/mustache.js/\" target=\"_blank\" rel=\"external\">下載 Mustache 最新版</a>，儲存到 public/js/libs/mustache.js</li>\n<li>在 public/index.html 引入 <code>&lt;script src=&quot;js/libs/mustache.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 public/index.html 加入 template</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=&quot;message-template&quot; type=&quot;text/template&quot;&gt;</div><div class=\"line\">    &lt;li class=&quot;message&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;message__title&quot;&gt;</div><div class=\"line\">            &lt;h4&gt;&#123;&#123;from&#125;&#125;&lt;/h4&gt;</div><div class=\"line\">            &lt;span&gt;&#123;&#123;createdAt&#125;&#125;&lt;/span&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;message__body&quot;&gt;</div><div class=\"line\">            &lt;p&gt;&#123;&#123;text&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script id=&quot;location-message-template&quot; type=&quot;text/template&quot;&gt;</div><div class=\"line\">    &lt;li class=&quot;message&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;message__title&quot;&gt;</div><div class=\"line\">            &lt;h4&gt;&#123;&#123;from&#125;&#125;&lt;/h4&gt;</div><div class=\"line\">            &lt;span&gt;&#123;&#123;createdAt&#125;&#125;&lt;/span&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;message__body&quot;&gt;</div><div class=\"line\">            &lt;p&gt;</div><div class=\"line\">                &lt;a href=&quot;&#123;&#123;url&#125;&#125;&quot; target=&quot;_blank&quot;&gt;My current location&lt;/a&gt;</div><div class=\"line\">            &lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 public/js/index.js 使用 Mustache 來顯示 template</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;newMessage&apos;, function (message) &#123;</div><div class=\"line\">    var formattedTime = moment(message.createdAt).format(&apos;h:mm a&apos;);</div><div class=\"line\">    var template = jQuery(&apos;#message-template&apos;).html();</div><div class=\"line\">    var html = Mustache.render(template, &#123;</div><div class=\"line\">        text: message.text,</div><div class=\"line\">        from: message.from,</div><div class=\"line\">        createdAt: formattedTime</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">socket.on(&apos;newLocationMessage&apos;, function (message) &#123;</div><div class=\"line\">    var formattedTime = moment(message.createdAt).format(&apos;h:mm a&apos;);</div><div class=\"line\">    var template = jQuery(&apos;#location-message-template&apos;).html();</div><div class=\"line\">    var html = Mustache.render(template, &#123;</div><div class=\"line\">        from: message.from,</div><div class=\"line\">        url: message.url,</div><div class=\"line\">        createdAt: formattedTime</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#messages&apos;).append(html);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><code>git push heroku master</code></li>\n</ol>\n<h4>Autoscrolling</h4>\n<ol>\n<li>在 public/js/index.js 新增 scrollToBottom function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function scrollToBottom () &#123;</div><div class=\"line\">    // Selectors</div><div class=\"line\">    var messages = jQuery(&apos;#messages&apos;);</div><div class=\"line\">    var newMessage = messages.children(&apos;li:last-child&apos;);</div><div class=\"line\">    // Height</div><div class=\"line\">    var clientHeight = messages.prop(&apos;clientHeight&apos;);</div><div class=\"line\">    var scrollTop = messages.prop(&apos;scrollTop&apos;);</div><div class=\"line\">    var scrollHeight = messages.prop(&apos;scrollHeight&apos;);</div><div class=\"line\">    var newMessageHeight = newMessage.innerHeight();</div><div class=\"line\">    var lastMessageHeight = newMessage.prev().innerHeight();</div><div class=\"line\"></div><div class=\"line\">    if (clientHeight + scrollTop + newMessageHeight + lastMessageHeight &gt;= scrollHeight) &#123;</div><div class=\"line\">        messages.scrollTop(scrollHeight);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 public/js/index.js 的 newMessage 和 newLocationMessage 新增 scrollToBottom<br>\n<code>scrollToBottom();</code></li>\n</ol>\n<h4>新增一個 join page</h4>\n<ol>\n<li>將本來的 index.html 和 index.js 改為 chat.html 和 chat.js</li>\n<li>新增 public/index.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot;</div><div class=\"line\">          content=&quot;width=device-width, user-scale=1, user-scalable=no&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Join | ChatApp&lt;/title&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body class=&quot;centered-form&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;centered-form__form&quot;&gt;</div><div class=\"line\">        &lt;form action=&quot;chat.html&quot;&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;h3&gt;Join a Chat&lt;/h3&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;label&gt;Display name&lt;/label&gt;</div><div class=\"line\">                &lt;input type=&quot;text&quot; name=&quot;name&quot; autofocus /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;label&gt;Room name&lt;/label&gt;</div><div class=\"line\">                &lt;input type=&quot;text&quot; name=&quot;room&quot; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;form-field&quot;&gt;</div><div class=\"line\">                &lt;button&gt;Join&lt;/button&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h4>傳送 Room 資訊</h4>\n<ol>\n<li><a href=\"https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401\" target=\"_blank\" rel=\"external\">deparam function</a></li>\n<li>把檔案下載到 public/js/libs/deparam.js</li>\n<li>在 public/chat.html 引入 <code>&lt;script src=&quot;js/libs/deparam.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>在 public/js/chat.js 新增 emit</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;connect&apos;, function () &#123;</div><div class=\"line\">    var params = jQuery.deparam(window.location.search);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;join&apos;, params, function (err) &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">            alert(err);</div><div class=\"line\">            window.location.href = &apos;/&apos;;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            console.log(&apos;No error&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 server/utils/validation.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var isRealString = (str) =&gt; &#123;</div><div class=\"line\">    return typeof str === &apos;string&apos; &amp;&amp; str.trim().length &gt; 0;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;isRealString&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/server.js 引入 <code>const {isRealString} = require('./utils/validation');</code></li>\n<li>在 server/server.js 新增 socket.on 取得資訊，並做驗證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;join&apos;, (params, callback) =&gt; &#123;</div><div class=\"line\">    if (!isRealString(params.name) || !isRealString(params.room)) &#123;</div><div class=\"line\">        callback(&apos;Name and room name are required.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    callback();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>新增 server/utils/validation.test.js\n<ul>\n<li>引入 isRealString</li>\n<li>測試一：拒絕不是 string 的值</li>\n<li>測試二：拒絕只有空白的 string</li>\n<li>測試三：接受沒有空格的 string</li>\n</ul>\n</li>\n<li>新增 server/utils/validation.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;isRealString&#125; = require(&apos;./validation&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;isRealString&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should reject non-string values&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = isRealString(98);</div><div class=\"line\">        expect(res).toBe(false);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should reject string with only spaces&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = isRealString(&apos;    &apos;);</div><div class=\"line\">        expect(res).toBe(false);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should allow string with non-space characters&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = isRealString(&apos;  Andrew  &apos;);</div><div class=\"line\">        expect(res).toBe(true);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4><a href=\"http://Socket.io\" target=\"_blank\" rel=\"external\">Socket.io</a> Rooms</h4>\n<ol>\n<li>在 server/server.js 新增 socket.join，然後把上面的 newMessage 放到下面，動態產生使用者加入的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;join&apos;, (params, callback) =&gt; &#123;</div><div class=\"line\">    if (!isRealString(params.name) || !isRealString(params.room)) &#123;</div><div class=\"line\">        callback(&apos;Name and room name are required.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    socket.join(params.room);</div><div class=\"line\"></div><div class=\"line\">    socket.emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, &apos;Welcome to the chat app&apos;));</div><div class=\"line\">    socket.broadcast.to(params.room).emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, `$&#123;params.name&#125; has joined`));</div><div class=\"line\">    callback();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>使用 ES6 classes 來儲存用戶</h4>\n<ol>\n<li>新增 server/utils/users.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person &#123;</div><div class=\"line\">    constructor (name, age) &#123;</div><div class=\"line\">        console.log(name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var me = new Person(&apos;Andrew&apos;, 25);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>node server/utils/users.js</code> 就會出現 Andrew 25</li>\n<li>在 class 新增 getUserDescription</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserDescription () &#123;</div><div class=\"line\">    return `$&#123;this.name&#125; is $&#123;this.age&#125; year(s) old.`;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增變數，然後讀出變數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var description = me.getUserDescription();</div><div class=\"line\">console.log(description);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><code>console.log(description);</code> 就會顯示出 Andrew is 25 year(s) old.</li>\n<li>在 server/utils/users.js 新增 Users class</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Users &#123;</div><div class=\"line\">    constructor () &#123;</div><div class=\"line\">        this.users = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    addUser (id, name, room) &#123;</div><div class=\"line\">        var user = &#123;id, name, room&#125;;</div><div class=\"line\">        this.users.push(user);</div><div class=\"line\">        return user;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;Users&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增 server/utils/users.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;Users&#125; = require(&apos;./users&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Users&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should add new user&apos;, () =&gt; &#123;</div><div class=\"line\">        var users = new Users();</div><div class=\"line\">        var user = &#123;</div><div class=\"line\">            id: &apos;123&apos;,</div><div class=\"line\">            name: &apos;Andrew&apos;,</div><div class=\"line\">            room: &apos;The Office Fans&apos;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        var resUser = users.addUser(user.id, user.name, user.room);</div><div class=\"line\"></div><div class=\"line\">        expect(users.users).toEqual([user]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><code>npm test</code></li>\n<li>在 server/utils/users.test.js 丟 data 進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var users;</div><div class=\"line\"></div><div class=\"line\">beforeEach(() =&gt; &#123;</div><div class=\"line\">    users = new Users();</div><div class=\"line\">    users.users = [&#123;</div><div class=\"line\">        id: &apos;1&apos;,</div><div class=\"line\">        name: &apos;Mike&apos;,</div><div class=\"line\">        room: &apos;Node Course&apos;</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        id: &apos;2&apos;,</div><div class=\"line\">        name: &apos;Jen&apos;,</div><div class=\"line\">        room: &apos;React Course&apos;</div><div class=\"line\">    &#125;,&#123;</div><div class=\"line\">        id: &apos;3&apos;,</div><div class=\"line\">        name: &apos;Julie&apos;,</div><div class=\"line\">        room: &apos;Node Course&apos;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><code>npm run test-watch</code></li>\n<li>在 server/utils/user.js 新增 getUserList</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserList (room) &#123;</div><div class=\"line\">    var users = this.users.filter((user) =&gt; user.room === room);</div><div class=\"line\">    var namesArray = users.map((user) =&gt; user.name);</div><div class=\"line\"></div><div class=\"line\">    return namesArray;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>在 server/utils/user.test.js 新增 getUserList 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should return names for node course&apos;, () =&gt; &#123;</div><div class=\"line\">    var userList = users.getUserList(&apos;Node Course&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(userList).toEqual([&apos;Mike&apos;, &apos;Julie&apos;]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return names for react course&apos;, () =&gt; &#123;</div><div class=\"line\">    var userList = users.getUserList(&apos;React Course&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(userList).toEqual([&apos;Jen&apos;]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 server/utils/user.js 新增 getUser</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUser (id) &#123;</div><div class=\"line\">    return this.users.filter((user) =&gt; user.id === id)[0];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li>在 server/utils/user.test.js 新增 getUser 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should find user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;2&apos;;</div><div class=\"line\">    var user = users.getUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user.id).toBe(userId);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should not find user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;99&apos;;</div><div class=\"line\">    var user = users.getUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user).toBeUndefined();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li>在 server/utils/user.js 新增 removeUser</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">removeUser (id) &#123;</div><div class=\"line\">    var user = this.getUser(id);</div><div class=\"line\"></div><div class=\"line\">    if (user) &#123;</div><div class=\"line\">        this.users = this.users.filter((user) =&gt; user.id !== id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"16\">\n<li>在 server/utils/user.test.js 新增 removeUser 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should remove a user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;1&apos;;</div><div class=\"line\">    var user = users.removeUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user.id).toBe(userId);</div><div class=\"line\">    expect(users.users.length).toBe(2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should not remove user&apos;, () =&gt; &#123;</div><div class=\"line\">    var userId = &apos;99&apos;;</div><div class=\"line\">    var user = users.removeUser(userId);</div><div class=\"line\"></div><div class=\"line\">    expect(user).toBeUndefined();</div><div class=\"line\">    expect(users.users.length).toBe(3);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Wiring up User List</h4>\n<ol>\n<li>在 public/js/chat.js 新增 updateUserList</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;updateUserList&apos;, function (users) &#123;</div><div class=\"line\">    console.log(&apos;Users list&apos;, users);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 引入 <code>const {Users} = require('./utils/users');</code></li>\n<li>在 server/server.js 新增 users <code>var users = new Users();</code></li>\n<li>在 server/server.js 的 connect 部分，當連線時，先 removeUser，然後再重新 addUser，最後將 userList 傳送到前端頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">users.removeUser(socket.id);</div><div class=\"line\">users.addUser(socket.id, params.name, params.room);</div><div class=\"line\"></div><div class=\"line\">io.to(params.room).emit(&apos;updateUserList&apos;, users.getUserList(params.room));</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 server/server.js 的 disconnect 部分，踢除 user，如果 user 存在，就更新 UserList，然後在前端頁面顯示 user 離開的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;disconnect&apos;, () =&gt; &#123;</div><div class=\"line\">    var user = users.removeUser(socket.id);</div><div class=\"line\"></div><div class=\"line\">    if (user) &#123;</div><div class=\"line\">        io.to(user.room).emit(&apos;updateUserList&apos;, users.getUserList(user.room));</div><div class=\"line\">        io.to(user.room).emit(&apos;newMessage&apos;, generateMessage(&apos;Admin&apos;, `$&#123;user.name&#125; has left.`));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改 public/js/chat.js 的 updateUserList，把 user 顯示在前端</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;updateUserList&apos;, function (users) &#123;</div><div class=\"line\">    var ol = jQuery(&apos;&lt;ol&gt;&lt;/ol&gt;&apos;);</div><div class=\"line\"></div><div class=\"line\">    users.forEach(function (user) &#123;</div><div class=\"line\">        ol.append(jQuery(&apos;&lt;li&gt;&lt;/li&gt;&apos;).text(user));</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    jQuery(&apos;#users&apos;).html(ol);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>只傳送訊息到同一個 Room</h4>\n<ol>\n<li>在 public/js/chat.js 的 submit 刪掉 <code>from: 'User',</code></li>\n<li>在 server/server.js 修改 createMessage 讓 message 只在指定的 room 發佈訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createMessage&apos;, (message, callback) =&gt; &#123;</div><div class=\"line\">    var user = users.getUser(socket.id);</div><div class=\"line\"></div><div class=\"line\">    if (user &amp;&amp; isRealString(message.text)) &#123;</div><div class=\"line\">        io.to(user.room).emit(&apos;newMessage&apos;, generateMessage(user.name, message.text));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    callback(&apos;&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 server/server.js 修改 createLocationMessage 如上</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket.on(&apos;createLocationMessage&apos;, (coords) =&gt; &#123;</div><div class=\"line\">    var user = users.getUser(socket.id);</div><div class=\"line\"></div><div class=\"line\">    if (user) &#123;</div><div class=\"line\">        io.to(user.room).emit(&apos;newLocationMessage&apos;, generateLocationMessage(user.name, coords.latitude, coords.longitude));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>新功能開發</h4>\n<ol>\n<li>不管字母大小寫，都是同一個房間</li>\n<li>拒絕同樣名稱的用戶</li>\n<li>在進去聊天室的時候，列出正在聊天的聊天室名稱 (dropdown)</li>\n</ol>\n"},{"title":"Nodejs 快速學習自我挑戰 Day2","thumbnail":["/images/learning/nodejs/nodejsday2.jpg"],"date":"2017-06-11T14:07:05.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday2.jpg\">\n\n***\n### Note App\n#### 刪除 Note\n1. 修改 removeNote function，先取得所有 notes，然後把跟標題不一樣的 title 取出來，然後存起來，所以選定的 title 就被刪除了\n```\nvar removeNote = (title) => {\n    var notes = fetchNotes();\n    var filteredNotes = notes.filter((note) => note.title !== title);\n    saveNotes(filteredNotes);\n};\n```\n2. 在 removeNote function 傳回 true 或 false，如果長度不一樣為 true，代表資料刪除，反之亦然。\n`return notes.length !== filteredNotes.length;`\n3. 在 app.js 用 noteRemoved 這個變數取得剛剛傳回來的值，如果 true，就顯示「 Note was removed」，false 的話，顯示「 Note not found 」\n```\nelse if (command === 'remove') {\n    var noteRemoved = notes.removeNote(argv.title);\n    var message = noteRemoved ? 'Note was removed' : 'Note not found';\n    console.log(message);\n}\n```\n#### 閱讀 Note\n1. 修改 getNote function，先取得所有的 notes，然後把標題一樣的取出來，最後 return 陣列 0 (就是取出來的資料)\n```\nvar getNote = (title) => {\n    var notes = fetchNotes();\n    var filteredNotes = notes.filter((note) => note.title === title);\n    return filteredNotes[0];\n};\n```\n2. 將傳來回的物件用 note 取得，如果存在，顯示資料\n```\nvar note = notes.getNote(argv.title);\n    if (note) {\n        console.log('Note found');\n        console.log('--');\n        console.log(`Title: ${note.title}`);\n        console.log(`Body: ${note.body}`);\n    } else {\n        console.log('Note not found');\n    }\n```\n3. 為了簡化重複的部分，將重複的部分移到 notes.js，並用 function 包裝，還要記得把 logNote export 出去\n```\nvar logNote = (note) => {\n    console.log('--');\n    console.log(`Title: ${note.title}`);\n    console.log(`Body: ${note.body}`);\n};\n\nmodule.exports = {\n    /* 其它 note function */\n    logNote\n};\n```\n4. 剛剛重複的部分，用 function 取代 `notes.logNote(note);`\n#### Note.js 應用除錯\n1. 使用 `node debug` 除錯，`n` 跳到下一個錯誤，`c` 直接跳到結果或是 `debugger` 處，`repl` 可以輸入指令看相關變數\n#### list Notes\n1. 直接 return 取得的所有資料\n```\nvar getAll = () => {\n    return fetchNotes();\n};\n```\n2. 用 forEach 列出取得的所有 notes\n```\nelse if (command === 'list') {\n    var allNotes = notes.getAll();\n    console.log(`Printing ${allNotes.length} note(s).`);\n    allNotes.forEach((note) => notes.logNote(note));\n}\n```\n#### 進階 Yargs\n1. 用 yargs .command 來編寫 help 命令的內容\n```\nconst titleOptions = {\n    describe: 'Title of note',\n        demand: true,\n        alias: 't'\n};\n\nconst bodyOptions = {\n    describe: 'Body of note',\n        demand: true,\n        alias: 'b'\n}\n\nconst argv = yargs\n    .command('add', 'Add a new note', {\n        title: titleOptions,\n        body: bodyOptions\n    })\n    .command('list', 'List all notes')\n    .command('read', 'Read a note', {\n        title: titleOptions\n    })\n    .command('remove', 'Remove a note', {\n        title: titleOptions\n    })\n    .help()\n    .argv;\n```\n#### Arrow function\n1. 如果只有一個變數，()可以省略，另外，`var square = x => x * x;` 等於\n```\nvar square = (x) => {\n    var result = x * x;\n    return result;\n};\n```\n2. 使用 Arrow function 的時候，argument 和 this.name 不能使用 (所以這邊的 sayHi 是讀不出來的)\n```\nvar user = {\n    name: 'Vincent',\n    sayHi: () => {\n        console.log(arguments);\n        console.log(`Hi. I'm ${this.name}`);\n    },\n    sayHiAlt () {\n        console.log(arguments);\n        console.log(`Hi. I'm ${this.name}`);\n    }\n};\n\nuser.sayHiAlt(1, 2, 3);\n```\n### Weather App\n#### Async\n1. 下列的程式，會依照下列順序執行 `Starting app` => `Finishing up` => `Second setTimeout` => `Inside of callback`\n```\nconsole.log('Starting app');\n\nsetTimeout(() => {\n    console.log('Inside of callback');\n}, 2000);\n\nsetTimeout(() => {\n    console.log('Second setTimeout');\n}, 0);\n\n\nconsole.log('Finishing up');\n```\n#### callback Function & APIs\n1. Callback 範例，最後會輸出 `{ id: 31, name: 'Vikram' }`\n```\nvar getUser = (id, callback) => {\n    var user = {\n        id: id,\n        name: 'Vikram'\n    };\n\n    setTimeout(() => {\n        callback(user);\n    }, 3000);\n};\n\ngetUser(31, (userObject) => {\n    console.log(userObject);\n});\n```\n2. [第三方 request 插件](https://www.npmjs.com/package/request)\n3. 啟動 npm 專案 `npm init`\n4. 安裝 request 套件 `npm install request@2.73.0 --save`\n5. 在根目錄新增 app.js 開始專案\n6. 先 require request 套件，然後從 google api 擷取 json 資訊\n```\nconst request = require('request');\n\nrequest ({\n    url: 'https://maps.googleapis.com/maps/api/geocode/json?address=1301%20lombard%20street%20philadelphia',\n    json: true\n}, (error, response, body) => {\n    console.log(body);\n});\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day2.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/nodejs/nodejsday2.jpg\ndate: 2017-06-11 22:07:05\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday2.jpg\">\n\n***\n### Note App\n#### 刪除 Note\n1. 修改 removeNote function，先取得所有 notes，然後把跟標題不一樣的 title 取出來，然後存起來，所以選定的 title 就被刪除了\n```\nvar removeNote = (title) => {\n    var notes = fetchNotes();\n    var filteredNotes = notes.filter((note) => note.title !== title);\n    saveNotes(filteredNotes);\n};\n```\n2. 在 removeNote function 傳回 true 或 false，如果長度不一樣為 true，代表資料刪除，反之亦然。\n`return notes.length !== filteredNotes.length;`\n3. 在 app.js 用 noteRemoved 這個變數取得剛剛傳回來的值，如果 true，就顯示「 Note was removed」，false 的話，顯示「 Note not found 」\n```\nelse if (command === 'remove') {\n    var noteRemoved = notes.removeNote(argv.title);\n    var message = noteRemoved ? 'Note was removed' : 'Note not found';\n    console.log(message);\n}\n```\n#### 閱讀 Note\n1. 修改 getNote function，先取得所有的 notes，然後把標題一樣的取出來，最後 return 陣列 0 (就是取出來的資料)\n```\nvar getNote = (title) => {\n    var notes = fetchNotes();\n    var filteredNotes = notes.filter((note) => note.title === title);\n    return filteredNotes[0];\n};\n```\n2. 將傳來回的物件用 note 取得，如果存在，顯示資料\n```\nvar note = notes.getNote(argv.title);\n    if (note) {\n        console.log('Note found');\n        console.log('--');\n        console.log(`Title: ${note.title}`);\n        console.log(`Body: ${note.body}`);\n    } else {\n        console.log('Note not found');\n    }\n```\n3. 為了簡化重複的部分，將重複的部分移到 notes.js，並用 function 包裝，還要記得把 logNote export 出去\n```\nvar logNote = (note) => {\n    console.log('--');\n    console.log(`Title: ${note.title}`);\n    console.log(`Body: ${note.body}`);\n};\n\nmodule.exports = {\n    /* 其它 note function */\n    logNote\n};\n```\n4. 剛剛重複的部分，用 function 取代 `notes.logNote(note);`\n#### Note.js 應用除錯\n1. 使用 `node debug` 除錯，`n` 跳到下一個錯誤，`c` 直接跳到結果或是 `debugger` 處，`repl` 可以輸入指令看相關變數\n#### list Notes\n1. 直接 return 取得的所有資料\n```\nvar getAll = () => {\n    return fetchNotes();\n};\n```\n2. 用 forEach 列出取得的所有 notes\n```\nelse if (command === 'list') {\n    var allNotes = notes.getAll();\n    console.log(`Printing ${allNotes.length} note(s).`);\n    allNotes.forEach((note) => notes.logNote(note));\n}\n```\n#### 進階 Yargs\n1. 用 yargs .command 來編寫 help 命令的內容\n```\nconst titleOptions = {\n    describe: 'Title of note',\n        demand: true,\n        alias: 't'\n};\n\nconst bodyOptions = {\n    describe: 'Body of note',\n        demand: true,\n        alias: 'b'\n}\n\nconst argv = yargs\n    .command('add', 'Add a new note', {\n        title: titleOptions,\n        body: bodyOptions\n    })\n    .command('list', 'List all notes')\n    .command('read', 'Read a note', {\n        title: titleOptions\n    })\n    .command('remove', 'Remove a note', {\n        title: titleOptions\n    })\n    .help()\n    .argv;\n```\n#### Arrow function\n1. 如果只有一個變數，()可以省略，另外，`var square = x => x * x;` 等於\n```\nvar square = (x) => {\n    var result = x * x;\n    return result;\n};\n```\n2. 使用 Arrow function 的時候，argument 和 this.name 不能使用 (所以這邊的 sayHi 是讀不出來的)\n```\nvar user = {\n    name: 'Vincent',\n    sayHi: () => {\n        console.log(arguments);\n        console.log(`Hi. I'm ${this.name}`);\n    },\n    sayHiAlt () {\n        console.log(arguments);\n        console.log(`Hi. I'm ${this.name}`);\n    }\n};\n\nuser.sayHiAlt(1, 2, 3);\n```\n### Weather App\n#### Async\n1. 下列的程式，會依照下列順序執行 `Starting app` => `Finishing up` => `Second setTimeout` => `Inside of callback`\n```\nconsole.log('Starting app');\n\nsetTimeout(() => {\n    console.log('Inside of callback');\n}, 2000);\n\nsetTimeout(() => {\n    console.log('Second setTimeout');\n}, 0);\n\n\nconsole.log('Finishing up');\n```\n#### callback Function & APIs\n1. Callback 範例，最後會輸出 `{ id: 31, name: 'Vikram' }`\n```\nvar getUser = (id, callback) => {\n    var user = {\n        id: id,\n        name: 'Vikram'\n    };\n\n    setTimeout(() => {\n        callback(user);\n    }, 3000);\n};\n\ngetUser(31, (userObject) => {\n    console.log(userObject);\n});\n```\n2. [第三方 request 插件](https://www.npmjs.com/package/request)\n3. 啟動 npm 專案 `npm init`\n4. 安裝 request 套件 `npm install request@2.73.0 --save`\n5. 在根目錄新增 app.js 開始專案\n6. 先 require request 套件，然後從 google api 擷取 json 資訊\n```\nconst request = require('request');\n\nrequest ({\n    url: 'https://maps.googleapis.com/maps/api/geocode/json?address=1301%20lombard%20street%20philadelphia',\n    json: true\n}, (error, response, body) => {\n    console.log(body);\n});\n```","slug":"Nodejs-快速學習自我挑戰-Day2","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxi003r7ifaeu6l2c4s","content":"<img src=\"/images/learning/nodejs/nodejsday2.jpg\">\n<hr>\n<h3>Note App</h3>\n<h4>刪除 Note</h4>\n<ol>\n<li>修改 removeNote function，先取得所有 notes，然後把跟標題不一樣的 title 取出來，然後存起來，所以選定的 title 就被刪除了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var removeNote = (title) =&gt; &#123;</div><div class=\"line\">    var notes = fetchNotes();</div><div class=\"line\">    var filteredNotes = notes.filter((note) =&gt; note.title !== title);</div><div class=\"line\">    saveNotes(filteredNotes);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 removeNote function 傳回 true 或 false，如果長度不一樣為 true，代表資料刪除，反之亦然。<br>\n<code>return notes.length !== filteredNotes.length;</code></li>\n<li>在 app.js 用 noteRemoved 這個變數取得剛剛傳回來的值，如果 true，就顯示「 Note was removed」，false 的話，顯示「 Note not found 」</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">else if (command === &apos;remove&apos;) &#123;</div><div class=\"line\">    var noteRemoved = notes.removeNote(argv.title);</div><div class=\"line\">    var message = noteRemoved ? &apos;Note was removed&apos; : &apos;Note not found&apos;;</div><div class=\"line\">    console.log(message);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>閱讀 Note</h4>\n<ol>\n<li>修改 getNote function，先取得所有的 notes，然後把標題一樣的取出來，最後 return 陣列 0 (就是取出來的資料)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getNote = (title) =&gt; &#123;</div><div class=\"line\">    var notes = fetchNotes();</div><div class=\"line\">    var filteredNotes = notes.filter((note) =&gt; note.title === title);</div><div class=\"line\">    return filteredNotes[0];</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將傳來回的物件用 note 取得，如果存在，顯示資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var note = notes.getNote(argv.title);</div><div class=\"line\">    if (note) &#123;</div><div class=\"line\">        console.log(&apos;Note found&apos;);</div><div class=\"line\">        console.log(&apos;--&apos;);</div><div class=\"line\">        console.log(`Title: $&#123;note.title&#125;`);</div><div class=\"line\">        console.log(`Body: $&#123;note.body&#125;`);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(&apos;Note not found&apos;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>為了簡化重複的部分，將重複的部分移到 notes.js，並用 function 包裝，還要記得把 logNote export 出去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var logNote = (note) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;--&apos;);</div><div class=\"line\">    console.log(`Title: $&#123;note.title&#125;`);</div><div class=\"line\">    console.log(`Body: $&#123;note.body&#125;`);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    /* 其它 note function */</div><div class=\"line\">    logNote</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>剛剛重複的部分，用 function 取代 <code>notes.logNote(note);</code></li>\n</ol>\n<h4>Note.js 應用除錯</h4>\n<ol>\n<li>使用 <code>node debug</code> 除錯，<code>n</code> 跳到下一個錯誤，<code>c</code> 直接跳到結果或是 <code>debugger</code> 處，<code>repl</code> 可以輸入指令看相關變數</li>\n</ol>\n<h4>list Notes</h4>\n<ol>\n<li>直接 return 取得的所有資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getAll = () =&gt; &#123;</div><div class=\"line\">    return fetchNotes();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>用 forEach 列出取得的所有 notes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">else if (command === &apos;list&apos;) &#123;</div><div class=\"line\">    var allNotes = notes.getAll();</div><div class=\"line\">    console.log(`Printing $&#123;allNotes.length&#125; note(s).`);</div><div class=\"line\">    allNotes.forEach((note) =&gt; notes.logNote(note));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>進階 Yargs</h4>\n<ol>\n<li>用 yargs .command 來編寫 help 命令的內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">const titleOptions = &#123;</div><div class=\"line\">    describe: &apos;Title of note&apos;,</div><div class=\"line\">        demand: true,</div><div class=\"line\">        alias: &apos;t&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const bodyOptions = &#123;</div><div class=\"line\">    describe: &apos;Body of note&apos;,</div><div class=\"line\">        demand: true,</div><div class=\"line\">        alias: &apos;b&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const argv = yargs</div><div class=\"line\">    .command(&apos;add&apos;, &apos;Add a new note&apos;, &#123;</div><div class=\"line\">        title: titleOptions,</div><div class=\"line\">        body: bodyOptions</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .command(&apos;list&apos;, &apos;List all notes&apos;)</div><div class=\"line\">    .command(&apos;read&apos;, &apos;Read a note&apos;, &#123;</div><div class=\"line\">        title: titleOptions</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .command(&apos;remove&apos;, &apos;Remove a note&apos;, &#123;</div><div class=\"line\">        title: titleOptions</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .help()</div><div class=\"line\">    .argv;</div></pre></td></tr></table></figure>\n<h4>Arrow function</h4>\n<ol>\n<li>如果只有一個變數，()可以省略，另外，<code>var square = x =&gt; x * x;</code> 等於</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var square = (x) =&gt; &#123;</div><div class=\"line\">    var result = x * x;</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 Arrow function 的時候，argument 和 <a href=\"http://this.name\" target=\"_blank\" rel=\"external\">this.name</a> 不能使用 (所以這邊的 sayHi 是讀不出來的)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var user = &#123;</div><div class=\"line\">    name: &apos;Vincent&apos;,</div><div class=\"line\">    sayHi: () =&gt; &#123;</div><div class=\"line\">        console.log(arguments);</div><div class=\"line\">        console.log(`Hi. I&apos;m $&#123;this.name&#125;`);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    sayHiAlt () &#123;</div><div class=\"line\">        console.log(arguments);</div><div class=\"line\">        console.log(`Hi. I&apos;m $&#123;this.name&#125;`);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">user.sayHiAlt(1, 2, 3);</div></pre></td></tr></table></figure>\n<h3>Weather App</h3>\n<h4>Async</h4>\n<ol>\n<li>下列的程式，會依照下列順序執行 <code>Starting app</code> =&gt; <code>Finishing up</code> =&gt; <code>Second setTimeout</code> =&gt; <code>Inside of callback</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(&apos;Starting app&apos;);</div><div class=\"line\"></div><div class=\"line\">setTimeout(() =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Inside of callback&apos;);</div><div class=\"line\">&#125;, 2000);</div><div class=\"line\"></div><div class=\"line\">setTimeout(() =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Second setTimeout&apos;);</div><div class=\"line\">&#125;, 0);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">console.log(&apos;Finishing up&apos;);</div></pre></td></tr></table></figure>\n<h4>callback Function &amp; APIs</h4>\n<ol>\n<li>Callback 範例，最後會輸出 <code>{ id: 31, name: 'Vikram' }</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getUser = (id, callback) =&gt; &#123;</div><div class=\"line\">    var user = &#123;</div><div class=\"line\">        id: id,</div><div class=\"line\">        name: &apos;Vikram&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">        callback(user);</div><div class=\"line\">    &#125;, 3000);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">getUser(31, (userObject) =&gt; &#123;</div><div class=\"line\">    console.log(userObject);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">第三方 request 插件</a></li>\n<li>啟動 npm 專案 <code>npm init</code></li>\n<li>安裝 request 套件 <code>npm install request@2.73.0 --save</code></li>\n<li>在根目錄新增 app.js 開始專案</li>\n<li>先 require request 套件，然後從 google api 擷取 json 資訊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">request (&#123;</div><div class=\"line\">    url: &apos;https://maps.googleapis.com/maps/api/geocode/json?address=1301%20lombard%20street%20philadelphia&apos;,</div><div class=\"line\">    json: true</div><div class=\"line\">&#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">    console.log(body);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday2.jpg\">\n<hr>\n<h3>Note App</h3>\n<h4>刪除 Note</h4>\n<ol>\n<li>修改 removeNote function，先取得所有 notes，然後把跟標題不一樣的 title 取出來，然後存起來，所以選定的 title 就被刪除了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var removeNote = (title) =&gt; &#123;</div><div class=\"line\">    var notes = fetchNotes();</div><div class=\"line\">    var filteredNotes = notes.filter((note) =&gt; note.title !== title);</div><div class=\"line\">    saveNotes(filteredNotes);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 removeNote function 傳回 true 或 false，如果長度不一樣為 true，代表資料刪除，反之亦然。<br>\n<code>return notes.length !== filteredNotes.length;</code></li>\n<li>在 app.js 用 noteRemoved 這個變數取得剛剛傳回來的值，如果 true，就顯示「 Note was removed」，false 的話，顯示「 Note not found 」</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">else if (command === &apos;remove&apos;) &#123;</div><div class=\"line\">    var noteRemoved = notes.removeNote(argv.title);</div><div class=\"line\">    var message = noteRemoved ? &apos;Note was removed&apos; : &apos;Note not found&apos;;</div><div class=\"line\">    console.log(message);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>閱讀 Note</h4>\n<ol>\n<li>修改 getNote function，先取得所有的 notes，然後把標題一樣的取出來，最後 return 陣列 0 (就是取出來的資料)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getNote = (title) =&gt; &#123;</div><div class=\"line\">    var notes = fetchNotes();</div><div class=\"line\">    var filteredNotes = notes.filter((note) =&gt; note.title === title);</div><div class=\"line\">    return filteredNotes[0];</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將傳來回的物件用 note 取得，如果存在，顯示資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var note = notes.getNote(argv.title);</div><div class=\"line\">    if (note) &#123;</div><div class=\"line\">        console.log(&apos;Note found&apos;);</div><div class=\"line\">        console.log(&apos;--&apos;);</div><div class=\"line\">        console.log(`Title: $&#123;note.title&#125;`);</div><div class=\"line\">        console.log(`Body: $&#123;note.body&#125;`);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(&apos;Note not found&apos;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>為了簡化重複的部分，將重複的部分移到 notes.js，並用 function 包裝，還要記得把 logNote export 出去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var logNote = (note) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;--&apos;);</div><div class=\"line\">    console.log(`Title: $&#123;note.title&#125;`);</div><div class=\"line\">    console.log(`Body: $&#123;note.body&#125;`);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    /* 其它 note function */</div><div class=\"line\">    logNote</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>剛剛重複的部分，用 function 取代 <code>notes.logNote(note);</code></li>\n</ol>\n<h4>Note.js 應用除錯</h4>\n<ol>\n<li>使用 <code>node debug</code> 除錯，<code>n</code> 跳到下一個錯誤，<code>c</code> 直接跳到結果或是 <code>debugger</code> 處，<code>repl</code> 可以輸入指令看相關變數</li>\n</ol>\n<h4>list Notes</h4>\n<ol>\n<li>直接 return 取得的所有資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getAll = () =&gt; &#123;</div><div class=\"line\">    return fetchNotes();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>用 forEach 列出取得的所有 notes</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">else if (command === &apos;list&apos;) &#123;</div><div class=\"line\">    var allNotes = notes.getAll();</div><div class=\"line\">    console.log(`Printing $&#123;allNotes.length&#125; note(s).`);</div><div class=\"line\">    allNotes.forEach((note) =&gt; notes.logNote(note));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>進階 Yargs</h4>\n<ol>\n<li>用 yargs .command 來編寫 help 命令的內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">const titleOptions = &#123;</div><div class=\"line\">    describe: &apos;Title of note&apos;,</div><div class=\"line\">        demand: true,</div><div class=\"line\">        alias: &apos;t&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const bodyOptions = &#123;</div><div class=\"line\">    describe: &apos;Body of note&apos;,</div><div class=\"line\">        demand: true,</div><div class=\"line\">        alias: &apos;b&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const argv = yargs</div><div class=\"line\">    .command(&apos;add&apos;, &apos;Add a new note&apos;, &#123;</div><div class=\"line\">        title: titleOptions,</div><div class=\"line\">        body: bodyOptions</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .command(&apos;list&apos;, &apos;List all notes&apos;)</div><div class=\"line\">    .command(&apos;read&apos;, &apos;Read a note&apos;, &#123;</div><div class=\"line\">        title: titleOptions</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .command(&apos;remove&apos;, &apos;Remove a note&apos;, &#123;</div><div class=\"line\">        title: titleOptions</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .help()</div><div class=\"line\">    .argv;</div></pre></td></tr></table></figure>\n<h4>Arrow function</h4>\n<ol>\n<li>如果只有一個變數，()可以省略，另外，<code>var square = x =&gt; x * x;</code> 等於</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var square = (x) =&gt; &#123;</div><div class=\"line\">    var result = x * x;</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 Arrow function 的時候，argument 和 <a href=\"http://this.name\" target=\"_blank\" rel=\"external\">this.name</a> 不能使用 (所以這邊的 sayHi 是讀不出來的)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var user = &#123;</div><div class=\"line\">    name: &apos;Vincent&apos;,</div><div class=\"line\">    sayHi: () =&gt; &#123;</div><div class=\"line\">        console.log(arguments);</div><div class=\"line\">        console.log(`Hi. I&apos;m $&#123;this.name&#125;`);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    sayHiAlt () &#123;</div><div class=\"line\">        console.log(arguments);</div><div class=\"line\">        console.log(`Hi. I&apos;m $&#123;this.name&#125;`);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">user.sayHiAlt(1, 2, 3);</div></pre></td></tr></table></figure>\n<h3>Weather App</h3>\n<h4>Async</h4>\n<ol>\n<li>下列的程式，會依照下列順序執行 <code>Starting app</code> =&gt; <code>Finishing up</code> =&gt; <code>Second setTimeout</code> =&gt; <code>Inside of callback</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(&apos;Starting app&apos;);</div><div class=\"line\"></div><div class=\"line\">setTimeout(() =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Inside of callback&apos;);</div><div class=\"line\">&#125;, 2000);</div><div class=\"line\"></div><div class=\"line\">setTimeout(() =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Second setTimeout&apos;);</div><div class=\"line\">&#125;, 0);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">console.log(&apos;Finishing up&apos;);</div></pre></td></tr></table></figure>\n<h4>callback Function &amp; APIs</h4>\n<ol>\n<li>Callback 範例，最後會輸出 <code>{ id: 31, name: 'Vikram' }</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getUser = (id, callback) =&gt; &#123;</div><div class=\"line\">    var user = &#123;</div><div class=\"line\">        id: id,</div><div class=\"line\">        name: &apos;Vikram&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">        callback(user);</div><div class=\"line\">    &#125;, 3000);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">getUser(31, (userObject) =&gt; &#123;</div><div class=\"line\">    console.log(userObject);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">第三方 request 插件</a></li>\n<li>啟動 npm 專案 <code>npm init</code></li>\n<li>安裝 request 套件 <code>npm install request@2.73.0 --save</code></li>\n<li>在根目錄新增 app.js 開始專案</li>\n<li>先 require request 套件，然後從 google api 擷取 json 資訊</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">request (&#123;</div><div class=\"line\">    url: &apos;https://maps.googleapis.com/maps/api/geocode/json?address=1301%20lombard%20street%20philadelphia&apos;,</div><div class=\"line\">    json: true</div><div class=\"line\">&#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">    console.log(body);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Nodejs 快速學習自我挑戰 Day3","thumbnail":["/images/learning/nodejs/nodejsday3.jpg"],"date":"2017-06-11T21:25:35.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday3.jpg\">\n\n***\n### Weather App\n#### 美化 Printing Objects\n1. 將 Printing Object 用 stringify 處理\n`console.log(JSON.stringify(body, undefined, 2));`\n#### Http Request\n1. 觀看 response 資訊，成功的話 Http status 會是 200\n`console.log(JSON.stringify(response, undefined, 2));`\n2. 觀看是否有錯誤\n`console.log(JSON.stringify(error, undefined, 2));`\n#### User Input 編碼\n1. 安裝 Yargs `npm install yargs@4.8.1 --save`\n2. 使用 yargs 新增 command 以及其他設定\n```\nconst argv = yargs\n    .options({\n        a: {\n            demand: true,\n            alias: 'address',\n            describe: 'Address to fetch weather for',\n            string: true\n        }\n    })\n    .help()\n    .alias('help', 'h')\n    .argv;\n```\n3. 將輸入編碼\n`var encodedAddress = encodeURIComponent(argv.address);`\n4. 將編碼好的地址傳進 request\n```\nurl: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`\n```\n#### Callback Errors 處理\n1. 處理錯誤\n```\nrequest ({\n    url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n    json: true\n}, (error, response, body) => {\n    if (error) {\n        console.log('Unable to connect to Google servers');\n    } else if (body.status === 'ZERO_RESULTS') {\n        console.log('Unable to find that address');\n    } else if (body.status === 'OK') {\n        console.log(`Address: ${body.results[0].formatted_address}`);\n        console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n        console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n    }\n});\n```\n#### 將 Callback 放到其他地方\n1. 新增 geocode/geocode.js\n```\nconst request = require('request');\n\nvar geocodeAddress = (address) => {\n    var encodedAddress = encodeURIComponent(address);\n\n    request ({\n        url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n        json: true\n    }, (error, response, body) => {\n        if (error) {\n            console.log('Unable to connect to Google servers');\n        } else if (body.status === 'ZERO_RESULTS') {\n            console.log('Unable to find that address');\n        } else if (body.status === 'OK') {\n            console.log(`Address: ${body.results[0].formatted_address}`);\n            console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n            console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n        }\n    });\n};\n\nmodule.exports.geocodeAddress = geocodeAddress;\n```\n2. 在 app.js 引入 geocode\n`const geocode = require('./geocode/geocode');`\n3. 在 app.js 使用 geocode\n`geocode.geocodeAddress(argv.address);`\n4. 使用 callback 來得到結果\n```\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n    if (errorMessage) {\n        console.log(errorMessage);\n    } else {\n        console.log(JSON.stringify(results, undefined, 2))\n    }\n});\n```\n5. 在 geocode 使用 callback\n```\nvar geocodeAddress = (address, callback) => {\n    var encodedAddress = encodeURIComponent(address);\n\n    request ({\n        url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n        json: true\n    }, (error, response, body) => {\n        if (error) {\n            callback('Unable to connect to Google servers');\n        } else if (body.status === 'ZERO_RESULTS') {\n            callback('Unable to find that address');\n        } else if (body.status === 'OK') {\n            callback(undefined, {\n                address: body.results[0].formatted_address,\n                Latitude: body.results[0].geometry.location.lat,\n                Longitude: body.results[0].geometry.location.lng,\n            });\n        }\n    });\n};\n```\n#### 跟天氣搜索的 API 串接\n1. [forecast.io 開發者區](https://darksky.net/dev/)\n2. Forecast Request api 格式\n`https://api.darksky.net/forecast/[key]/[latitude],[longitude]`\n3. request weather API\n```\nconst request = require('request');\n\nrequest({\n    url: 'https://api.darksky.net/forecast/[key]/[latitude],[longitude]',\n    json: true\n}, (error, response, body) => {\n    if (!error) {\n        console.log(body.currently.temperature);\n    } else {\n        console.log('Unable to fetch weather.');\n    }\n});\n```\n#### 把 callback 串連在一起\n1. 新增 weather/weather.js\n```\nconst request = require('request');\n\nvar getWeather = (lat, lng, callback) => {\n    request({\n        url: `https://api.darksky.net/forecast/5c410165ac4d6fd40bb36232d16d7c8e/${lat}, ${lng}`,\n        json: true\n    }, (error, response, body) => {\n        if (!error) {\n            callback(undefined, {\n                temperature: body.currently.temperature,\n                apparentTemperature: body.currently.apparentTemperature\n            });\n        } else {\n            callback('Unable to fetch weather.');\n        }\n    });\n};\n\nmodule.exports.getWeather = getWeather;\n```\n2. 將兩個 function 合在一起\n```\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n    if (errorMessage) {\n        console.log(errorMessage);\n    } else {\n        console.log(results.address);\n        weather.getWeather(results.latitude, results.longitude, (errorMessage, weatherResults) => {\n            if (errorMessage) {\n                console.log(errorMessage);\n            } else {\n                console.log(`It's currently ${weatherResults.temperature}. it feels like ${weatherResults.apparentTemperature}.`);\n            }\n        });\n    }\n});\n```\n#### ES6 Promises\n1. Promise 提供兩種 function 可以使用：resolve 和 reject\n```\nvar somePromise = new Promise((resolve, reject) => {\n    resolve('Hey. It worked!');\n});\n```\n2. .then 對 成功或錯誤的 cases 提供 callback function\n```\nsomePromise.then((message) => {\n    console.log('Success: ', message);\n}, (errorMessage) => {\n    console.log('Error: ', errorMessage);\n});\n```\n3. 在 Promise 的處理，不可以同時出現 reject 和 resolve，若兩項同時出現，會執行第一項\n`reject('Unable to fulfill promise');`","source":"_posts/Nodejs-快速學習自我挑戰-Day3.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day3\nthumbnail:\n  - /images/learning/nodejs/nodejsday3.jpg\ndate: 2017-06-12 05:25:35\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday3.jpg\">\n\n***\n### Weather App\n#### 美化 Printing Objects\n1. 將 Printing Object 用 stringify 處理\n`console.log(JSON.stringify(body, undefined, 2));`\n#### Http Request\n1. 觀看 response 資訊，成功的話 Http status 會是 200\n`console.log(JSON.stringify(response, undefined, 2));`\n2. 觀看是否有錯誤\n`console.log(JSON.stringify(error, undefined, 2));`\n#### User Input 編碼\n1. 安裝 Yargs `npm install yargs@4.8.1 --save`\n2. 使用 yargs 新增 command 以及其他設定\n```\nconst argv = yargs\n    .options({\n        a: {\n            demand: true,\n            alias: 'address',\n            describe: 'Address to fetch weather for',\n            string: true\n        }\n    })\n    .help()\n    .alias('help', 'h')\n    .argv;\n```\n3. 將輸入編碼\n`var encodedAddress = encodeURIComponent(argv.address);`\n4. 將編碼好的地址傳進 request\n```\nurl: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`\n```\n#### Callback Errors 處理\n1. 處理錯誤\n```\nrequest ({\n    url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n    json: true\n}, (error, response, body) => {\n    if (error) {\n        console.log('Unable to connect to Google servers');\n    } else if (body.status === 'ZERO_RESULTS') {\n        console.log('Unable to find that address');\n    } else if (body.status === 'OK') {\n        console.log(`Address: ${body.results[0].formatted_address}`);\n        console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n        console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n    }\n});\n```\n#### 將 Callback 放到其他地方\n1. 新增 geocode/geocode.js\n```\nconst request = require('request');\n\nvar geocodeAddress = (address) => {\n    var encodedAddress = encodeURIComponent(address);\n\n    request ({\n        url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n        json: true\n    }, (error, response, body) => {\n        if (error) {\n            console.log('Unable to connect to Google servers');\n        } else if (body.status === 'ZERO_RESULTS') {\n            console.log('Unable to find that address');\n        } else if (body.status === 'OK') {\n            console.log(`Address: ${body.results[0].formatted_address}`);\n            console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n            console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n        }\n    });\n};\n\nmodule.exports.geocodeAddress = geocodeAddress;\n```\n2. 在 app.js 引入 geocode\n`const geocode = require('./geocode/geocode');`\n3. 在 app.js 使用 geocode\n`geocode.geocodeAddress(argv.address);`\n4. 使用 callback 來得到結果\n```\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n    if (errorMessage) {\n        console.log(errorMessage);\n    } else {\n        console.log(JSON.stringify(results, undefined, 2))\n    }\n});\n```\n5. 在 geocode 使用 callback\n```\nvar geocodeAddress = (address, callback) => {\n    var encodedAddress = encodeURIComponent(address);\n\n    request ({\n        url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n        json: true\n    }, (error, response, body) => {\n        if (error) {\n            callback('Unable to connect to Google servers');\n        } else if (body.status === 'ZERO_RESULTS') {\n            callback('Unable to find that address');\n        } else if (body.status === 'OK') {\n            callback(undefined, {\n                address: body.results[0].formatted_address,\n                Latitude: body.results[0].geometry.location.lat,\n                Longitude: body.results[0].geometry.location.lng,\n            });\n        }\n    });\n};\n```\n#### 跟天氣搜索的 API 串接\n1. [forecast.io 開發者區](https://darksky.net/dev/)\n2. Forecast Request api 格式\n`https://api.darksky.net/forecast/[key]/[latitude],[longitude]`\n3. request weather API\n```\nconst request = require('request');\n\nrequest({\n    url: 'https://api.darksky.net/forecast/[key]/[latitude],[longitude]',\n    json: true\n}, (error, response, body) => {\n    if (!error) {\n        console.log(body.currently.temperature);\n    } else {\n        console.log('Unable to fetch weather.');\n    }\n});\n```\n#### 把 callback 串連在一起\n1. 新增 weather/weather.js\n```\nconst request = require('request');\n\nvar getWeather = (lat, lng, callback) => {\n    request({\n        url: `https://api.darksky.net/forecast/5c410165ac4d6fd40bb36232d16d7c8e/${lat}, ${lng}`,\n        json: true\n    }, (error, response, body) => {\n        if (!error) {\n            callback(undefined, {\n                temperature: body.currently.temperature,\n                apparentTemperature: body.currently.apparentTemperature\n            });\n        } else {\n            callback('Unable to fetch weather.');\n        }\n    });\n};\n\nmodule.exports.getWeather = getWeather;\n```\n2. 將兩個 function 合在一起\n```\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n    if (errorMessage) {\n        console.log(errorMessage);\n    } else {\n        console.log(results.address);\n        weather.getWeather(results.latitude, results.longitude, (errorMessage, weatherResults) => {\n            if (errorMessage) {\n                console.log(errorMessage);\n            } else {\n                console.log(`It's currently ${weatherResults.temperature}. it feels like ${weatherResults.apparentTemperature}.`);\n            }\n        });\n    }\n});\n```\n#### ES6 Promises\n1. Promise 提供兩種 function 可以使用：resolve 和 reject\n```\nvar somePromise = new Promise((resolve, reject) => {\n    resolve('Hey. It worked!');\n});\n```\n2. .then 對 成功或錯誤的 cases 提供 callback function\n```\nsomePromise.then((message) => {\n    console.log('Success: ', message);\n}, (errorMessage) => {\n    console.log('Error: ', errorMessage);\n});\n```\n3. 在 Promise 的處理，不可以同時出現 reject 和 resolve，若兩項同時出現，會執行第一項\n`reject('Unable to fulfill promise');`","slug":"Nodejs-快速學習自我挑戰-Day3","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxk003u7ifa61sippnm","content":"<img src=\"/images/learning/nodejs/nodejsday3.jpg\">\n<hr>\n<h3>Weather App</h3>\n<h4>美化 Printing Objects</h4>\n<ol>\n<li>將 Printing Object 用 stringify 處理<br>\n<code>console.log(JSON.stringify(body, undefined, 2));</code></li>\n</ol>\n<h4>Http Request</h4>\n<ol>\n<li>觀看 response 資訊，成功的話 Http status 會是 200<br>\n<code>console.log(JSON.stringify(response, undefined, 2));</code></li>\n<li>觀看是否有錯誤<br>\n<code>console.log(JSON.stringify(error, undefined, 2));</code></li>\n</ol>\n<h4>User Input 編碼</h4>\n<ol>\n<li>安裝 Yargs <code>npm install yargs@4.8.1 --save</code></li>\n<li>使用 yargs 新增 command 以及其他設定</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const argv = yargs</div><div class=\"line\">    .options(&#123;</div><div class=\"line\">        a: &#123;</div><div class=\"line\">            demand: true,</div><div class=\"line\">            alias: &apos;address&apos;,</div><div class=\"line\">            describe: &apos;Address to fetch weather for&apos;,</div><div class=\"line\">            string: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .help()</div><div class=\"line\">    .alias(&apos;help&apos;, &apos;h&apos;)</div><div class=\"line\">    .argv;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將輸入編碼<br>\n<code>var encodedAddress = encodeURIComponent(argv.address);</code></li>\n<li>將編碼好的地址傳進 request</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`</div></pre></td></tr></table></figure>\n<h4>Callback Errors 處理</h4>\n<ol>\n<li>處理錯誤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">request (&#123;</div><div class=\"line\">    url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">    json: true</div><div class=\"line\">&#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">    if (error) &#123;</div><div class=\"line\">        console.log(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">    &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">        console.log(&apos;Unable to find that address&apos;);</div><div class=\"line\">    &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">        console.log(`Address: $&#123;body.results[0].formatted_address&#125;`);</div><div class=\"line\">        console.log(`Latitude: $&#123;body.results[0].geometry.location.lat&#125;`);</div><div class=\"line\">        console.log(`Longitude: $&#123;body.results[0].geometry.location.lng&#125;`);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>將 Callback 放到其他地方</h4>\n<ol>\n<li>新增 geocode/geocode.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">var geocodeAddress = (address) =&gt; &#123;</div><div class=\"line\">    var encodedAddress = encodeURIComponent(address);</div><div class=\"line\"></div><div class=\"line\">    request (&#123;</div><div class=\"line\">        url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">        json: true</div><div class=\"line\">    &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">        if (error) &#123;</div><div class=\"line\">            console.log(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">            console.log(&apos;Unable to find that address&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">            console.log(`Address: $&#123;body.results[0].formatted_address&#125;`);</div><div class=\"line\">            console.log(`Latitude: $&#123;body.results[0].geometry.location.lat&#125;`);</div><div class=\"line\">            console.log(`Longitude: $&#123;body.results[0].geometry.location.lng&#125;`);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports.geocodeAddress = geocodeAddress;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 引入 geocode<br>\n<code>const geocode = require('./geocode/geocode');</code></li>\n<li>在 app.js 使用 geocode<br>\n<code>geocode.geocodeAddress(argv.address);</code></li>\n<li>使用 callback 來得到結果</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">geocode.geocodeAddress(argv.address, (errorMessage, results) =&gt; &#123;</div><div class=\"line\">    if (errorMessage) &#123;</div><div class=\"line\">        console.log(errorMessage);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(JSON.stringify(results, undefined, 2))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 geocode 使用 callback</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var geocodeAddress = (address, callback) =&gt; &#123;</div><div class=\"line\">    var encodedAddress = encodeURIComponent(address);</div><div class=\"line\"></div><div class=\"line\">    request (&#123;</div><div class=\"line\">        url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">        json: true</div><div class=\"line\">    &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">        if (error) &#123;</div><div class=\"line\">            callback(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">            callback(&apos;Unable to find that address&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">            callback(undefined, &#123;</div><div class=\"line\">                address: body.results[0].formatted_address,</div><div class=\"line\">                Latitude: body.results[0].geometry.location.lat,</div><div class=\"line\">                Longitude: body.results[0].geometry.location.lng,</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>跟天氣搜索的 API 串接</h4>\n<ol>\n<li><a href=\"https://darksky.net/dev/\" target=\"_blank\" rel=\"external\">forecast.io 開發者區</a></li>\n<li>Forecast Request api 格式<br>\n<code>https://api.darksky.net/forecast/[key]/[latitude],[longitude]</code></li>\n<li>request weather API</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">request(&#123;</div><div class=\"line\">    url: &apos;https://api.darksky.net/forecast/[key]/[latitude],[longitude]&apos;,</div><div class=\"line\">    json: true</div><div class=\"line\">&#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">    if (!error) &#123;</div><div class=\"line\">        console.log(body.currently.temperature);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(&apos;Unable to fetch weather.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>把 callback 串連在一起</h4>\n<ol>\n<li>新增 weather/weather.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">var getWeather = (lat, lng, callback) =&gt; &#123;</div><div class=\"line\">    request(&#123;</div><div class=\"line\">        url: `https://api.darksky.net/forecast/5c410165ac4d6fd40bb36232d16d7c8e/$&#123;lat&#125;, $&#123;lng&#125;`,</div><div class=\"line\">        json: true</div><div class=\"line\">    &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">        if (!error) &#123;</div><div class=\"line\">            callback(undefined, &#123;</div><div class=\"line\">                temperature: body.currently.temperature,</div><div class=\"line\">                apparentTemperature: body.currently.apparentTemperature</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            callback(&apos;Unable to fetch weather.&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports.getWeather = getWeather;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將兩個 function 合在一起</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">geocode.geocodeAddress(argv.address, (errorMessage, results) =&gt; &#123;</div><div class=\"line\">    if (errorMessage) &#123;</div><div class=\"line\">        console.log(errorMessage);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(results.address);</div><div class=\"line\">        weather.getWeather(results.latitude, results.longitude, (errorMessage, weatherResults) =&gt; &#123;</div><div class=\"line\">            if (errorMessage) &#123;</div><div class=\"line\">                console.log(errorMessage);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                console.log(`It&apos;s currently $&#123;weatherResults.temperature&#125;. it feels like $&#123;weatherResults.apparentTemperature&#125;.`);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>ES6 Promises</h4>\n<ol>\n<li>Promise 提供兩種 function 可以使用：resolve 和 reject</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var somePromise = new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">    resolve(&apos;Hey. It worked!&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>.then 對 成功或錯誤的 cases 提供 callback function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise.then((message) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Success: &apos;, message);</div><div class=\"line\">&#125;, (errorMessage) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Error: &apos;, errorMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 Promise 的處理，不可以同時出現 reject 和 resolve，若兩項同時出現，會執行第一項<br>\n<code>reject('Unable to fulfill promise');</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday3.jpg\">\n<hr>\n<h3>Weather App</h3>\n<h4>美化 Printing Objects</h4>\n<ol>\n<li>將 Printing Object 用 stringify 處理<br>\n<code>console.log(JSON.stringify(body, undefined, 2));</code></li>\n</ol>\n<h4>Http Request</h4>\n<ol>\n<li>觀看 response 資訊，成功的話 Http status 會是 200<br>\n<code>console.log(JSON.stringify(response, undefined, 2));</code></li>\n<li>觀看是否有錯誤<br>\n<code>console.log(JSON.stringify(error, undefined, 2));</code></li>\n</ol>\n<h4>User Input 編碼</h4>\n<ol>\n<li>安裝 Yargs <code>npm install yargs@4.8.1 --save</code></li>\n<li>使用 yargs 新增 command 以及其他設定</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const argv = yargs</div><div class=\"line\">    .options(&#123;</div><div class=\"line\">        a: &#123;</div><div class=\"line\">            demand: true,</div><div class=\"line\">            alias: &apos;address&apos;,</div><div class=\"line\">            describe: &apos;Address to fetch weather for&apos;,</div><div class=\"line\">            string: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .help()</div><div class=\"line\">    .alias(&apos;help&apos;, &apos;h&apos;)</div><div class=\"line\">    .argv;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將輸入編碼<br>\n<code>var encodedAddress = encodeURIComponent(argv.address);</code></li>\n<li>將編碼好的地址傳進 request</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`</div></pre></td></tr></table></figure>\n<h4>Callback Errors 處理</h4>\n<ol>\n<li>處理錯誤</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">request (&#123;</div><div class=\"line\">    url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">    json: true</div><div class=\"line\">&#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">    if (error) &#123;</div><div class=\"line\">        console.log(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">    &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">        console.log(&apos;Unable to find that address&apos;);</div><div class=\"line\">    &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">        console.log(`Address: $&#123;body.results[0].formatted_address&#125;`);</div><div class=\"line\">        console.log(`Latitude: $&#123;body.results[0].geometry.location.lat&#125;`);</div><div class=\"line\">        console.log(`Longitude: $&#123;body.results[0].geometry.location.lng&#125;`);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>將 Callback 放到其他地方</h4>\n<ol>\n<li>新增 geocode/geocode.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">var geocodeAddress = (address) =&gt; &#123;</div><div class=\"line\">    var encodedAddress = encodeURIComponent(address);</div><div class=\"line\"></div><div class=\"line\">    request (&#123;</div><div class=\"line\">        url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">        json: true</div><div class=\"line\">    &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">        if (error) &#123;</div><div class=\"line\">            console.log(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">            console.log(&apos;Unable to find that address&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">            console.log(`Address: $&#123;body.results[0].formatted_address&#125;`);</div><div class=\"line\">            console.log(`Latitude: $&#123;body.results[0].geometry.location.lat&#125;`);</div><div class=\"line\">            console.log(`Longitude: $&#123;body.results[0].geometry.location.lng&#125;`);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports.geocodeAddress = geocodeAddress;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 app.js 引入 geocode<br>\n<code>const geocode = require('./geocode/geocode');</code></li>\n<li>在 app.js 使用 geocode<br>\n<code>geocode.geocodeAddress(argv.address);</code></li>\n<li>使用 callback 來得到結果</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">geocode.geocodeAddress(argv.address, (errorMessage, results) =&gt; &#123;</div><div class=\"line\">    if (errorMessage) &#123;</div><div class=\"line\">        console.log(errorMessage);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(JSON.stringify(results, undefined, 2))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 geocode 使用 callback</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var geocodeAddress = (address, callback) =&gt; &#123;</div><div class=\"line\">    var encodedAddress = encodeURIComponent(address);</div><div class=\"line\"></div><div class=\"line\">    request (&#123;</div><div class=\"line\">        url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">        json: true</div><div class=\"line\">    &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">        if (error) &#123;</div><div class=\"line\">            callback(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">            callback(&apos;Unable to find that address&apos;);</div><div class=\"line\">        &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">            callback(undefined, &#123;</div><div class=\"line\">                address: body.results[0].formatted_address,</div><div class=\"line\">                Latitude: body.results[0].geometry.location.lat,</div><div class=\"line\">                Longitude: body.results[0].geometry.location.lng,</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>跟天氣搜索的 API 串接</h4>\n<ol>\n<li><a href=\"https://darksky.net/dev/\" target=\"_blank\" rel=\"external\">forecast.io 開發者區</a></li>\n<li>Forecast Request api 格式<br>\n<code>https://api.darksky.net/forecast/[key]/[latitude],[longitude]</code></li>\n<li>request weather API</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">request(&#123;</div><div class=\"line\">    url: &apos;https://api.darksky.net/forecast/[key]/[latitude],[longitude]&apos;,</div><div class=\"line\">    json: true</div><div class=\"line\">&#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">    if (!error) &#123;</div><div class=\"line\">        console.log(body.currently.temperature);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(&apos;Unable to fetch weather.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>把 callback 串連在一起</h4>\n<ol>\n<li>新增 weather/weather.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">var getWeather = (lat, lng, callback) =&gt; &#123;</div><div class=\"line\">    request(&#123;</div><div class=\"line\">        url: `https://api.darksky.net/forecast/5c410165ac4d6fd40bb36232d16d7c8e/$&#123;lat&#125;, $&#123;lng&#125;`,</div><div class=\"line\">        json: true</div><div class=\"line\">    &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">        if (!error) &#123;</div><div class=\"line\">            callback(undefined, &#123;</div><div class=\"line\">                temperature: body.currently.temperature,</div><div class=\"line\">                apparentTemperature: body.currently.apparentTemperature</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            callback(&apos;Unable to fetch weather.&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports.getWeather = getWeather;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將兩個 function 合在一起</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">geocode.geocodeAddress(argv.address, (errorMessage, results) =&gt; &#123;</div><div class=\"line\">    if (errorMessage) &#123;</div><div class=\"line\">        console.log(errorMessage);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(results.address);</div><div class=\"line\">        weather.getWeather(results.latitude, results.longitude, (errorMessage, weatherResults) =&gt; &#123;</div><div class=\"line\">            if (errorMessage) &#123;</div><div class=\"line\">                console.log(errorMessage);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                console.log(`It&apos;s currently $&#123;weatherResults.temperature&#125;. it feels like $&#123;weatherResults.apparentTemperature&#125;.`);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>ES6 Promises</h4>\n<ol>\n<li>Promise 提供兩種 function 可以使用：resolve 和 reject</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var somePromise = new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">    resolve(&apos;Hey. It worked!&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>.then 對 成功或錯誤的 cases 提供 callback function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise.then((message) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Success: &apos;, message);</div><div class=\"line\">&#125;, (errorMessage) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Error: &apos;, errorMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 Promise 的處理，不可以同時出現 reject 和 resolve，若兩項同時出現，會執行第一項<br>\n<code>reject('Unable to fulfill promise');</code></li>\n</ol>\n"},{"title":"Nodejs 快速學習自我挑戰 Day4","thumbnail":["/images/learning/nodejs/nodejsday4.jpg"],"date":"2017-06-13T12:46:04.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday4.jpg\">\n\n***\n### Weather App\n#### 進階 Promise\n1. 新增 asyncAdd function，用 new Promise 新增 promise，然後再用 .then 輸出結果，最後用 .catch 把錯誤一次輸出(避免第二次 errorMessage 跑的是 success function)\n```\nvar asyncAdd = (a, b) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (typeof a === 'number' && typeof b === 'number') {\n                resolve(a + b);\n            } else {\n                reject('Arguments must be numbers');\n            }\n        }, 1500);\n    });\n};\n\nasyncAdd(5, '7').then((res) => {\n    console.log('Results: ', res);\n    return asyncAdd(res, 33);\n}).then((res) => {\n    console.log('Should be 45', res);\n}).catch((errorMessage) => {\n    console.log(errorMessage);\n});\n```\n2. 使用 Promise 取代 callback 整合 geocode\n```\nconst request = require('request');\n\nvar geocodeAddress = (address) => {\n    return new Promise((resolve, reject) => {\n        var encodedAddress = encodeURIComponent(address);\n\n        request ({\n            url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n            json: true\n        }, (error, response, body) => {\n            if (error) {\n                reject('Unable to connect to Google servers');\n            } else if (body.status === 'ZERO_RESULTS') {\n                reject('Unable to find that address');\n            } else if (body.status === 'OK') {\n                resolve({\n                    address: body.results[0].formatted_address,\n                    latitude: body.results[0].geometry.location.lat,\n                    longitude: body.results[0].geometry.location.lng,\n                });\n            }\n        });\n    });\n};\n\ngeocodeAddress('19146').then((location) => {\n    console.log(JSON.stringify(location, undefined, 2));\n}, (errorMessage) => {\n    console.log(errorMessage);\n});\n```\n#### 讓 Weather App 使用 Promise\n1. [axios 套件](https://www.npmjs.com/package/axios)\n2. 安裝 axios `npm install axios@0.13.1 --save`\n3. 使用 axios，先使用 .then 取得地址，然後再用一次 .then 取得溫度，最後用 .catch 處理錯誤的出現\n```\nvar encodedAddress = encodeURIComponent(argv.address);\nvar geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;\n\naxios.get(geocodeUrl).then((response) => {\n    if (response.data.status === 'ZERO_RESULTS') {\n        throw new Error('Unable to find that address.');\n    }\n    var lat = response.data.results[0].geometry.location.lat;\n    var lng = response.data.results[0].geometry.location.lng;\n    var weatherUrl = `https://api.darksky.net/forecast/key/${lat}, ${lng}`;\n    console.log(response.data.results[0].formatted_address);\n    return axios.get(weatherUrl);\n}).then((response) => {\n    var temperature = response.data.currently.temperature;\n    var apparentTemperature = response.data.currently.apparentTemperature;\n    console.log(`It's currently ${temperature}, It feels like ${apparentTemperature}.`);\n}).catch((e) => {\n    if (e.code === 'ENOTFOUND') {\n        console.log('Unable to connect to API servers.');\n    } else {\n        console.log(e.message);\n    }\n});\n```\n#### Weather App 額外的功能 (思路)\n1. 除了 Current Temperature 之外，可以從 Weather API 讀取更多資訊\n2. 如果讀不到位置，可以使用預設的地點\n3. 搜尋完的結果用 filesystem 寫入檔案\n### 網頁伺服器及應用程式部署\n#### Hello Express\n1. [Express 官方網站](http://expressjs.com/)\n2. 安裝 express `npm install express@4.14.0 --save`\n3. 在根目錄新增 server.js\n```\nconst express = require('express');\n\nvar app = express();\n\napp.get('/', (req, res) => {\n    // res.send('<h1>Hello Express!</h1>');\n    res.send({\n        name: 'Andrew',\n        likes: [\n            'Biking',\n            'Cities'\n        ]\n    });\n});\n\napp.get('/about', (req, res) => {\n    res.send('About Page');\n});\n\n// /bad - send back json with errorMessage\napp.get('/bad', (req, res) => {\n    res.send({\n        errorMessage: 'Unable to handle request'\n    });\n});\n\napp.listen(3000);\n```\n#### 創建網頁伺服器\n1. 新增 public/help.html\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Help Page</title>\n</head>\n<body>\n    <h1>Help Page</h1>\n    <p>Some text here</p>\n</body>\n</html>\n```\n2. 使用 app.use 指定 public 目錄\n`app.use(express.static(__dirname + '/public'));`\n3. 當伺服器啟動，傳送訊息\n```\napp.listen(3000, () => {\n    console.log('Server is up on port 3000');\n});\n```\n#### 呈現 template 和 data\n1. [handlebars.js](http://handlebarsjs.com/)\n2. 安裝 handlebars.js `npm install hbs@4.0.0 --save`\n3. 設定 view engine `app.set('view engine', 'hbs');`\n4. 新增 views/about.hbs\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Help Page</title>\n</head>\n<body>\n    <h1>About Page</h1>\n    <p>Some text here</p>\n\n    <footer>\n        <p>Copyright 2017</p>\n    </footer>\n</body>\n</html>\n```\n5. 使用 render 取得頁面\n```\napp.get('/about', (req, res) => {\n    res.render('about.hbs');\n});\n```\n6. 動態存取資料，傳送值到 view\n```\napp.get('/about', (req, res) => {\n    res.render('about.hbs', {\n        pageTitle: 'About Page',\n        currentYear: new Date().getFullYear()\n    });\n});\n```\n7. 在 view 取得值\n```\n<h1>{{pageTitle}}</h1>\n<p>Some text here</p>\n\n<footer>\n    <p>Copyright {{currentYear}}</p>\n</footer>\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day4.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day4\nthumbnail:\n  - /images/learning/nodejs/nodejsday4.jpg\ndate: 2017-06-13 20:46:04\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday4.jpg\">\n\n***\n### Weather App\n#### 進階 Promise\n1. 新增 asyncAdd function，用 new Promise 新增 promise，然後再用 .then 輸出結果，最後用 .catch 把錯誤一次輸出(避免第二次 errorMessage 跑的是 success function)\n```\nvar asyncAdd = (a, b) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (typeof a === 'number' && typeof b === 'number') {\n                resolve(a + b);\n            } else {\n                reject('Arguments must be numbers');\n            }\n        }, 1500);\n    });\n};\n\nasyncAdd(5, '7').then((res) => {\n    console.log('Results: ', res);\n    return asyncAdd(res, 33);\n}).then((res) => {\n    console.log('Should be 45', res);\n}).catch((errorMessage) => {\n    console.log(errorMessage);\n});\n```\n2. 使用 Promise 取代 callback 整合 geocode\n```\nconst request = require('request');\n\nvar geocodeAddress = (address) => {\n    return new Promise((resolve, reject) => {\n        var encodedAddress = encodeURIComponent(address);\n\n        request ({\n            url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n            json: true\n        }, (error, response, body) => {\n            if (error) {\n                reject('Unable to connect to Google servers');\n            } else if (body.status === 'ZERO_RESULTS') {\n                reject('Unable to find that address');\n            } else if (body.status === 'OK') {\n                resolve({\n                    address: body.results[0].formatted_address,\n                    latitude: body.results[0].geometry.location.lat,\n                    longitude: body.results[0].geometry.location.lng,\n                });\n            }\n        });\n    });\n};\n\ngeocodeAddress('19146').then((location) => {\n    console.log(JSON.stringify(location, undefined, 2));\n}, (errorMessage) => {\n    console.log(errorMessage);\n});\n```\n#### 讓 Weather App 使用 Promise\n1. [axios 套件](https://www.npmjs.com/package/axios)\n2. 安裝 axios `npm install axios@0.13.1 --save`\n3. 使用 axios，先使用 .then 取得地址，然後再用一次 .then 取得溫度，最後用 .catch 處理錯誤的出現\n```\nvar encodedAddress = encodeURIComponent(argv.address);\nvar geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;\n\naxios.get(geocodeUrl).then((response) => {\n    if (response.data.status === 'ZERO_RESULTS') {\n        throw new Error('Unable to find that address.');\n    }\n    var lat = response.data.results[0].geometry.location.lat;\n    var lng = response.data.results[0].geometry.location.lng;\n    var weatherUrl = `https://api.darksky.net/forecast/key/${lat}, ${lng}`;\n    console.log(response.data.results[0].formatted_address);\n    return axios.get(weatherUrl);\n}).then((response) => {\n    var temperature = response.data.currently.temperature;\n    var apparentTemperature = response.data.currently.apparentTemperature;\n    console.log(`It's currently ${temperature}, It feels like ${apparentTemperature}.`);\n}).catch((e) => {\n    if (e.code === 'ENOTFOUND') {\n        console.log('Unable to connect to API servers.');\n    } else {\n        console.log(e.message);\n    }\n});\n```\n#### Weather App 額外的功能 (思路)\n1. 除了 Current Temperature 之外，可以從 Weather API 讀取更多資訊\n2. 如果讀不到位置，可以使用預設的地點\n3. 搜尋完的結果用 filesystem 寫入檔案\n### 網頁伺服器及應用程式部署\n#### Hello Express\n1. [Express 官方網站](http://expressjs.com/)\n2. 安裝 express `npm install express@4.14.0 --save`\n3. 在根目錄新增 server.js\n```\nconst express = require('express');\n\nvar app = express();\n\napp.get('/', (req, res) => {\n    // res.send('<h1>Hello Express!</h1>');\n    res.send({\n        name: 'Andrew',\n        likes: [\n            'Biking',\n            'Cities'\n        ]\n    });\n});\n\napp.get('/about', (req, res) => {\n    res.send('About Page');\n});\n\n// /bad - send back json with errorMessage\napp.get('/bad', (req, res) => {\n    res.send({\n        errorMessage: 'Unable to handle request'\n    });\n});\n\napp.listen(3000);\n```\n#### 創建網頁伺服器\n1. 新增 public/help.html\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Help Page</title>\n</head>\n<body>\n    <h1>Help Page</h1>\n    <p>Some text here</p>\n</body>\n</html>\n```\n2. 使用 app.use 指定 public 目錄\n`app.use(express.static(__dirname + '/public'));`\n3. 當伺服器啟動，傳送訊息\n```\napp.listen(3000, () => {\n    console.log('Server is up on port 3000');\n});\n```\n#### 呈現 template 和 data\n1. [handlebars.js](http://handlebarsjs.com/)\n2. 安裝 handlebars.js `npm install hbs@4.0.0 --save`\n3. 設定 view engine `app.set('view engine', 'hbs');`\n4. 新增 views/about.hbs\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Help Page</title>\n</head>\n<body>\n    <h1>About Page</h1>\n    <p>Some text here</p>\n\n    <footer>\n        <p>Copyright 2017</p>\n    </footer>\n</body>\n</html>\n```\n5. 使用 render 取得頁面\n```\napp.get('/about', (req, res) => {\n    res.render('about.hbs');\n});\n```\n6. 動態存取資料，傳送值到 view\n```\napp.get('/about', (req, res) => {\n    res.render('about.hbs', {\n        pageTitle: 'About Page',\n        currentYear: new Date().getFullYear()\n    });\n});\n```\n7. 在 view 取得值\n```\n<h1>{{pageTitle}}</h1>\n<p>Some text here</p>\n\n<footer>\n    <p>Copyright {{currentYear}}</p>\n</footer>\n```","slug":"Nodejs-快速學習自我挑戰-Day4","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxl003x7ifaa8fv11wv","content":"<img src=\"/images/learning/nodejs/nodejsday4.jpg\">\n<hr>\n<h3>Weather App</h3>\n<h4>進階 Promise</h4>\n<ol>\n<li>新增 asyncAdd function，用 new Promise 新增 promise，然後再用 .then 輸出結果，最後用 .catch 把錯誤一次輸出(避免第二次 errorMessage 跑的是 success function)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var asyncAdd = (a, b) =&gt; &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">        setTimeout(() =&gt; &#123;</div><div class=\"line\">            if (typeof a === &apos;number&apos; &amp;&amp; typeof b === &apos;number&apos;) &#123;</div><div class=\"line\">                resolve(a + b);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                reject(&apos;Arguments must be numbers&apos;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, 1500);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">asyncAdd(5, &apos;7&apos;).then((res) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Results: &apos;, res);</div><div class=\"line\">    return asyncAdd(res, 33);</div><div class=\"line\">&#125;).then((res) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Should be 45&apos;, res);</div><div class=\"line\">&#125;).catch((errorMessage) =&gt; &#123;</div><div class=\"line\">    console.log(errorMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 Promise 取代 callback 整合 geocode</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">var geocodeAddress = (address) =&gt; &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">        var encodedAddress = encodeURIComponent(address);</div><div class=\"line\"></div><div class=\"line\">        request (&#123;</div><div class=\"line\">            url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">            json: true</div><div class=\"line\">        &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">            if (error) &#123;</div><div class=\"line\">                reject(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">            &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">                reject(&apos;Unable to find that address&apos;);</div><div class=\"line\">            &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">                resolve(&#123;</div><div class=\"line\">                    address: body.results[0].formatted_address,</div><div class=\"line\">                    latitude: body.results[0].geometry.location.lat,</div><div class=\"line\">                    longitude: body.results[0].geometry.location.lng,</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">geocodeAddress(&apos;19146&apos;).then((location) =&gt; &#123;</div><div class=\"line\">    console.log(JSON.stringify(location, undefined, 2));</div><div class=\"line\">&#125;, (errorMessage) =&gt; &#123;</div><div class=\"line\">    console.log(errorMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>讓 Weather App 使用 Promise</h4>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"external\">axios 套件</a></li>\n<li>安裝 axios <code>npm install axios@0.13.1 --save</code></li>\n<li>使用 axios，先使用 .then 取得地址，然後再用一次 .then 取得溫度，最後用 .catch 處理錯誤的出現</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var encodedAddress = encodeURIComponent(argv.address);</div><div class=\"line\">var geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`;</div><div class=\"line\"></div><div class=\"line\">axios.get(geocodeUrl).then((response) =&gt; &#123;</div><div class=\"line\">    if (response.data.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">        throw new Error(&apos;Unable to find that address.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    var lat = response.data.results[0].geometry.location.lat;</div><div class=\"line\">    var lng = response.data.results[0].geometry.location.lng;</div><div class=\"line\">    var weatherUrl = `https://api.darksky.net/forecast/key/$&#123;lat&#125;, $&#123;lng&#125;`;</div><div class=\"line\">    console.log(response.data.results[0].formatted_address);</div><div class=\"line\">    return axios.get(weatherUrl);</div><div class=\"line\">&#125;).then((response) =&gt; &#123;</div><div class=\"line\">    var temperature = response.data.currently.temperature;</div><div class=\"line\">    var apparentTemperature = response.data.currently.apparentTemperature;</div><div class=\"line\">    console.log(`It&apos;s currently $&#123;temperature&#125;, It feels like $&#123;apparentTemperature&#125;.`);</div><div class=\"line\">&#125;).catch((e) =&gt; &#123;</div><div class=\"line\">    if (e.code === &apos;ENOTFOUND&apos;) &#123;</div><div class=\"line\">        console.log(&apos;Unable to connect to API servers.&apos;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(e.message);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Weather App 額外的功能 (思路)</h4>\n<ol>\n<li>除了 Current Temperature 之外，可以從 Weather API 讀取更多資訊</li>\n<li>如果讀不到位置，可以使用預設的地點</li>\n<li>搜尋完的結果用 filesystem 寫入檔案</li>\n</ol>\n<h3>網頁伺服器及應用程式部署</h3>\n<h4>Hello Express</h4>\n<ol>\n<li><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">Express 官方網站</a></li>\n<li>安裝 express <code>npm install express@4.14.0 --save</code></li>\n<li>在根目錄新增 server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    // res.send(&apos;&lt;h1&gt;Hello Express!&lt;/h1&gt;&apos;);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        likes: [</div><div class=\"line\">            &apos;Biking&apos;,</div><div class=\"line\">            &apos;Cities&apos;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;About Page&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// /bad - send back json with errorMessage</div><div class=\"line\">app.get(&apos;/bad&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        errorMessage: &apos;Unable to handle request&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000);</div></pre></td></tr></table></figure>\n<h4>創建網頁伺服器</h4>\n<ol>\n<li>新增 public/help.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Help Page&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;h1&gt;Help Page&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;Some text here&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 app.use 指定 public 目錄<br>\n<code>app.use(express.static(__dirname + '/public'));</code></li>\n<li>當伺服器啟動，傳送訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.listen(3000, () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Server is up on port 3000&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>呈現 template 和 data</h4>\n<ol>\n<li><a href=\"http://handlebarsjs.com/\" target=\"_blank\" rel=\"external\">handlebars.js</a></li>\n<li>安裝 handlebars.js <code>npm install hbs@4.0.0 --save</code></li>\n<li>設定 view engine <code>app.set('view engine', 'hbs');</code></li>\n<li>新增 views/about.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Help Page&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;h1&gt;About Page&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;Some text here&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;footer&gt;</div><div class=\"line\">        &lt;p&gt;Copyright 2017&lt;/p&gt;</div><div class=\"line\">    &lt;/footer&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用 render 取得頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;about.hbs&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>動態存取資料，傳送值到 view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;about.hbs&apos;, &#123;</div><div class=\"line\">        pageTitle: &apos;About Page&apos;,</div><div class=\"line\">        currentYear: new Date().getFullYear()</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 view 取得值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&#123;&#123;pageTitle&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;p&gt;Some text here&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;footer&gt;</div><div class=\"line\">    &lt;p&gt;Copyright &#123;&#123;currentYear&#125;&#125;&lt;/p&gt;</div><div class=\"line\">&lt;/footer&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday4.jpg\">\n<hr>\n<h3>Weather App</h3>\n<h4>進階 Promise</h4>\n<ol>\n<li>新增 asyncAdd function，用 new Promise 新增 promise，然後再用 .then 輸出結果，最後用 .catch 把錯誤一次輸出(避免第二次 errorMessage 跑的是 success function)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var asyncAdd = (a, b) =&gt; &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">        setTimeout(() =&gt; &#123;</div><div class=\"line\">            if (typeof a === &apos;number&apos; &amp;&amp; typeof b === &apos;number&apos;) &#123;</div><div class=\"line\">                resolve(a + b);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                reject(&apos;Arguments must be numbers&apos;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, 1500);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">asyncAdd(5, &apos;7&apos;).then((res) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Results: &apos;, res);</div><div class=\"line\">    return asyncAdd(res, 33);</div><div class=\"line\">&#125;).then((res) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Should be 45&apos;, res);</div><div class=\"line\">&#125;).catch((errorMessage) =&gt; &#123;</div><div class=\"line\">    console.log(errorMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 Promise 取代 callback 整合 geocode</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;request&apos;);</div><div class=\"line\"></div><div class=\"line\">var geocodeAddress = (address) =&gt; &#123;</div><div class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">        var encodedAddress = encodeURIComponent(address);</div><div class=\"line\"></div><div class=\"line\">        request (&#123;</div><div class=\"line\">            url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`,</div><div class=\"line\">            json: true</div><div class=\"line\">        &#125;, (error, response, body) =&gt; &#123;</div><div class=\"line\">            if (error) &#123;</div><div class=\"line\">                reject(&apos;Unable to connect to Google servers&apos;);</div><div class=\"line\">            &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">                reject(&apos;Unable to find that address&apos;);</div><div class=\"line\">            &#125; else if (body.status === &apos;OK&apos;) &#123;</div><div class=\"line\">                resolve(&#123;</div><div class=\"line\">                    address: body.results[0].formatted_address,</div><div class=\"line\">                    latitude: body.results[0].geometry.location.lat,</div><div class=\"line\">                    longitude: body.results[0].geometry.location.lng,</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">geocodeAddress(&apos;19146&apos;).then((location) =&gt; &#123;</div><div class=\"line\">    console.log(JSON.stringify(location, undefined, 2));</div><div class=\"line\">&#125;, (errorMessage) =&gt; &#123;</div><div class=\"line\">    console.log(errorMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>讓 Weather App 使用 Promise</h4>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"external\">axios 套件</a></li>\n<li>安裝 axios <code>npm install axios@0.13.1 --save</code></li>\n<li>使用 axios，先使用 .then 取得地址，然後再用一次 .then 取得溫度，最後用 .catch 處理錯誤的出現</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var encodedAddress = encodeURIComponent(argv.address);</div><div class=\"line\">var geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`;</div><div class=\"line\"></div><div class=\"line\">axios.get(geocodeUrl).then((response) =&gt; &#123;</div><div class=\"line\">    if (response.data.status === &apos;ZERO_RESULTS&apos;) &#123;</div><div class=\"line\">        throw new Error(&apos;Unable to find that address.&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    var lat = response.data.results[0].geometry.location.lat;</div><div class=\"line\">    var lng = response.data.results[0].geometry.location.lng;</div><div class=\"line\">    var weatherUrl = `https://api.darksky.net/forecast/key/$&#123;lat&#125;, $&#123;lng&#125;`;</div><div class=\"line\">    console.log(response.data.results[0].formatted_address);</div><div class=\"line\">    return axios.get(weatherUrl);</div><div class=\"line\">&#125;).then((response) =&gt; &#123;</div><div class=\"line\">    var temperature = response.data.currently.temperature;</div><div class=\"line\">    var apparentTemperature = response.data.currently.apparentTemperature;</div><div class=\"line\">    console.log(`It&apos;s currently $&#123;temperature&#125;, It feels like $&#123;apparentTemperature&#125;.`);</div><div class=\"line\">&#125;).catch((e) =&gt; &#123;</div><div class=\"line\">    if (e.code === &apos;ENOTFOUND&apos;) &#123;</div><div class=\"line\">        console.log(&apos;Unable to connect to API servers.&apos;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(e.message);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Weather App 額外的功能 (思路)</h4>\n<ol>\n<li>除了 Current Temperature 之外，可以從 Weather API 讀取更多資訊</li>\n<li>如果讀不到位置，可以使用預設的地點</li>\n<li>搜尋完的結果用 filesystem 寫入檔案</li>\n</ol>\n<h3>網頁伺服器及應用程式部署</h3>\n<h4>Hello Express</h4>\n<ol>\n<li><a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">Express 官方網站</a></li>\n<li>安裝 express <code>npm install express@4.14.0 --save</code></li>\n<li>在根目錄新增 server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    // res.send(&apos;&lt;h1&gt;Hello Express!&lt;/h1&gt;&apos;);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        likes: [</div><div class=\"line\">            &apos;Biking&apos;,</div><div class=\"line\">            &apos;Cities&apos;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;About Page&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// /bad - send back json with errorMessage</div><div class=\"line\">app.get(&apos;/bad&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        errorMessage: &apos;Unable to handle request&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000);</div></pre></td></tr></table></figure>\n<h4>創建網頁伺服器</h4>\n<ol>\n<li>新增 public/help.html</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Help Page&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;h1&gt;Help Page&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;Some text here&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 app.use 指定 public 目錄<br>\n<code>app.use(express.static(__dirname + '/public'));</code></li>\n<li>當伺服器啟動，傳送訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.listen(3000, () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Server is up on port 3000&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>呈現 template 和 data</h4>\n<ol>\n<li><a href=\"http://handlebarsjs.com/\" target=\"_blank\" rel=\"external\">handlebars.js</a></li>\n<li>安裝 handlebars.js <code>npm install hbs@4.0.0 --save</code></li>\n<li>設定 view engine <code>app.set('view engine', 'hbs');</code></li>\n<li>新增 views/about.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Help Page&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;h1&gt;About Page&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;Some text here&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;footer&gt;</div><div class=\"line\">        &lt;p&gt;Copyright 2017&lt;/p&gt;</div><div class=\"line\">    &lt;/footer&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用 render 取得頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;about.hbs&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>動態存取資料，傳送值到 view</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/about&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.render(&apos;about.hbs&apos;, &#123;</div><div class=\"line\">        pageTitle: &apos;About Page&apos;,</div><div class=\"line\">        currentYear: new Date().getFullYear()</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 view 取得值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&#123;&#123;pageTitle&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;p&gt;Some text here&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;footer&gt;</div><div class=\"line\">    &lt;p&gt;Copyright &#123;&#123;currentYear&#125;&#125;&lt;/p&gt;</div><div class=\"line\">&lt;/footer&gt;</div></pre></td></tr></table></figure>"},{"title":"Nodejs 快速學習自我挑戰 Day5","thumbnail":["/images/learning/nodejs/nodejsday5.jpg"],"date":"2017-09-14T03:24:09.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday5.jpg\">\n\n***\n### 網頁伺服器及應用程式部署\n#### 進階 template\n1. 註冊 partials\n`hbs.registerPartials(__dirname + '/views/partials')`\n2. 將 footer code 移到 views/partials/footer.hbs\n```\n<footer>\n    <p>Copyright {{currentYear}}</p>\n</footer>\n```\n3. 本來 footer 的區塊用 `{{\" {{> footer\" }}}}` 取代\n4. nodemon 監控 js 和 hbs 檔案 `nodemon server.js -e js, hbs`\n5. 將 header code 移到 views/partials/header.hbs\n```\n<header>\n    <h1>{{pageTitle}}, 123</h1>\n    <p><a href=\"/\">Home</a></p>\n    <p><a href=\"/about\">About</a></p>\n</header>\n```\n6. 本來 footer 的區塊用 `{{\" {{> header\" }}}}` 取代\n7. 使用 hbs 的 Helper 來取得年份\n```\nhbs.registerHelper('getCurrentYear', () => {\n    return new Date().getFullYear();\n});\n```\n8. 本來 `{{\" {{currentYear\"}}}}` 用 `{{\" {{getCurrentYear\" }}}}` 取代\n9. 使用 hbs 的 Helper 註冊 screamIt 然後將 text 變數送進去\n```\nhbs.registerHelper('screamIt', (text) => {\n    return text.toUpperCase();\n});\n```\n10. 使用 screamIt，text 變數設為 welcomeMessage`{{\" {{screamIt welcomeMessage\" }}}}`\n#### Express Middleware\n1. 註冊一個 middleware，然後 console 時間以及擷取的狀態\n```\napp.use((req, res, next) => {\n    var now = new Date().toString();\n\n    console.log(`${now}: ${req.method} ${req.url}`);\n    next();\n});\n```\n2. 新增 maintenance.hbs\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Some Website</title>\n</head>\n<body>\n    <h1>We'll be right back</h1>\n    <p>\n        The site is currently being updated.\n    </p>\n</body>\n</html>\n```\n3. 使用 middleware 把頁面通通導向 maintenance\n```\napp.use((req, res ,next) => {\n   res.render('maintenance');\n});\n```\n#### Git 版本控制\n1. [Git 官方網站](https://git-scm.com/)\n2. 啟動 git 專案 `git init`\n3. 新增檔案 `git add`\n4. 新增 .gitignore 讓部分檔案不上傳\n5. 對新增的檔案做 commit `git commit -m 'Commit Content'`\n#### 設置 ssh key\n1. ssh key 目錄 `~/.ssh`\n2. 產生 ssh key `ssh-keygen -t rsa -b 4096 -C 'YOUR@EMAIL'`\n3. 設定完成會產生出 id\\_rsa(此為私密金鑰，不能給別人) 和 id\\_rsa_pub(此為公開金鑰，用於第三方軟件)\n4. 開啟 ssh-agent `eval \"$(ssh-agent -s)\"`\n5. 將 ssh 私鑰加入 ssh-agent `ssh-add ~/.ssh/id_rsa`\n6. 將 ssh key 貼到 Github => Setting => SSH and GPG key `pbcopy < ~/.ssh/id_rsa.pub`\n7. 跟 Github 進行連線 `ssh -T git@github.com`\n#### 部署 apps\n1. [heroku](https://www.heroku.com/)\n2. 安裝 heroku cli `brew install heroku`\n3. 在本地端 cli 登入 heroku `heroku login`\n4. 新增 ssh key 到 keroku `heroku keys:add`\n5. 檢查在電腦上的 key `heroku keys`\n6. 跟 heroku 進行連線 `ssh -v git@heroku.com`\n7. 修改 server.js 讓 port 動態調整，先取得 env 的 PORT，如果不存在則使用預設的 3000 Port\n`const port = process.env.PORT || 3000;`\n8. 修改 server.js 的 app.listen\n```\napp.listen(port, () => {\n    console.log(`Server is up on port ${port}`);\n});\n```\n9. 在 package.json 的 script 新增 start，讓 server 知道要執行哪個檔案\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node server.js\"\n  }\n```\n10. 開啟 heroku 專案 `heroku create`\n11. 將專案推到 heroku `git push heroku`\n12. 用瀏覽器開啟 keroku 的專案`heroku open`\n### 測試 Apps\n#### Mocha 和基本測試\n1. `mkdir node-tests`\n2. `cd node-tests`\n3. `npm init`，全部直接使用預設值\n4. 新增檔案 utils/utils.js\n`module.exports.add = (a, b) => a + b;`\n5. [Mocha 官方網站](https://mochajs.org/)\n6. 安裝 mocha 且不在正式上線時使用，僅用於開發用途\n`npm i mocha@3.0.0 --save-dev`\n7. 新增 utils/util.test.js\n```\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n    var res = utils.add(33, 11);\n});\n```\n8. 修改 package.json，**搜尋所有資料夾\n```\n\"scripts\": {\n    \"test\": \"mocha **/*.test.js\"\n},\n```\n9. `npm test` 執行測試\n10. 加一行錯誤\n`throw new Error('Value not correct!')`\n11. 再執行 `npm test`，就會發現錯誤了\n12. 加 if statement，回傳得到的錯誤值\n```\nif (res !== 44) {\n    throw new Error(`Expected 44, but got ${res}.`)\n}\n```\n13. 在 utils/utils.js 新增一個 module\n`module.exports.square = (x) => x * x;`\n14. 在 utils.utils.test.js 多新增一個 test\n```\nit ('should square a number', () => {\n    var res = utils.square(3);\n\n    if (res !== 9) {\n        throw new Error(`Expected 9, but got ${res}.`)\n    }\n});\n```\n#### 監控和自動重啟測試\n1. `nodemon --exec 'npm test'`\n2. 在 package.json 直接新增 command\n`\"test-watch\": \"nodemon --exec \\\"npm test\\\"\"`\n3. `npm run test-watch`\n#### 使用 Assertion Library\n1. [Assertion Library](https://github.com/mjackson/expect)\n2. 安裝 expect `npm install expect@1.20.2 --save-dev`\n3. 用 expect 簡化函數\n```\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n    var res = utils.add(33, 11);\n\n    expect(res).toBe(44).toBeA('number');\n});\n\nit ('should square a number', () => {\n    var res = utils.square(3);\n\n    expect(res).toBe(9).toBeA('number');\n});\n\nit ('should expect some values', () => {\n    expect(12).toNotBe(12);\n    expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n    expect([2, 3, 4]).toExclude(1);\n    expect({\n        name: 'Andrew',\n        age: 25,\n        location: 'Philadelphia'\n    }).toExclude({\n        age: 23\n    })\n});\n```\n4. 在 utils/utils.js 新增 module\n```\nmodule.exports.setName = (user, fullName) => {\n    var names = fullName.split(' ');\n    user.firstName = names[0];\n    user.lastName = names[1];\n    return user;\n};\n```\n5. 用 expect 確認回傳的物件是正確值\n```\n// should verify first and last names are set\n// assert it includes firstName and lastName with proper values\nit ('should set firstName and lastName', () => {\n    var user = {location: 'Philadelphia', age: 25};\n    var res = utils.setName(user, 'Andrew Mead');\n\n    expect(res).toInclude({\n        firstName: 'Andrew',\n        lastName: 'Mead',\n        age: 25\n    });\n});\n```\n#### 測試非同步式程式碼\n1. 在 utils/utils.js 新增一個 asyncAdd\n```\nmodule.exports.asyncAdd = (a, b, callback) => {\n    setTimeout(() => {\n        callback(a + b);\n    }, 1000);\n};\n```\n2. 在 utils/utils.test.js 測試 asyncAdd，這邊一定要使用 done，這樣才知道他是非同步，會等完成再執行 expect\n```\nit('should async add two numbers', (done) => {\n    utils.asyncAdd(4, 3, (sum) => {\n        expect(sum).toBe(7).toBeA('number');\n        done();\n    });\n});\n```\n3. 在 utils/utils.js 新增一個 asyncSquare\n```\nmodule.exports.asyncSquare = (x, callback) => {\n    setTimeout(() => {\n        callback(x * x);\n    }, 1000);\n};\n```\n4. 在 utils/utils.test.js 測試 asyncSqure\n```\nit('should async square a number', (done) => {\n    utils.asyncSquare(5, (res) => {\n        expect(res).toBe(25).toBeA('number');\n        done();\n    });\n});\n```\n#### 測試 Express 應用\n1. 安裝 Express\n`npm i express@4.14.0 --save`\n2. 新增 server/server.js\n```\nconst express = require('express');\n\nvar app = express();\n\napp.get('/', (req, res) => {\n    res.send('Hello world!');\n});\n\napp.listen(3000);\n```\n3. 執行 server\n`node server/server.js `\n4. 去瀏覽器輸入 `http://localhost:3000/` 就會看到 Hello world!\n5. [SuperTest](https://github.com/visionmedia/supertest)\n6. `npm i supertest@2.0.0 --save-dev`\n7. 修改 server/server.js 輸出內容讓其它地方可用\n`module.exports.app = app;`\n8. 新增 server/server.test.js\n```\nconst request = require('supertest');\n\nvar app = require('./server').app;\n\nit('should return hello world response', (done) => {\n    request(app)\n        .get('/')\n        .expect('Hello world!')\n        .end(done);\n});\n```\n9. 引入 expect，用 expect 客製化測試\n```\nconst request = require('supertest');\nconst expect = require('expect');\n\nvar app = require('./server').app;\n\nit('should return hello world response', (done) => {\n    request(app)\n        .get('/')\n        .expect(404)\n        .expect((res) => {\n            expect(res.body).toInclude({\n                error: 'Page not found.'\n            });\n        })\n        .end(done);\n});\n```\n10. 在 server/server.js 新增路由\n```\n// GET /users\n// Give users a name prop and age prop\napp.get('/users', (req, res) => {\n    res.send([{\n        name: 'Mike',\n        age: 27\n    }, {\n        name: 'Andrew',\n        age: 25\n    }, {\n        name: 'Jen',\n        age: 26\n    }]);\n});\n```\n11. 在 server/server.test.js 新增測試\n```\n// Make a new test\n// assert 200\n// Assert that you exist in users array\nit('should return my user object', (done) => {\n    request(app)\n        .get('/users')\n        .expect(200)\n        .expect((res) => {\n            expect(res.body).toInclude({\n                name: 'Andrew',\n                age: 25\n            });\n        })\n        .end(done);\n});\n```\n#### 使用 describe() 組織測試\n1. 修改 utils/utils.test.js\n```\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\ndescribe('Utils', () => {\n\n    describe('#add', () => {\n        it('should add two numbers', () => {\n            var res = utils.add(33, 11);\n\n            expect(res).toBe(44).toBeA('number');\n        });\n\n        it('should async add two numbers', (done) => {\n            utils.asyncAdd(4, 3, (sum) => {\n                expect(sum).toBe(7).toBeA('number');\n                done();\n            });\n        });\n    });\n\n    it ('should square a number', () => {\n        var res = utils.square(3);\n\n        expect(res).toBe(9).toBeA('number');\n    });\n\n    it('should async square a number', (done) => {\n        utils.asyncSquare(5, (res) => {\n            expect(res).toBe(25).toBeA('number');\n            done();\n        });\n    });\n});\n\n// should verify first and last names are set\n// assert it includes firstName and lastName with proper values\nit ('should set firstName and lastName', () => {\n    var user = {location: 'Philadelphia', age: 25};\n    var res = utils.setName(user, 'Andrew Mead');\n\n    expect(res).toInclude({\n        firstName: 'Andrew',\n        lastName: 'Mead',\n        age: 25\n    });\n});\n\n// it ('should expect some values', () => {\n    // expect(12).toNotBe(12);\n    // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n    // expect([2, 3, 4]).toExclude(1);\n    // expect({\n    //     name: 'Andrew',\n    //     age: 25,\n    //     location: 'Philadelphia'\n    // }).toExclude({\n    //     age: 23\n    // })\n// });\n```\n2. 修改 server/server.test.js\n```\nconst request = require('supertest');\nconst expect = require('expect');\n\nvar app = require('./server').app;\n\n// Server\n    // GET /\n        // some test case\n    // GET /users\n        // some test case\n\ndescribe('Server', () => {\n\n    describe('GET /', () => {\n        it('should return hello world response', (done) => {\n            request(app)\n                .get('/')\n                .expect(404)\n                .expect((res) => {\n                    expect(res.body).toInclude({\n                        error: 'Page not found.'\n                    });\n                })\n                .end(done);\n        });\n    });\n\n    describe('GET /users', () => {\n        // Make a new test\n        // assert 200\n        // Assert that you exist in users array\n        it('should return my user object', (done) => {\n            request(app)\n                .get('/users')\n                .expect(200)\n                .expect((res) => {\n                    expect(res.body).toInclude({\n                        name: 'Andrew',\n                        age: 25\n                    });\n                })\n                .end(done);\n        });\n    });\n});\n```\n#### Test Spies\n1. 新增 spies/db.js\n```\nmodule.exports.saveUser = (user) => {\n    console.log('Saving the user', user);\n};\n```\n2. 新增 spies/app.js\n```\nvar db = require('./db');\n\nmodule.exports.handleSignup = (email, password) => {\n    // Check if email already exists\n    db.saveUser({email, password});\n    // Save the user to the database\n    // Send the welcome email\n};\n```\n3. 新增 spies/app.test.js\n```\nconst expect = require('expect');\n\ndescribe('App', () => {\n\n    it('should call the spy correctly', () => {\n        var spy = expect.createSpy();\n        spy('Andrew', 25);\n        expect(spy).toHaveBeenCalledWith('Andrew', 25);\n    });\n\n});\n```\n4. `npm install rewire@2.5.2 --save-dev`\n5. 在 spies/app.test.js 使用 rewire 引入 app\n`var app = rewire('./app');`\n6. 用 describe 將 rewire 單元測試分類在一起\n```\ndescribe('App', () => {\n    var db = {\n        saveUser: expect.createSpy()\n    };\n    app.__set__('db', db);\n\n    it('should call saveUser with user object', () => {\n        var email = 'andrew@example.com';\n        var password = '123abc';\n\n        app.handleSignup(email, password);\n        expect(db.saveUser).toHaveBeenCalledWith({email, password});\n    });\n\n});\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day5.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day5\nthumbnail:\n  - /images/learning/nodejs/nodejsday5.jpg\ndate: 2017-09-14 11:24:09\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday5.jpg\">\n\n***\n### 網頁伺服器及應用程式部署\n#### 進階 template\n1. 註冊 partials\n`hbs.registerPartials(__dirname + '/views/partials')`\n2. 將 footer code 移到 views/partials/footer.hbs\n```\n<footer>\n    <p>Copyright {{currentYear}}</p>\n</footer>\n```\n3. 本來 footer 的區塊用 `{{\" {{> footer\" }}}}` 取代\n4. nodemon 監控 js 和 hbs 檔案 `nodemon server.js -e js, hbs`\n5. 將 header code 移到 views/partials/header.hbs\n```\n<header>\n    <h1>{{pageTitle}}, 123</h1>\n    <p><a href=\"/\">Home</a></p>\n    <p><a href=\"/about\">About</a></p>\n</header>\n```\n6. 本來 footer 的區塊用 `{{\" {{> header\" }}}}` 取代\n7. 使用 hbs 的 Helper 來取得年份\n```\nhbs.registerHelper('getCurrentYear', () => {\n    return new Date().getFullYear();\n});\n```\n8. 本來 `{{\" {{currentYear\"}}}}` 用 `{{\" {{getCurrentYear\" }}}}` 取代\n9. 使用 hbs 的 Helper 註冊 screamIt 然後將 text 變數送進去\n```\nhbs.registerHelper('screamIt', (text) => {\n    return text.toUpperCase();\n});\n```\n10. 使用 screamIt，text 變數設為 welcomeMessage`{{\" {{screamIt welcomeMessage\" }}}}`\n#### Express Middleware\n1. 註冊一個 middleware，然後 console 時間以及擷取的狀態\n```\napp.use((req, res, next) => {\n    var now = new Date().toString();\n\n    console.log(`${now}: ${req.method} ${req.url}`);\n    next();\n});\n```\n2. 新增 maintenance.hbs\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Some Website</title>\n</head>\n<body>\n    <h1>We'll be right back</h1>\n    <p>\n        The site is currently being updated.\n    </p>\n</body>\n</html>\n```\n3. 使用 middleware 把頁面通通導向 maintenance\n```\napp.use((req, res ,next) => {\n   res.render('maintenance');\n});\n```\n#### Git 版本控制\n1. [Git 官方網站](https://git-scm.com/)\n2. 啟動 git 專案 `git init`\n3. 新增檔案 `git add`\n4. 新增 .gitignore 讓部分檔案不上傳\n5. 對新增的檔案做 commit `git commit -m 'Commit Content'`\n#### 設置 ssh key\n1. ssh key 目錄 `~/.ssh`\n2. 產生 ssh key `ssh-keygen -t rsa -b 4096 -C 'YOUR@EMAIL'`\n3. 設定完成會產生出 id\\_rsa(此為私密金鑰，不能給別人) 和 id\\_rsa_pub(此為公開金鑰，用於第三方軟件)\n4. 開啟 ssh-agent `eval \"$(ssh-agent -s)\"`\n5. 將 ssh 私鑰加入 ssh-agent `ssh-add ~/.ssh/id_rsa`\n6. 將 ssh key 貼到 Github => Setting => SSH and GPG key `pbcopy < ~/.ssh/id_rsa.pub`\n7. 跟 Github 進行連線 `ssh -T git@github.com`\n#### 部署 apps\n1. [heroku](https://www.heroku.com/)\n2. 安裝 heroku cli `brew install heroku`\n3. 在本地端 cli 登入 heroku `heroku login`\n4. 新增 ssh key 到 keroku `heroku keys:add`\n5. 檢查在電腦上的 key `heroku keys`\n6. 跟 heroku 進行連線 `ssh -v git@heroku.com`\n7. 修改 server.js 讓 port 動態調整，先取得 env 的 PORT，如果不存在則使用預設的 3000 Port\n`const port = process.env.PORT || 3000;`\n8. 修改 server.js 的 app.listen\n```\napp.listen(port, () => {\n    console.log(`Server is up on port ${port}`);\n});\n```\n9. 在 package.json 的 script 新增 start，讓 server 知道要執行哪個檔案\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node server.js\"\n  }\n```\n10. 開啟 heroku 專案 `heroku create`\n11. 將專案推到 heroku `git push heroku`\n12. 用瀏覽器開啟 keroku 的專案`heroku open`\n### 測試 Apps\n#### Mocha 和基本測試\n1. `mkdir node-tests`\n2. `cd node-tests`\n3. `npm init`，全部直接使用預設值\n4. 新增檔案 utils/utils.js\n`module.exports.add = (a, b) => a + b;`\n5. [Mocha 官方網站](https://mochajs.org/)\n6. 安裝 mocha 且不在正式上線時使用，僅用於開發用途\n`npm i mocha@3.0.0 --save-dev`\n7. 新增 utils/util.test.js\n```\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n    var res = utils.add(33, 11);\n});\n```\n8. 修改 package.json，**搜尋所有資料夾\n```\n\"scripts\": {\n    \"test\": \"mocha **/*.test.js\"\n},\n```\n9. `npm test` 執行測試\n10. 加一行錯誤\n`throw new Error('Value not correct!')`\n11. 再執行 `npm test`，就會發現錯誤了\n12. 加 if statement，回傳得到的錯誤值\n```\nif (res !== 44) {\n    throw new Error(`Expected 44, but got ${res}.`)\n}\n```\n13. 在 utils/utils.js 新增一個 module\n`module.exports.square = (x) => x * x;`\n14. 在 utils.utils.test.js 多新增一個 test\n```\nit ('should square a number', () => {\n    var res = utils.square(3);\n\n    if (res !== 9) {\n        throw new Error(`Expected 9, but got ${res}.`)\n    }\n});\n```\n#### 監控和自動重啟測試\n1. `nodemon --exec 'npm test'`\n2. 在 package.json 直接新增 command\n`\"test-watch\": \"nodemon --exec \\\"npm test\\\"\"`\n3. `npm run test-watch`\n#### 使用 Assertion Library\n1. [Assertion Library](https://github.com/mjackson/expect)\n2. 安裝 expect `npm install expect@1.20.2 --save-dev`\n3. 用 expect 簡化函數\n```\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n    var res = utils.add(33, 11);\n\n    expect(res).toBe(44).toBeA('number');\n});\n\nit ('should square a number', () => {\n    var res = utils.square(3);\n\n    expect(res).toBe(9).toBeA('number');\n});\n\nit ('should expect some values', () => {\n    expect(12).toNotBe(12);\n    expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n    expect([2, 3, 4]).toExclude(1);\n    expect({\n        name: 'Andrew',\n        age: 25,\n        location: 'Philadelphia'\n    }).toExclude({\n        age: 23\n    })\n});\n```\n4. 在 utils/utils.js 新增 module\n```\nmodule.exports.setName = (user, fullName) => {\n    var names = fullName.split(' ');\n    user.firstName = names[0];\n    user.lastName = names[1];\n    return user;\n};\n```\n5. 用 expect 確認回傳的物件是正確值\n```\n// should verify first and last names are set\n// assert it includes firstName and lastName with proper values\nit ('should set firstName and lastName', () => {\n    var user = {location: 'Philadelphia', age: 25};\n    var res = utils.setName(user, 'Andrew Mead');\n\n    expect(res).toInclude({\n        firstName: 'Andrew',\n        lastName: 'Mead',\n        age: 25\n    });\n});\n```\n#### 測試非同步式程式碼\n1. 在 utils/utils.js 新增一個 asyncAdd\n```\nmodule.exports.asyncAdd = (a, b, callback) => {\n    setTimeout(() => {\n        callback(a + b);\n    }, 1000);\n};\n```\n2. 在 utils/utils.test.js 測試 asyncAdd，這邊一定要使用 done，這樣才知道他是非同步，會等完成再執行 expect\n```\nit('should async add two numbers', (done) => {\n    utils.asyncAdd(4, 3, (sum) => {\n        expect(sum).toBe(7).toBeA('number');\n        done();\n    });\n});\n```\n3. 在 utils/utils.js 新增一個 asyncSquare\n```\nmodule.exports.asyncSquare = (x, callback) => {\n    setTimeout(() => {\n        callback(x * x);\n    }, 1000);\n};\n```\n4. 在 utils/utils.test.js 測試 asyncSqure\n```\nit('should async square a number', (done) => {\n    utils.asyncSquare(5, (res) => {\n        expect(res).toBe(25).toBeA('number');\n        done();\n    });\n});\n```\n#### 測試 Express 應用\n1. 安裝 Express\n`npm i express@4.14.0 --save`\n2. 新增 server/server.js\n```\nconst express = require('express');\n\nvar app = express();\n\napp.get('/', (req, res) => {\n    res.send('Hello world!');\n});\n\napp.listen(3000);\n```\n3. 執行 server\n`node server/server.js `\n4. 去瀏覽器輸入 `http://localhost:3000/` 就會看到 Hello world!\n5. [SuperTest](https://github.com/visionmedia/supertest)\n6. `npm i supertest@2.0.0 --save-dev`\n7. 修改 server/server.js 輸出內容讓其它地方可用\n`module.exports.app = app;`\n8. 新增 server/server.test.js\n```\nconst request = require('supertest');\n\nvar app = require('./server').app;\n\nit('should return hello world response', (done) => {\n    request(app)\n        .get('/')\n        .expect('Hello world!')\n        .end(done);\n});\n```\n9. 引入 expect，用 expect 客製化測試\n```\nconst request = require('supertest');\nconst expect = require('expect');\n\nvar app = require('./server').app;\n\nit('should return hello world response', (done) => {\n    request(app)\n        .get('/')\n        .expect(404)\n        .expect((res) => {\n            expect(res.body).toInclude({\n                error: 'Page not found.'\n            });\n        })\n        .end(done);\n});\n```\n10. 在 server/server.js 新增路由\n```\n// GET /users\n// Give users a name prop and age prop\napp.get('/users', (req, res) => {\n    res.send([{\n        name: 'Mike',\n        age: 27\n    }, {\n        name: 'Andrew',\n        age: 25\n    }, {\n        name: 'Jen',\n        age: 26\n    }]);\n});\n```\n11. 在 server/server.test.js 新增測試\n```\n// Make a new test\n// assert 200\n// Assert that you exist in users array\nit('should return my user object', (done) => {\n    request(app)\n        .get('/users')\n        .expect(200)\n        .expect((res) => {\n            expect(res.body).toInclude({\n                name: 'Andrew',\n                age: 25\n            });\n        })\n        .end(done);\n});\n```\n#### 使用 describe() 組織測試\n1. 修改 utils/utils.test.js\n```\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\ndescribe('Utils', () => {\n\n    describe('#add', () => {\n        it('should add two numbers', () => {\n            var res = utils.add(33, 11);\n\n            expect(res).toBe(44).toBeA('number');\n        });\n\n        it('should async add two numbers', (done) => {\n            utils.asyncAdd(4, 3, (sum) => {\n                expect(sum).toBe(7).toBeA('number');\n                done();\n            });\n        });\n    });\n\n    it ('should square a number', () => {\n        var res = utils.square(3);\n\n        expect(res).toBe(9).toBeA('number');\n    });\n\n    it('should async square a number', (done) => {\n        utils.asyncSquare(5, (res) => {\n            expect(res).toBe(25).toBeA('number');\n            done();\n        });\n    });\n});\n\n// should verify first and last names are set\n// assert it includes firstName and lastName with proper values\nit ('should set firstName and lastName', () => {\n    var user = {location: 'Philadelphia', age: 25};\n    var res = utils.setName(user, 'Andrew Mead');\n\n    expect(res).toInclude({\n        firstName: 'Andrew',\n        lastName: 'Mead',\n        age: 25\n    });\n});\n\n// it ('should expect some values', () => {\n    // expect(12).toNotBe(12);\n    // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n    // expect([2, 3, 4]).toExclude(1);\n    // expect({\n    //     name: 'Andrew',\n    //     age: 25,\n    //     location: 'Philadelphia'\n    // }).toExclude({\n    //     age: 23\n    // })\n// });\n```\n2. 修改 server/server.test.js\n```\nconst request = require('supertest');\nconst expect = require('expect');\n\nvar app = require('./server').app;\n\n// Server\n    // GET /\n        // some test case\n    // GET /users\n        // some test case\n\ndescribe('Server', () => {\n\n    describe('GET /', () => {\n        it('should return hello world response', (done) => {\n            request(app)\n                .get('/')\n                .expect(404)\n                .expect((res) => {\n                    expect(res.body).toInclude({\n                        error: 'Page not found.'\n                    });\n                })\n                .end(done);\n        });\n    });\n\n    describe('GET /users', () => {\n        // Make a new test\n        // assert 200\n        // Assert that you exist in users array\n        it('should return my user object', (done) => {\n            request(app)\n                .get('/users')\n                .expect(200)\n                .expect((res) => {\n                    expect(res.body).toInclude({\n                        name: 'Andrew',\n                        age: 25\n                    });\n                })\n                .end(done);\n        });\n    });\n});\n```\n#### Test Spies\n1. 新增 spies/db.js\n```\nmodule.exports.saveUser = (user) => {\n    console.log('Saving the user', user);\n};\n```\n2. 新增 spies/app.js\n```\nvar db = require('./db');\n\nmodule.exports.handleSignup = (email, password) => {\n    // Check if email already exists\n    db.saveUser({email, password});\n    // Save the user to the database\n    // Send the welcome email\n};\n```\n3. 新增 spies/app.test.js\n```\nconst expect = require('expect');\n\ndescribe('App', () => {\n\n    it('should call the spy correctly', () => {\n        var spy = expect.createSpy();\n        spy('Andrew', 25);\n        expect(spy).toHaveBeenCalledWith('Andrew', 25);\n    });\n\n});\n```\n4. `npm install rewire@2.5.2 --save-dev`\n5. 在 spies/app.test.js 使用 rewire 引入 app\n`var app = rewire('./app');`\n6. 用 describe 將 rewire 單元測試分類在一起\n```\ndescribe('App', () => {\n    var db = {\n        saveUser: expect.createSpy()\n    };\n    app.__set__('db', db);\n\n    it('should call saveUser with user object', () => {\n        var email = 'andrew@example.com';\n        var password = '123abc';\n\n        app.handleSignup(email, password);\n        expect(db.saveUser).toHaveBeenCalledWith({email, password});\n    });\n\n});\n```","slug":"Nodejs-快速學習自我挑戰-Day5","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxm00407ifa8dyb9wqk","content":"<img src=\"/images/learning/nodejs/nodejsday5.jpg\">\n<hr>\n<h3>網頁伺服器及應用程式部署</h3>\n<h4>進階 template</h4>\n<ol>\n<li>註冊 partials<br>\n<code>hbs.registerPartials(__dirname + '/views/partials')</code></li>\n<li>將 footer code 移到 views/partials/footer.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;footer&gt;</div><div class=\"line\">    &lt;p&gt;Copyright &#123;&#123;currentYear&#125;&#125;&lt;/p&gt;</div><div class=\"line\">&lt;/footer&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>本來 footer 的區塊用 <code> {{> footer}}</code> 取代</li>\n<li>nodemon 監控 js 和 hbs 檔案 <code>nodemon server.js -e js, hbs</code></li>\n<li>將 header code 移到 views/partials/header.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">    &lt;h1&gt;&#123;&#123;pageTitle&#125;&#125;, 123&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/header&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>本來 footer 的區塊用 <code> {{> header}}</code> 取代</li>\n<li>使用 hbs 的 Helper 來取得年份</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(&apos;getCurrentYear&apos;, () =&gt; &#123;</div><div class=\"line\">    return new Date().getFullYear();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>本來 <code> {{currentYear}}</code> 用 <code> {{getCurrentYear}}</code> 取代</li>\n<li>使用 hbs 的 Helper 註冊 screamIt 然後將 text 變數送進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(&apos;screamIt&apos;, (text) =&gt; &#123;</div><div class=\"line\">    return text.toUpperCase();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>使用 screamIt，text 變數設為 welcomeMessage<code> {{screamIt welcomeMessage}}</code></li>\n</ol>\n<h4>Express Middleware</h4>\n<ol>\n<li>註冊一個 middleware，然後 console 時間以及擷取的狀態</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use((req, res, next) =&gt; &#123;</div><div class=\"line\">    var now = new Date().toString();</div><div class=\"line\"></div><div class=\"line\">    console.log(`$&#123;now&#125;: $&#123;req.method&#125; $&#123;req.url&#125;`);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 maintenance.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Some Website&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;h1&gt;We&apos;ll be right back&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;</div><div class=\"line\">        The site is currently being updated.</div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 middleware 把頁面通通導向 maintenance</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use((req, res ,next) =&gt; &#123;</div><div class=\"line\">   res.render(&apos;maintenance&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Git 版本控制</h4>\n<ol>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git 官方網站</a></li>\n<li>啟動 git 專案 <code>git init</code></li>\n<li>新增檔案 <code>git add</code></li>\n<li>新增 .gitignore 讓部分檔案不上傳</li>\n<li>對新增的檔案做 commit <code>git commit -m 'Commit Content'</code></li>\n</ol>\n<h4>設置 ssh key</h4>\n<ol>\n<li>ssh key 目錄 <code>~/.ssh</code></li>\n<li>產生 ssh key <code>ssh-keygen -t rsa -b 4096 -C 'YOUR@EMAIL'</code></li>\n<li>設定完成會產生出 id_rsa(此為私密金鑰，不能給別人) 和 id_rsa_pub(此為公開金鑰，用於第三方軟件)</li>\n<li>開啟 ssh-agent <code>eval &quot;$(ssh-agent -s)&quot;</code></li>\n<li>將 ssh 私鑰加入 ssh-agent <code>ssh-add ~/.ssh/id_rsa</code></li>\n<li>將 ssh key 貼到 Github =&gt; Setting =&gt; SSH and GPG key <code>pbcopy &lt; ~/.ssh/id_rsa.pub</code></li>\n<li>跟 Github 進行連線 <code>ssh -T git@github.com</code></li>\n</ol>\n<h4>部署 apps</h4>\n<ol>\n<li><a href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"external\">heroku</a></li>\n<li>安裝 heroku cli <code>brew install heroku</code></li>\n<li>在本地端 cli 登入 heroku <code>heroku login</code></li>\n<li>新增 ssh key 到 keroku <code>heroku keys:add</code></li>\n<li>檢查在電腦上的 key <code>heroku keys</code></li>\n<li>跟 heroku 進行連線 <code>ssh -v git@heroku.com</code></li>\n<li>修改 server.js 讓 port 動態調整，先取得 env 的 PORT，如果不存在則使用預設的 3000 Port<br>\n<code>const port = process.env.PORT || 3000;</code></li>\n<li>修改 server.js 的 app.listen</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server is up on port $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 package.json 的 script 新增 start，讓 server 知道要執行哪個檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</div><div class=\"line\">    &quot;start&quot;: &quot;node server.js&quot;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>開啟 heroku 專案 <code>heroku create</code></li>\n<li>將專案推到 heroku <code>git push heroku</code></li>\n<li>用瀏覽器開啟 keroku 的專案<code>heroku open</code></li>\n</ol>\n<h3>測試 Apps</h3>\n<h4>Mocha 和基本測試</h4>\n<ol>\n<li><code>mkdir node-tests</code></li>\n<li><code>cd node-tests</code></li>\n<li><code>npm init</code>，全部直接使用預設值</li>\n<li>新增檔案 utils/utils.js<br>\n<code>module.exports.add = (a, b) =&gt; a + b;</code></li>\n<li><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha 官方網站</a></li>\n<li>安裝 mocha 且不在正式上線時使用，僅用於開發用途<br>\n<code>npm i mocha@3.0.0 --save-dev</code></li>\n<li>新增 utils/util.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const utils = require(&apos;./utils&apos;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should add two numbers&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.add(33, 11);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>修改 package.json，**搜尋所有資料夾</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;mocha **/*.test.js&quot;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><code>npm test</code> 執行測試</li>\n<li>加一行錯誤<br>\n<code>throw new Error('Value not correct!')</code></li>\n<li>再執行 <code>npm test</code>，就會發現錯誤了</li>\n<li>加 if statement，回傳得到的錯誤值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (res !== 44) &#123;</div><div class=\"line\">    throw new Error(`Expected 44, but got $&#123;res&#125;.`)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 utils/utils.js 新增一個 module<br>\n<code>module.exports.square = (x) =&gt; x * x;</code></li>\n<li>在 utils.utils.test.js 多新增一個 test</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">it (&apos;should square a number&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.square(3);</div><div class=\"line\"></div><div class=\"line\">    if (res !== 9) &#123;</div><div class=\"line\">        throw new Error(`Expected 9, but got $&#123;res&#125;.`)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>監控和自動重啟測試</h4>\n<ol>\n<li><code>nodemon --exec 'npm test'</code></li>\n<li>在 package.json 直接新增 command<br>\n<code>&quot;test-watch&quot;: &quot;nodemon --exec \\&quot;npm test\\&quot;&quot;</code></li>\n<li><code>npm run test-watch</code></li>\n</ol>\n<h4>使用 Assertion Library</h4>\n<ol>\n<li><a href=\"https://github.com/mjackson/expect\" target=\"_blank\" rel=\"external\">Assertion Library</a></li>\n<li>安裝 expect <code>npm install expect@1.20.2 --save-dev</code></li>\n<li>用 expect 簡化函數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const utils = require(&apos;./utils&apos;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should add two numbers&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.add(33, 11);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toBe(44).toBeA(&apos;number&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it (&apos;should square a number&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.square(3);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toBe(9).toBeA(&apos;number&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it (&apos;should expect some values&apos;, () =&gt; &#123;</div><div class=\"line\">    expect(12).toNotBe(12);</div><div class=\"line\">    expect(&#123;name: &apos;andrew&apos;&#125;).toNotEqual(&#123;name: &apos;Andrew&apos;&#125;);</div><div class=\"line\">    expect([2, 3, 4]).toExclude(1);</div><div class=\"line\">    expect(&#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        age: 25,</div><div class=\"line\">        location: &apos;Philadelphia&apos;</div><div class=\"line\">    &#125;).toExclude(&#123;</div><div class=\"line\">        age: 23</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 utils/utils.js 新增 module</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.setName = (user, fullName) =&gt; &#123;</div><div class=\"line\">    var names = fullName.split(&apos; &apos;);</div><div class=\"line\">    user.firstName = names[0];</div><div class=\"line\">    user.lastName = names[1];</div><div class=\"line\">    return user;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>用 expect 確認回傳的物件是正確值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// should verify first and last names are set</div><div class=\"line\">// assert it includes firstName and lastName with proper values</div><div class=\"line\">it (&apos;should set firstName and lastName&apos;, () =&gt; &#123;</div><div class=\"line\">    var user = &#123;location: &apos;Philadelphia&apos;, age: 25&#125;;</div><div class=\"line\">    var res = utils.setName(user, &apos;Andrew Mead&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toInclude(&#123;</div><div class=\"line\">        firstName: &apos;Andrew&apos;,</div><div class=\"line\">        lastName: &apos;Mead&apos;,</div><div class=\"line\">        age: 25</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試非同步式程式碼</h4>\n<ol>\n<li>在 utils/utils.js 新增一個 asyncAdd</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.asyncAdd = (a, b, callback) =&gt; &#123;</div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">        callback(a + b);</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 utils/utils.test.js 測試 asyncAdd，這邊一定要使用 done，這樣才知道他是非同步，會等完成再執行 expect</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should async add two numbers&apos;, (done) =&gt; &#123;</div><div class=\"line\">    utils.asyncAdd(4, 3, (sum) =&gt; &#123;</div><div class=\"line\">        expect(sum).toBe(7).toBeA(&apos;number&apos;);</div><div class=\"line\">        done();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 utils/utils.js 新增一個 asyncSquare</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.asyncSquare = (x, callback) =&gt; &#123;</div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">        callback(x * x);</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 utils/utils.test.js 測試 asyncSqure</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should async square a number&apos;, (done) =&gt; &#123;</div><div class=\"line\">    utils.asyncSquare(5, (res) =&gt; &#123;</div><div class=\"line\">        expect(res).toBe(25).toBeA(&apos;number&apos;);</div><div class=\"line\">        done();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 Express 應用</h4>\n<ol>\n<li>安裝 Express<br>\n<code>npm i express@4.14.0 --save</code></li>\n<li>新增 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;Hello world!&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>執行 server<br>\n<code>node server/server.js</code></li>\n<li>去瀏覽器輸入 <code>http://localhost:3000/</code> 就會看到 Hello world!</li>\n<li><a href=\"https://github.com/visionmedia/supertest\" target=\"_blank\" rel=\"external\">SuperTest</a></li>\n<li><code>npm i supertest@2.0.0 --save-dev</code></li>\n<li>修改 server/server.js 輸出內容讓其它地方可用<br>\n<code>module.exports.app = app;</code></li>\n<li>新增 server/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = require(&apos;./server&apos;).app;</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return hello world response&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(&apos;/&apos;)</div><div class=\"line\">        .expect(&apos;Hello world!&apos;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>引入 expect，用 expect 客製化測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = require(&apos;./server&apos;).app;</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return hello world response&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(&apos;/&apos;)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body).toInclude(&#123;</div><div class=\"line\">                error: &apos;Page not found.&apos;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>在 server/server.js 新增路由</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// GET /users</div><div class=\"line\">// Give users a name prop and age prop</div><div class=\"line\">app.get(&apos;/users&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send([&#123;</div><div class=\"line\">        name: &apos;Mike&apos;,</div><div class=\"line\">        age: 27</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        age: 25</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        name: &apos;Jen&apos;,</div><div class=\"line\">        age: 26</div><div class=\"line\">    &#125;]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>在 server/server.test.js 新增測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Make a new test</div><div class=\"line\">// assert 200</div><div class=\"line\">// Assert that you exist in users array</div><div class=\"line\">it(&apos;should return my user object&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(&apos;/users&apos;)</div><div class=\"line\">        .expect(200)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body).toInclude(&#123;</div><div class=\"line\">                name: &apos;Andrew&apos;,</div><div class=\"line\">                age: 25</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>使用 describe() 組織測試</h4>\n<ol>\n<li>修改 utils/utils.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const utils = require(&apos;./utils&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Utils&apos;, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    describe(&apos;#add&apos;, () =&gt; &#123;</div><div class=\"line\">        it(&apos;should add two numbers&apos;, () =&gt; &#123;</div><div class=\"line\">            var res = utils.add(33, 11);</div><div class=\"line\"></div><div class=\"line\">            expect(res).toBe(44).toBeA(&apos;number&apos;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        it(&apos;should async add two numbers&apos;, (done) =&gt; &#123;</div><div class=\"line\">            utils.asyncAdd(4, 3, (sum) =&gt; &#123;</div><div class=\"line\">                expect(sum).toBe(7).toBeA(&apos;number&apos;);</div><div class=\"line\">                done();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it (&apos;should square a number&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = utils.square(3);</div><div class=\"line\"></div><div class=\"line\">        expect(res).toBe(9).toBeA(&apos;number&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should async square a number&apos;, (done) =&gt; &#123;</div><div class=\"line\">        utils.asyncSquare(5, (res) =&gt; &#123;</div><div class=\"line\">            expect(res).toBe(25).toBeA(&apos;number&apos;);</div><div class=\"line\">            done();</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// should verify first and last names are set</div><div class=\"line\">// assert it includes firstName and lastName with proper values</div><div class=\"line\">it (&apos;should set firstName and lastName&apos;, () =&gt; &#123;</div><div class=\"line\">    var user = &#123;location: &apos;Philadelphia&apos;, age: 25&#125;;</div><div class=\"line\">    var res = utils.setName(user, &apos;Andrew Mead&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toInclude(&#123;</div><div class=\"line\">        firstName: &apos;Andrew&apos;,</div><div class=\"line\">        lastName: &apos;Mead&apos;,</div><div class=\"line\">        age: 25</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// it (&apos;should expect some values&apos;, () =&gt; &#123;</div><div class=\"line\">    // expect(12).toNotBe(12);</div><div class=\"line\">    // expect(&#123;name: &apos;andrew&apos;&#125;).toNotEqual(&#123;name: &apos;Andrew&apos;&#125;);</div><div class=\"line\">    // expect([2, 3, 4]).toExclude(1);</div><div class=\"line\">    // expect(&#123;</div><div class=\"line\">    //     name: &apos;Andrew&apos;,</div><div class=\"line\">    //     age: 25,</div><div class=\"line\">    //     location: &apos;Philadelphia&apos;</div><div class=\"line\">    // &#125;).toExclude(&#123;</div><div class=\"line\">    //     age: 23</div><div class=\"line\">    // &#125;)</div><div class=\"line\">// &#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = require(&apos;./server&apos;).app;</div><div class=\"line\"></div><div class=\"line\">// Server</div><div class=\"line\">    // GET /</div><div class=\"line\">        // some test case</div><div class=\"line\">    // GET /users</div><div class=\"line\">        // some test case</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Server&apos;, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    describe(&apos;GET /&apos;, () =&gt; &#123;</div><div class=\"line\">        it(&apos;should return hello world response&apos;, (done) =&gt; &#123;</div><div class=\"line\">            request(app)</div><div class=\"line\">                .get(&apos;/&apos;)</div><div class=\"line\">                .expect(404)</div><div class=\"line\">                .expect((res) =&gt; &#123;</div><div class=\"line\">                    expect(res.body).toInclude(&#123;</div><div class=\"line\">                        error: &apos;Page not found.&apos;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .end(done);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    describe(&apos;GET /users&apos;, () =&gt; &#123;</div><div class=\"line\">        // Make a new test</div><div class=\"line\">        // assert 200</div><div class=\"line\">        // Assert that you exist in users array</div><div class=\"line\">        it(&apos;should return my user object&apos;, (done) =&gt; &#123;</div><div class=\"line\">            request(app)</div><div class=\"line\">                .get(&apos;/users&apos;)</div><div class=\"line\">                .expect(200)</div><div class=\"line\">                .expect((res) =&gt; &#123;</div><div class=\"line\">                    expect(res.body).toInclude(&#123;</div><div class=\"line\">                        name: &apos;Andrew&apos;,</div><div class=\"line\">                        age: 25</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .end(done);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Test Spies</h4>\n<ol>\n<li>新增 spies/db.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.saveUser = (user) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Saving the user&apos;, user);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 spies/app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var db = require(&apos;./db&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports.handleSignup = (email, password) =&gt; &#123;</div><div class=\"line\">    // Check if email already exists</div><div class=\"line\">    db.saveUser(&#123;email, password&#125;);</div><div class=\"line\">    // Save the user to the database</div><div class=\"line\">    // Send the welcome email</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 spies/app.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;App&apos;, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should call the spy correctly&apos;, () =&gt; &#123;</div><div class=\"line\">        var spy = expect.createSpy();</div><div class=\"line\">        spy(&apos;Andrew&apos;, 25);</div><div class=\"line\">        expect(spy).toHaveBeenCalledWith(&apos;Andrew&apos;, 25);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>npm install rewire@2.5.2 --save-dev</code></li>\n<li>在 spies/app.test.js 使用 rewire 引入 app<br>\n<code>var app = rewire('./app');</code></li>\n<li>用 describe 將 rewire 單元測試分類在一起</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;App&apos;, () =&gt; &#123;</div><div class=\"line\">    var db = &#123;</div><div class=\"line\">        saveUser: expect.createSpy()</div><div class=\"line\">    &#125;;</div><div class=\"line\">    app.__set__(&apos;db&apos;, db);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should call saveUser with user object&apos;, () =&gt; &#123;</div><div class=\"line\">        var email = &apos;andrew@example.com&apos;;</div><div class=\"line\">        var password = &apos;123abc&apos;;</div><div class=\"line\"></div><div class=\"line\">        app.handleSignup(email, password);</div><div class=\"line\">        expect(db.saveUser).toHaveBeenCalledWith(&#123;email, password&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday5.jpg\">\n<hr>\n<h3>網頁伺服器及應用程式部署</h3>\n<h4>進階 template</h4>\n<ol>\n<li>註冊 partials<br>\n<code>hbs.registerPartials(__dirname + '/views/partials')</code></li>\n<li>將 footer code 移到 views/partials/footer.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;footer&gt;</div><div class=\"line\">    &lt;p&gt;Copyright &#123;&#123;currentYear&#125;&#125;&lt;/p&gt;</div><div class=\"line\">&lt;/footer&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>本來 footer 的區塊用 <code> {{> footer}}</code> 取代</li>\n<li>nodemon 監控 js 和 hbs 檔案 <code>nodemon server.js -e js, hbs</code></li>\n<li>將 header code 移到 views/partials/header.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">    &lt;h1&gt;&#123;&#123;pageTitle&#125;&#125;, 123&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/header&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>本來 footer 的區塊用 <code> {{> header}}</code> 取代</li>\n<li>使用 hbs 的 Helper 來取得年份</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(&apos;getCurrentYear&apos;, () =&gt; &#123;</div><div class=\"line\">    return new Date().getFullYear();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>本來 <code> {{currentYear}}</code> 用 <code> {{getCurrentYear}}</code> 取代</li>\n<li>使用 hbs 的 Helper 註冊 screamIt 然後將 text 變數送進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbs.registerHelper(&apos;screamIt&apos;, (text) =&gt; &#123;</div><div class=\"line\">    return text.toUpperCase();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>使用 screamIt，text 變數設為 welcomeMessage<code> {{screamIt welcomeMessage}}</code></li>\n</ol>\n<h4>Express Middleware</h4>\n<ol>\n<li>註冊一個 middleware，然後 console 時間以及擷取的狀態</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use((req, res, next) =&gt; &#123;</div><div class=\"line\">    var now = new Date().toString();</div><div class=\"line\"></div><div class=\"line\">    console.log(`$&#123;now&#125;: $&#123;req.method&#125; $&#123;req.url&#125;`);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 maintenance.hbs</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Some Website&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;h1&gt;We&apos;ll be right back&lt;/h1&gt;</div><div class=\"line\">    &lt;p&gt;</div><div class=\"line\">        The site is currently being updated.</div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 middleware 把頁面通通導向 maintenance</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use((req, res ,next) =&gt; &#123;</div><div class=\"line\">   res.render(&apos;maintenance&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Git 版本控制</h4>\n<ol>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git 官方網站</a></li>\n<li>啟動 git 專案 <code>git init</code></li>\n<li>新增檔案 <code>git add</code></li>\n<li>新增 .gitignore 讓部分檔案不上傳</li>\n<li>對新增的檔案做 commit <code>git commit -m 'Commit Content'</code></li>\n</ol>\n<h4>設置 ssh key</h4>\n<ol>\n<li>ssh key 目錄 <code>~/.ssh</code></li>\n<li>產生 ssh key <code>ssh-keygen -t rsa -b 4096 -C 'YOUR@EMAIL'</code></li>\n<li>設定完成會產生出 id_rsa(此為私密金鑰，不能給別人) 和 id_rsa_pub(此為公開金鑰，用於第三方軟件)</li>\n<li>開啟 ssh-agent <code>eval &quot;$(ssh-agent -s)&quot;</code></li>\n<li>將 ssh 私鑰加入 ssh-agent <code>ssh-add ~/.ssh/id_rsa</code></li>\n<li>將 ssh key 貼到 Github =&gt; Setting =&gt; SSH and GPG key <code>pbcopy &lt; ~/.ssh/id_rsa.pub</code></li>\n<li>跟 Github 進行連線 <code>ssh -T git@github.com</code></li>\n</ol>\n<h4>部署 apps</h4>\n<ol>\n<li><a href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"external\">heroku</a></li>\n<li>安裝 heroku cli <code>brew install heroku</code></li>\n<li>在本地端 cli 登入 heroku <code>heroku login</code></li>\n<li>新增 ssh key 到 keroku <code>heroku keys:add</code></li>\n<li>檢查在電腦上的 key <code>heroku keys</code></li>\n<li>跟 heroku 進行連線 <code>ssh -v git@heroku.com</code></li>\n<li>修改 server.js 讓 port 動態調整，先取得 env 的 PORT，如果不存在則使用預設的 3000 Port<br>\n<code>const port = process.env.PORT || 3000;</code></li>\n<li>修改 server.js 的 app.listen</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Server is up on port $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 package.json 的 script 新增 start，讓 server 知道要執行哪個檔案</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</div><div class=\"line\">    &quot;start&quot;: &quot;node server.js&quot;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>開啟 heroku 專案 <code>heroku create</code></li>\n<li>將專案推到 heroku <code>git push heroku</code></li>\n<li>用瀏覽器開啟 keroku 的專案<code>heroku open</code></li>\n</ol>\n<h3>測試 Apps</h3>\n<h4>Mocha 和基本測試</h4>\n<ol>\n<li><code>mkdir node-tests</code></li>\n<li><code>cd node-tests</code></li>\n<li><code>npm init</code>，全部直接使用預設值</li>\n<li>新增檔案 utils/utils.js<br>\n<code>module.exports.add = (a, b) =&gt; a + b;</code></li>\n<li><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha 官方網站</a></li>\n<li>安裝 mocha 且不在正式上線時使用，僅用於開發用途<br>\n<code>npm i mocha@3.0.0 --save-dev</code></li>\n<li>新增 utils/util.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const utils = require(&apos;./utils&apos;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should add two numbers&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.add(33, 11);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>修改 package.json，**搜尋所有資料夾</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;mocha **/*.test.js&quot;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><code>npm test</code> 執行測試</li>\n<li>加一行錯誤<br>\n<code>throw new Error('Value not correct!')</code></li>\n<li>再執行 <code>npm test</code>，就會發現錯誤了</li>\n<li>加 if statement，回傳得到的錯誤值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (res !== 44) &#123;</div><div class=\"line\">    throw new Error(`Expected 44, but got $&#123;res&#125;.`)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 utils/utils.js 新增一個 module<br>\n<code>module.exports.square = (x) =&gt; x * x;</code></li>\n<li>在 utils.utils.test.js 多新增一個 test</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">it (&apos;should square a number&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.square(3);</div><div class=\"line\"></div><div class=\"line\">    if (res !== 9) &#123;</div><div class=\"line\">        throw new Error(`Expected 9, but got $&#123;res&#125;.`)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>監控和自動重啟測試</h4>\n<ol>\n<li><code>nodemon --exec 'npm test'</code></li>\n<li>在 package.json 直接新增 command<br>\n<code>&quot;test-watch&quot;: &quot;nodemon --exec \\&quot;npm test\\&quot;&quot;</code></li>\n<li><code>npm run test-watch</code></li>\n</ol>\n<h4>使用 Assertion Library</h4>\n<ol>\n<li><a href=\"https://github.com/mjackson/expect\" target=\"_blank\" rel=\"external\">Assertion Library</a></li>\n<li>安裝 expect <code>npm install expect@1.20.2 --save-dev</code></li>\n<li>用 expect 簡化函數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const utils = require(&apos;./utils&apos;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should add two numbers&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.add(33, 11);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toBe(44).toBeA(&apos;number&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it (&apos;should square a number&apos;, () =&gt; &#123;</div><div class=\"line\">    var res = utils.square(3);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toBe(9).toBeA(&apos;number&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it (&apos;should expect some values&apos;, () =&gt; &#123;</div><div class=\"line\">    expect(12).toNotBe(12);</div><div class=\"line\">    expect(&#123;name: &apos;andrew&apos;&#125;).toNotEqual(&#123;name: &apos;Andrew&apos;&#125;);</div><div class=\"line\">    expect([2, 3, 4]).toExclude(1);</div><div class=\"line\">    expect(&#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        age: 25,</div><div class=\"line\">        location: &apos;Philadelphia&apos;</div><div class=\"line\">    &#125;).toExclude(&#123;</div><div class=\"line\">        age: 23</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 utils/utils.js 新增 module</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.setName = (user, fullName) =&gt; &#123;</div><div class=\"line\">    var names = fullName.split(&apos; &apos;);</div><div class=\"line\">    user.firstName = names[0];</div><div class=\"line\">    user.lastName = names[1];</div><div class=\"line\">    return user;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>用 expect 確認回傳的物件是正確值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// should verify first and last names are set</div><div class=\"line\">// assert it includes firstName and lastName with proper values</div><div class=\"line\">it (&apos;should set firstName and lastName&apos;, () =&gt; &#123;</div><div class=\"line\">    var user = &#123;location: &apos;Philadelphia&apos;, age: 25&#125;;</div><div class=\"line\">    var res = utils.setName(user, &apos;Andrew Mead&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toInclude(&#123;</div><div class=\"line\">        firstName: &apos;Andrew&apos;,</div><div class=\"line\">        lastName: &apos;Mead&apos;,</div><div class=\"line\">        age: 25</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試非同步式程式碼</h4>\n<ol>\n<li>在 utils/utils.js 新增一個 asyncAdd</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.asyncAdd = (a, b, callback) =&gt; &#123;</div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">        callback(a + b);</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 utils/utils.test.js 測試 asyncAdd，這邊一定要使用 done，這樣才知道他是非同步，會等完成再執行 expect</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should async add two numbers&apos;, (done) =&gt; &#123;</div><div class=\"line\">    utils.asyncAdd(4, 3, (sum) =&gt; &#123;</div><div class=\"line\">        expect(sum).toBe(7).toBeA(&apos;number&apos;);</div><div class=\"line\">        done();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 utils/utils.js 新增一個 asyncSquare</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.asyncSquare = (x, callback) =&gt; &#123;</div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">        callback(x * x);</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 utils/utils.test.js 測試 asyncSqure</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should async square a number&apos;, (done) =&gt; &#123;</div><div class=\"line\">    utils.asyncSquare(5, (res) =&gt; &#123;</div><div class=\"line\">        expect(res).toBe(25).toBeA(&apos;number&apos;);</div><div class=\"line\">        done();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 Express 應用</h4>\n<ol>\n<li>安裝 Express<br>\n<code>npm i express@4.14.0 --save</code></li>\n<li>新增 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;Hello world!&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>執行 server<br>\n<code>node server/server.js</code></li>\n<li>去瀏覽器輸入 <code>http://localhost:3000/</code> 就會看到 Hello world!</li>\n<li><a href=\"https://github.com/visionmedia/supertest\" target=\"_blank\" rel=\"external\">SuperTest</a></li>\n<li><code>npm i supertest@2.0.0 --save-dev</code></li>\n<li>修改 server/server.js 輸出內容讓其它地方可用<br>\n<code>module.exports.app = app;</code></li>\n<li>新增 server/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = require(&apos;./server&apos;).app;</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return hello world response&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(&apos;/&apos;)</div><div class=\"line\">        .expect(&apos;Hello world!&apos;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>引入 expect，用 expect 客製化測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = require(&apos;./server&apos;).app;</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return hello world response&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(&apos;/&apos;)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body).toInclude(&#123;</div><div class=\"line\">                error: &apos;Page not found.&apos;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>在 server/server.js 新增路由</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// GET /users</div><div class=\"line\">// Give users a name prop and age prop</div><div class=\"line\">app.get(&apos;/users&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send([&#123;</div><div class=\"line\">        name: &apos;Mike&apos;,</div><div class=\"line\">        age: 27</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        age: 25</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        name: &apos;Jen&apos;,</div><div class=\"line\">        age: 26</div><div class=\"line\">    &#125;]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>在 server/server.test.js 新增測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Make a new test</div><div class=\"line\">// assert 200</div><div class=\"line\">// Assert that you exist in users array</div><div class=\"line\">it(&apos;should return my user object&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .get(&apos;/users&apos;)</div><div class=\"line\">        .expect(200)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body).toInclude(&#123;</div><div class=\"line\">                name: &apos;Andrew&apos;,</div><div class=\"line\">                age: 25</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>使用 describe() 組織測試</h4>\n<ol>\n<li>修改 utils/utils.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">const utils = require(&apos;./utils&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Utils&apos;, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    describe(&apos;#add&apos;, () =&gt; &#123;</div><div class=\"line\">        it(&apos;should add two numbers&apos;, () =&gt; &#123;</div><div class=\"line\">            var res = utils.add(33, 11);</div><div class=\"line\"></div><div class=\"line\">            expect(res).toBe(44).toBeA(&apos;number&apos;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        it(&apos;should async add two numbers&apos;, (done) =&gt; &#123;</div><div class=\"line\">            utils.asyncAdd(4, 3, (sum) =&gt; &#123;</div><div class=\"line\">                expect(sum).toBe(7).toBeA(&apos;number&apos;);</div><div class=\"line\">                done();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it (&apos;should square a number&apos;, () =&gt; &#123;</div><div class=\"line\">        var res = utils.square(3);</div><div class=\"line\"></div><div class=\"line\">        expect(res).toBe(9).toBeA(&apos;number&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should async square a number&apos;, (done) =&gt; &#123;</div><div class=\"line\">        utils.asyncSquare(5, (res) =&gt; &#123;</div><div class=\"line\">            expect(res).toBe(25).toBeA(&apos;number&apos;);</div><div class=\"line\">            done();</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// should verify first and last names are set</div><div class=\"line\">// assert it includes firstName and lastName with proper values</div><div class=\"line\">it (&apos;should set firstName and lastName&apos;, () =&gt; &#123;</div><div class=\"line\">    var user = &#123;location: &apos;Philadelphia&apos;, age: 25&#125;;</div><div class=\"line\">    var res = utils.setName(user, &apos;Andrew Mead&apos;);</div><div class=\"line\"></div><div class=\"line\">    expect(res).toInclude(&#123;</div><div class=\"line\">        firstName: &apos;Andrew&apos;,</div><div class=\"line\">        lastName: &apos;Mead&apos;,</div><div class=\"line\">        age: 25</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// it (&apos;should expect some values&apos;, () =&gt; &#123;</div><div class=\"line\">    // expect(12).toNotBe(12);</div><div class=\"line\">    // expect(&#123;name: &apos;andrew&apos;&#125;).toNotEqual(&#123;name: &apos;Andrew&apos;&#125;);</div><div class=\"line\">    // expect([2, 3, 4]).toExclude(1);</div><div class=\"line\">    // expect(&#123;</div><div class=\"line\">    //     name: &apos;Andrew&apos;,</div><div class=\"line\">    //     age: 25,</div><div class=\"line\">    //     location: &apos;Philadelphia&apos;</div><div class=\"line\">    // &#125;).toExclude(&#123;</div><div class=\"line\">    //     age: 23</div><div class=\"line\">    // &#125;)</div><div class=\"line\">// &#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">var app = require(&apos;./server&apos;).app;</div><div class=\"line\"></div><div class=\"line\">// Server</div><div class=\"line\">    // GET /</div><div class=\"line\">        // some test case</div><div class=\"line\">    // GET /users</div><div class=\"line\">        // some test case</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Server&apos;, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    describe(&apos;GET /&apos;, () =&gt; &#123;</div><div class=\"line\">        it(&apos;should return hello world response&apos;, (done) =&gt; &#123;</div><div class=\"line\">            request(app)</div><div class=\"line\">                .get(&apos;/&apos;)</div><div class=\"line\">                .expect(404)</div><div class=\"line\">                .expect((res) =&gt; &#123;</div><div class=\"line\">                    expect(res.body).toInclude(&#123;</div><div class=\"line\">                        error: &apos;Page not found.&apos;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .end(done);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    describe(&apos;GET /users&apos;, () =&gt; &#123;</div><div class=\"line\">        // Make a new test</div><div class=\"line\">        // assert 200</div><div class=\"line\">        // Assert that you exist in users array</div><div class=\"line\">        it(&apos;should return my user object&apos;, (done) =&gt; &#123;</div><div class=\"line\">            request(app)</div><div class=\"line\">                .get(&apos;/users&apos;)</div><div class=\"line\">                .expect(200)</div><div class=\"line\">                .expect((res) =&gt; &#123;</div><div class=\"line\">                    expect(res.body).toInclude(&#123;</div><div class=\"line\">                        name: &apos;Andrew&apos;,</div><div class=\"line\">                        age: 25</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .end(done);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Test Spies</h4>\n<ol>\n<li>新增 spies/db.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports.saveUser = (user) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Saving the user&apos;, user);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 spies/app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var db = require(&apos;./db&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports.handleSignup = (email, password) =&gt; &#123;</div><div class=\"line\">    // Check if email already exists</div><div class=\"line\">    db.saveUser(&#123;email, password&#125;);</div><div class=\"line\">    // Save the user to the database</div><div class=\"line\">    // Send the welcome email</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 spies/app.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;App&apos;, () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should call the spy correctly&apos;, () =&gt; &#123;</div><div class=\"line\">        var spy = expect.createSpy();</div><div class=\"line\">        spy(&apos;Andrew&apos;, 25);</div><div class=\"line\">        expect(spy).toHaveBeenCalledWith(&apos;Andrew&apos;, 25);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>npm install rewire@2.5.2 --save-dev</code></li>\n<li>在 spies/app.test.js 使用 rewire 引入 app<br>\n<code>var app = rewire('./app');</code></li>\n<li>用 describe 將 rewire 單元測試分類在一起</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;App&apos;, () =&gt; &#123;</div><div class=\"line\">    var db = &#123;</div><div class=\"line\">        saveUser: expect.createSpy()</div><div class=\"line\">    &#125;;</div><div class=\"line\">    app.__set__(&apos;db&apos;, db);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should call saveUser with user object&apos;, () =&gt; &#123;</div><div class=\"line\">        var email = &apos;andrew@example.com&apos;;</div><div class=\"line\">        var password = &apos;123abc&apos;;</div><div class=\"line\"></div><div class=\"line\">        app.handleSignup(email, password);</div><div class=\"line\">        expect(db.saveUser).toHaveBeenCalledWith(&#123;email, password&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Nodejs 快速學習自我挑戰 Day6","thumbnail":["/images/learning/nodejs/nodejsday6.png"],"date":"2017-09-15T06:01:22.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday6.png\">\n\n***\n### MongoDB，Mongoose 和 REST APIs (Todo API)\n#### 安裝 MongoDB 和 Mongoose\n1. [下載 MongoDB](https://www.mongodb.com/download-center?jmp=nav#community)\n2. 將檔案解壓縮後，修改檔名為 mongo，然後移動到家目錄底下\n3. 在家目錄新增 mongo-data 的資料夾\n4. 啟動 server 並指定路徑`./mongod --dbpath ~/mongo-data`\n5. 新開分頁，執行 `./mongo`\n6. 寫入資料庫 `db.Todos.insert({text: 'File new node course'})`\n7. `db.Todos.find()` ，搜尋資料庫會發現剛剛輸入的資料\n8. [Robomongo](https://robomongo.org/)\n#### 建立 NoSQL Vocabulary\n1. SQL 有 table 結構，NoSQL 則是使用物件的形式 (Collection)\n2. SQL 每一筆資料稱為 Row/Record，NoSQL 則稱為 Document\n3. SQL 每一個欄位稱為 Column，NoSQL 則稱為 Field\n#### 連接 MongoDB 並寫入資料\n1. [MongoDB native](https://github.com/mongodb/node-mongodb-native)\n2. `mkdir node-todo-api`\n3. `npm init`\n4. `npm install mongodb@2.2.5 --save`\n5. 新增 playground/mongodb-connect.js\n```\nconst MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, db) => {\n    if (err) {\n        return console.log('Unable to connect to MongoDB server');\n    }\n    console.log('Connected to MongoDB server');\n\n    db.close();\n});\n```\n6. `node playground/mongodb-connect.js`\n7. 在 playground/mongodb-connect.js 插入一行\n```\ndb.collection('Todos').insertOne({\n        text: 'Something to do',\n        completed: false\n    }, (err, result) => {\n        if (err) {\n            return console.log('Unable to insert todo', err);\n        }\n        console.log(JSON.stringify(result.ops, undefined, 2));\n    });\n```\n8. `node playground/mongodb-connect.js`\n9. 在 playground/mongodb-connect.js 新增 Users 資料表，且新增 fields (name, age, location)\n```\n// Insert new doc into Users (name, age, location)\n    db.collection('Users').insertOne({\n        name: 'Andrew',\n        age: 25,\n        location: 'Philadelphia'\n    }, (err, result) => {\n        if (err) {\n            return console.log('Unable to insert User', err);\n        }\n        console.log(JSON.stringify(result.ops));\n    });\n```\n10. `node playground/mongodb-connect.js`\n#### ObjectId\n1. 將 `const MongoClient = require('mongodb').MongoClient;` 取代為 `const { MongoClient, ObjectID }  = require('mongodb');`\n#### 取得資料\n1. 直接在 Robo 裡面的 Todos 新增 document\n```\n{\n  text: \"Walk the dog\",\n  completed: false\n}\n```\n2. 複製 mongodb-connect.js 並新增為 mongodb-find.js\n```\nconst { MongoClient, ObjectID }  = require('mongodb');\n\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, db) => {\n    if (err) {\n        return console.log('Unable to connect to MongoDB server');\n    }\n    console.log('Connected to MongoDB server');\n\n    db.collection('Todos').find().toArray().then((docs) => {\n        console.log('Todos');\n        console.log(JSON.stringify(docs, undefined, 2));\n    }, (err) => {\n        console.log('Unable to fetch todos', err);\n    });\n\n    // db.close();\n});\n```\n3. `node playground/mongodb-find.js`\n4. `db.collection('Todos').find({completed: false}).toArray().then((docs) => {`\n5. 這樣就只會出現 false 的選項了 `node playground/mongodb-find.js`\n6. `db.collection('Todos').find({_id: new ObjectID('59bb791adf952c24d5ae60b7')})`\n7. 也可以用 id 的方式搜尋 `node playground/mongodb-find.js`\n8. 用計數的方式算出東西\n```\ndb.collection('Todos').find().count().then((count) => {\n    console.log(`Todos count: ${count}`);\n}, (err) => {\n    console.log('Unable to fetch todos', err);\n});\n```\n#### Deleting Document\n1. 一次刪除很多 deleteMany\n```\ndb.collection('Todos').deleteMany({text: 'Eat lunch'}).then((result) => {\n    console.log(result);\n});\n```\n2. 一次刪除一個 deleteOne\n```\ndb.collection('Todos').deleteOne({text: 'Eat lunch'}).then((result) => {\n    console.log(result);\n});\n```\n3. 選擇一個然後刪除，如果有多個一樣的，會自動選擇第一筆找到的 findOneAndDelete\n```\ndb.collection('Todos').findOneAndDelete({completed: false}).then((result) => {\n    console.log(result);\n});\n```\n#### 更新資料\n1. 更新 Todos，set 改變值，returnOriginal 設為 false 就是回傳值的時候，傳回更新後的值，預設為 true\n```\ndb.collection('Todos').findOneAndUpdate({\n    _id: new ObjectID('59bcaa59fd4847c2497a0104')\n}, {\n    $set: {\n        completed: true\n    }\n}, {\n    returnOriginal: false\n}).then((result) => {\n    console.log(result);\n});\n```\n2. 更新 Users，inc 設為 1 就是把值增加 1\n```\ndb.collection('Users').findOneAndUpdate({\n    _id: new ObjectID('59bb7a6630523c252369e2e4')\n}, {\n    $set: {\n        name: 'Andrew'\n    },\n    $inc: {\n        age: 1\n    }\n},{\n    returnOriginal: false\n}).then((result) => {\n    console.log(result);\n});\n```\n#### 設定 Mongoose\n1. [Mongoose 官方網站](http://mongoosejs.com/)\n2. `npm i mongoose@4.5.9 --save`\n3. 使用 Mongoose 寫入資料到 MongoDB\n```\nvar mongoose = require('mongoose');\n\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n\nvar Todo = mongoose.model('Todo', {\n    text: {\n        type: String\n    },\n    completed: {\n        type: Boolean\n    },\n    completedAt: {\n        type: Number\n    }\n});\n\nvar newTodo = new Todo({\n    text: 'Cook dinner'\n});\n\nnewTodo.save().then((doc) => {\n    console.log('Save todo', doc);\n}, (e) => {\n    console.log('Unable to save todo');\n});\n```\n4. 再寫入別的資料\n```\nvar otherTodo = new Todo({\n    text: 'Feed the cat',\n    completed: true,\n    completedAt: 123\n});\n\notherTodo.save().then((doc) => {\n    console.log(JSON.stringify(doc, undefined, 2));\n}, (e) => {\n    console.log('Unable to save', e);\n});\n```\n#### Validators，Types 和 Defaults\n1. 修改 server/server.js，新增 model，並設定驗證\n```\nvar User = mongoose.model('User', {\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1\n    }\n});\n```\n2. 插入物件並儲存\n```\nvar user = new User({\n    email: 'andrew@example.com     '\n});\n\nuser.save().then((doc) => {\n    console.log('User saved', doc);\n}, (e) => {\n    console.log('Unable to save user', e);\n});\n```\n3. 這個部分有一個很特別的地方，如果 type 設為 String，輸入數字或是布林值都會變成 text，並不會出錯。","source":"_posts/Nodejs-快速學習自我挑戰-Day6.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day6\nthumbnail:\n  - /images/learning/nodejs/nodejsday6.png\ndate: 2017-09-15 14:01:22\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday6.png\">\n\n***\n### MongoDB，Mongoose 和 REST APIs (Todo API)\n#### 安裝 MongoDB 和 Mongoose\n1. [下載 MongoDB](https://www.mongodb.com/download-center?jmp=nav#community)\n2. 將檔案解壓縮後，修改檔名為 mongo，然後移動到家目錄底下\n3. 在家目錄新增 mongo-data 的資料夾\n4. 啟動 server 並指定路徑`./mongod --dbpath ~/mongo-data`\n5. 新開分頁，執行 `./mongo`\n6. 寫入資料庫 `db.Todos.insert({text: 'File new node course'})`\n7. `db.Todos.find()` ，搜尋資料庫會發現剛剛輸入的資料\n8. [Robomongo](https://robomongo.org/)\n#### 建立 NoSQL Vocabulary\n1. SQL 有 table 結構，NoSQL 則是使用物件的形式 (Collection)\n2. SQL 每一筆資料稱為 Row/Record，NoSQL 則稱為 Document\n3. SQL 每一個欄位稱為 Column，NoSQL 則稱為 Field\n#### 連接 MongoDB 並寫入資料\n1. [MongoDB native](https://github.com/mongodb/node-mongodb-native)\n2. `mkdir node-todo-api`\n3. `npm init`\n4. `npm install mongodb@2.2.5 --save`\n5. 新增 playground/mongodb-connect.js\n```\nconst MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, db) => {\n    if (err) {\n        return console.log('Unable to connect to MongoDB server');\n    }\n    console.log('Connected to MongoDB server');\n\n    db.close();\n});\n```\n6. `node playground/mongodb-connect.js`\n7. 在 playground/mongodb-connect.js 插入一行\n```\ndb.collection('Todos').insertOne({\n        text: 'Something to do',\n        completed: false\n    }, (err, result) => {\n        if (err) {\n            return console.log('Unable to insert todo', err);\n        }\n        console.log(JSON.stringify(result.ops, undefined, 2));\n    });\n```\n8. `node playground/mongodb-connect.js`\n9. 在 playground/mongodb-connect.js 新增 Users 資料表，且新增 fields (name, age, location)\n```\n// Insert new doc into Users (name, age, location)\n    db.collection('Users').insertOne({\n        name: 'Andrew',\n        age: 25,\n        location: 'Philadelphia'\n    }, (err, result) => {\n        if (err) {\n            return console.log('Unable to insert User', err);\n        }\n        console.log(JSON.stringify(result.ops));\n    });\n```\n10. `node playground/mongodb-connect.js`\n#### ObjectId\n1. 將 `const MongoClient = require('mongodb').MongoClient;` 取代為 `const { MongoClient, ObjectID }  = require('mongodb');`\n#### 取得資料\n1. 直接在 Robo 裡面的 Todos 新增 document\n```\n{\n  text: \"Walk the dog\",\n  completed: false\n}\n```\n2. 複製 mongodb-connect.js 並新增為 mongodb-find.js\n```\nconst { MongoClient, ObjectID }  = require('mongodb');\n\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, db) => {\n    if (err) {\n        return console.log('Unable to connect to MongoDB server');\n    }\n    console.log('Connected to MongoDB server');\n\n    db.collection('Todos').find().toArray().then((docs) => {\n        console.log('Todos');\n        console.log(JSON.stringify(docs, undefined, 2));\n    }, (err) => {\n        console.log('Unable to fetch todos', err);\n    });\n\n    // db.close();\n});\n```\n3. `node playground/mongodb-find.js`\n4. `db.collection('Todos').find({completed: false}).toArray().then((docs) => {`\n5. 這樣就只會出現 false 的選項了 `node playground/mongodb-find.js`\n6. `db.collection('Todos').find({_id: new ObjectID('59bb791adf952c24d5ae60b7')})`\n7. 也可以用 id 的方式搜尋 `node playground/mongodb-find.js`\n8. 用計數的方式算出東西\n```\ndb.collection('Todos').find().count().then((count) => {\n    console.log(`Todos count: ${count}`);\n}, (err) => {\n    console.log('Unable to fetch todos', err);\n});\n```\n#### Deleting Document\n1. 一次刪除很多 deleteMany\n```\ndb.collection('Todos').deleteMany({text: 'Eat lunch'}).then((result) => {\n    console.log(result);\n});\n```\n2. 一次刪除一個 deleteOne\n```\ndb.collection('Todos').deleteOne({text: 'Eat lunch'}).then((result) => {\n    console.log(result);\n});\n```\n3. 選擇一個然後刪除，如果有多個一樣的，會自動選擇第一筆找到的 findOneAndDelete\n```\ndb.collection('Todos').findOneAndDelete({completed: false}).then((result) => {\n    console.log(result);\n});\n```\n#### 更新資料\n1. 更新 Todos，set 改變值，returnOriginal 設為 false 就是回傳值的時候，傳回更新後的值，預設為 true\n```\ndb.collection('Todos').findOneAndUpdate({\n    _id: new ObjectID('59bcaa59fd4847c2497a0104')\n}, {\n    $set: {\n        completed: true\n    }\n}, {\n    returnOriginal: false\n}).then((result) => {\n    console.log(result);\n});\n```\n2. 更新 Users，inc 設為 1 就是把值增加 1\n```\ndb.collection('Users').findOneAndUpdate({\n    _id: new ObjectID('59bb7a6630523c252369e2e4')\n}, {\n    $set: {\n        name: 'Andrew'\n    },\n    $inc: {\n        age: 1\n    }\n},{\n    returnOriginal: false\n}).then((result) => {\n    console.log(result);\n});\n```\n#### 設定 Mongoose\n1. [Mongoose 官方網站](http://mongoosejs.com/)\n2. `npm i mongoose@4.5.9 --save`\n3. 使用 Mongoose 寫入資料到 MongoDB\n```\nvar mongoose = require('mongoose');\n\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n\nvar Todo = mongoose.model('Todo', {\n    text: {\n        type: String\n    },\n    completed: {\n        type: Boolean\n    },\n    completedAt: {\n        type: Number\n    }\n});\n\nvar newTodo = new Todo({\n    text: 'Cook dinner'\n});\n\nnewTodo.save().then((doc) => {\n    console.log('Save todo', doc);\n}, (e) => {\n    console.log('Unable to save todo');\n});\n```\n4. 再寫入別的資料\n```\nvar otherTodo = new Todo({\n    text: 'Feed the cat',\n    completed: true,\n    completedAt: 123\n});\n\notherTodo.save().then((doc) => {\n    console.log(JSON.stringify(doc, undefined, 2));\n}, (e) => {\n    console.log('Unable to save', e);\n});\n```\n#### Validators，Types 和 Defaults\n1. 修改 server/server.js，新增 model，並設定驗證\n```\nvar User = mongoose.model('User', {\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1\n    }\n});\n```\n2. 插入物件並儲存\n```\nvar user = new User({\n    email: 'andrew@example.com     '\n});\n\nuser.save().then((doc) => {\n    console.log('User saved', doc);\n}, (e) => {\n    console.log('Unable to save user', e);\n});\n```\n3. 這個部分有一個很特別的地方，如果 type 設為 String，輸入數字或是布林值都會變成 text，並不會出錯。","slug":"Nodejs-快速學習自我挑戰-Day6","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxm00437ifa7zrydo71","content":"<img src=\"/images/learning/nodejs/nodejsday6.png\">\n<hr>\n<h3>MongoDB，Mongoose 和 REST APIs (Todo API)</h3>\n<h4>安裝 MongoDB 和 Mongoose</h4>\n<ol>\n<li><a href=\"https://www.mongodb.com/download-center?jmp=nav#community\" target=\"_blank\" rel=\"external\">下載 MongoDB</a></li>\n<li>將檔案解壓縮後，修改檔名為 mongo，然後移動到家目錄底下</li>\n<li>在家目錄新增 mongo-data 的資料夾</li>\n<li>啟動 server 並指定路徑<code>./mongod --dbpath ~/mongo-data</code></li>\n<li>新開分頁，執行 <code>./mongo</code></li>\n<li>寫入資料庫 <code>db.Todos.insert({text: 'File new node course'})</code></li>\n<li><code>db.Todos.find()</code> ，搜尋資料庫會發現剛剛輸入的資料</li>\n<li><a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"external\">Robomongo</a></li>\n</ol>\n<h4>建立 NoSQL Vocabulary</h4>\n<ol>\n<li>SQL 有 table 結構，NoSQL 則是使用物件的形式 (Collection)</li>\n<li>SQL 每一筆資料稱為 Row/Record，NoSQL 則稱為 Document</li>\n<li>SQL 每一個欄位稱為 Column，NoSQL 則稱為 Field</li>\n</ol>\n<h4>連接 MongoDB 並寫入資料</h4>\n<ol>\n<li><a href=\"https://github.com/mongodb/node-mongodb-native\" target=\"_blank\" rel=\"external\">MongoDB native</a></li>\n<li><code>mkdir node-todo-api</code></li>\n<li><code>npm init</code></li>\n<li><code>npm install mongodb@2.2.5 --save</code></li>\n<li>新增 playground/mongodb-connect.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const MongoClient = require(&apos;mongodb&apos;).MongoClient;</div><div class=\"line\"></div><div class=\"line\">MongoClient.connect(&apos;mongodb://localhost:27017/TodoApp&apos;, (err, db) =&gt; &#123;</div><div class=\"line\">    if (err) &#123;</div><div class=\"line\">        return console.log(&apos;Unable to connect to MongoDB server&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&apos;Connected to MongoDB server&apos;);</div><div class=\"line\"></div><div class=\"line\">    db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><code>node playground/mongodb-connect.js</code></li>\n<li>在 playground/mongodb-connect.js 插入一行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).insertOne(&#123;</div><div class=\"line\">        text: &apos;Something to do&apos;,</div><div class=\"line\">        completed: false</div><div class=\"line\">    &#125;, (err, result) =&gt; &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">            return console.log(&apos;Unable to insert todo&apos;, err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        console.log(JSON.stringify(result.ops, undefined, 2));</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><code>node playground/mongodb-connect.js</code></li>\n<li>在 playground/mongodb-connect.js 新增 Users 資料表，且新增 fields (name, age, location)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Insert new doc into Users (name, age, location)</div><div class=\"line\">    db.collection(&apos;Users&apos;).insertOne(&#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        age: 25,</div><div class=\"line\">        location: &apos;Philadelphia&apos;</div><div class=\"line\">    &#125;, (err, result) =&gt; &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">            return console.log(&apos;Unable to insert User&apos;, err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        console.log(JSON.stringify(result.ops));</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><code>node playground/mongodb-connect.js</code></li>\n</ol>\n<h4>ObjectId</h4>\n<ol>\n<li>將 <code>const MongoClient = require('mongodb').MongoClient;</code> 取代為 <code>const { MongoClient, ObjectID } = require('mongodb');</code></li>\n</ol>\n<h4>取得資料</h4>\n<ol>\n<li>直接在 Robo 裡面的 Todos 新增 document</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  text: &quot;Walk the dog&quot;,</div><div class=\"line\">  completed: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>複製 mongodb-connect.js 並新增為 mongodb-find.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123; MongoClient, ObjectID &#125;  = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">MongoClient.connect(&apos;mongodb://localhost:27017/TodoApp&apos;, (err, db) =&gt; &#123;</div><div class=\"line\">    if (err) &#123;</div><div class=\"line\">        return console.log(&apos;Unable to connect to MongoDB server&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&apos;Connected to MongoDB server&apos;);</div><div class=\"line\"></div><div class=\"line\">    db.collection(&apos;Todos&apos;).find().toArray().then((docs) =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Todos&apos;);</div><div class=\"line\">        console.log(JSON.stringify(docs, undefined, 2));</div><div class=\"line\">    &#125;, (err) =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Unable to fetch todos&apos;, err);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>node playground/mongodb-find.js</code></li>\n<li><code>db.collection('Todos').find({completed: false}).toArray().then((docs) =&gt; {</code></li>\n<li>這樣就只會出現 false 的選項了 <code>node playground/mongodb-find.js</code></li>\n<li><code>db.collection('Todos').find({_id: new ObjectID('59bb791adf952c24d5ae60b7')})</code></li>\n<li>也可以用 id 的方式搜尋 <code>node playground/mongodb-find.js</code></li>\n<li>用計數的方式算出東西</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).find().count().then((count) =&gt; &#123;</div><div class=\"line\">    console.log(`Todos count: $&#123;count&#125;`);</div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to fetch todos&apos;, err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Deleting Document</h4>\n<ol>\n<li>一次刪除很多 deleteMany</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).deleteMany(&#123;text: &apos;Eat lunch&apos;&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>一次刪除一個 deleteOne</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).deleteOne(&#123;text: &apos;Eat lunch&apos;&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>選擇一個然後刪除，如果有多個一樣的，會自動選擇第一筆找到的 findOneAndDelete</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).findOneAndDelete(&#123;completed: false&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>更新資料</h4>\n<ol>\n<li>更新 Todos，set 改變值，returnOriginal 設為 false 就是回傳值的時候，傳回更新後的值，預設為 true</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).findOneAndUpdate(&#123;</div><div class=\"line\">    _id: new ObjectID(&apos;59bcaa59fd4847c2497a0104&apos;)</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    $set: &#123;</div><div class=\"line\">        completed: true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    returnOriginal: false</div><div class=\"line\">&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>更新 Users，inc 設為 1 就是把值增加 1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Users&apos;).findOneAndUpdate(&#123;</div><div class=\"line\">    _id: new ObjectID(&apos;59bb7a6630523c252369e2e4&apos;)</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    $set: &#123;</div><div class=\"line\">        name: &apos;Andrew&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    $inc: &#123;</div><div class=\"line\">        age: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">    returnOriginal: false</div><div class=\"line\">&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>設定 Mongoose</h4>\n<ol>\n<li><a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"external\">Mongoose 官方網站</a></li>\n<li><code>npm i mongoose@4.5.9 --save</code></li>\n<li>使用 Mongoose 寫入資料到 MongoDB</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">mongoose.Promise = global.Promise;</div><div class=\"line\">mongoose.connect(&apos;mongodb://localhost:27017/TodoApp&apos;);</div><div class=\"line\"></div><div class=\"line\">var Todo = mongoose.model(&apos;Todo&apos;, &#123;</div><div class=\"line\">    text: &#123;</div><div class=\"line\">        type: String</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completed: &#123;</div><div class=\"line\">        type: Boolean</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completedAt: &#123;</div><div class=\"line\">        type: Number</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var newTodo = new Todo(&#123;</div><div class=\"line\">    text: &apos;Cook dinner&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">newTodo.save().then((doc) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Save todo&apos;, doc);</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to save todo&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>再寫入別的資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var otherTodo = new Todo(&#123;</div><div class=\"line\">    text: &apos;Feed the cat&apos;,</div><div class=\"line\">    completed: true,</div><div class=\"line\">    completedAt: 123</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">otherTodo.save().then((doc) =&gt; &#123;</div><div class=\"line\">    console.log(JSON.stringify(doc, undefined, 2));</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to save&apos;, e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Validators，Types 和 Defaults</h4>\n<ol>\n<li>修改 server/server.js，新增 model，並設定驗證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var User = mongoose.model(&apos;User&apos;, &#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>插入物件並儲存</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var user = new User(&#123;</div><div class=\"line\">    email: &apos;andrew@example.com     &apos;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">user.save().then((doc) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;User saved&apos;, doc);</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to save user&apos;, e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>這個部分有一個很特別的地方，如果 type 設為 String，輸入數字或是布林值都會變成 text，並不會出錯。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday6.png\">\n<hr>\n<h3>MongoDB，Mongoose 和 REST APIs (Todo API)</h3>\n<h4>安裝 MongoDB 和 Mongoose</h4>\n<ol>\n<li><a href=\"https://www.mongodb.com/download-center?jmp=nav#community\" target=\"_blank\" rel=\"external\">下載 MongoDB</a></li>\n<li>將檔案解壓縮後，修改檔名為 mongo，然後移動到家目錄底下</li>\n<li>在家目錄新增 mongo-data 的資料夾</li>\n<li>啟動 server 並指定路徑<code>./mongod --dbpath ~/mongo-data</code></li>\n<li>新開分頁，執行 <code>./mongo</code></li>\n<li>寫入資料庫 <code>db.Todos.insert({text: 'File new node course'})</code></li>\n<li><code>db.Todos.find()</code> ，搜尋資料庫會發現剛剛輸入的資料</li>\n<li><a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"external\">Robomongo</a></li>\n</ol>\n<h4>建立 NoSQL Vocabulary</h4>\n<ol>\n<li>SQL 有 table 結構，NoSQL 則是使用物件的形式 (Collection)</li>\n<li>SQL 每一筆資料稱為 Row/Record，NoSQL 則稱為 Document</li>\n<li>SQL 每一個欄位稱為 Column，NoSQL 則稱為 Field</li>\n</ol>\n<h4>連接 MongoDB 並寫入資料</h4>\n<ol>\n<li><a href=\"https://github.com/mongodb/node-mongodb-native\" target=\"_blank\" rel=\"external\">MongoDB native</a></li>\n<li><code>mkdir node-todo-api</code></li>\n<li><code>npm init</code></li>\n<li><code>npm install mongodb@2.2.5 --save</code></li>\n<li>新增 playground/mongodb-connect.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const MongoClient = require(&apos;mongodb&apos;).MongoClient;</div><div class=\"line\"></div><div class=\"line\">MongoClient.connect(&apos;mongodb://localhost:27017/TodoApp&apos;, (err, db) =&gt; &#123;</div><div class=\"line\">    if (err) &#123;</div><div class=\"line\">        return console.log(&apos;Unable to connect to MongoDB server&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&apos;Connected to MongoDB server&apos;);</div><div class=\"line\"></div><div class=\"line\">    db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><code>node playground/mongodb-connect.js</code></li>\n<li>在 playground/mongodb-connect.js 插入一行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).insertOne(&#123;</div><div class=\"line\">        text: &apos;Something to do&apos;,</div><div class=\"line\">        completed: false</div><div class=\"line\">    &#125;, (err, result) =&gt; &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">            return console.log(&apos;Unable to insert todo&apos;, err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        console.log(JSON.stringify(result.ops, undefined, 2));</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><code>node playground/mongodb-connect.js</code></li>\n<li>在 playground/mongodb-connect.js 新增 Users 資料表，且新增 fields (name, age, location)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Insert new doc into Users (name, age, location)</div><div class=\"line\">    db.collection(&apos;Users&apos;).insertOne(&#123;</div><div class=\"line\">        name: &apos;Andrew&apos;,</div><div class=\"line\">        age: 25,</div><div class=\"line\">        location: &apos;Philadelphia&apos;</div><div class=\"line\">    &#125;, (err, result) =&gt; &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">            return console.log(&apos;Unable to insert User&apos;, err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        console.log(JSON.stringify(result.ops));</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><code>node playground/mongodb-connect.js</code></li>\n</ol>\n<h4>ObjectId</h4>\n<ol>\n<li>將 <code>const MongoClient = require('mongodb').MongoClient;</code> 取代為 <code>const { MongoClient, ObjectID } = require('mongodb');</code></li>\n</ol>\n<h4>取得資料</h4>\n<ol>\n<li>直接在 Robo 裡面的 Todos 新增 document</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  text: &quot;Walk the dog&quot;,</div><div class=\"line\">  completed: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>複製 mongodb-connect.js 並新增為 mongodb-find.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123; MongoClient, ObjectID &#125;  = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">MongoClient.connect(&apos;mongodb://localhost:27017/TodoApp&apos;, (err, db) =&gt; &#123;</div><div class=\"line\">    if (err) &#123;</div><div class=\"line\">        return console.log(&apos;Unable to connect to MongoDB server&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&apos;Connected to MongoDB server&apos;);</div><div class=\"line\"></div><div class=\"line\">    db.collection(&apos;Todos&apos;).find().toArray().then((docs) =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Todos&apos;);</div><div class=\"line\">        console.log(JSON.stringify(docs, undefined, 2));</div><div class=\"line\">    &#125;, (err) =&gt; &#123;</div><div class=\"line\">        console.log(&apos;Unable to fetch todos&apos;, err);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>node playground/mongodb-find.js</code></li>\n<li><code>db.collection('Todos').find({completed: false}).toArray().then((docs) =&gt; {</code></li>\n<li>這樣就只會出現 false 的選項了 <code>node playground/mongodb-find.js</code></li>\n<li><code>db.collection('Todos').find({_id: new ObjectID('59bb791adf952c24d5ae60b7')})</code></li>\n<li>也可以用 id 的方式搜尋 <code>node playground/mongodb-find.js</code></li>\n<li>用計數的方式算出東西</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).find().count().then((count) =&gt; &#123;</div><div class=\"line\">    console.log(`Todos count: $&#123;count&#125;`);</div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to fetch todos&apos;, err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Deleting Document</h4>\n<ol>\n<li>一次刪除很多 deleteMany</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).deleteMany(&#123;text: &apos;Eat lunch&apos;&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>一次刪除一個 deleteOne</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).deleteOne(&#123;text: &apos;Eat lunch&apos;&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>選擇一個然後刪除，如果有多個一樣的，會自動選擇第一筆找到的 findOneAndDelete</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).findOneAndDelete(&#123;completed: false&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>更新資料</h4>\n<ol>\n<li>更新 Todos，set 改變值，returnOriginal 設為 false 就是回傳值的時候，傳回更新後的值，預設為 true</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Todos&apos;).findOneAndUpdate(&#123;</div><div class=\"line\">    _id: new ObjectID(&apos;59bcaa59fd4847c2497a0104&apos;)</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    $set: &#123;</div><div class=\"line\">        completed: true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    returnOriginal: false</div><div class=\"line\">&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>更新 Users，inc 設為 1 就是把值增加 1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection(&apos;Users&apos;).findOneAndUpdate(&#123;</div><div class=\"line\">    _id: new ObjectID(&apos;59bb7a6630523c252369e2e4&apos;)</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    $set: &#123;</div><div class=\"line\">        name: &apos;Andrew&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    $inc: &#123;</div><div class=\"line\">        age: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">    returnOriginal: false</div><div class=\"line\">&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>設定 Mongoose</h4>\n<ol>\n<li><a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"external\">Mongoose 官方網站</a></li>\n<li><code>npm i mongoose@4.5.9 --save</code></li>\n<li>使用 Mongoose 寫入資料到 MongoDB</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">mongoose.Promise = global.Promise;</div><div class=\"line\">mongoose.connect(&apos;mongodb://localhost:27017/TodoApp&apos;);</div><div class=\"line\"></div><div class=\"line\">var Todo = mongoose.model(&apos;Todo&apos;, &#123;</div><div class=\"line\">    text: &#123;</div><div class=\"line\">        type: String</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completed: &#123;</div><div class=\"line\">        type: Boolean</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completedAt: &#123;</div><div class=\"line\">        type: Number</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var newTodo = new Todo(&#123;</div><div class=\"line\">    text: &apos;Cook dinner&apos;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">newTodo.save().then((doc) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Save todo&apos;, doc);</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to save todo&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>再寫入別的資料</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var otherTodo = new Todo(&#123;</div><div class=\"line\">    text: &apos;Feed the cat&apos;,</div><div class=\"line\">    completed: true,</div><div class=\"line\">    completedAt: 123</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">otherTodo.save().then((doc) =&gt; &#123;</div><div class=\"line\">    console.log(JSON.stringify(doc, undefined, 2));</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to save&apos;, e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Validators，Types 和 Defaults</h4>\n<ol>\n<li>修改 server/server.js，新增 model，並設定驗證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var User = mongoose.model(&apos;User&apos;, &#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>插入物件並儲存</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var user = new User(&#123;</div><div class=\"line\">    email: &apos;andrew@example.com     &apos;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">user.save().then((doc) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;User saved&apos;, doc);</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Unable to save user&apos;, e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>這個部分有一個很特別的地方，如果 type 設為 String，輸入數字或是布林值都會變成 text，並不會出錯。</li>\n</ol>\n"},{"title":"Nodejs 快速學習自我挑戰 Day7","thumbnail":["/images/learning/nodejs/nodejsday7.png"],"date":"2017-09-17T11:56:53.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday7.png\">\n\n***\n### MongoDB，Mongoose 和 REST APIs (Todo API)\n#### 安裝 Postman\n1. [Postman 官網](https://www.getpostman.com/)\n#### Resource Creation Endpoint - POST /todos\n1. 新增 server/db/mongoose.js\n```\nvar mongoose = require('mongoose');\n\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n\nmodule.exports = {mongoose};\n```\n2. 新增 server/models/todo.js\n```\nvar mongoose = require('mongoose');\n\nvar Todo = mongoose.model('Todo', {\n    text: {\n        type: String,\n        required: true,\n        minlength: 1,\n        trim: true\n    },\n    completed: {\n        type: Boolean,\n        default: false\n    },\n    completedAt: {\n        type: Number,\n        default: null\n    }\n});\n\nmodule.exports = {Todo};\n```\n3. 新增 server/models/user.js\n```\nvar mongoose = require('mongoose');\n\nvar User = mongoose.model('User', {\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1\n    }\n});\n\nmodule.exports = {User};\n```\n4. 剛剛把 server/server.js 的資料都搬到了其它資料夾，所以檔案簡化為\n```\nvar {mongoose}  = require('./db/mongoose');\nvar {Todo} = require('./models/todo');\nvar {User} = require('./models/user');\n```\n5. 安裝 body-parse 可以把 JSON 轉換為 object\n`npm i express@4.14.0 body-parser@1.15.2 --save`\n6. 在 server/server.js 引入 Library\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\n```\n7. 使用 express\n```\nvar app = express();\n\napp.use(bodyParser.json());\n\napp.post('/todos', (req, res) => {\n    console.log(req.body);\n});\n\napp.listen(3000, () => {\n    console.log('Started on port 3000');\n});\n```\n8. 在 Postman 新增 Post `http://localhost/todos`，選擇 Body，選擇 raw，選擇 JSON，並送出 Post\n```\n{\n\t\"text\": \"This is from postman\"\n}\n```\n9. 在 console 就會看到傳進去的資料\n10. [HTTP Status Codes：確認 HTTP 狀態碼](https://httpstatuses.com/)\n11. 修改 app.post，如果 OK 就寫入 MongoDB，並回傳 OK 的訊息，如果有問題就回傳 error。\n```\napp.post('/todos', (req, res) => {\n    var todo = new Todo({\n        text: req.body.text\n    });\n\n    todo.save().then((doc) => {\n        res.send(doc);\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n```\n#### 測試 POST /todos\n1. `npm i expect@1.20.2 mocha@3.0.2 nodemon@1.10.2 supertest@2.0.0 --save-dev`\n2. 把 server/server.js 輸出\n`module.exports = {app};`\n3. 新增 server/tests/server.test.js\n```\nconst expect = require('expect');\nconst request = require('supertest');\n\nconst {app} = require('./../server');\nconst {Todo} = require('./../models/todo');\n\nbeforeEach((done) => {\n    Todo.remove({}).then(() => done());\n});\n\ndescribe('POST /todos', () => {\n    it('should create a new todo', (done) => {\n        var text = 'Test todo text';\n\n        request(app)\n            .post('/todos')\n            .send({text})\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.text).toBe(text);\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                Todo.find().then((todos) => {\n                    expect(todos.length).toBe(1);\n                    expect(todos[0].text).toBe(text);\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n\n    it('should not create todo with invalid body data', (done) => {\n        request(app)\n            .post('/todos')\n            .send({})\n            .expect(400)\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n                Todo.find().then((todos) => {\n                    expect(todos.length).toBe(0);\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n});\n```\n#### List Resources - GET /todos\n1. 在 server/server.js 新增 GET\n```\napp.get('/todos', (req, res) => {\n    Todo.find().then((todos) => {\n        res.send({todos});\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n```\n2. `node server/server.js`\n3. 去 Postman 測試\n    - 新增 GET http://localhost:3000/todos\n    - 右方 save as，新增一個新的 collection，Todo App，把指令加進去\n    - 再新增 POST http://localhost:3000/todos，選 raw，JSON，並寫入資料\n    - 也加入新的 collection\n#### 測試 GET /todos\n1. 修改 server/tests/server.test.js\n```\nconst todos = [{\n    text: 'First test todo'\n}, {\n    text: 'Second test todo'\n}];\n// 在測試每一筆的時候，插入兩筆\nbeforeEach((done) => {\n    Todo.remove({}).then(() => {\n        return Todo.insertMany(todos);\n    }).then(() => done());\n});\n```\n2. 第一個測試直接找 {text}\n`Todo.find({text}).then((todos) => {`\n3. 第二個測試改為兩筆\n`expect(todos.length).toBe(2);`\n4. 新增 GET 測試\n```\ndescribe('GET /todos', () => {\n    it('should get all todos', (done) => {\n        request(app)\n            .get('/todos')\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todos.length).toBe(2);\n            })\n            .end(done);\n    });\n});\n```\n#### Mongoose Queries 和 ID Validation\n1. 新增 playground/mongoose-queries.js\n```\nconst {ObjectID} = require('mongodb');\n\nconst {mongoose} = require('./../server/db/mongoose');\nconst {Todo} = require('./../server/models/todo');\nconst {User} = require('./../server/models/user');\n\nvar id = '59be9ceb9e82d91c669205a611';\n\nif (!ObjectID.isValid(id)) {\n    console.log('ID not valid');\n}\n\nTodo.find({\n    _id: id\n}).then((todos) => {\n    console.log('Todos', todos);\n});\n\nTodo.findOne({\n    _id: id\n}).then((todo) => {\n    console.log('Todo', todo);\n});\n\nTodo.findById(id).then((todo) => {\n    if (!todo) {\n        return console.log('Id not found');\n    }\n    console.log('Todo by id', todo);\n}).catch((e) => console.log(e));\n```\n2. `nodemon playground/mongoose-queries.js`\n3. 新增 query user\n```\nUser.findById('59be61a5c4e4cea95cfe65ea').then((user) => {\n    if (!user) {\n        return console.log('Unable to find user');\n    }\n\n    console.log(JSON.stringify(user, undefined, 2));\n}, (e) => {\n    console.log(e);\n});\n```\n#### 取得 individual Resource - GET /todos/:id\n1. 取得資料的思路\n```\n// Valid id using isValid\n    // 404 - send back empty send\n\n// findById\n    // success\n        // if todo - send it back\n        // if no todo - send back 404 with empty body\n    // error\n        // 400 - and send empty body back\n```\n2. 引入 ObjectId\n`var {ObjectID} = require('mongodb');`\n3. 取得 id\n```\napp.get('/todos/:id', (req, res) => {\n    var id = req.params.id;\n\n    if (!ObjectID.isValid(id)) {\n        return res.status(404).send();\n    }\n\n    Todo.findById(id).then((todo) => {\n        if (!todo) {\n            return res.status(404).send();\n        }\n\n        res.send({todo});\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n#### 測試 GET /todos/:id\n1. 在 server/tests/server.test.js 引入 ObjectId\n`const {ObjectID} = require('mongodb');`\n2. 在傳入的陣列新增 id\n```\nconst todos = [{\n    _id: new ObjectID(),\n    text: 'First test todo'\n}, {\n    _id: new ObjectID(),\n    text: 'Second test todo'\n}];\n```\n3. 寫測試\n```\ndescribe('GET /todo/:id', () => {\n    it('should return todo doc', (done) => {\n        request(app)\n            .get(`/todos/${todos[0]._id.toHexString()}`)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todo.text).toBe(todos[0].text);\n            })\n            .end(done);\n    });\n\n    it('should return 404 if todo not found', (done) => {\n        var hexId = new ObjectID().toHexString();\n\n        request(app)\n            .get(`/todos/${hexId}`)\n            .expect(404)\n            .end(done);\n    });\n\n    it('should return 404 for non-object ids', (done) => {\n        request(app)\n            .get('/todos/123abc')\n            .expect(404)\n            .end(done);\n    });\n});\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day7.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day7\nthumbnail:\n  - /images/learning/nodejs/nodejsday7.png\ndate: 2017-09-17 19:56:53\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday7.png\">\n\n***\n### MongoDB，Mongoose 和 REST APIs (Todo API)\n#### 安裝 Postman\n1. [Postman 官網](https://www.getpostman.com/)\n#### Resource Creation Endpoint - POST /todos\n1. 新增 server/db/mongoose.js\n```\nvar mongoose = require('mongoose');\n\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n\nmodule.exports = {mongoose};\n```\n2. 新增 server/models/todo.js\n```\nvar mongoose = require('mongoose');\n\nvar Todo = mongoose.model('Todo', {\n    text: {\n        type: String,\n        required: true,\n        minlength: 1,\n        trim: true\n    },\n    completed: {\n        type: Boolean,\n        default: false\n    },\n    completedAt: {\n        type: Number,\n        default: null\n    }\n});\n\nmodule.exports = {Todo};\n```\n3. 新增 server/models/user.js\n```\nvar mongoose = require('mongoose');\n\nvar User = mongoose.model('User', {\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1\n    }\n});\n\nmodule.exports = {User};\n```\n4. 剛剛把 server/server.js 的資料都搬到了其它資料夾，所以檔案簡化為\n```\nvar {mongoose}  = require('./db/mongoose');\nvar {Todo} = require('./models/todo');\nvar {User} = require('./models/user');\n```\n5. 安裝 body-parse 可以把 JSON 轉換為 object\n`npm i express@4.14.0 body-parser@1.15.2 --save`\n6. 在 server/server.js 引入 Library\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\n```\n7. 使用 express\n```\nvar app = express();\n\napp.use(bodyParser.json());\n\napp.post('/todos', (req, res) => {\n    console.log(req.body);\n});\n\napp.listen(3000, () => {\n    console.log('Started on port 3000');\n});\n```\n8. 在 Postman 新增 Post `http://localhost/todos`，選擇 Body，選擇 raw，選擇 JSON，並送出 Post\n```\n{\n\t\"text\": \"This is from postman\"\n}\n```\n9. 在 console 就會看到傳進去的資料\n10. [HTTP Status Codes：確認 HTTP 狀態碼](https://httpstatuses.com/)\n11. 修改 app.post，如果 OK 就寫入 MongoDB，並回傳 OK 的訊息，如果有問題就回傳 error。\n```\napp.post('/todos', (req, res) => {\n    var todo = new Todo({\n        text: req.body.text\n    });\n\n    todo.save().then((doc) => {\n        res.send(doc);\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n```\n#### 測試 POST /todos\n1. `npm i expect@1.20.2 mocha@3.0.2 nodemon@1.10.2 supertest@2.0.0 --save-dev`\n2. 把 server/server.js 輸出\n`module.exports = {app};`\n3. 新增 server/tests/server.test.js\n```\nconst expect = require('expect');\nconst request = require('supertest');\n\nconst {app} = require('./../server');\nconst {Todo} = require('./../models/todo');\n\nbeforeEach((done) => {\n    Todo.remove({}).then(() => done());\n});\n\ndescribe('POST /todos', () => {\n    it('should create a new todo', (done) => {\n        var text = 'Test todo text';\n\n        request(app)\n            .post('/todos')\n            .send({text})\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.text).toBe(text);\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                Todo.find().then((todos) => {\n                    expect(todos.length).toBe(1);\n                    expect(todos[0].text).toBe(text);\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n\n    it('should not create todo with invalid body data', (done) => {\n        request(app)\n            .post('/todos')\n            .send({})\n            .expect(400)\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n                Todo.find().then((todos) => {\n                    expect(todos.length).toBe(0);\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n});\n```\n#### List Resources - GET /todos\n1. 在 server/server.js 新增 GET\n```\napp.get('/todos', (req, res) => {\n    Todo.find().then((todos) => {\n        res.send({todos});\n    }, (e) => {\n        res.status(400).send(e);\n    });\n});\n```\n2. `node server/server.js`\n3. 去 Postman 測試\n    - 新增 GET http://localhost:3000/todos\n    - 右方 save as，新增一個新的 collection，Todo App，把指令加進去\n    - 再新增 POST http://localhost:3000/todos，選 raw，JSON，並寫入資料\n    - 也加入新的 collection\n#### 測試 GET /todos\n1. 修改 server/tests/server.test.js\n```\nconst todos = [{\n    text: 'First test todo'\n}, {\n    text: 'Second test todo'\n}];\n// 在測試每一筆的時候，插入兩筆\nbeforeEach((done) => {\n    Todo.remove({}).then(() => {\n        return Todo.insertMany(todos);\n    }).then(() => done());\n});\n```\n2. 第一個測試直接找 {text}\n`Todo.find({text}).then((todos) => {`\n3. 第二個測試改為兩筆\n`expect(todos.length).toBe(2);`\n4. 新增 GET 測試\n```\ndescribe('GET /todos', () => {\n    it('should get all todos', (done) => {\n        request(app)\n            .get('/todos')\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todos.length).toBe(2);\n            })\n            .end(done);\n    });\n});\n```\n#### Mongoose Queries 和 ID Validation\n1. 新增 playground/mongoose-queries.js\n```\nconst {ObjectID} = require('mongodb');\n\nconst {mongoose} = require('./../server/db/mongoose');\nconst {Todo} = require('./../server/models/todo');\nconst {User} = require('./../server/models/user');\n\nvar id = '59be9ceb9e82d91c669205a611';\n\nif (!ObjectID.isValid(id)) {\n    console.log('ID not valid');\n}\n\nTodo.find({\n    _id: id\n}).then((todos) => {\n    console.log('Todos', todos);\n});\n\nTodo.findOne({\n    _id: id\n}).then((todo) => {\n    console.log('Todo', todo);\n});\n\nTodo.findById(id).then((todo) => {\n    if (!todo) {\n        return console.log('Id not found');\n    }\n    console.log('Todo by id', todo);\n}).catch((e) => console.log(e));\n```\n2. `nodemon playground/mongoose-queries.js`\n3. 新增 query user\n```\nUser.findById('59be61a5c4e4cea95cfe65ea').then((user) => {\n    if (!user) {\n        return console.log('Unable to find user');\n    }\n\n    console.log(JSON.stringify(user, undefined, 2));\n}, (e) => {\n    console.log(e);\n});\n```\n#### 取得 individual Resource - GET /todos/:id\n1. 取得資料的思路\n```\n// Valid id using isValid\n    // 404 - send back empty send\n\n// findById\n    // success\n        // if todo - send it back\n        // if no todo - send back 404 with empty body\n    // error\n        // 400 - and send empty body back\n```\n2. 引入 ObjectId\n`var {ObjectID} = require('mongodb');`\n3. 取得 id\n```\napp.get('/todos/:id', (req, res) => {\n    var id = req.params.id;\n\n    if (!ObjectID.isValid(id)) {\n        return res.status(404).send();\n    }\n\n    Todo.findById(id).then((todo) => {\n        if (!todo) {\n            return res.status(404).send();\n        }\n\n        res.send({todo});\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n#### 測試 GET /todos/:id\n1. 在 server/tests/server.test.js 引入 ObjectId\n`const {ObjectID} = require('mongodb');`\n2. 在傳入的陣列新增 id\n```\nconst todos = [{\n    _id: new ObjectID(),\n    text: 'First test todo'\n}, {\n    _id: new ObjectID(),\n    text: 'Second test todo'\n}];\n```\n3. 寫測試\n```\ndescribe('GET /todo/:id', () => {\n    it('should return todo doc', (done) => {\n        request(app)\n            .get(`/todos/${todos[0]._id.toHexString()}`)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todo.text).toBe(todos[0].text);\n            })\n            .end(done);\n    });\n\n    it('should return 404 if todo not found', (done) => {\n        var hexId = new ObjectID().toHexString();\n\n        request(app)\n            .get(`/todos/${hexId}`)\n            .expect(404)\n            .end(done);\n    });\n\n    it('should return 404 for non-object ids', (done) => {\n        request(app)\n            .get('/todos/123abc')\n            .expect(404)\n            .end(done);\n    });\n});\n```","slug":"Nodejs-快速學習自我挑戰-Day7","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxo00467ifa0wctaggs","content":"<img src=\"/images/learning/nodejs/nodejsday7.png\">\n<hr>\n<h3>MongoDB，Mongoose 和 REST APIs (Todo API)</h3>\n<h4>安裝 Postman</h4>\n<ol>\n<li><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">Postman 官網</a></li>\n</ol>\n<h4>Resource Creation Endpoint - POST /todos</h4>\n<ol>\n<li>新增 server/db/mongoose.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">mongoose.Promise = global.Promise;</div><div class=\"line\">mongoose.connect(&apos;mongodb://localhost:27017/TodoApp&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;mongoose&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 server/models/todo.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">var Todo = mongoose.model(&apos;Todo&apos;, &#123;</div><div class=\"line\">    text: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        minlength: 1,</div><div class=\"line\">        trim: true</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completed: &#123;</div><div class=\"line\">        type: Boolean,</div><div class=\"line\">        default: false</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completedAt: &#123;</div><div class=\"line\">        type: Number,</div><div class=\"line\">        default: null</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;Todo&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 server/models/user.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">var User = mongoose.model(&apos;User&apos;, &#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;User&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>剛剛把 server/server.js 的資料都搬到了其它資料夾，所以檔案簡化為</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var &#123;mongoose&#125;  = require(&apos;./db/mongoose&apos;);</div><div class=\"line\">var &#123;Todo&#125; = require(&apos;./models/todo&apos;);</div><div class=\"line\">var &#123;User&#125; = require(&apos;./models/user&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>安裝 body-parse 可以把 JSON 轉換為 object<br>\n<code>npm i express@4.14.0 body-parser@1.15.2 --save</code></li>\n<li>在 server/server.js 引入 Library</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>使用 express</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(bodyParser.json());</div><div class=\"line\"></div><div class=\"line\">app.post(&apos;/todos&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    console.log(req.body);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000, () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Started on port 3000&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 Postman 新增 Post <code>http://localhost/todos</code>，選擇 Body，選擇 raw，選擇 JSON，並送出 Post</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;text&quot;: &quot;This is from postman&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 console 就會看到傳進去的資料</li>\n<li><a href=\"https://httpstatuses.com/\" target=\"_blank\" rel=\"external\">HTTP Status Codes：確認 HTTP 狀態碼</a></li>\n<li>修改 app.post，如果 OK 就寫入 MongoDB，並回傳 OK 的訊息，如果有問題就回傳 error。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/todos&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var todo = new Todo(&#123;</div><div class=\"line\">        text: req.body.text</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    todo.save().then((doc) =&gt; &#123;</div><div class=\"line\">        res.send(doc);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 POST /todos</h4>\n<ol>\n<li><code>npm i expect@1.20.2 mocha@3.0.2 nodemon@1.10.2 supertest@2.0.0 --save-dev</code></li>\n<li>把 server/server.js 輸出<br>\n<code>module.exports = {app};</code></li>\n<li>新增 server/tests/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;app&#125; = require(&apos;./../server&apos;);</div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../models/todo&apos;);</div><div class=\"line\"></div><div class=\"line\">beforeEach((done) =&gt; &#123;</div><div class=\"line\">    Todo.remove(&#123;&#125;).then(() =&gt; done());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;POST /todos&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should create a new todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var text = &apos;Test todo text&apos;;</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/todos&apos;)</div><div class=\"line\">            .send(&#123;text&#125;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.text).toBe(text);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                Todo.find().then((todos) =&gt; &#123;</div><div class=\"line\">                    expect(todos.length).toBe(1);</div><div class=\"line\">                    expect(todos[0].text).toBe(text);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should not create todo with invalid body data&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/todos&apos;)</div><div class=\"line\">            .send(&#123;&#125;)</div><div class=\"line\">            .expect(400)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\">                Todo.find().then((todos) =&gt; &#123;</div><div class=\"line\">                    expect(todos.length).toBe(0);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>List Resources - GET /todos</h4>\n<ol>\n<li>在 server/server.js 新增 GET</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/todos&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Todo.find().then((todos) =&gt; &#123;</div><div class=\"line\">        res.send(&#123;todos&#125;);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>node server/server.js</code></li>\n<li>去 Postman 測試\n<ul>\n<li>新增 GET <a href=\"http://localhost:3000/todos\" target=\"_blank\" rel=\"external\">http://localhost:3000/todos</a></li>\n<li>右方 save as，新增一個新的 collection，Todo App，把指令加進去</li>\n<li>再新增 POST <a href=\"http://localhost:3000/todos%EF%BC%8C%E9%81%B8\" target=\"_blank\" rel=\"external\">http://localhost:3000/todos，選</a> raw，JSON，並寫入資料</li>\n<li>也加入新的 collection</li>\n</ul>\n</li>\n</ol>\n<h4>測試 GET /todos</h4>\n<ol>\n<li>修改 server/tests/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    text: &apos;First test todo&apos;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    text: &apos;Second test todo&apos;</div><div class=\"line\">&#125;];</div><div class=\"line\">// 在測試每一筆的時候，插入兩筆</div><div class=\"line\">beforeEach((done) =&gt; &#123;</div><div class=\"line\">    Todo.remove(&#123;&#125;).then(() =&gt; &#123;</div><div class=\"line\">        return Todo.insertMany(todos);</div><div class=\"line\">    &#125;).then(() =&gt; done());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第一個測試直接找 {text}<br>\n<code>Todo.find({text}).then((todos) =&gt; {</code></li>\n<li>第二個測試改為兩筆<br>\n<code>expect(todos.length).toBe(2);</code></li>\n<li>新增 GET 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /todos&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should get all todos&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/todos&apos;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todos.length).toBe(2);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Mongoose Queries 和 ID Validation</h4>\n<ol>\n<li>新增 playground/mongoose-queries.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;mongoose&#125; = require(&apos;./../server/db/mongoose&apos;);</div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../server/models/todo&apos;);</div><div class=\"line\">const &#123;User&#125; = require(&apos;./../server/models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">var id = &apos;59be9ceb9e82d91c669205a611&apos;;</div><div class=\"line\"></div><div class=\"line\">if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">    console.log(&apos;ID not valid&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Todo.find(&#123;</div><div class=\"line\">    _id: id</div><div class=\"line\">&#125;).then((todos) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Todos&apos;, todos);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Todo.findOne(&#123;</div><div class=\"line\">    _id: id</div><div class=\"line\">&#125;).then((todo) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Todo&apos;, todo);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Todo.findById(id).then((todo) =&gt; &#123;</div><div class=\"line\">    if (!todo) &#123;</div><div class=\"line\">        return console.log(&apos;Id not found&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&apos;Todo by id&apos;, todo);</div><div class=\"line\">&#125;).catch((e) =&gt; console.log(e));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>nodemon playground/mongoose-queries.js</code></li>\n<li>新增 query user</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findById(&apos;59be61a5c4e4cea95cfe65ea&apos;).then((user) =&gt; &#123;</div><div class=\"line\">    if (!user) &#123;</div><div class=\"line\">        return console.log(&apos;Unable to find user&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    console.log(JSON.stringify(user, undefined, 2));</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>取得 individual Resource - GET /todos/:id</h4>\n<ol>\n<li>取得資料的思路</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Valid id using isValid</div><div class=\"line\">    // 404 - send back empty send</div><div class=\"line\"></div><div class=\"line\">// findById</div><div class=\"line\">    // success</div><div class=\"line\">        // if todo - send it back</div><div class=\"line\">        // if no todo - send back 404 with empty body</div><div class=\"line\">    // error</div><div class=\"line\">        // 400 - and send empty body back</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 ObjectId<br>\n<code>var {ObjectID} = require('mongodb');</code></li>\n<li>取得 id</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/todos/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var id = req.params.id;</div><div class=\"line\"></div><div class=\"line\">    if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">        return res.status(404).send();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Todo.findById(id).then((todo) =&gt; &#123;</div><div class=\"line\">        if (!todo) &#123;</div><div class=\"line\">            return res.status(404).send();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(&#123;todo&#125;);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 GET /todos/:id</h4>\n<ol>\n<li>在 server/tests/server.test.js 引入 ObjectId<br>\n<code>const {ObjectID} = require('mongodb');</code></li>\n<li>在傳入的陣列新增 id</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;First test todo&apos;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;Second test todo&apos;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>寫測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /todo/:id&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should return todo doc&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(`/todos/$&#123;todos[0]._id.toHexString()&#125;`)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todo.text).toBe(todos[0].text);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should return 404 if todo not found&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var hexId = new ObjectID().toHexString();</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">            .expect(404)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should return 404 for non-object ids&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/todos/123abc&apos;)</div><div class=\"line\">            .expect(404)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday7.png\">\n<hr>\n<h3>MongoDB，Mongoose 和 REST APIs (Todo API)</h3>\n<h4>安裝 Postman</h4>\n<ol>\n<li><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">Postman 官網</a></li>\n</ol>\n<h4>Resource Creation Endpoint - POST /todos</h4>\n<ol>\n<li>新增 server/db/mongoose.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">mongoose.Promise = global.Promise;</div><div class=\"line\">mongoose.connect(&apos;mongodb://localhost:27017/TodoApp&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;mongoose&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 server/models/todo.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">var Todo = mongoose.model(&apos;Todo&apos;, &#123;</div><div class=\"line\">    text: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        minlength: 1,</div><div class=\"line\">        trim: true</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completed: &#123;</div><div class=\"line\">        type: Boolean,</div><div class=\"line\">        default: false</div><div class=\"line\">    &#125;,</div><div class=\"line\">    completedAt: &#123;</div><div class=\"line\">        type: Number,</div><div class=\"line\">        default: null</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;Todo&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 server/models/user.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\"></div><div class=\"line\">var User = mongoose.model(&apos;User&apos;, &#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;User&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>剛剛把 server/server.js 的資料都搬到了其它資料夾，所以檔案簡化為</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var &#123;mongoose&#125;  = require(&apos;./db/mongoose&apos;);</div><div class=\"line\">var &#123;Todo&#125; = require(&apos;./models/todo&apos;);</div><div class=\"line\">var &#123;User&#125; = require(&apos;./models/user&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>安裝 body-parse 可以把 JSON 轉換為 object<br>\n<code>npm i express@4.14.0 body-parser@1.15.2 --save</code></li>\n<li>在 server/server.js 引入 Library</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>使用 express</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(bodyParser.json());</div><div class=\"line\"></div><div class=\"line\">app.post(&apos;/todos&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    console.log(req.body);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000, () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Started on port 3000&apos;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>在 Postman 新增 Post <code>http://localhost/todos</code>，選擇 Body，選擇 raw，選擇 JSON，並送出 Post</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;text&quot;: &quot;This is from postman&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 console 就會看到傳進去的資料</li>\n<li><a href=\"https://httpstatuses.com/\" target=\"_blank\" rel=\"external\">HTTP Status Codes：確認 HTTP 狀態碼</a></li>\n<li>修改 app.post，如果 OK 就寫入 MongoDB，並回傳 OK 的訊息，如果有問題就回傳 error。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/todos&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var todo = new Todo(&#123;</div><div class=\"line\">        text: req.body.text</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    todo.save().then((doc) =&gt; &#123;</div><div class=\"line\">        res.send(doc);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 POST /todos</h4>\n<ol>\n<li><code>npm i expect@1.20.2 mocha@3.0.2 nodemon@1.10.2 supertest@2.0.0 --save-dev</code></li>\n<li>把 server/server.js 輸出<br>\n<code>module.exports = {app};</code></li>\n<li>新增 server/tests/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">const expect = require(&apos;expect&apos;);</div><div class=\"line\">const request = require(&apos;supertest&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;app&#125; = require(&apos;./../server&apos;);</div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../models/todo&apos;);</div><div class=\"line\"></div><div class=\"line\">beforeEach((done) =&gt; &#123;</div><div class=\"line\">    Todo.remove(&#123;&#125;).then(() =&gt; done());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;POST /todos&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should create a new todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var text = &apos;Test todo text&apos;;</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/todos&apos;)</div><div class=\"line\">            .send(&#123;text&#125;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.text).toBe(text);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                Todo.find().then((todos) =&gt; &#123;</div><div class=\"line\">                    expect(todos.length).toBe(1);</div><div class=\"line\">                    expect(todos[0].text).toBe(text);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should not create todo with invalid body data&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/todos&apos;)</div><div class=\"line\">            .send(&#123;&#125;)</div><div class=\"line\">            .expect(400)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\">                Todo.find().then((todos) =&gt; &#123;</div><div class=\"line\">                    expect(todos.length).toBe(0);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>List Resources - GET /todos</h4>\n<ol>\n<li>在 server/server.js 新增 GET</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/todos&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    Todo.find().then((todos) =&gt; &#123;</div><div class=\"line\">        res.send(&#123;todos&#125;);</div><div class=\"line\">    &#125;, (e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>node server/server.js</code></li>\n<li>去 Postman 測試\n<ul>\n<li>新增 GET <a href=\"http://localhost:3000/todos\" target=\"_blank\" rel=\"external\">http://localhost:3000/todos</a></li>\n<li>右方 save as，新增一個新的 collection，Todo App，把指令加進去</li>\n<li>再新增 POST <a href=\"http://localhost:3000/todos%EF%BC%8C%E9%81%B8\" target=\"_blank\" rel=\"external\">http://localhost:3000/todos，選</a> raw，JSON，並寫入資料</li>\n<li>也加入新的 collection</li>\n</ul>\n</li>\n</ol>\n<h4>測試 GET /todos</h4>\n<ol>\n<li>修改 server/tests/server.test.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    text: &apos;First test todo&apos;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    text: &apos;Second test todo&apos;</div><div class=\"line\">&#125;];</div><div class=\"line\">// 在測試每一筆的時候，插入兩筆</div><div class=\"line\">beforeEach((done) =&gt; &#123;</div><div class=\"line\">    Todo.remove(&#123;&#125;).then(() =&gt; &#123;</div><div class=\"line\">        return Todo.insertMany(todos);</div><div class=\"line\">    &#125;).then(() =&gt; done());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第一個測試直接找 {text}<br>\n<code>Todo.find({text}).then((todos) =&gt; {</code></li>\n<li>第二個測試改為兩筆<br>\n<code>expect(todos.length).toBe(2);</code></li>\n<li>新增 GET 測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /todos&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should get all todos&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/todos&apos;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todos.length).toBe(2);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Mongoose Queries 和 ID Validation</h4>\n<ol>\n<li>新增 playground/mongoose-queries.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;mongoose&#125; = require(&apos;./../server/db/mongoose&apos;);</div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../server/models/todo&apos;);</div><div class=\"line\">const &#123;User&#125; = require(&apos;./../server/models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">var id = &apos;59be9ceb9e82d91c669205a611&apos;;</div><div class=\"line\"></div><div class=\"line\">if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">    console.log(&apos;ID not valid&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Todo.find(&#123;</div><div class=\"line\">    _id: id</div><div class=\"line\">&#125;).then((todos) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Todos&apos;, todos);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Todo.findOne(&#123;</div><div class=\"line\">    _id: id</div><div class=\"line\">&#125;).then((todo) =&gt; &#123;</div><div class=\"line\">    console.log(&apos;Todo&apos;, todo);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Todo.findById(id).then((todo) =&gt; &#123;</div><div class=\"line\">    if (!todo) &#123;</div><div class=\"line\">        return console.log(&apos;Id not found&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&apos;Todo by id&apos;, todo);</div><div class=\"line\">&#125;).catch((e) =&gt; console.log(e));</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>nodemon playground/mongoose-queries.js</code></li>\n<li>新增 query user</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findById(&apos;59be61a5c4e4cea95cfe65ea&apos;).then((user) =&gt; &#123;</div><div class=\"line\">    if (!user) &#123;</div><div class=\"line\">        return console.log(&apos;Unable to find user&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    console.log(JSON.stringify(user, undefined, 2));</div><div class=\"line\">&#125;, (e) =&gt; &#123;</div><div class=\"line\">    console.log(e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>取得 individual Resource - GET /todos/:id</h4>\n<ol>\n<li>取得資料的思路</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Valid id using isValid</div><div class=\"line\">    // 404 - send back empty send</div><div class=\"line\"></div><div class=\"line\">// findById</div><div class=\"line\">    // success</div><div class=\"line\">        // if todo - send it back</div><div class=\"line\">        // if no todo - send back 404 with empty body</div><div class=\"line\">    // error</div><div class=\"line\">        // 400 - and send empty body back</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 ObjectId<br>\n<code>var {ObjectID} = require('mongodb');</code></li>\n<li>取得 id</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/todos/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var id = req.params.id;</div><div class=\"line\"></div><div class=\"line\">    if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">        return res.status(404).send();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Todo.findById(id).then((todo) =&gt; &#123;</div><div class=\"line\">        if (!todo) &#123;</div><div class=\"line\">            return res.status(404).send();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(&#123;todo&#125;);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 GET /todos/:id</h4>\n<ol>\n<li>在 server/tests/server.test.js 引入 ObjectId<br>\n<code>const {ObjectID} = require('mongodb');</code></li>\n<li>在傳入的陣列新增 id</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;First test todo&apos;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;Second test todo&apos;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>寫測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /todo/:id&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should return todo doc&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(`/todos/$&#123;todos[0]._id.toHexString()&#125;`)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todo.text).toBe(todos[0].text);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should return 404 if todo not found&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var hexId = new ObjectID().toHexString();</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">            .expect(404)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should return 404 for non-object ids&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/todos/123abc&apos;)</div><div class=\"line\">            .expect(404)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Nodejs 快速學習自我挑戰 Day8","thumbnail":["/images/learning/nodejs/nodejsday8.png"],"date":"2017-09-18T17:30:30.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday8.png\">\n\n***\n### MongoDB，Mongoose 和 REST APIs (Todo API)\n#### 部署 API 到 Heroku\n1. 安裝 Heroku CLI\n`brew install heroku/brew/heroku`\n2. 在 server/server.js 新增 port 的設定\n`const port = process.env.PORT || 3000;`\n3. 修改 app.listen\n```\napp.listen(port, () => {\n    console.log(`Started up at port ${port}`);\n});\n```\n4. 在 package.json 新增 start 指令，並新增 engine\n```\n\"scripts\": {\n    \"start\": \"node server/server.js\",\n    \"test\": \"mocha server/**/*.test.js\",\n    \"test-watch\": \"nodemon --exec 'npm test'\"\n  },\n  \"engines\": {\n    \"node\": \"6.11.3\"\n  },\n```\n5. `heroku create`\n6. `heroku addons:create mongolab:sandbox`\n7. 可以取得 MongoDB URI `heroku config`\n8. 修改 server/db/mongoose.js\n`mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');`\n9. `git push heroku master`\n10. 如果應用發生問題，可以用以下指令確認 `heroku logs`\n#### Postman 環境\n1. 進去 Postman，右上角有 Management Environment，點進去之後，新增 Todo App Local 和 Todo App Heroku，分別設定 url 為 localhost:3000 和 Heroku 的網址\n2. 然後將網址都改為 {{url}} 的變數代替\n#### 刪除 Resource - DELETE /todos/:id\n1. 新增 playground/mongoose-remove.js\n```\nconst {ObjectID} = require('mongodb');\n\nconst {mongoose} = require('./../server/db/mongoose');\nconst {Todo} = require('./../server/models/todo');\nconst {User} = require('./../server/models/user');\n\n// 移除全部\nTodo.remove({}).then((result) => {\n    console.log(result);\n});\n\n// Todo.findOneAndRemove\nTodo.findOneAndRemove({_id: '59c0c37efd4847c2497a12a7'}).then((todo) => {\n    console.log(todo);\n});\n\n// Todo.findByIdAndRemove\nTodo.findByIdAndRemove('59c0c37efd4847c2497a12a7').then((todo) => {\n    console.log(todo);\n});\n```\n2. 在 server/server.js 新增 delete route\n```\napp.delete('/todos/:id', (req, res) => {\n    var id = req.params.id;\n\n    if (!ObjectID.isValid(id)) {\n        return res.status(404).send();\n    }\n\n    Todo.findByIdAndRemove(id).then((todo) => {\n        if (!todo) {\n            return res.status(404).send();\n        }\n\n        res.send({todo});\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n3. 使用 Postman 測試，並儲存\n#### 測試 DELETE /todos/:id\n1. 新增第一個測試，最後的部分是驗證資料是否被刪除\n```\ndescribe('DELETE /todos/:id', () => {\n    it('should remove a todo', (done) => {\n        var hexId = todos[1]._id.toHexString();\n\n        request(app)\n            .delete(`/todos/${hexId}`)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todo._id).toBe(hexId)\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                Todo.findById(hexId).then((todo) => {\n                    expect(todo).toNotExist();\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n});\n```\n2. 基本上做法跟 GET 差不多，複製 code，然後把 .get 改成 .delete 即可\n```\nit('should return 404 if todo not found', (done) => {\n    var hexId = new ObjectID().toHexString();\n\n    request(app)\n        .delete(`/todos/${hexId}`)\n        .expect(404)\n        .end(done);\n});\n\nit('should return 404 if object id is invalid', (done) => {\n    request(app)\n        .delete('/todos/123abc')\n        .expect(404)\n        .end(done);\n});\n```\n#### 更新 Resource - PATCH /todos/:id\n1. `npm i --save lodash@4.15.0`\n2. 修改 server/server.js，引入 lodash，將其它引入的資料用 const。\n```\nconst _ = require('lodash');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst {ObjectID} = require('mongodb');\n```\n3. 新增 patch，如果 completed = true，寫入日期，如果沒有，把 completed 設為 false 且 completedAt 設為 null\n```\napp.patch('/todos/:id', (req, res) => {\n    var id = req.params.id;\n    var body = _.pick(req.body, ['text', 'completed']);\n\n    if (!ObjectID.isValid(id)) {\n        return res.status(404).send();\n    }\n\n    if (_.isBoolean(body.completed) && body.completed ) {\n        body.completedAt = new Date().getTime();\n    } else {\n        body.completed = false;\n        body.completedAt = null;\n    }\n\n    Todo.findByIdAndUpdate(id, {$set: body}, {new: true}).then((todo) => {\n        if (!todo) {\n            return res.status(404).send();\n        }\n\n        res.send({todo});\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n4. 用 Postman 測試，傳入 JSON，本地端測試完，再用 Heroku\n```\n{\n\t\"completed\": true,\n\t\"text\": \"update from postman\"\n}\n```\n#### 測試 PATCH /todos/:id\n1. PATCH test 的設計邏輯\n```\ndescribe('PATCH /todos/:id', () => {\n    it('should update the todo', (done) => {\n        // grab id of first item\n        // update text, set completed true\n        // 200\n        // text is changed, completed is true, completedAt is a number .toBeA\n        \n    });\n    \n    it('should clear completedAt when todo is not completed', (done) => {\n        // grab id of second todo item\n        // update text, set completed to false\n        // 200\n        // text is changed, completed is false, completedAt is null .toNotExist\n    });\n});\n```\n2. 測試修改 completed 為 true\n```\nit('should update the todo', (done) => {\n    var hexId = todos[0]._id.toHexString();\n    var text = 'This should be the new text';\n\n    request(app)\n        .patch(`/todos/${hexId}`)\n        .send({\n            completed: true,\n            text\n        })\n        .expect(200)\n        .expect((res) => {\n            expect(res.body.todo.text).toBe(text);\n            expect(res.body.todo.completed).toBe(true);\n            expect(res.body.todo.completedAt).toBeA('number');\n        })\n        .end(done);\n});\n```\n3. 測試修改 completed 為 false\n```\nit('should clear completedAt when todo is not completed', (done) => {\n    var hexId = todos[1]._id.toHexString();\n    var text = 'This should be the new text!!';\n\n    request(app)\n        .patch(`/todos/${hexId}`)\n        .send({\n            completed: false,\n            text\n        })\n        .expect(200)\n        .expect((res) => {\n            expect(res.body.todo.text).toBe(text);\n            expect(res.body.todo.completed).toBe(false);\n            expect(res.body.todo.completedAt).toNotExist();\n        })\n        .end(done);\n});\n```\n#### 創建測試 Database\n1. 修改 package.json\n```\n\"scripts\": {\n  \"start\": \"node server/server.js\",\n  \"test\": \"export NODE_ENV=test || \\\"SET NODE_ENV=test\\\" && mocha server/**/*.test.js\",\n  \"test-watch\": \"nodemon --exec 'npm test'\"\n},\n```\n2. 修改 server/db/mongoose.js\n`mongoose.connect(process.env.MONGODB_URI);`\n3. 新增 server/config/config.js\n```\nvar env = process.env.NODE_ENV || 'development';\n\nif (env === 'development') {\n    process.env.PORT = 3000;\n    process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoApp';\n} else if (env === 'test') {\n    process.env.PORT = 3000;\n    process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoAppTest';\n}\n```\n4. 在 server/server.js 引入 config\n`require('./config/config');`\n5. `node server/server.js`，會進入 development 環境\n6. `npm test`，會進入 test 環境，會再新建一個資料庫\n### 安全和認證\n#### 建立 User Model\n1. `npm i validator@5.6.0 --save`\n2. 修改 server/models/user.js\n```\nconst mongoose = require('mongoose');\nconst validator = require('validator');\n\nvar User = mongoose.model('User', {\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{VALUE} is not a valid email'\n        }\n    },\n    password: {\n        type: String,\n        require: true,\n        minlength: 6,\n    },\n    tokens: [{\n        access: {\n            type: String,\n            require: true\n        },\n        token: {\n            type: String,\n            require: true\n        }\n    }]\n});\n\nmodule.exports = {User};\n```\n3. 修改 server/server.js\n```\napp.post('/users', (req, res) => {\n    var body = _.pick(req.body, ['email', 'password']);\n    var user = new User(body);\n\n    user.save().then((user) => {\n        res.send(user);\n    }).catch((e) => {\n        res.status(400).send(e);\n    });\n});\n```\n#### JWTs 和 Hashing\n1. `npm install crypto-js@3.1.6 --save`\n2. 新增 playground/hashing.js\n```\nconst {SHA256} = require('crypto-js');\n\nvar message = 'I am user number 3';\nvar hash = SHA256(message).toString();\n\nconsole.log(`Message: ${message}`);\nconsole.log(`Hash: ${hash}`);\n\nvar data = {\n    id: 4\n};\nvar token = {\n    data,\n    hash: SHA256(JSON.stringify(data) + 'somesecret').toString()\n};\n\nvar resultHash = SHA256(JSON.stringify(token.data) + 'somesecret').toString();\n\nif (resultHash === token.hash) {\n    console.log('Data was not changed');\n} else {\n    console.log('Data was changed. Do not trust!');\n}\n```\n3. 驗證 data 如果不同會跳出資料改變的訊息\n```\ntoken.data.id = 5;\ntoken.hash = SHA256(JSON.stringify(token.data)).toString();\n```\n4. `npm i jsonwebtoken@7.1.9 --save`\n5. [JWT 官方網站](https://jwt.io/)\n6. 使用 jwt 來進行驗證\n```\nconst jwt = require('jsonwebtoken');\n\nvar data = {\n    id: 10\n};\n\nvar token = jwt.sign(data, '123abc');\nconsole.log(token);\n\nvar decoded = jwt.verify(token, '123abc');\nconsole.log('decoded', decoded);\n```\n#### 產生 Auth Tokens 和 Setting Headers\n1. 修改 server/models/user.js\n```\nconst mongoose = require('mongoose');\nconst validator = require('validator');\nconst jwt = require('jsonwebtoken');\nconst _ = require('lodash');\n\nvar UserSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{VALUE} is not a valid email'\n        }\n    },\n    password: {\n        type: String,\n        require: true,\n        minlength: 6,\n    },\n    tokens: [{\n        access: {\n            type: String,\n            require: true\n        },\n        token: {\n            type: String,\n            require: true\n        }\n    }]\n});\n\nUserSchema.methods.toJSON = function () {\n    var user = this;\n    var userObject = user.toObject();\n\n    return _.pick(userObject, ['_id', 'email']);\n};\n\nUserSchema.methods.generateAuthToken = function () {\n    var user = this;\n    var access = 'auth';\n    var token = jwt.sign({_id: user._id.toHexString(), access}, 'abc123').toString();\n\n    user.tokens.push({access, token});\n\n    return user.save().then(() => {\n        return token;\n    });\n};\n\nvar User = mongoose.model('User', UserSchema);\n\nmodule.exports = {User};\n```\n2. 修改 server/server.js\n```\n// POST /users\napp.post('/users', (req, res) => {\n    var body = _.pick(req.body, ['email', 'password']);\n    var user = new User(body);\n\n    user.save().then((user) => {\n        return user.generateAuthToken();\n    }).then((token) => {\n        res.header('x-auth', token).send(user);\n    }).catch((e) => {\n        res.status(400).send(e);\n    });\n});\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day8.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day8\nthumbnail:\n  - /images/learning/nodejs/nodejsday8.png\ndate: 2017-09-19 01:30:30\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday8.png\">\n\n***\n### MongoDB，Mongoose 和 REST APIs (Todo API)\n#### 部署 API 到 Heroku\n1. 安裝 Heroku CLI\n`brew install heroku/brew/heroku`\n2. 在 server/server.js 新增 port 的設定\n`const port = process.env.PORT || 3000;`\n3. 修改 app.listen\n```\napp.listen(port, () => {\n    console.log(`Started up at port ${port}`);\n});\n```\n4. 在 package.json 新增 start 指令，並新增 engine\n```\n\"scripts\": {\n    \"start\": \"node server/server.js\",\n    \"test\": \"mocha server/**/*.test.js\",\n    \"test-watch\": \"nodemon --exec 'npm test'\"\n  },\n  \"engines\": {\n    \"node\": \"6.11.3\"\n  },\n```\n5. `heroku create`\n6. `heroku addons:create mongolab:sandbox`\n7. 可以取得 MongoDB URI `heroku config`\n8. 修改 server/db/mongoose.js\n`mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');`\n9. `git push heroku master`\n10. 如果應用發生問題，可以用以下指令確認 `heroku logs`\n#### Postman 環境\n1. 進去 Postman，右上角有 Management Environment，點進去之後，新增 Todo App Local 和 Todo App Heroku，分別設定 url 為 localhost:3000 和 Heroku 的網址\n2. 然後將網址都改為 {{url}} 的變數代替\n#### 刪除 Resource - DELETE /todos/:id\n1. 新增 playground/mongoose-remove.js\n```\nconst {ObjectID} = require('mongodb');\n\nconst {mongoose} = require('./../server/db/mongoose');\nconst {Todo} = require('./../server/models/todo');\nconst {User} = require('./../server/models/user');\n\n// 移除全部\nTodo.remove({}).then((result) => {\n    console.log(result);\n});\n\n// Todo.findOneAndRemove\nTodo.findOneAndRemove({_id: '59c0c37efd4847c2497a12a7'}).then((todo) => {\n    console.log(todo);\n});\n\n// Todo.findByIdAndRemove\nTodo.findByIdAndRemove('59c0c37efd4847c2497a12a7').then((todo) => {\n    console.log(todo);\n});\n```\n2. 在 server/server.js 新增 delete route\n```\napp.delete('/todos/:id', (req, res) => {\n    var id = req.params.id;\n\n    if (!ObjectID.isValid(id)) {\n        return res.status(404).send();\n    }\n\n    Todo.findByIdAndRemove(id).then((todo) => {\n        if (!todo) {\n            return res.status(404).send();\n        }\n\n        res.send({todo});\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n3. 使用 Postman 測試，並儲存\n#### 測試 DELETE /todos/:id\n1. 新增第一個測試，最後的部分是驗證資料是否被刪除\n```\ndescribe('DELETE /todos/:id', () => {\n    it('should remove a todo', (done) => {\n        var hexId = todos[1]._id.toHexString();\n\n        request(app)\n            .delete(`/todos/${hexId}`)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body.todo._id).toBe(hexId)\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                Todo.findById(hexId).then((todo) => {\n                    expect(todo).toNotExist();\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n});\n```\n2. 基本上做法跟 GET 差不多，複製 code，然後把 .get 改成 .delete 即可\n```\nit('should return 404 if todo not found', (done) => {\n    var hexId = new ObjectID().toHexString();\n\n    request(app)\n        .delete(`/todos/${hexId}`)\n        .expect(404)\n        .end(done);\n});\n\nit('should return 404 if object id is invalid', (done) => {\n    request(app)\n        .delete('/todos/123abc')\n        .expect(404)\n        .end(done);\n});\n```\n#### 更新 Resource - PATCH /todos/:id\n1. `npm i --save lodash@4.15.0`\n2. 修改 server/server.js，引入 lodash，將其它引入的資料用 const。\n```\nconst _ = require('lodash');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst {ObjectID} = require('mongodb');\n```\n3. 新增 patch，如果 completed = true，寫入日期，如果沒有，把 completed 設為 false 且 completedAt 設為 null\n```\napp.patch('/todos/:id', (req, res) => {\n    var id = req.params.id;\n    var body = _.pick(req.body, ['text', 'completed']);\n\n    if (!ObjectID.isValid(id)) {\n        return res.status(404).send();\n    }\n\n    if (_.isBoolean(body.completed) && body.completed ) {\n        body.completedAt = new Date().getTime();\n    } else {\n        body.completed = false;\n        body.completedAt = null;\n    }\n\n    Todo.findByIdAndUpdate(id, {$set: body}, {new: true}).then((todo) => {\n        if (!todo) {\n            return res.status(404).send();\n        }\n\n        res.send({todo});\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n4. 用 Postman 測試，傳入 JSON，本地端測試完，再用 Heroku\n```\n{\n\t\"completed\": true,\n\t\"text\": \"update from postman\"\n}\n```\n#### 測試 PATCH /todos/:id\n1. PATCH test 的設計邏輯\n```\ndescribe('PATCH /todos/:id', () => {\n    it('should update the todo', (done) => {\n        // grab id of first item\n        // update text, set completed true\n        // 200\n        // text is changed, completed is true, completedAt is a number .toBeA\n        \n    });\n    \n    it('should clear completedAt when todo is not completed', (done) => {\n        // grab id of second todo item\n        // update text, set completed to false\n        // 200\n        // text is changed, completed is false, completedAt is null .toNotExist\n    });\n});\n```\n2. 測試修改 completed 為 true\n```\nit('should update the todo', (done) => {\n    var hexId = todos[0]._id.toHexString();\n    var text = 'This should be the new text';\n\n    request(app)\n        .patch(`/todos/${hexId}`)\n        .send({\n            completed: true,\n            text\n        })\n        .expect(200)\n        .expect((res) => {\n            expect(res.body.todo.text).toBe(text);\n            expect(res.body.todo.completed).toBe(true);\n            expect(res.body.todo.completedAt).toBeA('number');\n        })\n        .end(done);\n});\n```\n3. 測試修改 completed 為 false\n```\nit('should clear completedAt when todo is not completed', (done) => {\n    var hexId = todos[1]._id.toHexString();\n    var text = 'This should be the new text!!';\n\n    request(app)\n        .patch(`/todos/${hexId}`)\n        .send({\n            completed: false,\n            text\n        })\n        .expect(200)\n        .expect((res) => {\n            expect(res.body.todo.text).toBe(text);\n            expect(res.body.todo.completed).toBe(false);\n            expect(res.body.todo.completedAt).toNotExist();\n        })\n        .end(done);\n});\n```\n#### 創建測試 Database\n1. 修改 package.json\n```\n\"scripts\": {\n  \"start\": \"node server/server.js\",\n  \"test\": \"export NODE_ENV=test || \\\"SET NODE_ENV=test\\\" && mocha server/**/*.test.js\",\n  \"test-watch\": \"nodemon --exec 'npm test'\"\n},\n```\n2. 修改 server/db/mongoose.js\n`mongoose.connect(process.env.MONGODB_URI);`\n3. 新增 server/config/config.js\n```\nvar env = process.env.NODE_ENV || 'development';\n\nif (env === 'development') {\n    process.env.PORT = 3000;\n    process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoApp';\n} else if (env === 'test') {\n    process.env.PORT = 3000;\n    process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoAppTest';\n}\n```\n4. 在 server/server.js 引入 config\n`require('./config/config');`\n5. `node server/server.js`，會進入 development 環境\n6. `npm test`，會進入 test 環境，會再新建一個資料庫\n### 安全和認證\n#### 建立 User Model\n1. `npm i validator@5.6.0 --save`\n2. 修改 server/models/user.js\n```\nconst mongoose = require('mongoose');\nconst validator = require('validator');\n\nvar User = mongoose.model('User', {\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{VALUE} is not a valid email'\n        }\n    },\n    password: {\n        type: String,\n        require: true,\n        minlength: 6,\n    },\n    tokens: [{\n        access: {\n            type: String,\n            require: true\n        },\n        token: {\n            type: String,\n            require: true\n        }\n    }]\n});\n\nmodule.exports = {User};\n```\n3. 修改 server/server.js\n```\napp.post('/users', (req, res) => {\n    var body = _.pick(req.body, ['email', 'password']);\n    var user = new User(body);\n\n    user.save().then((user) => {\n        res.send(user);\n    }).catch((e) => {\n        res.status(400).send(e);\n    });\n});\n```\n#### JWTs 和 Hashing\n1. `npm install crypto-js@3.1.6 --save`\n2. 新增 playground/hashing.js\n```\nconst {SHA256} = require('crypto-js');\n\nvar message = 'I am user number 3';\nvar hash = SHA256(message).toString();\n\nconsole.log(`Message: ${message}`);\nconsole.log(`Hash: ${hash}`);\n\nvar data = {\n    id: 4\n};\nvar token = {\n    data,\n    hash: SHA256(JSON.stringify(data) + 'somesecret').toString()\n};\n\nvar resultHash = SHA256(JSON.stringify(token.data) + 'somesecret').toString();\n\nif (resultHash === token.hash) {\n    console.log('Data was not changed');\n} else {\n    console.log('Data was changed. Do not trust!');\n}\n```\n3. 驗證 data 如果不同會跳出資料改變的訊息\n```\ntoken.data.id = 5;\ntoken.hash = SHA256(JSON.stringify(token.data)).toString();\n```\n4. `npm i jsonwebtoken@7.1.9 --save`\n5. [JWT 官方網站](https://jwt.io/)\n6. 使用 jwt 來進行驗證\n```\nconst jwt = require('jsonwebtoken');\n\nvar data = {\n    id: 10\n};\n\nvar token = jwt.sign(data, '123abc');\nconsole.log(token);\n\nvar decoded = jwt.verify(token, '123abc');\nconsole.log('decoded', decoded);\n```\n#### 產生 Auth Tokens 和 Setting Headers\n1. 修改 server/models/user.js\n```\nconst mongoose = require('mongoose');\nconst validator = require('validator');\nconst jwt = require('jsonwebtoken');\nconst _ = require('lodash');\n\nvar UserSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{VALUE} is not a valid email'\n        }\n    },\n    password: {\n        type: String,\n        require: true,\n        minlength: 6,\n    },\n    tokens: [{\n        access: {\n            type: String,\n            require: true\n        },\n        token: {\n            type: String,\n            require: true\n        }\n    }]\n});\n\nUserSchema.methods.toJSON = function () {\n    var user = this;\n    var userObject = user.toObject();\n\n    return _.pick(userObject, ['_id', 'email']);\n};\n\nUserSchema.methods.generateAuthToken = function () {\n    var user = this;\n    var access = 'auth';\n    var token = jwt.sign({_id: user._id.toHexString(), access}, 'abc123').toString();\n\n    user.tokens.push({access, token});\n\n    return user.save().then(() => {\n        return token;\n    });\n};\n\nvar User = mongoose.model('User', UserSchema);\n\nmodule.exports = {User};\n```\n2. 修改 server/server.js\n```\n// POST /users\napp.post('/users', (req, res) => {\n    var body = _.pick(req.body, ['email', 'password']);\n    var user = new User(body);\n\n    user.save().then((user) => {\n        return user.generateAuthToken();\n    }).then((token) => {\n        res.header('x-auth', token).send(user);\n    }).catch((e) => {\n        res.status(400).send(e);\n    });\n});\n```","slug":"Nodejs-快速學習自我挑戰-Day8","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxo00497ifaba1xnjjs","content":"<img src=\"/images/learning/nodejs/nodejsday8.png\">\n<hr>\n<h3>MongoDB，Mongoose 和 REST APIs (Todo API)</h3>\n<h4>部署 API 到 Heroku</h4>\n<ol>\n<li>安裝 Heroku CLI<br>\n<code>brew install heroku/brew/heroku</code></li>\n<li>在 server/server.js 新增 port 的設定<br>\n<code>const port = process.env.PORT || 3000;</code></li>\n<li>修改 app.listen</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Started up at port $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 package.json 新增 start 指令，並新增 engine</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;start&quot;: &quot;node server/server.js&quot;,</div><div class=\"line\">    &quot;test&quot;: &quot;mocha server/**/*.test.js&quot;,</div><div class=\"line\">    &quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;engines&quot;: &#123;</div><div class=\"line\">    &quot;node&quot;: &quot;6.11.3&quot;</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><code>heroku create</code></li>\n<li><code>heroku addons:create mongolab:sandbox</code></li>\n<li>可以取得 MongoDB URI <code>heroku config</code></li>\n<li>修改 server/db/mongoose.js<br>\n<code>mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');</code></li>\n<li><code>git push heroku master</code></li>\n<li>如果應用發生問題，可以用以下指令確認 <code>heroku logs</code></li>\n</ol>\n<h4>Postman 環境</h4>\n<ol>\n<li>進去 Postman，右上角有 Management Environment，點進去之後，新增 Todo App Local 和 Todo App Heroku，分別設定 url 為 localhost:3000 和 Heroku 的網址</li>\n<li>然後將網址都改為  的變數代替</li>\n</ol>\n<h4>刪除 Resource - DELETE /todos/:id</h4>\n<ol>\n<li>新增 playground/mongoose-remove.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;mongoose&#125; = require(&apos;./../server/db/mongoose&apos;);</div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../server/models/todo&apos;);</div><div class=\"line\">const &#123;User&#125; = require(&apos;./../server/models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">// 移除全部</div><div class=\"line\">Todo.remove(&#123;&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Todo.findOneAndRemove</div><div class=\"line\">Todo.findOneAndRemove(&#123;_id: &apos;59c0c37efd4847c2497a12a7&apos;&#125;).then((todo) =&gt; &#123;</div><div class=\"line\">    console.log(todo);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Todo.findByIdAndRemove</div><div class=\"line\">Todo.findByIdAndRemove(&apos;59c0c37efd4847c2497a12a7&apos;).then((todo) =&gt; &#123;</div><div class=\"line\">    console.log(todo);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 新增 delete route</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.delete(&apos;/todos/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var id = req.params.id;</div><div class=\"line\"></div><div class=\"line\">    if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">        return res.status(404).send();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Todo.findByIdAndRemove(id).then((todo) =&gt; &#123;</div><div class=\"line\">        if (!todo) &#123;</div><div class=\"line\">            return res.status(404).send();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(&#123;todo&#125;);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 Postman 測試，並儲存</li>\n</ol>\n<h4>測試 DELETE /todos/:id</h4>\n<ol>\n<li>新增第一個測試，最後的部分是驗證資料是否被刪除</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;DELETE /todos/:id&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should remove a todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var hexId = todos[1]._id.toHexString();</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .delete(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todo._id).toBe(hexId)</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                Todo.findById(hexId).then((todo) =&gt; &#123;</div><div class=\"line\">                    expect(todo).toNotExist();</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基本上做法跟 GET 差不多，複製 code，然後把 .get 改成 .delete 即可</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should return 404 if todo not found&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = new ObjectID().toHexString();</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .delete(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return 404 if object id is invalid&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .delete(&apos;/todos/123abc&apos;)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>更新 Resource - PATCH /todos/:id</h4>\n<ol>\n<li><code>npm i --save lodash@4.15.0</code></li>\n<li>修改 server/server.js，引入 lodash，將其它引入的資料用 const。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">const _ = require(&apos;lodash&apos;);</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\">const bodyParser = require(&apos;body-parser&apos;);</div><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 patch，如果 completed = true，寫入日期，如果沒有，把 completed 設為 false 且 completedAt 設為 null</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.patch(&apos;/todos/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var id = req.params.id;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;text&apos;, &apos;completed&apos;]);</div><div class=\"line\"></div><div class=\"line\">    if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">        return res.status(404).send();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (_.isBoolean(body.completed) &amp;&amp; body.completed ) &#123;</div><div class=\"line\">        body.completedAt = new Date().getTime();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        body.completed = false;</div><div class=\"line\">        body.completedAt = null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123;</div><div class=\"line\">        if (!todo) &#123;</div><div class=\"line\">            return res.status(404).send();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(&#123;todo&#125;);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>用 Postman 測試，傳入 JSON，本地端測試完，再用 Heroku</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;completed&quot;: true,</div><div class=\"line\">\t&quot;text&quot;: &quot;update from postman&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>測試 PATCH /todos/:id</h4>\n<ol>\n<li>PATCH test 的設計邏輯</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;PATCH /todos/:id&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should update the todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">        // grab id of first item</div><div class=\"line\">        // update text, set completed true</div><div class=\"line\">        // 200</div><div class=\"line\">        // text is changed, completed is true, completedAt is a number .toBeA</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    it(&apos;should clear completedAt when todo is not completed&apos;, (done) =&gt; &#123;</div><div class=\"line\">        // grab id of second todo item</div><div class=\"line\">        // update text, set completed to false</div><div class=\"line\">        // 200</div><div class=\"line\">        // text is changed, completed is false, completedAt is null .toNotExist</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>測試修改 completed 為 true</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should update the todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = todos[0]._id.toHexString();</div><div class=\"line\">    var text = &apos;This should be the new text&apos;;</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .patch(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            completed: true,</div><div class=\"line\">            text</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(200)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body.todo.text).toBe(text);</div><div class=\"line\">            expect(res.body.todo.completed).toBe(true);</div><div class=\"line\">            expect(res.body.todo.completedAt).toBeA(&apos;number&apos;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>測試修改 completed 為 false</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should clear completedAt when todo is not completed&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = todos[1]._id.toHexString();</div><div class=\"line\">    var text = &apos;This should be the new text!!&apos;;</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .patch(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            completed: false,</div><div class=\"line\">            text</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(200)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body.todo.text).toBe(text);</div><div class=\"line\">            expect(res.body.todo.completed).toBe(false);</div><div class=\"line\">            expect(res.body.todo.completedAt).toNotExist();</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>創建測試 Database</h4>\n<ol>\n<li>修改 package.json</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;start&quot;: &quot;node server/server.js&quot;,</div><div class=\"line\">  &quot;test&quot;: &quot;export NODE_ENV=test || \\&quot;SET NODE_ENV=test\\&quot; &amp;&amp; mocha server/**/*.test.js&quot;,</div><div class=\"line\">  &quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/db/mongoose.js<br>\n<code>mongoose.connect(process.env.MONGODB_URI);</code></li>\n<li>新增 server/config/config.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var env = process.env.NODE_ENV || &apos;development&apos;;</div><div class=\"line\"></div><div class=\"line\">if (env === &apos;development&apos;) &#123;</div><div class=\"line\">    process.env.PORT = 3000;</div><div class=\"line\">    process.env.MONGODB_URI = &apos;mongodb://localhost:27017/TodoApp&apos;;</div><div class=\"line\">&#125; else if (env === &apos;test&apos;) &#123;</div><div class=\"line\">    process.env.PORT = 3000;</div><div class=\"line\">    process.env.MONGODB_URI = &apos;mongodb://localhost:27017/TodoAppTest&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/server.js 引入 config<br>\n<code>require('./config/config');</code></li>\n<li><code>node server/server.js</code>，會進入 development 環境</li>\n<li><code>npm test</code>，會進入 test 環境，會再新建一個資料庫</li>\n</ol>\n<h3>安全和認證</h3>\n<h4>建立 User Model</h4>\n<ol>\n<li><code>npm i validator@5.6.0 --save</code></li>\n<li>修改 server/models/user.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\">const validator = require(&apos;validator&apos;);</div><div class=\"line\"></div><div class=\"line\">var User = mongoose.model(&apos;User&apos;, &#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1,</div><div class=\"line\">        unique: true,</div><div class=\"line\">        validate: &#123;</div><div class=\"line\">            validator: validator.isEmail,</div><div class=\"line\">            message: &apos;&#123;VALUE&#125; is not a valid email&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    password: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        require: true,</div><div class=\"line\">        minlength: 6,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    tokens: [&#123;</div><div class=\"line\">        access: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        token: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;User&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/users&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]);</div><div class=\"line\">    var user = new User(body);</div><div class=\"line\"></div><div class=\"line\">    user.save().then((user) =&gt; &#123;</div><div class=\"line\">        res.send(user);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>JWTs 和 Hashing</h4>\n<ol>\n<li><code>npm install crypto-js@3.1.6 --save</code></li>\n<li>新增 playground/hashing.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;SHA256&#125; = require(&apos;crypto-js&apos;);</div><div class=\"line\"></div><div class=\"line\">var message = &apos;I am user number 3&apos;;</div><div class=\"line\">var hash = SHA256(message).toString();</div><div class=\"line\"></div><div class=\"line\">console.log(`Message: $&#123;message&#125;`);</div><div class=\"line\">console.log(`Hash: $&#123;hash&#125;`);</div><div class=\"line\"></div><div class=\"line\">var data = &#123;</div><div class=\"line\">    id: 4</div><div class=\"line\">&#125;;</div><div class=\"line\">var token = &#123;</div><div class=\"line\">    data,</div><div class=\"line\">    hash: SHA256(JSON.stringify(data) + &apos;somesecret&apos;).toString()</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var resultHash = SHA256(JSON.stringify(token.data) + &apos;somesecret&apos;).toString();</div><div class=\"line\"></div><div class=\"line\">if (resultHash === token.hash) &#123;</div><div class=\"line\">    console.log(&apos;Data was not changed&apos;);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    console.log(&apos;Data was changed. Do not trust!&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>驗證 data 如果不同會跳出資料改變的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">token.data.id = 5;</div><div class=\"line\">token.hash = SHA256(JSON.stringify(token.data)).toString();</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>npm i jsonwebtoken@7.1.9 --save</code></li>\n<li><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"external\">JWT 官方網站</a></li>\n<li>使用 jwt 來進行驗證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\"></div><div class=\"line\">var data = &#123;</div><div class=\"line\">    id: 10</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var token = jwt.sign(data, &apos;123abc&apos;);</div><div class=\"line\">console.log(token);</div><div class=\"line\"></div><div class=\"line\">var decoded = jwt.verify(token, &apos;123abc&apos;);</div><div class=\"line\">console.log(&apos;decoded&apos;, decoded);</div></pre></td></tr></table></figure>\n<h4>產生 Auth Tokens 和 Setting Headers</h4>\n<ol>\n<li>修改 server/models/user.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\">const validator = require(&apos;validator&apos;);</div><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\">const _ = require(&apos;lodash&apos;);</div><div class=\"line\"></div><div class=\"line\">var UserSchema = new mongoose.Schema(&#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1,</div><div class=\"line\">        unique: true,</div><div class=\"line\">        validate: &#123;</div><div class=\"line\">            validator: validator.isEmail,</div><div class=\"line\">            message: &apos;&#123;VALUE&#125; is not a valid email&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    password: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        require: true,</div><div class=\"line\">        minlength: 6,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    tokens: [&#123;</div><div class=\"line\">        access: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        token: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">UserSchema.methods.toJSON = function () &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\">    var userObject = user.toObject();</div><div class=\"line\"></div><div class=\"line\">    return _.pick(userObject, [&apos;_id&apos;, &apos;email&apos;]);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">UserSchema.methods.generateAuthToken = function () &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\">    var access = &apos;auth&apos;;</div><div class=\"line\">    var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, &apos;abc123&apos;).toString();</div><div class=\"line\"></div><div class=\"line\">    user.tokens.push(&#123;access, token&#125;);</div><div class=\"line\"></div><div class=\"line\">    return user.save().then(() =&gt; &#123;</div><div class=\"line\">        return token;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var User = mongoose.model(&apos;User&apos;, UserSchema);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;User&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// POST /users</div><div class=\"line\">app.post(&apos;/users&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]);</div><div class=\"line\">    var user = new User(body);</div><div class=\"line\"></div><div class=\"line\">    user.save().then((user) =&gt; &#123;</div><div class=\"line\">        return user.generateAuthToken();</div><div class=\"line\">    &#125;).then((token) =&gt; &#123;</div><div class=\"line\">        res.header(&apos;x-auth&apos;, token).send(user);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday8.png\">\n<hr>\n<h3>MongoDB，Mongoose 和 REST APIs (Todo API)</h3>\n<h4>部署 API 到 Heroku</h4>\n<ol>\n<li>安裝 Heroku CLI<br>\n<code>brew install heroku/brew/heroku</code></li>\n<li>在 server/server.js 新增 port 的設定<br>\n<code>const port = process.env.PORT || 3000;</code></li>\n<li>修改 app.listen</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.listen(port, () =&gt; &#123;</div><div class=\"line\">    console.log(`Started up at port $&#123;port&#125;`);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 package.json 新增 start 指令，並新增 engine</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;start&quot;: &quot;node server/server.js&quot;,</div><div class=\"line\">    &quot;test&quot;: &quot;mocha server/**/*.test.js&quot;,</div><div class=\"line\">    &quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;engines&quot;: &#123;</div><div class=\"line\">    &quot;node&quot;: &quot;6.11.3&quot;</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><code>heroku create</code></li>\n<li><code>heroku addons:create mongolab:sandbox</code></li>\n<li>可以取得 MongoDB URI <code>heroku config</code></li>\n<li>修改 server/db/mongoose.js<br>\n<code>mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');</code></li>\n<li><code>git push heroku master</code></li>\n<li>如果應用發生問題，可以用以下指令確認 <code>heroku logs</code></li>\n</ol>\n<h4>Postman 環境</h4>\n<ol>\n<li>進去 Postman，右上角有 Management Environment，點進去之後，新增 Todo App Local 和 Todo App Heroku，分別設定 url 為 localhost:3000 和 Heroku 的網址</li>\n<li>然後將網址都改為  的變數代替</li>\n</ol>\n<h4>刪除 Resource - DELETE /todos/:id</h4>\n<ol>\n<li>新增 playground/mongoose-remove.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;mongoose&#125; = require(&apos;./../server/db/mongoose&apos;);</div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../server/models/todo&apos;);</div><div class=\"line\">const &#123;User&#125; = require(&apos;./../server/models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">// 移除全部</div><div class=\"line\">Todo.remove(&#123;&#125;).then((result) =&gt; &#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Todo.findOneAndRemove</div><div class=\"line\">Todo.findOneAndRemove(&#123;_id: &apos;59c0c37efd4847c2497a12a7&apos;&#125;).then((todo) =&gt; &#123;</div><div class=\"line\">    console.log(todo);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Todo.findByIdAndRemove</div><div class=\"line\">Todo.findByIdAndRemove(&apos;59c0c37efd4847c2497a12a7&apos;).then((todo) =&gt; &#123;</div><div class=\"line\">    console.log(todo);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 新增 delete route</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.delete(&apos;/todos/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var id = req.params.id;</div><div class=\"line\"></div><div class=\"line\">    if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">        return res.status(404).send();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Todo.findByIdAndRemove(id).then((todo) =&gt; &#123;</div><div class=\"line\">        if (!todo) &#123;</div><div class=\"line\">            return res.status(404).send();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(&#123;todo&#125;);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 Postman 測試，並儲存</li>\n</ol>\n<h4>測試 DELETE /todos/:id</h4>\n<ol>\n<li>新增第一個測試，最後的部分是驗證資料是否被刪除</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;DELETE /todos/:id&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should remove a todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var hexId = todos[1]._id.toHexString();</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .delete(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body.todo._id).toBe(hexId)</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                Todo.findById(hexId).then((todo) =&gt; &#123;</div><div class=\"line\">                    expect(todo).toNotExist();</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基本上做法跟 GET 差不多，複製 code，然後把 .get 改成 .delete 即可</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should return 404 if todo not found&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = new ObjectID().toHexString();</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .delete(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should return 404 if object id is invalid&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .delete(&apos;/todos/123abc&apos;)</div><div class=\"line\">        .expect(404)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>更新 Resource - PATCH /todos/:id</h4>\n<ol>\n<li><code>npm i --save lodash@4.15.0</code></li>\n<li>修改 server/server.js，引入 lodash，將其它引入的資料用 const。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">const _ = require(&apos;lodash&apos;);</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\">const bodyParser = require(&apos;body-parser&apos;);</div><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 patch，如果 completed = true，寫入日期，如果沒有，把 completed 設為 false 且 completedAt 設為 null</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.patch(&apos;/todos/:id&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var id = req.params.id;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;text&apos;, &apos;completed&apos;]);</div><div class=\"line\"></div><div class=\"line\">    if (!ObjectID.isValid(id)) &#123;</div><div class=\"line\">        return res.status(404).send();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (_.isBoolean(body.completed) &amp;&amp; body.completed ) &#123;</div><div class=\"line\">        body.completedAt = new Date().getTime();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        body.completed = false;</div><div class=\"line\">        body.completedAt = null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123;</div><div class=\"line\">        if (!todo) &#123;</div><div class=\"line\">            return res.status(404).send();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(&#123;todo&#125;);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>用 Postman 測試，傳入 JSON，本地端測試完，再用 Heroku</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;completed&quot;: true,</div><div class=\"line\">\t&quot;text&quot;: &quot;update from postman&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>測試 PATCH /todos/:id</h4>\n<ol>\n<li>PATCH test 的設計邏輯</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;PATCH /todos/:id&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should update the todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">        // grab id of first item</div><div class=\"line\">        // update text, set completed true</div><div class=\"line\">        // 200</div><div class=\"line\">        // text is changed, completed is true, completedAt is a number .toBeA</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    it(&apos;should clear completedAt when todo is not completed&apos;, (done) =&gt; &#123;</div><div class=\"line\">        // grab id of second todo item</div><div class=\"line\">        // update text, set completed to false</div><div class=\"line\">        // 200</div><div class=\"line\">        // text is changed, completed is false, completedAt is null .toNotExist</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>測試修改 completed 為 true</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should update the todo&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = todos[0]._id.toHexString();</div><div class=\"line\">    var text = &apos;This should be the new text&apos;;</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .patch(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            completed: true,</div><div class=\"line\">            text</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(200)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body.todo.text).toBe(text);</div><div class=\"line\">            expect(res.body.todo.completed).toBe(true);</div><div class=\"line\">            expect(res.body.todo.completedAt).toBeA(&apos;number&apos;);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>測試修改 completed 為 false</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should clear completedAt when todo is not completed&apos;, (done) =&gt; &#123;</div><div class=\"line\">    var hexId = todos[1]._id.toHexString();</div><div class=\"line\">    var text = &apos;This should be the new text!!&apos;;</div><div class=\"line\"></div><div class=\"line\">    request(app)</div><div class=\"line\">        .patch(`/todos/$&#123;hexId&#125;`)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            completed: false,</div><div class=\"line\">            text</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(200)</div><div class=\"line\">        .expect((res) =&gt; &#123;</div><div class=\"line\">            expect(res.body.todo.text).toBe(text);</div><div class=\"line\">            expect(res.body.todo.completed).toBe(false);</div><div class=\"line\">            expect(res.body.todo.completedAt).toNotExist();</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .end(done);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>創建測試 Database</h4>\n<ol>\n<li>修改 package.json</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;start&quot;: &quot;node server/server.js&quot;,</div><div class=\"line\">  &quot;test&quot;: &quot;export NODE_ENV=test || \\&quot;SET NODE_ENV=test\\&quot; &amp;&amp; mocha server/**/*.test.js&quot;,</div><div class=\"line\">  &quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/db/mongoose.js<br>\n<code>mongoose.connect(process.env.MONGODB_URI);</code></li>\n<li>新增 server/config/config.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var env = process.env.NODE_ENV || &apos;development&apos;;</div><div class=\"line\"></div><div class=\"line\">if (env === &apos;development&apos;) &#123;</div><div class=\"line\">    process.env.PORT = 3000;</div><div class=\"line\">    process.env.MONGODB_URI = &apos;mongodb://localhost:27017/TodoApp&apos;;</div><div class=\"line\">&#125; else if (env === &apos;test&apos;) &#123;</div><div class=\"line\">    process.env.PORT = 3000;</div><div class=\"line\">    process.env.MONGODB_URI = &apos;mongodb://localhost:27017/TodoAppTest&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 server/server.js 引入 config<br>\n<code>require('./config/config');</code></li>\n<li><code>node server/server.js</code>，會進入 development 環境</li>\n<li><code>npm test</code>，會進入 test 環境，會再新建一個資料庫</li>\n</ol>\n<h3>安全和認證</h3>\n<h4>建立 User Model</h4>\n<ol>\n<li><code>npm i validator@5.6.0 --save</code></li>\n<li>修改 server/models/user.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\">const validator = require(&apos;validator&apos;);</div><div class=\"line\"></div><div class=\"line\">var User = mongoose.model(&apos;User&apos;, &#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1,</div><div class=\"line\">        unique: true,</div><div class=\"line\">        validate: &#123;</div><div class=\"line\">            validator: validator.isEmail,</div><div class=\"line\">            message: &apos;&#123;VALUE&#125; is not a valid email&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    password: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        require: true,</div><div class=\"line\">        minlength: 6,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    tokens: [&#123;</div><div class=\"line\">        access: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        token: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;User&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/users&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]);</div><div class=\"line\">    var user = new User(body);</div><div class=\"line\"></div><div class=\"line\">    user.save().then((user) =&gt; &#123;</div><div class=\"line\">        res.send(user);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>JWTs 和 Hashing</h4>\n<ol>\n<li><code>npm install crypto-js@3.1.6 --save</code></li>\n<li>新增 playground/hashing.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;SHA256&#125; = require(&apos;crypto-js&apos;);</div><div class=\"line\"></div><div class=\"line\">var message = &apos;I am user number 3&apos;;</div><div class=\"line\">var hash = SHA256(message).toString();</div><div class=\"line\"></div><div class=\"line\">console.log(`Message: $&#123;message&#125;`);</div><div class=\"line\">console.log(`Hash: $&#123;hash&#125;`);</div><div class=\"line\"></div><div class=\"line\">var data = &#123;</div><div class=\"line\">    id: 4</div><div class=\"line\">&#125;;</div><div class=\"line\">var token = &#123;</div><div class=\"line\">    data,</div><div class=\"line\">    hash: SHA256(JSON.stringify(data) + &apos;somesecret&apos;).toString()</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var resultHash = SHA256(JSON.stringify(token.data) + &apos;somesecret&apos;).toString();</div><div class=\"line\"></div><div class=\"line\">if (resultHash === token.hash) &#123;</div><div class=\"line\">    console.log(&apos;Data was not changed&apos;);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    console.log(&apos;Data was changed. Do not trust!&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>驗證 data 如果不同會跳出資料改變的訊息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">token.data.id = 5;</div><div class=\"line\">token.hash = SHA256(JSON.stringify(token.data)).toString();</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>npm i jsonwebtoken@7.1.9 --save</code></li>\n<li><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"external\">JWT 官方網站</a></li>\n<li>使用 jwt 來進行驗證</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\"></div><div class=\"line\">var data = &#123;</div><div class=\"line\">    id: 10</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var token = jwt.sign(data, &apos;123abc&apos;);</div><div class=\"line\">console.log(token);</div><div class=\"line\"></div><div class=\"line\">var decoded = jwt.verify(token, &apos;123abc&apos;);</div><div class=\"line\">console.log(&apos;decoded&apos;, decoded);</div></pre></td></tr></table></figure>\n<h4>產生 Auth Tokens 和 Setting Headers</h4>\n<ol>\n<li>修改 server/models/user.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mongoose = require(&apos;mongoose&apos;);</div><div class=\"line\">const validator = require(&apos;validator&apos;);</div><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\">const _ = require(&apos;lodash&apos;);</div><div class=\"line\"></div><div class=\"line\">var UserSchema = new mongoose.Schema(&#123;</div><div class=\"line\">    email: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        required: true,</div><div class=\"line\">        trim: true,</div><div class=\"line\">        minlength: 1,</div><div class=\"line\">        unique: true,</div><div class=\"line\">        validate: &#123;</div><div class=\"line\">            validator: validator.isEmail,</div><div class=\"line\">            message: &apos;&#123;VALUE&#125; is not a valid email&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    password: &#123;</div><div class=\"line\">        type: String,</div><div class=\"line\">        require: true,</div><div class=\"line\">        minlength: 6,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    tokens: [&#123;</div><div class=\"line\">        access: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;,</div><div class=\"line\">        token: &#123;</div><div class=\"line\">            type: String,</div><div class=\"line\">            require: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">UserSchema.methods.toJSON = function () &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\">    var userObject = user.toObject();</div><div class=\"line\"></div><div class=\"line\">    return _.pick(userObject, [&apos;_id&apos;, &apos;email&apos;]);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">UserSchema.methods.generateAuthToken = function () &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\">    var access = &apos;auth&apos;;</div><div class=\"line\">    var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, &apos;abc123&apos;).toString();</div><div class=\"line\"></div><div class=\"line\">    user.tokens.push(&#123;access, token&#125;);</div><div class=\"line\"></div><div class=\"line\">    return user.save().then(() =&gt; &#123;</div><div class=\"line\">        return token;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var User = mongoose.model(&apos;User&apos;, UserSchema);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;User&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 server/server.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// POST /users</div><div class=\"line\">app.post(&apos;/users&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]);</div><div class=\"line\">    var user = new User(body);</div><div class=\"line\"></div><div class=\"line\">    user.save().then((user) =&gt; &#123;</div><div class=\"line\">        return user.generateAuthToken();</div><div class=\"line\">    &#125;).then((token) =&gt; &#123;</div><div class=\"line\">        res.header(&apos;x-auth&apos;, token).send(user);</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send(e);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"PHP multiple select 寫入資料庫的方法","thumbnail":["/images/php_mysql_array.jpg"],"date":"2016-12-01T05:48:23.000Z","_content":"<img src=\"/images/php_mysql_array.jpg\">\n\n***\n1. 填入文字的頁面需要用陣列的方式傳遞資料 `name=\"item[]\"`\n```\n<label for=\"item[]\" class=\"formTitle\">選擇項目</label>\n<select name=\"item[]\" class=\"form-control selectpicker\" multiple>\n  <option>項目一</option>\n  <option>項目二</option>\n  <option>項目三</option>\n</select>\n```\n2. 在取得值之前，要先將取得的陣列用文字的方式顯示。\n```\n// 得到 item 的值\n$item= $_POST[\"item\"];\n// 將取得的陣列用「、」分開\n$itemArray= implode(\"、\", $item);\n```\n3. 將得到的值寫入 DataTable 資料表內的 DataColumn 欄位，值為剛剛取得的陣列值 `$itemarray`\n```\n$sql_query = INSERT INTO DataTable (`DataColumn`) VALUES ('$itemarray');\n```\n","source":"_posts/PHP-multiple-select-寫入資料庫的方法.md","raw":"---\ntitle: PHP multiple select 寫入資料庫的方法\nthumbnail:\n  - /images/php_mysql_array.jpg\ndate: 2016-12-01 13:48:23\ncategories: 技術分享\ntags:\n---\n<img src=\"/images/php_mysql_array.jpg\">\n\n***\n1. 填入文字的頁面需要用陣列的方式傳遞資料 `name=\"item[]\"`\n```\n<label for=\"item[]\" class=\"formTitle\">選擇項目</label>\n<select name=\"item[]\" class=\"form-control selectpicker\" multiple>\n  <option>項目一</option>\n  <option>項目二</option>\n  <option>項目三</option>\n</select>\n```\n2. 在取得值之前，要先將取得的陣列用文字的方式顯示。\n```\n// 得到 item 的值\n$item= $_POST[\"item\"];\n// 將取得的陣列用「、」分開\n$itemArray= implode(\"、\", $item);\n```\n3. 將得到的值寫入 DataTable 資料表內的 DataColumn 欄位，值為剛剛取得的陣列值 `$itemarray`\n```\n$sql_query = INSERT INTO DataTable (`DataColumn`) VALUES ('$itemarray');\n```\n","slug":"PHP-multiple-select-寫入資料庫的方法","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxp004c7ifa9hzrdy9f","content":"<img src=\"/images/php_mysql_array.jpg\">\n<hr>\n<ol>\n<li>填入文字的頁面需要用陣列的方式傳遞資料 <code>name=&quot;item[]&quot;</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;label for=&quot;item[]&quot; class=&quot;formTitle&quot;&gt;選擇項目&lt;/label&gt;</div><div class=\"line\">&lt;select name=&quot;item[]&quot; class=&quot;form-control selectpicker&quot; multiple&gt;</div><div class=\"line\">  &lt;option&gt;項目一&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;項目二&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;項目三&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在取得值之前，要先將取得的陣列用文字的方式顯示。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 得到 item 的值</div><div class=\"line\">$item= $_POST[&quot;item&quot;];</div><div class=\"line\">// 將取得的陣列用「、」分開</div><div class=\"line\">$itemArray= implode(&quot;、&quot;, $item);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將得到的值寫入 DataTable 資料表內的 DataColumn 欄位，值為剛剛取得的陣列值 <code>$itemarray</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sql_query = INSERT INTO DataTable (`DataColumn`) VALUES (&apos;$itemarray&apos;);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/php_mysql_array.jpg\">\n<hr>\n<ol>\n<li>填入文字的頁面需要用陣列的方式傳遞資料 <code>name=&quot;item[]&quot;</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;label for=&quot;item[]&quot; class=&quot;formTitle&quot;&gt;選擇項目&lt;/label&gt;</div><div class=\"line\">&lt;select name=&quot;item[]&quot; class=&quot;form-control selectpicker&quot; multiple&gt;</div><div class=\"line\">  &lt;option&gt;項目一&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;項目二&lt;/option&gt;</div><div class=\"line\">  &lt;option&gt;項目三&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在取得值之前，要先將取得的陣列用文字的方式顯示。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 得到 item 的值</div><div class=\"line\">$item= $_POST[&quot;item&quot;];</div><div class=\"line\">// 將取得的陣列用「、」分開</div><div class=\"line\">$itemArray= implode(&quot;、&quot;, $item);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將得到的值寫入 DataTable 資料表內的 DataColumn 欄位，值為剛剛取得的陣列值 <code>$itemarray</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sql_query = INSERT INTO DataTable (`DataColumn`) VALUES (&apos;$itemarray&apos;);</div></pre></td></tr></table></figure>\n"},{"title":"Nodejs 快速學習自我挑戰 Day9","thumbnail":["/images/learning/nodejs/nodejsday9.png"],"date":"2017-09-27T22:14:39.000Z","_content":"<img src=\"/images/learning/nodejs/nodejsday9.png\">\n\n***\n### 安全和認證\n#### Private Routes 和 Auth Middleware\n1. 在 server/server.js 新增 get\n```\napp.get('/users/me', (req, res) => {\n    var token = req.header('x-auth');\n\n    User.findByToken(token).then((user) => {\n        if (!user) {\n\n        }\n\n        res.send(user);\n    });\n});\n```\n2. 在 server/models/users.js 新增 findByToken\n```\nUserSchema.statics.findByToken = function (token) {\n    var User = this;\n    var decoded;\n\n    try {\n        decoded = jwt.verify(token, 'abc123')\n    } catch (e) {\n\n    }\n\n    return User.findOne({\n        '_id': decoded._id,\n        'tokens.token': token,\n        'tokens.access': 'auth'\n    });\n};\n```\n3. 使用 Postman 新增 user 並取得 x-auth，然後新增 GET {{url}}/users/me，並在 Header 插入剛剛取得的 x-auth，就會順利取得 _id 和 email\n4. 將 在 server/models/users.js 的 error 部分處理好\n```\ntry {\n    decoded = jwt.verify(token, 'abc123')\n} catch (e) {\n    return Promise.reject();\n}\n```\n5. 將 server/server.js 的 error 部分處理好\n```\nUser.findByToken(token).then((user) => {\n    if (!user) {\n        return Promise.reject();\n    }\n\n    res.send(user);\n}).catch((e) => {\n    res.status(401).send();\n});\n```\n6. 新增 server/middleware/authenticate.js\n```\nvar {User} = require('./../models/user');\n\nvar authenticate = (req, res, next) => {\n    var token = req.header('x-auth');\n\n    User.findByToken(token).then((user) => {\n        if (!user) {\n            return Promise.reject();\n        }\n\n        req.user = user;\n        req.token = token;\n        next();\n    }).catch((e) => {\n        res.status(401).send();\n    });\n};\n\nmodule.exports = {authenticate};\n```\n7. 在 server/server.js 引入 authenticate\n`var {authenticate} = require('./middleware/authenticate');`\n8. 在 /users/me 的部分使用 authenticate\n```\napp.get('/users/me', authenticate, (req, res) => {\n    res.send(req.user);\n});\n```\n#### Hashing Passwords\n1. 安裝 bcryptjs\n`npm i bcryptjs@2.3.0 --save`\n2. [bcrypt 文件](https://www.npmjs.com/package/bcryptjs)\n3. 在 playground/hashing.js 新增 bcrypt function\n```\nconst {SHA256} = require('crypto-js');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\nvar password = '123abc!';\n\nbcrypt.genSalt(10, (err, salt) => {\n    bcrypt.hash(password, salt, (err, hash) => {\n        console.log(hash);\n    });\n});\n```\n4. `node playground/hashing.js`\n5. 將產出的 hashing 和本來的 password 比較，如果 true 則等於相等\n```\nvar hashedPassword = '$2a$10$.fiP4qt.xBk3w4CIZB1jN.x.WHFrexbi4Dk3Y/er/0MJASi8S1u1y';\n\nbcrypt.compare(password, hashedPassword, (err, res) => {\n    console.log(res);\n});\n```\n6. 在 server/models/user.js 新增 UserSchema.pre function，如果 password 修改則要重新 hash，如果沒有修改則不 hash，避免重複 hash 的情況發生\n```\nUserSchema.pre('save', function (next) {\n    var user = this;\n\n    if (user.isModified('password')) {\n        bcrypt.genSalt(10, (err, salt) => {\n            bcrypt.hash(user.password, salt, (err, hash) => {\n                user.password = hash;\n                next();\n            });\n        });\n    } else {\n        next();\n    }\n});\n```\n#### 與 Users 傳送測試資料庫\n1. 新增 server/tests/seed/seed.js，把 todos 物件從 server.test.js 移出來，然後新增 populateTodos\n```\nconst {ObjectID} = require('mongodb');\n\nconst {Todo} = require('./../../models/todo');\n\nconst todos = [{\n    _id: new ObjectID(),\n    text: 'First test todo'\n}, {\n    _id: new ObjectID(),\n    text: 'Second test todo',\n    completed: true,\n    completedAt: 333\n}];\n\nconst populateTodos = (done) => {\n    Todo.remove({}).then(() => {\n        return Todo.insertMany(todos);\n    }).then(() => done());\n};\n\nmodule.exports = {todos, populateTodos};\n```\n2. 在 server/tests/server.test.js 引入 seed\n```\nconst {todos, populateTodos} = require('./seed/seed');\n\nbeforeEach(populateTodos);\n```\n3. 在 server/tests/seed/seed.js 新增 Users 物件\n```\nconst jwt = require('jsonwebtoken');\n\nconst {User} = require('./../../models/user');\n\nconst userOneId = new ObjectID();\nconst userTwoId = new ObjectID();\nconst users = [{\n    _id: userOneId,\n    email: 'andrew@example.com',\n    password: 'userOnePass',\n    tokens: [{\n        access: 'auth',\n        token: jwt.sign({_id: userOneId, access: 'auth'}, 'abc123').toString()\n    }]\n}, {\n    _id:userTwoId,\n    email: 'jen@example.com',\n    password: 'userTwoPass'\n}];\n```\n4. 新增 populateUsers 並匯出\n```\nconst populateUsers = (done) => {\n    User.remove({}).then(() => {\n        var userOne = new User(users[0]).save();\n        var userTwo = new User(users[1]).save();\n\n        return Promise.all([userOne, userTwo])\n    }).then(() => done());\n};\n\nmodule.exports = {todos, populateTodos, users, populateUsers};\n```\n5. 在 在 server/tests/server.test.js 引入 populateUsers\n```\nconst {todos, populateTodos, users, populateUsers} = require('./seed/seed');\n\nbeforeEach(populateUsers);\n```\n#### 測試 POST /users 和 GET /users/me\n1. 在 server/tests/server.test.js 新增\n```\ndescribe('GET /users/me', () => {\n    it('should return user if authenticated', (done) => {\n        request(app)\n            .get('/users/me')\n            .set('x-auth', users[0].tokens[0].token)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body._id).toBe(users[0]._id.toHexString());\n                expect(res.body.email).toBe(users[0].email);\n            })\n            .end(done);\n    });\n\n    it('should return 401 if not authenticated', (done) => {\n        request(app)\n            .get('/users/me')\n            .expect(401)\n            .expect((res) => {\n                expect(res.body).toEqual({});\n            })\n            .end(done);\n    });\n});\n```\n2. 新增 POST /users test\n```\ndescribe('POST /users', () => {\n    it('should create a user', (done) => {\n        var email = 'example@example.com';\n        var password = '123mnb!';\n\n        request(app)\n            .post('/users')\n            .send({email, password})\n            .expect(200)\n            .expect((res) => {\n                expect(res.header['x-auth']).toExist();\n                expect(res.body._id).toExist();\n                expect(res.body.email).toBe(email);\n            })\n            .end((err) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findOne({email}).then((user) => {\n                    expect(user).toExist();\n                    expect(user.password).toNotBe(password);\n                    done();\n                })\n            });\n    });\n});\n```\n3. 以上 test 會失敗，因為找不到 User，所以在最上面引入 User\n`const {User} = require('./../models/user');`\n4. 新增兩種狀況，第一種是 email 和 password 不符合格式，第二種是 email 已經被使用了\n```\nit('should return validation errors if request invalid', (done) => {\n    request(app)\n        .post('/users')\n        .send({\n            email: 'and',\n            password: '123'\n        })\n        .expect(400)\n        .end(done)\n});\n\nit('should not create user if email in use', (done) => {\n    request(app)\n        .post('/users')\n        .send({\n            email: users[0].email,\n            password: 'Password123!'\n        })\n        .expect(400)\n        .end(done)\n});\n```\n#### 登入 - POST /users/login\n1. 在 servers/models/user.js 新增 findByCredentials 的 Schema\n```\nUserSchema.statics.findByCredentials = function (email, password) {\n    var User = this;\n\n    return User.findOne({email}).then((user) => {\n        if (!user) {\n            return Promise.reject();\n        }\n\n        return new Promise((resolve, reject) => {\n            // Use bcrypt.compare to compare password and user.password\n            bcrypt.compare(password, user.password, (err, res) => {\n                if (res) {\n                    resolve(user);\n                } else {\n                    reject();\n                }\n            })\n        });\n    });\n};\n```\n2. 在 server/server.js 新增 /users/login\n```\napp.post('/users/login', (req, res) => {\n    var body = _.pick(req.body, ['email', 'password']);\n\n    User.findByCredentials(body.email, body.password).then((user) => {\n        return user.generateAuthToken().then((token) => {\n            res.header('x-auth', token).send(user);\n        });\n\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n#### 測試 POST /users/login\n1. 新增兩道測試，測試可以登入和不能登入的狀態\n```\ndescribe('POST /users/login', () => {\n    it('should login user and return auth token', (done) => {\n        request(app)\n            .post('/users/login')\n            .send({\n                email: users[1].email,\n                password: users[1].password\n            })\n            .expect(200)\n            .expect((res) => {\n                expect(res.headers['x-auth']).toExist();\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findById(users[1]._id).then((user) => {\n                    expect(user.tokens[0]).toInclude({\n                        access: 'auth',\n                        token: res.headers['x-auth']\n                    });\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n\n    it('should reject invalid login', (done) => {\n        request(app)\n            .post('/users/login')\n            .send({\n                email: users[1].email,\n                password: users[1].password + '1'\n            })\n            .expect(400)\n            .expect((res) => {\n                expect(res.headers['x-auth']).toNotExist();\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findById(users[1]._id).then((user) => {\n                    expect(user.tokens.length).toBe(0);\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n});\n```\n#### 登出 DELETE /users/me/token\n1. 在 server/server.js 新增 delete function\n```\napp.delete('/users/me/token', authenticate, (req, res) => {\n    req.user.removeToken(req.token).then(() => {\n        res.status(200).send();\n    }, () => {\n        res.status(400).send();\n    });\n});\n```\n2. 在 server/models/user.js 新增 removeToken function\n```\nUserSchema.methods.removeToken = function (token) {\n    var user = this;\n\n    return user.update({\n        $pull: {\n            tokens: {token}\n        }\n    })\n};\n```\n#### 測試 DELETE /users/me/token\n1. 在 server/tests/server.test.js 新增測試\n```\ndescribe('DELETE /users/me/token', () => {\n    it('should remove auth token on logout', (done) => {\n        request(app)\n            .delete('/users/me/token')\n            .set('x-auth', users[0].tokens[0].token)\n            .expect(200)\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findById(users[0]._id).then((user) => {\n                    expect(user.tokens.length).toBe(0);\n                    done();\n                }).catch((e) => done(e));\n            })\n    });\n});\n```","source":"_posts/Nodejs-快速學習自我挑戰-Day9.md","raw":"---\ntitle: Nodejs 快速學習自我挑戰 Day9\nthumbnail:\n  - /images/learning/nodejs/nodejsday9.png\ndate: 2017-09-28 06:14:39\ncategories: 學習歷程\ntags: Nodejs\n---\n<img src=\"/images/learning/nodejs/nodejsday9.png\">\n\n***\n### 安全和認證\n#### Private Routes 和 Auth Middleware\n1. 在 server/server.js 新增 get\n```\napp.get('/users/me', (req, res) => {\n    var token = req.header('x-auth');\n\n    User.findByToken(token).then((user) => {\n        if (!user) {\n\n        }\n\n        res.send(user);\n    });\n});\n```\n2. 在 server/models/users.js 新增 findByToken\n```\nUserSchema.statics.findByToken = function (token) {\n    var User = this;\n    var decoded;\n\n    try {\n        decoded = jwt.verify(token, 'abc123')\n    } catch (e) {\n\n    }\n\n    return User.findOne({\n        '_id': decoded._id,\n        'tokens.token': token,\n        'tokens.access': 'auth'\n    });\n};\n```\n3. 使用 Postman 新增 user 並取得 x-auth，然後新增 GET {{url}}/users/me，並在 Header 插入剛剛取得的 x-auth，就會順利取得 _id 和 email\n4. 將 在 server/models/users.js 的 error 部分處理好\n```\ntry {\n    decoded = jwt.verify(token, 'abc123')\n} catch (e) {\n    return Promise.reject();\n}\n```\n5. 將 server/server.js 的 error 部分處理好\n```\nUser.findByToken(token).then((user) => {\n    if (!user) {\n        return Promise.reject();\n    }\n\n    res.send(user);\n}).catch((e) => {\n    res.status(401).send();\n});\n```\n6. 新增 server/middleware/authenticate.js\n```\nvar {User} = require('./../models/user');\n\nvar authenticate = (req, res, next) => {\n    var token = req.header('x-auth');\n\n    User.findByToken(token).then((user) => {\n        if (!user) {\n            return Promise.reject();\n        }\n\n        req.user = user;\n        req.token = token;\n        next();\n    }).catch((e) => {\n        res.status(401).send();\n    });\n};\n\nmodule.exports = {authenticate};\n```\n7. 在 server/server.js 引入 authenticate\n`var {authenticate} = require('./middleware/authenticate');`\n8. 在 /users/me 的部分使用 authenticate\n```\napp.get('/users/me', authenticate, (req, res) => {\n    res.send(req.user);\n});\n```\n#### Hashing Passwords\n1. 安裝 bcryptjs\n`npm i bcryptjs@2.3.0 --save`\n2. [bcrypt 文件](https://www.npmjs.com/package/bcryptjs)\n3. 在 playground/hashing.js 新增 bcrypt function\n```\nconst {SHA256} = require('crypto-js');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\nvar password = '123abc!';\n\nbcrypt.genSalt(10, (err, salt) => {\n    bcrypt.hash(password, salt, (err, hash) => {\n        console.log(hash);\n    });\n});\n```\n4. `node playground/hashing.js`\n5. 將產出的 hashing 和本來的 password 比較，如果 true 則等於相等\n```\nvar hashedPassword = '$2a$10$.fiP4qt.xBk3w4CIZB1jN.x.WHFrexbi4Dk3Y/er/0MJASi8S1u1y';\n\nbcrypt.compare(password, hashedPassword, (err, res) => {\n    console.log(res);\n});\n```\n6. 在 server/models/user.js 新增 UserSchema.pre function，如果 password 修改則要重新 hash，如果沒有修改則不 hash，避免重複 hash 的情況發生\n```\nUserSchema.pre('save', function (next) {\n    var user = this;\n\n    if (user.isModified('password')) {\n        bcrypt.genSalt(10, (err, salt) => {\n            bcrypt.hash(user.password, salt, (err, hash) => {\n                user.password = hash;\n                next();\n            });\n        });\n    } else {\n        next();\n    }\n});\n```\n#### 與 Users 傳送測試資料庫\n1. 新增 server/tests/seed/seed.js，把 todos 物件從 server.test.js 移出來，然後新增 populateTodos\n```\nconst {ObjectID} = require('mongodb');\n\nconst {Todo} = require('./../../models/todo');\n\nconst todos = [{\n    _id: new ObjectID(),\n    text: 'First test todo'\n}, {\n    _id: new ObjectID(),\n    text: 'Second test todo',\n    completed: true,\n    completedAt: 333\n}];\n\nconst populateTodos = (done) => {\n    Todo.remove({}).then(() => {\n        return Todo.insertMany(todos);\n    }).then(() => done());\n};\n\nmodule.exports = {todos, populateTodos};\n```\n2. 在 server/tests/server.test.js 引入 seed\n```\nconst {todos, populateTodos} = require('./seed/seed');\n\nbeforeEach(populateTodos);\n```\n3. 在 server/tests/seed/seed.js 新增 Users 物件\n```\nconst jwt = require('jsonwebtoken');\n\nconst {User} = require('./../../models/user');\n\nconst userOneId = new ObjectID();\nconst userTwoId = new ObjectID();\nconst users = [{\n    _id: userOneId,\n    email: 'andrew@example.com',\n    password: 'userOnePass',\n    tokens: [{\n        access: 'auth',\n        token: jwt.sign({_id: userOneId, access: 'auth'}, 'abc123').toString()\n    }]\n}, {\n    _id:userTwoId,\n    email: 'jen@example.com',\n    password: 'userTwoPass'\n}];\n```\n4. 新增 populateUsers 並匯出\n```\nconst populateUsers = (done) => {\n    User.remove({}).then(() => {\n        var userOne = new User(users[0]).save();\n        var userTwo = new User(users[1]).save();\n\n        return Promise.all([userOne, userTwo])\n    }).then(() => done());\n};\n\nmodule.exports = {todos, populateTodos, users, populateUsers};\n```\n5. 在 在 server/tests/server.test.js 引入 populateUsers\n```\nconst {todos, populateTodos, users, populateUsers} = require('./seed/seed');\n\nbeforeEach(populateUsers);\n```\n#### 測試 POST /users 和 GET /users/me\n1. 在 server/tests/server.test.js 新增\n```\ndescribe('GET /users/me', () => {\n    it('should return user if authenticated', (done) => {\n        request(app)\n            .get('/users/me')\n            .set('x-auth', users[0].tokens[0].token)\n            .expect(200)\n            .expect((res) => {\n                expect(res.body._id).toBe(users[0]._id.toHexString());\n                expect(res.body.email).toBe(users[0].email);\n            })\n            .end(done);\n    });\n\n    it('should return 401 if not authenticated', (done) => {\n        request(app)\n            .get('/users/me')\n            .expect(401)\n            .expect((res) => {\n                expect(res.body).toEqual({});\n            })\n            .end(done);\n    });\n});\n```\n2. 新增 POST /users test\n```\ndescribe('POST /users', () => {\n    it('should create a user', (done) => {\n        var email = 'example@example.com';\n        var password = '123mnb!';\n\n        request(app)\n            .post('/users')\n            .send({email, password})\n            .expect(200)\n            .expect((res) => {\n                expect(res.header['x-auth']).toExist();\n                expect(res.body._id).toExist();\n                expect(res.body.email).toBe(email);\n            })\n            .end((err) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findOne({email}).then((user) => {\n                    expect(user).toExist();\n                    expect(user.password).toNotBe(password);\n                    done();\n                })\n            });\n    });\n});\n```\n3. 以上 test 會失敗，因為找不到 User，所以在最上面引入 User\n`const {User} = require('./../models/user');`\n4. 新增兩種狀況，第一種是 email 和 password 不符合格式，第二種是 email 已經被使用了\n```\nit('should return validation errors if request invalid', (done) => {\n    request(app)\n        .post('/users')\n        .send({\n            email: 'and',\n            password: '123'\n        })\n        .expect(400)\n        .end(done)\n});\n\nit('should not create user if email in use', (done) => {\n    request(app)\n        .post('/users')\n        .send({\n            email: users[0].email,\n            password: 'Password123!'\n        })\n        .expect(400)\n        .end(done)\n});\n```\n#### 登入 - POST /users/login\n1. 在 servers/models/user.js 新增 findByCredentials 的 Schema\n```\nUserSchema.statics.findByCredentials = function (email, password) {\n    var User = this;\n\n    return User.findOne({email}).then((user) => {\n        if (!user) {\n            return Promise.reject();\n        }\n\n        return new Promise((resolve, reject) => {\n            // Use bcrypt.compare to compare password and user.password\n            bcrypt.compare(password, user.password, (err, res) => {\n                if (res) {\n                    resolve(user);\n                } else {\n                    reject();\n                }\n            })\n        });\n    });\n};\n```\n2. 在 server/server.js 新增 /users/login\n```\napp.post('/users/login', (req, res) => {\n    var body = _.pick(req.body, ['email', 'password']);\n\n    User.findByCredentials(body.email, body.password).then((user) => {\n        return user.generateAuthToken().then((token) => {\n            res.header('x-auth', token).send(user);\n        });\n\n    }).catch((e) => {\n        res.status(400).send();\n    });\n});\n```\n#### 測試 POST /users/login\n1. 新增兩道測試，測試可以登入和不能登入的狀態\n```\ndescribe('POST /users/login', () => {\n    it('should login user and return auth token', (done) => {\n        request(app)\n            .post('/users/login')\n            .send({\n                email: users[1].email,\n                password: users[1].password\n            })\n            .expect(200)\n            .expect((res) => {\n                expect(res.headers['x-auth']).toExist();\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findById(users[1]._id).then((user) => {\n                    expect(user.tokens[0]).toInclude({\n                        access: 'auth',\n                        token: res.headers['x-auth']\n                    });\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n\n    it('should reject invalid login', (done) => {\n        request(app)\n            .post('/users/login')\n            .send({\n                email: users[1].email,\n                password: users[1].password + '1'\n            })\n            .expect(400)\n            .expect((res) => {\n                expect(res.headers['x-auth']).toNotExist();\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findById(users[1]._id).then((user) => {\n                    expect(user.tokens.length).toBe(0);\n                    done();\n                }).catch((e) => done(e));\n            });\n    });\n});\n```\n#### 登出 DELETE /users/me/token\n1. 在 server/server.js 新增 delete function\n```\napp.delete('/users/me/token', authenticate, (req, res) => {\n    req.user.removeToken(req.token).then(() => {\n        res.status(200).send();\n    }, () => {\n        res.status(400).send();\n    });\n});\n```\n2. 在 server/models/user.js 新增 removeToken function\n```\nUserSchema.methods.removeToken = function (token) {\n    var user = this;\n\n    return user.update({\n        $pull: {\n            tokens: {token}\n        }\n    })\n};\n```\n#### 測試 DELETE /users/me/token\n1. 在 server/tests/server.test.js 新增測試\n```\ndescribe('DELETE /users/me/token', () => {\n    it('should remove auth token on logout', (done) => {\n        request(app)\n            .delete('/users/me/token')\n            .set('x-auth', users[0].tokens[0].token)\n            .expect(200)\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n\n                User.findById(users[0]._id).then((user) => {\n                    expect(user.tokens.length).toBe(0);\n                    done();\n                }).catch((e) => done(e));\n            })\n    });\n});\n```","slug":"Nodejs-快速學習自我挑戰-Day9","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxq004f7ifa414fbt28","content":"<img src=\"/images/learning/nodejs/nodejsday9.png\">\n<hr>\n<h3>安全和認證</h3>\n<h4>Private Routes 和 Auth Middleware</h4>\n<ol>\n<li>在 server/server.js 新增 get</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/users/me&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var token = req.header(&apos;x-auth&apos;);</div><div class=\"line\"></div><div class=\"line\">    User.findByToken(token).then((user) =&gt; &#123;</div><div class=\"line\">        if (!user) &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(user);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/models/users.js 新增 findByToken</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.statics.findByToken = function (token) &#123;</div><div class=\"line\">    var User = this;</div><div class=\"line\">    var decoded;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">        decoded = jwt.verify(token, &apos;abc123&apos;)</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return User.findOne(&#123;</div><div class=\"line\">        &apos;_id&apos;: decoded._id,</div><div class=\"line\">        &apos;tokens.token&apos;: token,</div><div class=\"line\">        &apos;tokens.access&apos;: &apos;auth&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 Postman 新增 user 並取得 x-auth，然後新增 GET /users/me，並在 Header 插入剛剛取得的 x-auth，就會順利取得 _id 和 email</li>\n<li>將 在 server/models/users.js 的 error 部分處理好</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">try &#123;</div><div class=\"line\">    decoded = jwt.verify(token, &apos;abc123&apos;)</div><div class=\"line\">&#125; catch (e) &#123;</div><div class=\"line\">    return Promise.reject();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>將 server/server.js 的 error 部分處理好</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findByToken(token).then((user) =&gt; &#123;</div><div class=\"line\">    if (!user) &#123;</div><div class=\"line\">        return Promise.reject();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    res.send(user);</div><div class=\"line\">&#125;).catch((e) =&gt; &#123;</div><div class=\"line\">    res.status(401).send();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>新增 server/middleware/authenticate.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var &#123;User&#125; = require(&apos;./../models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">var authenticate = (req, res, next) =&gt; &#123;</div><div class=\"line\">    var token = req.header(&apos;x-auth&apos;);</div><div class=\"line\"></div><div class=\"line\">    User.findByToken(token).then((user) =&gt; &#123;</div><div class=\"line\">        if (!user) &#123;</div><div class=\"line\">            return Promise.reject();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        req.user = user;</div><div class=\"line\">        req.token = token;</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(401).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;authenticate&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 server/server.js 引入 authenticate<br>\n<code>var {authenticate} = require('./middleware/authenticate');</code></li>\n<li>在 /users/me 的部分使用 authenticate</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/users/me&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(req.user);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Hashing Passwords</h4>\n<ol>\n<li>安裝 bcryptjs<br>\n<code>npm i bcryptjs@2.3.0 --save</code></li>\n<li><a href=\"https://www.npmjs.com/package/bcryptjs\" target=\"_blank\" rel=\"external\">bcrypt 文件</a></li>\n<li>在 playground/hashing.js 新增 bcrypt function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;SHA256&#125; = require(&apos;crypto-js&apos;);</div><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\">const bcrypt = require(&apos;bcryptjs&apos;);</div><div class=\"line\"></div><div class=\"line\">var password = &apos;123abc!&apos;;</div><div class=\"line\"></div><div class=\"line\">bcrypt.genSalt(10, (err, salt) =&gt; &#123;</div><div class=\"line\">    bcrypt.hash(password, salt, (err, hash) =&gt; &#123;</div><div class=\"line\">        console.log(hash);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>node playground/hashing.js</code></li>\n<li>將產出的 hashing 和本來的 password 比較，如果 true 則等於相等</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var hashedPassword = &apos;$2a$10$.fiP4qt.xBk3w4CIZB1jN.x.WHFrexbi4Dk3Y/er/0MJASi8S1u1y&apos;;</div><div class=\"line\"></div><div class=\"line\">bcrypt.compare(password, hashedPassword, (err, res) =&gt; &#123;</div><div class=\"line\">    console.log(res);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/models/user.js 新增 UserSchema.pre function，如果 password 修改則要重新 hash，如果沒有修改則不 hash，避免重複 hash 的情況發生</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.pre(&apos;save&apos;, function (next) &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\"></div><div class=\"line\">    if (user.isModified(&apos;password&apos;)) &#123;</div><div class=\"line\">        bcrypt.genSalt(10, (err, salt) =&gt; &#123;</div><div class=\"line\">            bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123;</div><div class=\"line\">                user.password = hash;</div><div class=\"line\">                next();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>與 Users 傳送測試資料庫</h4>\n<ol>\n<li>新增 server/tests/seed/seed.js，把 todos 物件從 server.test.js 移出來，然後新增 populateTodos</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../../models/todo&apos;);</div><div class=\"line\"></div><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;First test todo&apos;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;Second test todo&apos;,</div><div class=\"line\">    completed: true,</div><div class=\"line\">    completedAt: 333</div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\">const populateTodos = (done) =&gt; &#123;</div><div class=\"line\">    Todo.remove(&#123;&#125;).then(() =&gt; &#123;</div><div class=\"line\">        return Todo.insertMany(todos);</div><div class=\"line\">    &#125;).then(() =&gt; done());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;todos, populateTodos&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/tests/server.test.js 引入 seed</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;todos, populateTodos&#125; = require(&apos;./seed/seed&apos;);</div><div class=\"line\"></div><div class=\"line\">beforeEach(populateTodos);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 server/tests/seed/seed.js 新增 Users 物件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;User&#125; = require(&apos;./../../models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">const userOneId = new ObjectID();</div><div class=\"line\">const userTwoId = new ObjectID();</div><div class=\"line\">const users = [&#123;</div><div class=\"line\">    _id: userOneId,</div><div class=\"line\">    email: &apos;andrew@example.com&apos;,</div><div class=\"line\">    password: &apos;userOnePass&apos;,</div><div class=\"line\">    tokens: [&#123;</div><div class=\"line\">        access: &apos;auth&apos;,</div><div class=\"line\">        token: jwt.sign(&#123;_id: userOneId, access: &apos;auth&apos;&#125;, &apos;abc123&apos;).toString()</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id:userTwoId,</div><div class=\"line\">    email: &apos;jen@example.com&apos;,</div><div class=\"line\">    password: &apos;userTwoPass&apos;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 populateUsers 並匯出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const populateUsers = (done) =&gt; &#123;</div><div class=\"line\">    User.remove(&#123;&#125;).then(() =&gt; &#123;</div><div class=\"line\">        var userOne = new User(users[0]).save();</div><div class=\"line\">        var userTwo = new User(users[1]).save();</div><div class=\"line\"></div><div class=\"line\">        return Promise.all([userOne, userTwo])</div><div class=\"line\">    &#125;).then(() =&gt; done());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;todos, populateTodos, users, populateUsers&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 在 server/tests/server.test.js 引入 populateUsers</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;todos, populateTodos, users, populateUsers&#125; = require(&apos;./seed/seed&apos;);</div><div class=\"line\"></div><div class=\"line\">beforeEach(populateUsers);</div></pre></td></tr></table></figure>\n<h4>測試 POST /users 和 GET /users/me</h4>\n<ol>\n<li>在 server/tests/server.test.js 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /users/me&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should return user if authenticated&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/users/me&apos;)</div><div class=\"line\">            .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body._id).toBe(users[0]._id.toHexString());</div><div class=\"line\">                expect(res.body.email).toBe(users[0].email);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should return 401 if not authenticated&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/users/me&apos;)</div><div class=\"line\">            .expect(401)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body).toEqual(&#123;&#125;);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 POST /users test</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;POST /users&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should create a user&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var email = &apos;example@example.com&apos;;</div><div class=\"line\">        var password = &apos;123mnb!&apos;;</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/users&apos;)</div><div class=\"line\">            .send(&#123;email, password&#125;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.header[&apos;x-auth&apos;]).toExist();</div><div class=\"line\">                expect(res.body._id).toExist();</div><div class=\"line\">                expect(res.body.email).toBe(email);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findOne(&#123;email&#125;).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user).toExist();</div><div class=\"line\">                    expect(user.password).toNotBe(password);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;)</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>以上 test 會失敗，因為找不到 User，所以在最上面引入 User<br>\n<code>const {User} = require('./../models/user');</code></li>\n<li>新增兩種狀況，第一種是 email 和 password 不符合格式，第二種是 email 已經被使用了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should return validation errors if request invalid&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .post(&apos;/users&apos;)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            email: &apos;and&apos;,</div><div class=\"line\">            password: &apos;123&apos;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(400)</div><div class=\"line\">        .end(done)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should not create user if email in use&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .post(&apos;/users&apos;)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            email: users[0].email,</div><div class=\"line\">            password: &apos;Password123!&apos;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(400)</div><div class=\"line\">        .end(done)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>登入 - POST /users/login</h4>\n<ol>\n<li>在 servers/models/user.js 新增 findByCredentials 的 Schema</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.statics.findByCredentials = function (email, password) &#123;</div><div class=\"line\">    var User = this;</div><div class=\"line\"></div><div class=\"line\">    return User.findOne(&#123;email&#125;).then((user) =&gt; &#123;</div><div class=\"line\">        if (!user) &#123;</div><div class=\"line\">            return Promise.reject();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">            // Use bcrypt.compare to compare password and user.password</div><div class=\"line\">            bcrypt.compare(password, user.password, (err, res) =&gt; &#123;</div><div class=\"line\">                if (res) &#123;</div><div class=\"line\">                    resolve(user);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    reject();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 新增 /users/login</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/users/login&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]);</div><div class=\"line\"></div><div class=\"line\">    User.findByCredentials(body.email, body.password).then((user) =&gt; &#123;</div><div class=\"line\">        return user.generateAuthToken().then((token) =&gt; &#123;</div><div class=\"line\">            res.header(&apos;x-auth&apos;, token).send(user);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 POST /users/login</h4>\n<ol>\n<li>新增兩道測試，測試可以登入和不能登入的狀態</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;POST /users/login&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should login user and return auth token&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/users/login&apos;)</div><div class=\"line\">            .send(&#123;</div><div class=\"line\">                email: users[1].email,</div><div class=\"line\">                password: users[1].password</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.headers[&apos;x-auth&apos;]).toExist();</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findById(users[1]._id).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user.tokens[0]).toInclude(&#123;</div><div class=\"line\">                        access: &apos;auth&apos;,</div><div class=\"line\">                        token: res.headers[&apos;x-auth&apos;]</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should reject invalid login&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/users/login&apos;)</div><div class=\"line\">            .send(&#123;</div><div class=\"line\">                email: users[1].email,</div><div class=\"line\">                password: users[1].password + &apos;1&apos;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .expect(400)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.headers[&apos;x-auth&apos;]).toNotExist();</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findById(users[1]._id).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user.tokens.length).toBe(0);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>登出 DELETE /users/me/token</h4>\n<ol>\n<li>在 server/server.js 新增 delete function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.delete(&apos;/users/me/token&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    req.user.removeToken(req.token).then(() =&gt; &#123;</div><div class=\"line\">        res.status(200).send();</div><div class=\"line\">    &#125;, () =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/models/user.js 新增 removeToken function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.methods.removeToken = function (token) &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\"></div><div class=\"line\">    return user.update(&#123;</div><div class=\"line\">        $pull: &#123;</div><div class=\"line\">            tokens: &#123;token&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>測試 DELETE /users/me/token</h4>\n<ol>\n<li>在 server/tests/server.test.js 新增測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;DELETE /users/me/token&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should remove auth token on logout&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .delete(&apos;/users/me/token&apos;)</div><div class=\"line\">            .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findById(users[0]._id).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user.tokens.length).toBe(0);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/nodejs/nodejsday9.png\">\n<hr>\n<h3>安全和認證</h3>\n<h4>Private Routes 和 Auth Middleware</h4>\n<ol>\n<li>在 server/server.js 新增 get</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/users/me&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var token = req.header(&apos;x-auth&apos;);</div><div class=\"line\"></div><div class=\"line\">    User.findByToken(token).then((user) =&gt; &#123;</div><div class=\"line\">        if (!user) &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        res.send(user);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/models/users.js 新增 findByToken</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.statics.findByToken = function (token) &#123;</div><div class=\"line\">    var User = this;</div><div class=\"line\">    var decoded;</div><div class=\"line\"></div><div class=\"line\">    try &#123;</div><div class=\"line\">        decoded = jwt.verify(token, &apos;abc123&apos;)</div><div class=\"line\">    &#125; catch (e) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return User.findOne(&#123;</div><div class=\"line\">        &apos;_id&apos;: decoded._id,</div><div class=\"line\">        &apos;tokens.token&apos;: token,</div><div class=\"line\">        &apos;tokens.access&apos;: &apos;auth&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 Postman 新增 user 並取得 x-auth，然後新增 GET /users/me，並在 Header 插入剛剛取得的 x-auth，就會順利取得 _id 和 email</li>\n<li>將 在 server/models/users.js 的 error 部分處理好</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">try &#123;</div><div class=\"line\">    decoded = jwt.verify(token, &apos;abc123&apos;)</div><div class=\"line\">&#125; catch (e) &#123;</div><div class=\"line\">    return Promise.reject();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>將 server/server.js 的 error 部分處理好</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findByToken(token).then((user) =&gt; &#123;</div><div class=\"line\">    if (!user) &#123;</div><div class=\"line\">        return Promise.reject();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    res.send(user);</div><div class=\"line\">&#125;).catch((e) =&gt; &#123;</div><div class=\"line\">    res.status(401).send();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>新增 server/middleware/authenticate.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var &#123;User&#125; = require(&apos;./../models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">var authenticate = (req, res, next) =&gt; &#123;</div><div class=\"line\">    var token = req.header(&apos;x-auth&apos;);</div><div class=\"line\"></div><div class=\"line\">    User.findByToken(token).then((user) =&gt; &#123;</div><div class=\"line\">        if (!user) &#123;</div><div class=\"line\">            return Promise.reject();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        req.user = user;</div><div class=\"line\">        req.token = token;</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(401).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;authenticate&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>在 server/server.js 引入 authenticate<br>\n<code>var {authenticate} = require('./middleware/authenticate');</code></li>\n<li>在 /users/me 的部分使用 authenticate</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(&apos;/users/me&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    res.send(req.user);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>Hashing Passwords</h4>\n<ol>\n<li>安裝 bcryptjs<br>\n<code>npm i bcryptjs@2.3.0 --save</code></li>\n<li><a href=\"https://www.npmjs.com/package/bcryptjs\" target=\"_blank\" rel=\"external\">bcrypt 文件</a></li>\n<li>在 playground/hashing.js 新增 bcrypt function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;SHA256&#125; = require(&apos;crypto-js&apos;);</div><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\">const bcrypt = require(&apos;bcryptjs&apos;);</div><div class=\"line\"></div><div class=\"line\">var password = &apos;123abc!&apos;;</div><div class=\"line\"></div><div class=\"line\">bcrypt.genSalt(10, (err, salt) =&gt; &#123;</div><div class=\"line\">    bcrypt.hash(password, salt, (err, hash) =&gt; &#123;</div><div class=\"line\">        console.log(hash);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>node playground/hashing.js</code></li>\n<li>將產出的 hashing 和本來的 password 比較，如果 true 則等於相等</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var hashedPassword = &apos;$2a$10$.fiP4qt.xBk3w4CIZB1jN.x.WHFrexbi4Dk3Y/er/0MJASi8S1u1y&apos;;</div><div class=\"line\"></div><div class=\"line\">bcrypt.compare(password, hashedPassword, (err, res) =&gt; &#123;</div><div class=\"line\">    console.log(res);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 server/models/user.js 新增 UserSchema.pre function，如果 password 修改則要重新 hash，如果沒有修改則不 hash，避免重複 hash 的情況發生</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.pre(&apos;save&apos;, function (next) &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\"></div><div class=\"line\">    if (user.isModified(&apos;password&apos;)) &#123;</div><div class=\"line\">        bcrypt.genSalt(10, (err, salt) =&gt; &#123;</div><div class=\"line\">            bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123;</div><div class=\"line\">                user.password = hash;</div><div class=\"line\">                next();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>與 Users 傳送測試資料庫</h4>\n<ol>\n<li>新增 server/tests/seed/seed.js，把 todos 物件從 server.test.js 移出來，然後新增 populateTodos</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;Todo&#125; = require(&apos;./../../models/todo&apos;);</div><div class=\"line\"></div><div class=\"line\">const todos = [&#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;First test todo&apos;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id: new ObjectID(),</div><div class=\"line\">    text: &apos;Second test todo&apos;,</div><div class=\"line\">    completed: true,</div><div class=\"line\">    completedAt: 333</div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\">const populateTodos = (done) =&gt; &#123;</div><div class=\"line\">    Todo.remove(&#123;&#125;).then(() =&gt; &#123;</div><div class=\"line\">        return Todo.insertMany(todos);</div><div class=\"line\">    &#125;).then(() =&gt; done());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;todos, populateTodos&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/tests/server.test.js 引入 seed</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;todos, populateTodos&#125; = require(&apos;./seed/seed&apos;);</div><div class=\"line\"></div><div class=\"line\">beforeEach(populateTodos);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 server/tests/seed/seed.js 新增 Users 物件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;);</div><div class=\"line\"></div><div class=\"line\">const &#123;User&#125; = require(&apos;./../../models/user&apos;);</div><div class=\"line\"></div><div class=\"line\">const userOneId = new ObjectID();</div><div class=\"line\">const userTwoId = new ObjectID();</div><div class=\"line\">const users = [&#123;</div><div class=\"line\">    _id: userOneId,</div><div class=\"line\">    email: &apos;andrew@example.com&apos;,</div><div class=\"line\">    password: &apos;userOnePass&apos;,</div><div class=\"line\">    tokens: [&#123;</div><div class=\"line\">        access: &apos;auth&apos;,</div><div class=\"line\">        token: jwt.sign(&#123;_id: userOneId, access: &apos;auth&apos;&#125;, &apos;abc123&apos;).toString()</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    _id:userTwoId,</div><div class=\"line\">    email: &apos;jen@example.com&apos;,</div><div class=\"line\">    password: &apos;userTwoPass&apos;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 populateUsers 並匯出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const populateUsers = (done) =&gt; &#123;</div><div class=\"line\">    User.remove(&#123;&#125;).then(() =&gt; &#123;</div><div class=\"line\">        var userOne = new User(users[0]).save();</div><div class=\"line\">        var userTwo = new User(users[1]).save();</div><div class=\"line\"></div><div class=\"line\">        return Promise.all([userOne, userTwo])</div><div class=\"line\">    &#125;).then(() =&gt; done());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;todos, populateTodos, users, populateUsers&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 在 server/tests/server.test.js 引入 populateUsers</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;todos, populateTodos, users, populateUsers&#125; = require(&apos;./seed/seed&apos;);</div><div class=\"line\"></div><div class=\"line\">beforeEach(populateUsers);</div></pre></td></tr></table></figure>\n<h4>測試 POST /users 和 GET /users/me</h4>\n<ol>\n<li>在 server/tests/server.test.js 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;GET /users/me&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should return user if authenticated&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/users/me&apos;)</div><div class=\"line\">            .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body._id).toBe(users[0]._id.toHexString());</div><div class=\"line\">                expect(res.body.email).toBe(users[0].email);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should return 401 if not authenticated&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .get(&apos;/users/me&apos;)</div><div class=\"line\">            .expect(401)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.body).toEqual(&#123;&#125;);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end(done);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 POST /users test</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;POST /users&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should create a user&apos;, (done) =&gt; &#123;</div><div class=\"line\">        var email = &apos;example@example.com&apos;;</div><div class=\"line\">        var password = &apos;123mnb!&apos;;</div><div class=\"line\"></div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/users&apos;)</div><div class=\"line\">            .send(&#123;email, password&#125;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.header[&apos;x-auth&apos;]).toExist();</div><div class=\"line\">                expect(res.body._id).toExist();</div><div class=\"line\">                expect(res.body.email).toBe(email);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findOne(&#123;email&#125;).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user).toExist();</div><div class=\"line\">                    expect(user.password).toNotBe(password);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;)</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>以上 test 會失敗，因為找不到 User，所以在最上面引入 User<br>\n<code>const {User} = require('./../models/user');</code></li>\n<li>新增兩種狀況，第一種是 email 和 password 不符合格式，第二種是 email 已經被使用了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&apos;should return validation errors if request invalid&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .post(&apos;/users&apos;)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            email: &apos;and&apos;,</div><div class=\"line\">            password: &apos;123&apos;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(400)</div><div class=\"line\">        .end(done)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(&apos;should not create user if email in use&apos;, (done) =&gt; &#123;</div><div class=\"line\">    request(app)</div><div class=\"line\">        .post(&apos;/users&apos;)</div><div class=\"line\">        .send(&#123;</div><div class=\"line\">            email: users[0].email,</div><div class=\"line\">            password: &apos;Password123!&apos;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .expect(400)</div><div class=\"line\">        .end(done)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>登入 - POST /users/login</h4>\n<ol>\n<li>在 servers/models/user.js 新增 findByCredentials 的 Schema</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.statics.findByCredentials = function (email, password) &#123;</div><div class=\"line\">    var User = this;</div><div class=\"line\"></div><div class=\"line\">    return User.findOne(&#123;email&#125;).then((user) =&gt; &#123;</div><div class=\"line\">        if (!user) &#123;</div><div class=\"line\">            return Promise.reject();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">            // Use bcrypt.compare to compare password and user.password</div><div class=\"line\">            bcrypt.compare(password, user.password, (err, res) =&gt; &#123;</div><div class=\"line\">                if (res) &#123;</div><div class=\"line\">                    resolve(user);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    reject();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/server.js 新增 /users/login</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(&apos;/users/login&apos;, (req, res) =&gt; &#123;</div><div class=\"line\">    var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]);</div><div class=\"line\"></div><div class=\"line\">    User.findByCredentials(body.email, body.password).then((user) =&gt; &#123;</div><div class=\"line\">        return user.generateAuthToken().then((token) =&gt; &#123;</div><div class=\"line\">            res.header(&apos;x-auth&apos;, token).send(user);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;).catch((e) =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>測試 POST /users/login</h4>\n<ol>\n<li>新增兩道測試，測試可以登入和不能登入的狀態</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;POST /users/login&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should login user and return auth token&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/users/login&apos;)</div><div class=\"line\">            .send(&#123;</div><div class=\"line\">                email: users[1].email,</div><div class=\"line\">                password: users[1].password</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.headers[&apos;x-auth&apos;]).toExist();</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findById(users[1]._id).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user.tokens[0]).toInclude(&#123;</div><div class=\"line\">                        access: &apos;auth&apos;,</div><div class=\"line\">                        token: res.headers[&apos;x-auth&apos;]</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(&apos;should reject invalid login&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .post(&apos;/users/login&apos;)</div><div class=\"line\">            .send(&#123;</div><div class=\"line\">                email: users[1].email,</div><div class=\"line\">                password: users[1].password + &apos;1&apos;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .expect(400)</div><div class=\"line\">            .expect((res) =&gt; &#123;</div><div class=\"line\">                expect(res.headers[&apos;x-auth&apos;]).toNotExist();</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findById(users[1]._id).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user.tokens.length).toBe(0);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>登出 DELETE /users/me/token</h4>\n<ol>\n<li>在 server/server.js 新增 delete function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.delete(&apos;/users/me/token&apos;, authenticate, (req, res) =&gt; &#123;</div><div class=\"line\">    req.user.removeToken(req.token).then(() =&gt; &#123;</div><div class=\"line\">        res.status(200).send();</div><div class=\"line\">    &#125;, () =&gt; &#123;</div><div class=\"line\">        res.status(400).send();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 server/models/user.js 新增 removeToken function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserSchema.methods.removeToken = function (token) &#123;</div><div class=\"line\">    var user = this;</div><div class=\"line\"></div><div class=\"line\">    return user.update(&#123;</div><div class=\"line\">        $pull: &#123;</div><div class=\"line\">            tokens: &#123;token&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>測試 DELETE /users/me/token</h4>\n<ol>\n<li>在 server/tests/server.test.js 新增測試</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(&apos;DELETE /users/me/token&apos;, () =&gt; &#123;</div><div class=\"line\">    it(&apos;should remove auth token on logout&apos;, (done) =&gt; &#123;</div><div class=\"line\">        request(app)</div><div class=\"line\">            .delete(&apos;/users/me/token&apos;)</div><div class=\"line\">            .set(&apos;x-auth&apos;, users[0].tokens[0].token)</div><div class=\"line\">            .expect(200)</div><div class=\"line\">            .end((err, res) =&gt; &#123;</div><div class=\"line\">                if (err) &#123;</div><div class=\"line\">                    return done(err);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                User.findById(users[0]._id).then((user) =&gt; &#123;</div><div class=\"line\">                    expect(user.tokens.length).toBe(0);</div><div class=\"line\">                    done();</div><div class=\"line\">                &#125;).catch((e) =&gt; done(e));</div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"React Native 快速學習自我挑戰 Day1","thumbnail":["/images/learning/reactNative/reactnativeday1.png"],"date":"2017-08-03T10:50:32.000Z","_content":"<img src=\"/images/learning/reactNative/reactnativeday1.png\">\n\n***\n### 開始課程\n#### 第一支程式的 Roadmap\n1. 在每個作業系統安裝 dependencires\n2. 針對不同編輯器安裝不同的 ESLint\n3. 生成 React Native 專案\n4. [課程 Repo](https://github.com/StephenGrider/ReactNativeReduxCasts)\n### 在不同的系統部署環境\n#### OSX 安裝流程\n1. 了解 Dependency 的用途\n    - XCode：打包程式和 React Natvie Library 到可安裝的 app，然後用 iOS 模擬器運行\n    - HomeBrew：被用來安裝 node\n    - Node/NPM：Node 在瀏覽器之外運行 JavaScript，NPM 被用來安裝和管理 dependencies，Node 和 NPM 會在一起\n    - watchman：在硬碟上監控檔案，等待它們被改變\n    - RN CLI：React Native Command Line 界面，用來產生新的 React Native 專案\n2. 依序安裝\n3. 開啟專案 `react-native run-ios`\n#### Windows 安裝流程\n1. 必須安裝的軟體\n    - python 2.7\n    - node\n    - JAVA SDK\n    - Android Studio\n    - `npm install -g react-native-cli --no-optional`\n2. 開啟 Android Studio，修正所有錯誤，開啟 AVD，啟動一個模擬器\n3. 設定環境變數，JAVA\\_HOME，值為 **C:\\Program Files\\Java\\jdk\\_版本號**，另外將 **C:\\Users\\使用者名稱\\AppData\\Local\\Android\\sdk\\platform-tools** 加入 path 環境變數\n4. 開啟專案 `react-native run-android`\n### ESLint 設定 (VS code)\n1. `npm install eslint -g` 全域安裝 ESLint\n2. `npm install --save-dev eslint-config-standard`\n3. 在專案根目錄新增檔案 **.eslintrc**\n4. 在 .eslintrc 新增以下內容\n```\n{\n    \"extends\": \"standard\"\n}\n```\n### 向前進！\n1. [React Native 安裝疑難排解](https://rallycoding.com/blog/troubleshooting-react-native-startup/)\n2. 從 ios.index.js 開始，先刪除所有檔案，首先引入函式庫\n```\nimport React from 'react';\nimport ReactNative from 'react-native';\n```\n3. React vs React Native\n    - React 知道 compoent 該怎麼表現\n    - React 知道如何拿一堆 components 且讓他們一起運作\n    - React Native 知道如何從 component 取得 output 且將它呈現在螢幕上\n    - React Native 提供核心套件 (image, text)\n4. 創建一個 Component\n```\nconst App = () => {\n    return (\n        <Text>Some Text</Text>\n    );\n};\n```\n5. 將套件內容讀取出來\n`ReactNative.AppRegistry.registerComponent('albums', () => App);`\n6. 將 `ReactNative` 取代為 `{ Text, AppRegistry }`，這樣的做法就是只使用 ReactNative 裡面的 Text 元件\n`import { Text, AppRegistry } from 'react-native';`\n`AppRegistry.registerComponent('albums', () => App);`\n7. 創建 Component 的部分可以簡化\n```\nconst App = () => (\n    <Text>Some Text</Text>\n);\n```\n8. 新增一個檔案 src/components/header.js\n9. 在 header.js 引入函式庫\n```\nimport React from 'react';\nimport { Text } from 'react-native';\n```\n10. 製作 Component\n```\nconst Header = () => {\n    return <Text>Albums!</Text>;\n};\n```\n11. 接下來要讓 Component 可以在 app 的其它部分使用，但是只有 root Component 才用 \"AppRegistry\"，在這邊我們使用`export default Header;`\n12. 在 root 呼叫 Component\n`import Header from './src/components/header';`\n13. 再來直接將 Header 放在 Component 裡面\n```\nconst App = () => (\n    <Header />\n);\n```\n### 處理樣式問題\n1. 在 header.js 新增樣式\n```\nconst styles = {\n    textStyle: {\n        fontSize: 20\n    }\n};\n```\n2. 將樣式加入 component\n```\nconst Header = () => {\n    const { textStyle } = styles;\n\n    return <Text style={textStyle}>Albums!</Text>;\n};\n```\n3. 引入 view `import { Text, View } from 'react-native';`\n4. 新增 viewStyle\n```\nconst styles = {\n    viewStyle: {\n        backgroundColor: '#F8F8F8'\n    },\n    textStyle: {\n        fontSize: 20\n    }\n};\n```\n5. 使用 viewStyle\n```\nconst Header = () => {\n    const { textStyle, viewStyle } = styles;\n\n    return (\n        <View style={viewStyle}>\n            <Text style={textStyle}>Albums!</Text>\n        </View>\n    );\n};\n```\n6. 使用 flexbox\n    - justifyContent: 'flex-end' 將物件移至垂直最下方\n    - justifyContent: 'center' 將物件移至垂直中間\n    - justifyContent: 'flex-start' 將物件置於垂直上方，其實就是預設\n    - alignItems: 'flex-start' 將物件置於水平上方，其實就是預設\n    - alignItems: 'center' 將物件移至水平中間\n    - alignItems: 'flex-end' 將物件移至水平最右方\n7. 修改 viewStyle\n```\nviewStyle: {\n        backgroundColor: '#F8F8F8',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: 60,\n        paddingTop: 15,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.2,\n        elevation: 2,\n        position: 'relative'\n    },\n```\n#### 讓 Header 可以再使用\n1. 將本來文字的地方用 props 取代 `{props.headerText}`\n2. 另外要將 props 的變數放入 function `const Header = (props) => {`\n3. 在 index 的 component 裡面放入 props `<Header headerText={'Albums'} />`","source":"_posts/React-Native-快速學習自我挑戰-Day1.md","raw":"---\ntitle: React Native 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/reactNative/reactnativeday1.png\ndate: 2017-08-03 18:50:32\ncategories: 學習歷程\ntags: React-Native\n---\n<img src=\"/images/learning/reactNative/reactnativeday1.png\">\n\n***\n### 開始課程\n#### 第一支程式的 Roadmap\n1. 在每個作業系統安裝 dependencires\n2. 針對不同編輯器安裝不同的 ESLint\n3. 生成 React Native 專案\n4. [課程 Repo](https://github.com/StephenGrider/ReactNativeReduxCasts)\n### 在不同的系統部署環境\n#### OSX 安裝流程\n1. 了解 Dependency 的用途\n    - XCode：打包程式和 React Natvie Library 到可安裝的 app，然後用 iOS 模擬器運行\n    - HomeBrew：被用來安裝 node\n    - Node/NPM：Node 在瀏覽器之外運行 JavaScript，NPM 被用來安裝和管理 dependencies，Node 和 NPM 會在一起\n    - watchman：在硬碟上監控檔案，等待它們被改變\n    - RN CLI：React Native Command Line 界面，用來產生新的 React Native 專案\n2. 依序安裝\n3. 開啟專案 `react-native run-ios`\n#### Windows 安裝流程\n1. 必須安裝的軟體\n    - python 2.7\n    - node\n    - JAVA SDK\n    - Android Studio\n    - `npm install -g react-native-cli --no-optional`\n2. 開啟 Android Studio，修正所有錯誤，開啟 AVD，啟動一個模擬器\n3. 設定環境變數，JAVA\\_HOME，值為 **C:\\Program Files\\Java\\jdk\\_版本號**，另外將 **C:\\Users\\使用者名稱\\AppData\\Local\\Android\\sdk\\platform-tools** 加入 path 環境變數\n4. 開啟專案 `react-native run-android`\n### ESLint 設定 (VS code)\n1. `npm install eslint -g` 全域安裝 ESLint\n2. `npm install --save-dev eslint-config-standard`\n3. 在專案根目錄新增檔案 **.eslintrc**\n4. 在 .eslintrc 新增以下內容\n```\n{\n    \"extends\": \"standard\"\n}\n```\n### 向前進！\n1. [React Native 安裝疑難排解](https://rallycoding.com/blog/troubleshooting-react-native-startup/)\n2. 從 ios.index.js 開始，先刪除所有檔案，首先引入函式庫\n```\nimport React from 'react';\nimport ReactNative from 'react-native';\n```\n3. React vs React Native\n    - React 知道 compoent 該怎麼表現\n    - React 知道如何拿一堆 components 且讓他們一起運作\n    - React Native 知道如何從 component 取得 output 且將它呈現在螢幕上\n    - React Native 提供核心套件 (image, text)\n4. 創建一個 Component\n```\nconst App = () => {\n    return (\n        <Text>Some Text</Text>\n    );\n};\n```\n5. 將套件內容讀取出來\n`ReactNative.AppRegistry.registerComponent('albums', () => App);`\n6. 將 `ReactNative` 取代為 `{ Text, AppRegistry }`，這樣的做法就是只使用 ReactNative 裡面的 Text 元件\n`import { Text, AppRegistry } from 'react-native';`\n`AppRegistry.registerComponent('albums', () => App);`\n7. 創建 Component 的部分可以簡化\n```\nconst App = () => (\n    <Text>Some Text</Text>\n);\n```\n8. 新增一個檔案 src/components/header.js\n9. 在 header.js 引入函式庫\n```\nimport React from 'react';\nimport { Text } from 'react-native';\n```\n10. 製作 Component\n```\nconst Header = () => {\n    return <Text>Albums!</Text>;\n};\n```\n11. 接下來要讓 Component 可以在 app 的其它部分使用，但是只有 root Component 才用 \"AppRegistry\"，在這邊我們使用`export default Header;`\n12. 在 root 呼叫 Component\n`import Header from './src/components/header';`\n13. 再來直接將 Header 放在 Component 裡面\n```\nconst App = () => (\n    <Header />\n);\n```\n### 處理樣式問題\n1. 在 header.js 新增樣式\n```\nconst styles = {\n    textStyle: {\n        fontSize: 20\n    }\n};\n```\n2. 將樣式加入 component\n```\nconst Header = () => {\n    const { textStyle } = styles;\n\n    return <Text style={textStyle}>Albums!</Text>;\n};\n```\n3. 引入 view `import { Text, View } from 'react-native';`\n4. 新增 viewStyle\n```\nconst styles = {\n    viewStyle: {\n        backgroundColor: '#F8F8F8'\n    },\n    textStyle: {\n        fontSize: 20\n    }\n};\n```\n5. 使用 viewStyle\n```\nconst Header = () => {\n    const { textStyle, viewStyle } = styles;\n\n    return (\n        <View style={viewStyle}>\n            <Text style={textStyle}>Albums!</Text>\n        </View>\n    );\n};\n```\n6. 使用 flexbox\n    - justifyContent: 'flex-end' 將物件移至垂直最下方\n    - justifyContent: 'center' 將物件移至垂直中間\n    - justifyContent: 'flex-start' 將物件置於垂直上方，其實就是預設\n    - alignItems: 'flex-start' 將物件置於水平上方，其實就是預設\n    - alignItems: 'center' 將物件移至水平中間\n    - alignItems: 'flex-end' 將物件移至水平最右方\n7. 修改 viewStyle\n```\nviewStyle: {\n        backgroundColor: '#F8F8F8',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: 60,\n        paddingTop: 15,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.2,\n        elevation: 2,\n        position: 'relative'\n    },\n```\n#### 讓 Header 可以再使用\n1. 將本來文字的地方用 props 取代 `{props.headerText}`\n2. 另外要將 props 的變數放入 function `const Header = (props) => {`\n3. 在 index 的 component 裡面放入 props `<Header headerText={'Albums'} />`","slug":"React-Native-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxr004i7ifa60mszeln","content":"<img src=\"/images/learning/reactNative/reactnativeday1.png\">\n<hr>\n<h3>開始課程</h3>\n<h4>第一支程式的 Roadmap</h4>\n<ol>\n<li>在每個作業系統安裝 dependencires</li>\n<li>針對不同編輯器安裝不同的 ESLint</li>\n<li>生成 React Native 專案</li>\n<li><a href=\"https://github.com/StephenGrider/ReactNativeReduxCasts\" target=\"_blank\" rel=\"external\">課程 Repo</a></li>\n</ol>\n<h3>在不同的系統部署環境</h3>\n<h4>OSX 安裝流程</h4>\n<ol>\n<li>了解 Dependency 的用途\n<ul>\n<li>XCode：打包程式和 React Natvie Library 到可安裝的 app，然後用 iOS 模擬器運行</li>\n<li>HomeBrew：被用來安裝 node</li>\n<li>Node/NPM：Node 在瀏覽器之外運行 JavaScript，NPM 被用來安裝和管理 dependencies，Node 和 NPM 會在一起</li>\n<li>watchman：在硬碟上監控檔案，等待它們被改變</li>\n<li>RN CLI：React Native Command Line 界面，用來產生新的 React Native 專案</li>\n</ul>\n</li>\n<li>依序安裝</li>\n<li>開啟專案 <code>react-native run-ios</code></li>\n</ol>\n<h4>Windows 安裝流程</h4>\n<ol>\n<li>必須安裝的軟體\n<ul>\n<li>python 2.7</li>\n<li>node</li>\n<li>JAVA SDK</li>\n<li>Android Studio</li>\n<li><code>npm install -g react-native-cli --no-optional</code></li>\n</ul>\n</li>\n<li>開啟 Android Studio，修正所有錯誤，開啟 AVD，啟動一個模擬器</li>\n<li>設定環境變數，JAVA_HOME，值為 <strong>C:\\Program Files\\Java\\jdk_版本號</strong>，另外將 <strong>C:\\Users\\使用者名稱\\AppData\\Local\\Android\\sdk\\platform-tools</strong> 加入 path 環境變數</li>\n<li>開啟專案 <code>react-native run-android</code></li>\n</ol>\n<h3>ESLint 設定 (VS code)</h3>\n<ol>\n<li><code>npm install eslint -g</code> 全域安裝 ESLint</li>\n<li><code>npm install --save-dev eslint-config-standard</code></li>\n<li>在專案根目錄新增檔案 <strong>.eslintrc</strong></li>\n<li>在 .eslintrc 新增以下內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;extends&quot;: &quot;standard&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>向前進！</h3>\n<ol>\n<li><a href=\"https://rallycoding.com/blog/troubleshooting-react-native-startup/\" target=\"_blank\" rel=\"external\">React Native 安裝疑難排解</a></li>\n<li>從 ios.index.js 開始，先刪除所有檔案，首先引入函式庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import ReactNative from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>React vs React Native\n<ul>\n<li>React 知道 compoent 該怎麼表現</li>\n<li>React 知道如何拿一堆 components 且讓他們一起運作</li>\n<li>React Native 知道如何從 component 取得 output 且將它呈現在螢幕上</li>\n<li>React Native 提供核心套件 (image, text)</li>\n</ul>\n</li>\n<li>創建一個 Component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Text&gt;Some Text&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>將套件內容讀取出來<br>\n<code>ReactNative.AppRegistry.registerComponent('albums', () =&gt; App);</code></li>\n<li>將 <code>ReactNative</code> 取代為 <code>{ Text, AppRegistry }</code>，這樣的做法就是只使用 ReactNative 裡面的 Text 元件<br>\n<code>import { Text, AppRegistry } from 'react-native';</code><br>\n<code>AppRegistry.registerComponent('albums', () =&gt; App);</code></li>\n<li>創建 Component 的部分可以簡化</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;Text&gt;Some Text&lt;/Text&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>新增一個檔案 src/components/header.js</li>\n<li>在 header.js 引入函式庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; Text &#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>製作 Component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    return &lt;Text&gt;Albums!&lt;/Text&gt;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>接下來要讓 Component 可以在 app 的其它部分使用，但是只有 root Component 才用 “AppRegistry”，在這邊我們使用<code>export default Header;</code></li>\n<li>在 root 呼叫 Component<br>\n<code>import Header from './src/components/header';</code></li>\n<li>再來直接將 Header 放在 Component 裡面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;Header /&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3>處理樣式問題</h3>\n<ol>\n<li>在 header.js 新增樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    textStyle: &#123;</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將樣式加入 component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    const &#123; textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return &lt;Text style=&#123;textStyle&#125;&gt;Albums!&lt;/Text&gt;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>引入 view <code>import { Text, View } from 'react-native';</code></li>\n<li>新增 viewStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    viewStyle: &#123;</div><div class=\"line\">        backgroundColor: &apos;#F8F8F8&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    textStyle: &#123;</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用 viewStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    const &#123; textStyle, viewStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;viewStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;Albums!&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>使用 flexbox\n<ul>\n<li>justifyContent: ‘flex-end’ 將物件移至垂直最下方</li>\n<li>justifyContent: ‘center’ 將物件移至垂直中間</li>\n<li>justifyContent: ‘flex-start’ 將物件置於垂直上方，其實就是預設</li>\n<li>alignItems: ‘flex-start’ 將物件置於水平上方，其實就是預設</li>\n<li>alignItems: ‘center’ 將物件移至水平中間</li>\n<li>alignItems: ‘flex-end’ 將物件移至水平最右方</li>\n</ul>\n</li>\n<li>修改 viewStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewStyle: &#123;</div><div class=\"line\">        backgroundColor: &apos;#F8F8F8&apos;,</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;,</div><div class=\"line\">        height: 60,</div><div class=\"line\">        paddingTop: 15,</div><div class=\"line\">        shadowColor: &apos;#000&apos;,</div><div class=\"line\">        shadowOffset: &#123; width: 0, height: 2 &#125;,</div><div class=\"line\">        shadowOpacity: 0.2,</div><div class=\"line\">        elevation: 2,</div><div class=\"line\">        position: &apos;relative&apos;</div><div class=\"line\">    &#125;,</div></pre></td></tr></table></figure>\n<h4>讓 Header 可以再使用</h4>\n<ol>\n<li>將本來文字的地方用 props 取代 <code>{props.headerText}</code></li>\n<li>另外要將 props 的變數放入 function <code>const Header = (props) =&gt; {</code></li>\n<li>在 index 的 component 裡面放入 props <code>&lt;Header headerText={'Albums'} /&gt;</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/reactNative/reactnativeday1.png\">\n<hr>\n<h3>開始課程</h3>\n<h4>第一支程式的 Roadmap</h4>\n<ol>\n<li>在每個作業系統安裝 dependencires</li>\n<li>針對不同編輯器安裝不同的 ESLint</li>\n<li>生成 React Native 專案</li>\n<li><a href=\"https://github.com/StephenGrider/ReactNativeReduxCasts\" target=\"_blank\" rel=\"external\">課程 Repo</a></li>\n</ol>\n<h3>在不同的系統部署環境</h3>\n<h4>OSX 安裝流程</h4>\n<ol>\n<li>了解 Dependency 的用途\n<ul>\n<li>XCode：打包程式和 React Natvie Library 到可安裝的 app，然後用 iOS 模擬器運行</li>\n<li>HomeBrew：被用來安裝 node</li>\n<li>Node/NPM：Node 在瀏覽器之外運行 JavaScript，NPM 被用來安裝和管理 dependencies，Node 和 NPM 會在一起</li>\n<li>watchman：在硬碟上監控檔案，等待它們被改變</li>\n<li>RN CLI：React Native Command Line 界面，用來產生新的 React Native 專案</li>\n</ul>\n</li>\n<li>依序安裝</li>\n<li>開啟專案 <code>react-native run-ios</code></li>\n</ol>\n<h4>Windows 安裝流程</h4>\n<ol>\n<li>必須安裝的軟體\n<ul>\n<li>python 2.7</li>\n<li>node</li>\n<li>JAVA SDK</li>\n<li>Android Studio</li>\n<li><code>npm install -g react-native-cli --no-optional</code></li>\n</ul>\n</li>\n<li>開啟 Android Studio，修正所有錯誤，開啟 AVD，啟動一個模擬器</li>\n<li>設定環境變數，JAVA_HOME，值為 <strong>C:\\Program Files\\Java\\jdk_版本號</strong>，另外將 <strong>C:\\Users\\使用者名稱\\AppData\\Local\\Android\\sdk\\platform-tools</strong> 加入 path 環境變數</li>\n<li>開啟專案 <code>react-native run-android</code></li>\n</ol>\n<h3>ESLint 設定 (VS code)</h3>\n<ol>\n<li><code>npm install eslint -g</code> 全域安裝 ESLint</li>\n<li><code>npm install --save-dev eslint-config-standard</code></li>\n<li>在專案根目錄新增檔案 <strong>.eslintrc</strong></li>\n<li>在 .eslintrc 新增以下內容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;extends&quot;: &quot;standard&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>向前進！</h3>\n<ol>\n<li><a href=\"https://rallycoding.com/blog/troubleshooting-react-native-startup/\" target=\"_blank\" rel=\"external\">React Native 安裝疑難排解</a></li>\n<li>從 ios.index.js 開始，先刪除所有檔案，首先引入函式庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import ReactNative from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>React vs React Native\n<ul>\n<li>React 知道 compoent 該怎麼表現</li>\n<li>React 知道如何拿一堆 components 且讓他們一起運作</li>\n<li>React Native 知道如何從 component 取得 output 且將它呈現在螢幕上</li>\n<li>React Native 提供核心套件 (image, text)</li>\n</ul>\n</li>\n<li>創建一個 Component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Text&gt;Some Text&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>將套件內容讀取出來<br>\n<code>ReactNative.AppRegistry.registerComponent('albums', () =&gt; App);</code></li>\n<li>將 <code>ReactNative</code> 取代為 <code>{ Text, AppRegistry }</code>，這樣的做法就是只使用 ReactNative 裡面的 Text 元件<br>\n<code>import { Text, AppRegistry } from 'react-native';</code><br>\n<code>AppRegistry.registerComponent('albums', () =&gt; App);</code></li>\n<li>創建 Component 的部分可以簡化</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;Text&gt;Some Text&lt;/Text&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>新增一個檔案 src/components/header.js</li>\n<li>在 header.js 引入函式庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; Text &#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>製作 Component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    return &lt;Text&gt;Albums!&lt;/Text&gt;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>接下來要讓 Component 可以在 app 的其它部分使用，但是只有 root Component 才用 “AppRegistry”，在這邊我們使用<code>export default Header;</code></li>\n<li>在 root 呼叫 Component<br>\n<code>import Header from './src/components/header';</code></li>\n<li>再來直接將 Header 放在 Component 裡面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;Header /&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3>處理樣式問題</h3>\n<ol>\n<li>在 header.js 新增樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    textStyle: &#123;</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>將樣式加入 component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    const &#123; textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return &lt;Text style=&#123;textStyle&#125;&gt;Albums!&lt;/Text&gt;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>引入 view <code>import { Text, View } from 'react-native';</code></li>\n<li>新增 viewStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    viewStyle: &#123;</div><div class=\"line\">        backgroundColor: &apos;#F8F8F8&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    textStyle: &#123;</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用 viewStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    const &#123; textStyle, viewStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;viewStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;Albums!&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>使用 flexbox\n<ul>\n<li>justifyContent: ‘flex-end’ 將物件移至垂直最下方</li>\n<li>justifyContent: ‘center’ 將物件移至垂直中間</li>\n<li>justifyContent: ‘flex-start’ 將物件置於垂直上方，其實就是預設</li>\n<li>alignItems: ‘flex-start’ 將物件置於水平上方，其實就是預設</li>\n<li>alignItems: ‘center’ 將物件移至水平中間</li>\n<li>alignItems: ‘flex-end’ 將物件移至水平最右方</li>\n</ul>\n</li>\n<li>修改 viewStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewStyle: &#123;</div><div class=\"line\">        backgroundColor: &apos;#F8F8F8&apos;,</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;,</div><div class=\"line\">        height: 60,</div><div class=\"line\">        paddingTop: 15,</div><div class=\"line\">        shadowColor: &apos;#000&apos;,</div><div class=\"line\">        shadowOffset: &#123; width: 0, height: 2 &#125;,</div><div class=\"line\">        shadowOpacity: 0.2,</div><div class=\"line\">        elevation: 2,</div><div class=\"line\">        position: &apos;relative&apos;</div><div class=\"line\">    &#125;,</div></pre></td></tr></table></figure>\n<h4>讓 Header 可以再使用</h4>\n<ol>\n<li>將本來文字的地方用 props 取代 <code>{props.headerText}</code></li>\n<li>另外要將 props 的變數放入 function <code>const Header = (props) =&gt; {</code></li>\n<li>在 index 的 component 裡面放入 props <code>&lt;Header headerText={'Albums'} /&gt;</code></li>\n</ol>\n"},{"title":"React Native 快速學習自我挑戰 Day2","thumbnail":["/images/learning/reactNative/reactnativeday2.png"],"date":"2017-08-04T16:43:27.000Z","_content":"<img src=\"/images/learning/reactNative/reactnativeday2.png\">\n\n***\n### React Native 上的 HTTP 請求\n1. 新增檔案 /src/components/AlbumList.js\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nconst AlbumList = () => {\n    return (\n        <View>\n            <Text>Album List!!!</Text>\n        </View>\n    );\n};\n\nexport default AlbumList;\n```\n2. 在 index.js 引入函式庫\n`import AlbumList from './src/components/AlbumList';`\n3. 用 View 把物件包起來\n```\nconst App = () => (\n    <View>\n        <Header headerText={'Albums'} />\n        <AlbumList />\n    </View>\n);\n```\n4. Functional Component vs Class Component\n    - Functional Component\n        - 用來呈現固定資料\n        - 不能處理讀取檔案\n        - 很容易寫入\n    - Class Component\n        - 用來取得動態資料來源\n        - 處理可能會改變的資料 (讀取資料、使用者事件...等等)\n        - 知道它什麼時候要渲染到裝置上 (對資料讀取非常有幫助)\n        - 要寫更多城市\n5. Functional Component 範例\n```\nconst Header = () => {\n    return <Text>Hi there!</Text>\n}\n```\n6. Class Component 範例\n```\nclass Header extends Component {\n    render () {\n        return <Text>Hi There!</Text>\n    }\n}\n```\n7. 接下來要把本來的 Functional Component 換成 Class Component，要先修改引用的函式庫\n`import React, { Component } from 'react';`\n8. 將 AlbumList 換成 Class Component\n```\nclass AlbumList extends Component {\n    render () {\n        return (\n            <View>\n                <Text>Album List!!!</Text>\n            </View>\n        );\n    }\n}\n```\n9. 在 Component 裡面加上 componentWillMount\n```\nclass AlbumList extends Component {\n    componentWillMount () {\n        console.log('componentWillMount in AlbumList');\n    }\n\n    render () {\n        return (\n            <View>\n                <Text>Album List!!!</Text>\n            </View>\n        );\n    }\n}\n```\n10. 安裝 axios `npm install --save axios`\n11. 在 componentWillMount 引入 API\n```\ncomponentWillMount () {\n        axios.get('https://rallycoding.herokuapp.com/api/music_albums')\n            .then(response => console.log(response));\n    }\n```\n12. App 的時間軸\n    - 啟動 React Native\n    - RN 決定要渲染 \"App\" 到螢幕上\n    - \"App\" 決定要渲染它自己、\"Header\" 和 \"AlbumList\"\n    - \"AlbumList\" 發覺到有東西要被渲染，呼叫 componentWillMount\n    - \"AlbumList\" 開啟 HTTP 請求\n    - \"App\"、\"AlbumList\" 和 \"Header\" 出現在螢幕上\n    - 過很幾毫秒之後，HTTP 請求傳回 JSON data\n13. 要處理資料比畫面顯示還晚的問題，要用 state 的方式處理，state 由以下三步驟來完成\n    - 設定預設值或是初始值\n    - 讀取資料，且要告訴 Component 資料已經更新\n    - 最後，要確定 Component 有使用這些資料\n14. 設定初始值\n`state = { albums: [] };`\n15. 讀取資料，而且拿那個值來更新 component，修改 componentWillMount 底下的 .then，這邊要用 setState，而不是 state = [{}]，因為這樣跟起始值一樣\n`.then(response => this.setState({albums: response.data }));`\n16. 在 render 裡面 console.log 結果\n`console.log(this.state);`\n17. 加入 state 後的時間軸\n    - 啟動 React Native\n    - RN 決定要渲染 \"App\" 到螢幕上\n    - \"App\" 決定要渲染它自己、\"Header\" 和 \"AlbumList\"\n    - **\"AlbumList\" 取得起始值 { albums: [] }**\n    - \"AlbumList\" 發覺到有東西要被渲染，呼叫 componentWillMount\n    - \"AlbumList\" 開啟 HTTP 請求\n    - **\"AlbumList\" 的渲染方法被呼叫**\n    - \"App\"、\"AlbumList\" 和 \"Header\" 出現在螢幕上\n    - 過很幾毫秒之後，HTTP 請求傳回 JSON data\n    - **叫做 \"setState\" 的 request handler 會更新 albums**\n    - **\"AlbumList\" 的渲染方法被呼叫**\n18. State 的規則\n    - State 的定義：一個純 JavaScript 物件，被用來記錄和回應被用戶觸發的事件\n    - 當我們需要更新 component 顯示的東西，叫做 \"this.setState\"\n    - 只能用 \"setState\" 來改變 state，不要用 \"this.state = 123\"\n19. 用 renderAlbums 取得值，map 在這邊是 foreach 的功能\n```\nrenderAlbums () {\n    return this.state.albums.map(album => <Text>{album.title}</Text>);\n}\n```\n20. 把 renderAlbums 放在 \\<View><\\/View> 裡面\n`{this.renderAlbums()}`\n21. 新增 key\n```\nrenderAlbums () {\n        return this.state.albums.map(album =>\n            <Text key={album.title}>{album.title}</Text>\n        );\n    }\n```\n22. 新增 AlbumDetail.js\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nconst AlbumDetail = (props) => {\n    return (\n        <View>\n            <Text>{props.album.title}</Text>\n        </View>\n    );\n};\n\nexport default AlbumDetail;\n```\n23. 在 AlbumList 引入 AlbumDetail\n`import AlbumDetail from './AlbumDetail';`\n24. 修改 renderAlbums，album={album} 是將 props 命名為 album，並傳給 AlbumList\n```\nrenderAlbums () {\n    return this.state.albums.map(album =>\n        <AlbumDetail key={album.title} album={album} />\n    );\n}\n```\n25. 新增 /src/components/Card.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst Card = () => {\n    return (\n        <View></View>\n    );\n};\n\nexport default Card;\n```\n26. 幫 Card 新增 styles\n```\nconst styles = {\n    containerStyle: {\n        borderWidth: 1,\n        borderRadius: 2,\n        borderColor: '#ddd',\n        borderBottomWidth: 0,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 2,\n        elevation: 1,\n        marginLeft: 5,\n        marginRight: 5,\n        marginTop: 10\n    }\n};\n```\n27. 在 Card 的 View 裡面新增 style\n`<View style={styles.containerStyle}></View>`\n28. 在 AlbumDetails 引用 Card\n`import Card from './Card';`\n29. 把 View 改成 Card\n```\n<Card>\n    <Text>{props.album.title}</Text>\n</Card>\n```\n30. 把上層的值傳到這邊使用，用 props.children 就可以直接取得值 \n```\nconst Card = (props) => {\n    return (\n        <View style={styles.containerStyle}>\n            {props.children}\n        </View>\n    );\n};\n```\n31. 新增 /src/components/CardSection.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst CardSection = (props) => {\n    return (\n        <View style={styles.containerStyle}>\n            {props.children}\n        </View>\n    );\n};\n\nconst styles = {\n    containerStyle: {\n        borderBottomWidth: 1,\n        padding: 5,\n        backgroundColor: '#fff',\n        justifyContent: 'flex-start',\n        flexDirection: 'row',\n        borderColor: '#ddd',\n        position: 'relative'\n    }\n};\n\nexport default CardSection;\n```\n32. 在 AlbumDetail 加入 CardSection\n```\n<Card>\n    <CardSection>\n        <Text>{props.album.title}</Text>\n    </CardSection>\n</Card>\n```","source":"_posts/React-Native-快速學習自我挑戰-Day2.md","raw":"---\ntitle: React Native 快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/reactNative/reactnativeday2.png\ndate: 2017-08-05 00:43:27\ncategories: 學習歷程\ntags: React-Native\n---\n<img src=\"/images/learning/reactNative/reactnativeday2.png\">\n\n***\n### React Native 上的 HTTP 請求\n1. 新增檔案 /src/components/AlbumList.js\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nconst AlbumList = () => {\n    return (\n        <View>\n            <Text>Album List!!!</Text>\n        </View>\n    );\n};\n\nexport default AlbumList;\n```\n2. 在 index.js 引入函式庫\n`import AlbumList from './src/components/AlbumList';`\n3. 用 View 把物件包起來\n```\nconst App = () => (\n    <View>\n        <Header headerText={'Albums'} />\n        <AlbumList />\n    </View>\n);\n```\n4. Functional Component vs Class Component\n    - Functional Component\n        - 用來呈現固定資料\n        - 不能處理讀取檔案\n        - 很容易寫入\n    - Class Component\n        - 用來取得動態資料來源\n        - 處理可能會改變的資料 (讀取資料、使用者事件...等等)\n        - 知道它什麼時候要渲染到裝置上 (對資料讀取非常有幫助)\n        - 要寫更多城市\n5. Functional Component 範例\n```\nconst Header = () => {\n    return <Text>Hi there!</Text>\n}\n```\n6. Class Component 範例\n```\nclass Header extends Component {\n    render () {\n        return <Text>Hi There!</Text>\n    }\n}\n```\n7. 接下來要把本來的 Functional Component 換成 Class Component，要先修改引用的函式庫\n`import React, { Component } from 'react';`\n8. 將 AlbumList 換成 Class Component\n```\nclass AlbumList extends Component {\n    render () {\n        return (\n            <View>\n                <Text>Album List!!!</Text>\n            </View>\n        );\n    }\n}\n```\n9. 在 Component 裡面加上 componentWillMount\n```\nclass AlbumList extends Component {\n    componentWillMount () {\n        console.log('componentWillMount in AlbumList');\n    }\n\n    render () {\n        return (\n            <View>\n                <Text>Album List!!!</Text>\n            </View>\n        );\n    }\n}\n```\n10. 安裝 axios `npm install --save axios`\n11. 在 componentWillMount 引入 API\n```\ncomponentWillMount () {\n        axios.get('https://rallycoding.herokuapp.com/api/music_albums')\n            .then(response => console.log(response));\n    }\n```\n12. App 的時間軸\n    - 啟動 React Native\n    - RN 決定要渲染 \"App\" 到螢幕上\n    - \"App\" 決定要渲染它自己、\"Header\" 和 \"AlbumList\"\n    - \"AlbumList\" 發覺到有東西要被渲染，呼叫 componentWillMount\n    - \"AlbumList\" 開啟 HTTP 請求\n    - \"App\"、\"AlbumList\" 和 \"Header\" 出現在螢幕上\n    - 過很幾毫秒之後，HTTP 請求傳回 JSON data\n13. 要處理資料比畫面顯示還晚的問題，要用 state 的方式處理，state 由以下三步驟來完成\n    - 設定預設值或是初始值\n    - 讀取資料，且要告訴 Component 資料已經更新\n    - 最後，要確定 Component 有使用這些資料\n14. 設定初始值\n`state = { albums: [] };`\n15. 讀取資料，而且拿那個值來更新 component，修改 componentWillMount 底下的 .then，這邊要用 setState，而不是 state = [{}]，因為這樣跟起始值一樣\n`.then(response => this.setState({albums: response.data }));`\n16. 在 render 裡面 console.log 結果\n`console.log(this.state);`\n17. 加入 state 後的時間軸\n    - 啟動 React Native\n    - RN 決定要渲染 \"App\" 到螢幕上\n    - \"App\" 決定要渲染它自己、\"Header\" 和 \"AlbumList\"\n    - **\"AlbumList\" 取得起始值 { albums: [] }**\n    - \"AlbumList\" 發覺到有東西要被渲染，呼叫 componentWillMount\n    - \"AlbumList\" 開啟 HTTP 請求\n    - **\"AlbumList\" 的渲染方法被呼叫**\n    - \"App\"、\"AlbumList\" 和 \"Header\" 出現在螢幕上\n    - 過很幾毫秒之後，HTTP 請求傳回 JSON data\n    - **叫做 \"setState\" 的 request handler 會更新 albums**\n    - **\"AlbumList\" 的渲染方法被呼叫**\n18. State 的規則\n    - State 的定義：一個純 JavaScript 物件，被用來記錄和回應被用戶觸發的事件\n    - 當我們需要更新 component 顯示的東西，叫做 \"this.setState\"\n    - 只能用 \"setState\" 來改變 state，不要用 \"this.state = 123\"\n19. 用 renderAlbums 取得值，map 在這邊是 foreach 的功能\n```\nrenderAlbums () {\n    return this.state.albums.map(album => <Text>{album.title}</Text>);\n}\n```\n20. 把 renderAlbums 放在 \\<View><\\/View> 裡面\n`{this.renderAlbums()}`\n21. 新增 key\n```\nrenderAlbums () {\n        return this.state.albums.map(album =>\n            <Text key={album.title}>{album.title}</Text>\n        );\n    }\n```\n22. 新增 AlbumDetail.js\n```\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nconst AlbumDetail = (props) => {\n    return (\n        <View>\n            <Text>{props.album.title}</Text>\n        </View>\n    );\n};\n\nexport default AlbumDetail;\n```\n23. 在 AlbumList 引入 AlbumDetail\n`import AlbumDetail from './AlbumDetail';`\n24. 修改 renderAlbums，album={album} 是將 props 命名為 album，並傳給 AlbumList\n```\nrenderAlbums () {\n    return this.state.albums.map(album =>\n        <AlbumDetail key={album.title} album={album} />\n    );\n}\n```\n25. 新增 /src/components/Card.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst Card = () => {\n    return (\n        <View></View>\n    );\n};\n\nexport default Card;\n```\n26. 幫 Card 新增 styles\n```\nconst styles = {\n    containerStyle: {\n        borderWidth: 1,\n        borderRadius: 2,\n        borderColor: '#ddd',\n        borderBottomWidth: 0,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 2,\n        elevation: 1,\n        marginLeft: 5,\n        marginRight: 5,\n        marginTop: 10\n    }\n};\n```\n27. 在 Card 的 View 裡面新增 style\n`<View style={styles.containerStyle}></View>`\n28. 在 AlbumDetails 引用 Card\n`import Card from './Card';`\n29. 把 View 改成 Card\n```\n<Card>\n    <Text>{props.album.title}</Text>\n</Card>\n```\n30. 把上層的值傳到這邊使用，用 props.children 就可以直接取得值 \n```\nconst Card = (props) => {\n    return (\n        <View style={styles.containerStyle}>\n            {props.children}\n        </View>\n    );\n};\n```\n31. 新增 /src/components/CardSection.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst CardSection = (props) => {\n    return (\n        <View style={styles.containerStyle}>\n            {props.children}\n        </View>\n    );\n};\n\nconst styles = {\n    containerStyle: {\n        borderBottomWidth: 1,\n        padding: 5,\n        backgroundColor: '#fff',\n        justifyContent: 'flex-start',\n        flexDirection: 'row',\n        borderColor: '#ddd',\n        position: 'relative'\n    }\n};\n\nexport default CardSection;\n```\n32. 在 AlbumDetail 加入 CardSection\n```\n<Card>\n    <CardSection>\n        <Text>{props.album.title}</Text>\n    </CardSection>\n</Card>\n```","slug":"React-Native-快速學習自我挑戰-Day2","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxs004l7ifaz0tf9fvf","content":"<img src=\"/images/learning/reactNative/reactnativeday2.png\">\n<hr>\n<h3>React Native 上的 HTTP 請求</h3>\n<ol>\n<li>新增檔案 /src/components/AlbumList.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const AlbumList = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;Album List!!!&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default AlbumList;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 index.js 引入函式庫<br>\n<code>import AlbumList from './src/components/AlbumList';</code></li>\n<li>用 View 把物件包起來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;View&gt;</div><div class=\"line\">        &lt;Header headerText=&#123;&apos;Albums&apos;&#125; /&gt;</div><div class=\"line\">        &lt;AlbumList /&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Functional Component vs Class Component\n<ul>\n<li>Functional Component\n<ul>\n<li>用來呈現固定資料</li>\n<li>不能處理讀取檔案</li>\n<li>很容易寫入</li>\n</ul>\n</li>\n<li>Class Component\n<ul>\n<li>用來取得動態資料來源</li>\n<li>處理可能會改變的資料 (讀取資料、使用者事件…等等)</li>\n<li>知道它什麼時候要渲染到裝置上 (對資料讀取非常有幫助)</li>\n<li>要寫更多城市</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Functional Component 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    return &lt;Text&gt;Hi there!&lt;/Text&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>Class Component 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Header extends Component &#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        return &lt;Text&gt;Hi There!&lt;/Text&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>接下來要把本來的 Functional Component 換成 Class Component，要先修改引用的函式庫<br>\n<code>import React, { Component } from 'react';</code></li>\n<li>將 AlbumList 換成 Class Component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AlbumList extends Component &#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;Album List!!!&lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 Component 裡面加上 componentWillMount</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AlbumList extends Component &#123;</div><div class=\"line\">    componentWillMount () &#123;</div><div class=\"line\">        console.log(&apos;componentWillMount in AlbumList&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;Album List!!!&lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>安裝 axios <code>npm install --save axios</code></li>\n<li>在 componentWillMount 引入 API</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillMount () &#123;</div><div class=\"line\">        axios.get(&apos;https://rallycoding.herokuapp.com/api/music_albums&apos;)</div><div class=\"line\">            .then(response =&gt; console.log(response));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>App 的時間軸\n<ul>\n<li>啟動 React Native</li>\n<li>RN 決定要渲染 “App” 到螢幕上</li>\n<li>“App” 決定要渲染它自己、“Header” 和 “AlbumList”</li>\n<li>“AlbumList” 發覺到有東西要被渲染，呼叫 componentWillMount</li>\n<li>“AlbumList” 開啟 HTTP 請求</li>\n<li>“App”、“AlbumList” 和 “Header” 出現在螢幕上</li>\n<li>過很幾毫秒之後，HTTP 請求傳回 JSON data</li>\n</ul>\n</li>\n<li>要處理資料比畫面顯示還晚的問題，要用 state 的方式處理，state 由以下三步驟來完成\n<ul>\n<li>設定預設值或是初始值</li>\n<li>讀取資料，且要告訴 Component 資料已經更新</li>\n<li>最後，要確定 Component 有使用這些資料</li>\n</ul>\n</li>\n<li>設定初始值<br>\n<code>state = { albums: [] };</code></li>\n<li>讀取資料，而且拿那個值來更新 component，修改 componentWillMount 底下的 .then，這邊要用 setState，而不是 state = [{}]，因為這樣跟起始值一樣<br>\n<code>.then(response =&gt; this.setState({albums: response.data }));</code></li>\n<li>在 render 裡面 console.log 結果<br>\n<code>console.log(this.state);</code></li>\n<li>加入 state 後的時間軸\n<ul>\n<li>啟動 React Native</li>\n<li>RN 決定要渲染 “App” 到螢幕上</li>\n<li>“App” 決定要渲染它自己、“Header” 和 “AlbumList”</li>\n<li><strong>“AlbumList” 取得起始值 { albums: [] }</strong></li>\n<li>“AlbumList” 發覺到有東西要被渲染，呼叫 componentWillMount</li>\n<li>“AlbumList” 開啟 HTTP 請求</li>\n<li><strong>“AlbumList” 的渲染方法被呼叫</strong></li>\n<li>“App”、“AlbumList” 和 “Header” 出現在螢幕上</li>\n<li>過很幾毫秒之後，HTTP 請求傳回 JSON data</li>\n<li><strong>叫做 “setState” 的 request handler 會更新 albums</strong></li>\n<li><strong>“AlbumList” 的渲染方法被呼叫</strong></li>\n</ul>\n</li>\n<li>State 的規則\n<ul>\n<li>State 的定義：一個純 JavaScript 物件，被用來記錄和回應被用戶觸發的事件</li>\n<li>當我們需要更新 component 顯示的東西，叫做 “this.setState”</li>\n<li>只能用 “setState” 來改變 state，不要用 “this.state = 123”</li>\n</ul>\n</li>\n<li>用 renderAlbums 取得值，map 在這邊是 foreach 的功能</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderAlbums () &#123;</div><div class=\"line\">    return this.state.albums.map(album =&gt; &lt;Text&gt;&#123;album.title&#125;&lt;/Text&gt;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"20\">\n<li>把 renderAlbums 放在 &lt;View&gt;&lt;/View&gt; 裡面<br>\n<code>{this.renderAlbums()}</code></li>\n<li>新增 key</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderAlbums () &#123;</div><div class=\"line\">        return this.state.albums.map(album =&gt;</div><div class=\"line\">            &lt;Text key=&#123;album.title&#125;&gt;&#123;album.title&#125;&lt;/Text&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"22\">\n<li>新增 AlbumDetail.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const AlbumDetail = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default AlbumDetail;</div></pre></td></tr></table></figure>\n<ol start=\"23\">\n<li>在 AlbumList 引入 AlbumDetail<br>\n<code>import AlbumDetail from './AlbumDetail';</code></li>\n<li>修改 renderAlbums，album={album} 是將 props 命名為 album，並傳給 AlbumList</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderAlbums () &#123;</div><div class=\"line\">    return this.state.albums.map(album =&gt;</div><div class=\"line\">        &lt;AlbumDetail key=&#123;album.title&#125; album=&#123;album&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"25\">\n<li>新增 /src/components/Card.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Card = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;&lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default Card;</div></pre></td></tr></table></figure>\n<ol start=\"26\">\n<li>幫 Card 新增 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    containerStyle: &#123;</div><div class=\"line\">        borderWidth: 1,</div><div class=\"line\">        borderRadius: 2,</div><div class=\"line\">        borderColor: &apos;#ddd&apos;,</div><div class=\"line\">        borderBottomWidth: 0,</div><div class=\"line\">        shadowColor: &apos;#000&apos;,</div><div class=\"line\">        shadowOffset: &#123; width: 0, height: 2 &#125;,</div><div class=\"line\">        shadowOpacity: 0.1,</div><div class=\"line\">        shadowRadius: 2,</div><div class=\"line\">        elevation: 1,</div><div class=\"line\">        marginLeft: 5,</div><div class=\"line\">        marginRight: 5,</div><div class=\"line\">        marginTop: 10</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"27\">\n<li>在 Card 的 View 裡面新增 style<br>\n<code>&lt;View style={styles.containerStyle}&gt;&lt;/View&gt;</code></li>\n<li>在 AlbumDetails 引用 Card<br>\n<code>import Card from './Card';</code></li>\n<li>把 View 改成 Card</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Card&gt;</div><div class=\"line\">    &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">&lt;/Card&gt;</div></pre></td></tr></table></figure>\n<ol start=\"30\">\n<li>把上層的值傳到這邊使用，用 props.children 就可以直接取得值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Card = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;styles.containerStyle&#125;&gt;</div><div class=\"line\">            &#123;props.children&#125;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"31\">\n<li>新增 /src/components/CardSection.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const CardSection = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;styles.containerStyle&#125;&gt;</div><div class=\"line\">            &#123;props.children&#125;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const styles = &#123;</div><div class=\"line\">    containerStyle: &#123;</div><div class=\"line\">        borderBottomWidth: 1,</div><div class=\"line\">        padding: 5,</div><div class=\"line\">        backgroundColor: &apos;#fff&apos;,</div><div class=\"line\">        justifyContent: &apos;flex-start&apos;,</div><div class=\"line\">        flexDirection: &apos;row&apos;,</div><div class=\"line\">        borderColor: &apos;#ddd&apos;,</div><div class=\"line\">        position: &apos;relative&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default CardSection;</div></pre></td></tr></table></figure>\n<ol start=\"32\">\n<li>在 AlbumDetail 加入 CardSection</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Card&gt;</div><div class=\"line\">    &lt;CardSection&gt;</div><div class=\"line\">        &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">    &lt;/CardSection&gt;</div><div class=\"line\">&lt;/Card&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/reactNative/reactnativeday2.png\">\n<hr>\n<h3>React Native 上的 HTTP 請求</h3>\n<ol>\n<li>新增檔案 /src/components/AlbumList.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const AlbumList = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;Album List!!!&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default AlbumList;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 index.js 引入函式庫<br>\n<code>import AlbumList from './src/components/AlbumList';</code></li>\n<li>用 View 把物件包起來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;View&gt;</div><div class=\"line\">        &lt;Header headerText=&#123;&apos;Albums&apos;&#125; /&gt;</div><div class=\"line\">        &lt;AlbumList /&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Functional Component vs Class Component\n<ul>\n<li>Functional Component\n<ul>\n<li>用來呈現固定資料</li>\n<li>不能處理讀取檔案</li>\n<li>很容易寫入</li>\n</ul>\n</li>\n<li>Class Component\n<ul>\n<li>用來取得動態資料來源</li>\n<li>處理可能會改變的資料 (讀取資料、使用者事件…等等)</li>\n<li>知道它什麼時候要渲染到裝置上 (對資料讀取非常有幫助)</li>\n<li>要寫更多城市</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Functional Component 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">    return &lt;Text&gt;Hi there!&lt;/Text&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>Class Component 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Header extends Component &#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        return &lt;Text&gt;Hi There!&lt;/Text&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>接下來要把本來的 Functional Component 換成 Class Component，要先修改引用的函式庫<br>\n<code>import React, { Component } from 'react';</code></li>\n<li>將 AlbumList 換成 Class Component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AlbumList extends Component &#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;Album List!!!&lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>在 Component 裡面加上 componentWillMount</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AlbumList extends Component &#123;</div><div class=\"line\">    componentWillMount () &#123;</div><div class=\"line\">        console.log(&apos;componentWillMount in AlbumList&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;Album List!!!&lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>安裝 axios <code>npm install --save axios</code></li>\n<li>在 componentWillMount 引入 API</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillMount () &#123;</div><div class=\"line\">        axios.get(&apos;https://rallycoding.herokuapp.com/api/music_albums&apos;)</div><div class=\"line\">            .then(response =&gt; console.log(response));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>App 的時間軸\n<ul>\n<li>啟動 React Native</li>\n<li>RN 決定要渲染 “App” 到螢幕上</li>\n<li>“App” 決定要渲染它自己、“Header” 和 “AlbumList”</li>\n<li>“AlbumList” 發覺到有東西要被渲染，呼叫 componentWillMount</li>\n<li>“AlbumList” 開啟 HTTP 請求</li>\n<li>“App”、“AlbumList” 和 “Header” 出現在螢幕上</li>\n<li>過很幾毫秒之後，HTTP 請求傳回 JSON data</li>\n</ul>\n</li>\n<li>要處理資料比畫面顯示還晚的問題，要用 state 的方式處理，state 由以下三步驟來完成\n<ul>\n<li>設定預設值或是初始值</li>\n<li>讀取資料，且要告訴 Component 資料已經更新</li>\n<li>最後，要確定 Component 有使用這些資料</li>\n</ul>\n</li>\n<li>設定初始值<br>\n<code>state = { albums: [] };</code></li>\n<li>讀取資料，而且拿那個值來更新 component，修改 componentWillMount 底下的 .then，這邊要用 setState，而不是 state = [{}]，因為這樣跟起始值一樣<br>\n<code>.then(response =&gt; this.setState({albums: response.data }));</code></li>\n<li>在 render 裡面 console.log 結果<br>\n<code>console.log(this.state);</code></li>\n<li>加入 state 後的時間軸\n<ul>\n<li>啟動 React Native</li>\n<li>RN 決定要渲染 “App” 到螢幕上</li>\n<li>“App” 決定要渲染它自己、“Header” 和 “AlbumList”</li>\n<li><strong>“AlbumList” 取得起始值 { albums: [] }</strong></li>\n<li>“AlbumList” 發覺到有東西要被渲染，呼叫 componentWillMount</li>\n<li>“AlbumList” 開啟 HTTP 請求</li>\n<li><strong>“AlbumList” 的渲染方法被呼叫</strong></li>\n<li>“App”、“AlbumList” 和 “Header” 出現在螢幕上</li>\n<li>過很幾毫秒之後，HTTP 請求傳回 JSON data</li>\n<li><strong>叫做 “setState” 的 request handler 會更新 albums</strong></li>\n<li><strong>“AlbumList” 的渲染方法被呼叫</strong></li>\n</ul>\n</li>\n<li>State 的規則\n<ul>\n<li>State 的定義：一個純 JavaScript 物件，被用來記錄和回應被用戶觸發的事件</li>\n<li>當我們需要更新 component 顯示的東西，叫做 “this.setState”</li>\n<li>只能用 “setState” 來改變 state，不要用 “this.state = 123”</li>\n</ul>\n</li>\n<li>用 renderAlbums 取得值，map 在這邊是 foreach 的功能</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderAlbums () &#123;</div><div class=\"line\">    return this.state.albums.map(album =&gt; &lt;Text&gt;&#123;album.title&#125;&lt;/Text&gt;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"20\">\n<li>把 renderAlbums 放在 &lt;View&gt;&lt;/View&gt; 裡面<br>\n<code>{this.renderAlbums()}</code></li>\n<li>新增 key</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderAlbums () &#123;</div><div class=\"line\">        return this.state.albums.map(album =&gt;</div><div class=\"line\">            &lt;Text key=&#123;album.title&#125;&gt;&#123;album.title&#125;&lt;/Text&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"22\">\n<li>新增 AlbumDetail.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const AlbumDetail = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default AlbumDetail;</div></pre></td></tr></table></figure>\n<ol start=\"23\">\n<li>在 AlbumList 引入 AlbumDetail<br>\n<code>import AlbumDetail from './AlbumDetail';</code></li>\n<li>修改 renderAlbums，album={album} 是將 props 命名為 album，並傳給 AlbumList</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderAlbums () &#123;</div><div class=\"line\">    return this.state.albums.map(album =&gt;</div><div class=\"line\">        &lt;AlbumDetail key=&#123;album.title&#125; album=&#123;album&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"25\">\n<li>新增 /src/components/Card.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Card = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;&lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default Card;</div></pre></td></tr></table></figure>\n<ol start=\"26\">\n<li>幫 Card 新增 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    containerStyle: &#123;</div><div class=\"line\">        borderWidth: 1,</div><div class=\"line\">        borderRadius: 2,</div><div class=\"line\">        borderColor: &apos;#ddd&apos;,</div><div class=\"line\">        borderBottomWidth: 0,</div><div class=\"line\">        shadowColor: &apos;#000&apos;,</div><div class=\"line\">        shadowOffset: &#123; width: 0, height: 2 &#125;,</div><div class=\"line\">        shadowOpacity: 0.1,</div><div class=\"line\">        shadowRadius: 2,</div><div class=\"line\">        elevation: 1,</div><div class=\"line\">        marginLeft: 5,</div><div class=\"line\">        marginRight: 5,</div><div class=\"line\">        marginTop: 10</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"27\">\n<li>在 Card 的 View 裡面新增 style<br>\n<code>&lt;View style={styles.containerStyle}&gt;&lt;/View&gt;</code></li>\n<li>在 AlbumDetails 引用 Card<br>\n<code>import Card from './Card';</code></li>\n<li>把 View 改成 Card</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Card&gt;</div><div class=\"line\">    &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">&lt;/Card&gt;</div></pre></td></tr></table></figure>\n<ol start=\"30\">\n<li>把上層的值傳到這邊使用，用 props.children 就可以直接取得值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Card = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;styles.containerStyle&#125;&gt;</div><div class=\"line\">            &#123;props.children&#125;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"31\">\n<li>新增 /src/components/CardSection.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const CardSection = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;styles.containerStyle&#125;&gt;</div><div class=\"line\">            &#123;props.children&#125;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const styles = &#123;</div><div class=\"line\">    containerStyle: &#123;</div><div class=\"line\">        borderBottomWidth: 1,</div><div class=\"line\">        padding: 5,</div><div class=\"line\">        backgroundColor: &apos;#fff&apos;,</div><div class=\"line\">        justifyContent: &apos;flex-start&apos;,</div><div class=\"line\">        flexDirection: &apos;row&apos;,</div><div class=\"line\">        borderColor: &apos;#ddd&apos;,</div><div class=\"line\">        position: &apos;relative&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default CardSection;</div></pre></td></tr></table></figure>\n<ol start=\"32\">\n<li>在 AlbumDetail 加入 CardSection</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Card&gt;</div><div class=\"line\">    &lt;CardSection&gt;</div><div class=\"line\">        &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">    &lt;/CardSection&gt;</div><div class=\"line\">&lt;/Card&gt;</div></pre></td></tr></table></figure>"},{"title":"React Native 快速學習自我挑戰 Day3","thumbnail":["/images/learning/reactNative/reactnativeday3.jpg"],"date":"2017-08-08T09:41:08.000Z","_content":"<img src=\"/images/learning/reactNative/reactnativeday3.jpg\">\n\n***\n### 處理 Component 的排版\n#### Flexbox 排版\n1. justifyContent: 'space-between'：上下頂到邊，平均分配空間排列\n2. justifyContent: 'space-around'：上下不頂到邊，平均分配空間排列\n3. flexDirection：'row', 'column'：決定方向\n#### 修改版面\n1. 修改 AlbumDetail.js，在 react-native 多引用 View\n`import { Text, View } from 'react-native';`\n2. 修改 AlbumDetail，將 artist 放進去\n```\nconst AlbumDetail = (props) => {\n    return (\n        <Card>\n            <CardSection>\n                <View></View>\n                <View style={styles.headerContentStyle}>\n                    <Text>{props.album.title}</Text>\n                    <Text>{props.album.artist}</Text>\n                </View>\n            </CardSection>\n        </Card>\n    );\n};\n```\n3. 新增 styles\n```\nconst styles = {\n    headerContentStyle: {\n        flexDirection: 'column',\n        justifyContent: 'space-around'\n    }\n};\n```\n4. 在 react-native 多引用 Image\n`import { Text, View, Image } from 'react-native';`\n5. 新增 image\n```\n<View>\n    <Image source={{ uri: props.album.thumbnail_image }} />\n</View>\n```\n6. 簡化傳遞的參數\n```\nconst AlbumDetail = ({ album }) => {\n    const { title, artist, thumbnail_image } = album;\n    \n    return (\n        <Card>\n            <CardSection>\n                <View>\n                    <Image source={{ uri: thumbnail_image }} />\n                </View>\n                <View style={styles.headerContentStyle}>\n                    <Text>{title}</Text>\n                    <Text>{artist}</Text>\n                </View>\n            </CardSection>\n        </Card>\n    );\n};\n```\n7. 新增圖片的 style\n```\nthumbnailStyle: {\n    height:50,\n    width: 50\n}\n```\n8. 將 sytle 加到圖片的 tag\n`<Image style={styles.thumbnailStyle} source={{\"{{uri: thumbnail_image\" }}}} />`\n9. 簡化 style 的參數\n```\nconst AlbumDetail = ({ album }) => {\n    const { title, artist, thumbnail_image } = album;\n    const { thumbnailStyle, headerContentStyle} = styles;\n\n    return (\n        <Card>\n            <CardSection>\n                <View>\n                    <Image\n                        style={thumbnailStyle}\n                        source={{ uri: thumbnail_image }}\n                    />\n                </View>\n                <View style={headerContentStyle}>\n                    <Text>{title}</Text>\n                    <Text>{artist}</Text>\n                </View>\n            </CardSection>\n        </Card>\n    );\n};\n```\n10. 新增兩個 styles: headerTextStyle、thumbnailContainerStyle\n```\nconst styles = {\n    headerContentStyle: {\n        flexDirection: 'column',\n        justifyContent: 'space-around'\n    },\n    headerTextStyle: {\n        fontSize: 18\n    },\n    thumbnailStyle: {\n        height:50,\n        width: 50\n    },\n    thumbnailContainerStyle: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 10,\n        marginRight: 10\n    }\n};\n```\n11. 加入簡化的常數\n```\nconst {\n    thumbnailStyle,\n    headerTextStyle,\n    headerContentStyle,\n    thumbnailContainerStyle\n} = styles;\n```\n12. 加入 style\n```\n<CardSection>\n    <View style={thumbnailContainerStyle}>\n        <Image\n            style={thumbnailStyle}\n            source={{ uri: thumbnail_image }}\n        />\n    </View>\n    <View style={headerContentStyle}>\n        <Text style={headerTextStyle}>{title}</Text>\n        <Text>{artist}</Text>\n    </View>\n</CardSection>\n```\n13. 新增專輯封面 style\n```\nimageStyle: {\n    height: 300,\n    flex: 1,\n    width: null\n}\n```\n```\nconst {\n    thumbnailStyle,\n    headerTextStyle,\n    headerContentStyle,\n    thumbnailContainerStyle,\n    imageStyle\n} = styles;\n```\n```\n<CardSection>\n    <Image style={imageStyle} source={{ uri: image }} />\n</CardSection>\n```\n14. 讓畫面可以滾動，修改 albumList.js\n`import { ScrollView } from 'react-native';`\n```\nrender () {\n    console.log(this.state);\n\n    return (\n        <ScrollView>\n            {this.renderAlbums()}\n        </ScrollView>\n    );\n}\n```\n15. 畫面卡住的問題，要修改 index.ios.js\n```\nconst App = () => (\n    <View style={{ flex: 1 }}>\n        <Header headerText={'Albums'} />\n        <AlbumList />\n    </View>\n);\n```\n16. 新增 src/components/Button.js\n```\nimport React from 'react';\nimport { Text } from 'react-native';\n\nconst Button = () => {\n    return (\n        <Text>Click me!!!</Text>\n    );\n};\n\nexport default Button;\n```\n17. 在 albumDetail.js 引用 Button\n`import Button from './Button';`\n再新增一個 CardSection\n```\n<CardSection>\n    <Button/>\n</CardSection>\n```\n18. 在 Button.js 新增 TouchableOpacity，讓使用者點擊 button 會有反饋\n`import { Text, TouchableOpacity } from 'react-native';`\n```\n<TouchableOpacity>\n    <Text>Click me!!!</Text>\n</TouchableOpacity>\n```\n19. 新增 Button style\n```\nconst styles = {\n    buttonStyle: {\n        flex: 1,\n        alignSelf: 'stretch',\n        backgroundColor: '#fff',\n        borderRadius: 5,\n        borderWidth: 1,\n        borderColor: '#007aff',\n        marginLeft: 5,\n        marginRight: 5\n    }\n};\n```\n```\nconst Button = () => {\n    const { buttonStyle } = styles;\n\n    return (\n        <TouchableOpacity style={buttonStyle}>\n            <Text>Click me!!!</Text>\n        </TouchableOpacity>\n    );\n};\n```\n20. 新增 Text style\n```\ntextStyle: {\n    alignSelf: 'center',\n    color: '#007aff',\n    fontSize: 16,\n    fontWeight: '600',\n    paddingTop: 10,\n    paddingBottom: 10\n},\n```\n```\nconst Button = () => {\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        <TouchableOpacity style={buttonStyle}>\n            <Text style={textStyle}>\n                Click me!!!\n            </Text>\n        </TouchableOpacity>\n    );\n};\n```\n21. 在 albumDetail.js 加上 onPress function，然後把値傳送到 Button.js \n```\n<CardSection>\n    <Button onPress={() => console.log(title)} />\n</CardSection>\n```\n```\nconst Button = ({ onPress }) => {\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        <TouchableOpacity onPress={onPress} style={buttonStyle}>\n            <Text style={textStyle}>\n                Click me!!!\n            </Text>\n        </TouchableOpacity>\n    );\n};\n```\n22. 在 albumDetail.js 新增 button 的超連結\n`import { Text, View, Image, Linking } from 'react-native';`\n`const { title, artist, thumbnail_image, image, url } = album;`\n```\n<CardSection>\n    <Button onPress={() => Linking.openURL(url)} />\n</CardSection>\n```\n23. 讓 Button 文字元件化\n修改 albumDetail.js\n```\n<CardSection>\n    <Button onPress={() => Linking.openURL(url)}>\n        Buy Now\n    </Button>\n</CardSection>\n```\n修改 Button.js\n```\nconst Button = ({ onPress, children }) => {\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        <TouchableOpacity onPress={onPress} style={buttonStyle}>\n            <Text style={textStyle}>\n                {children}\n            </Text>\n        </TouchableOpacity>\n    );\n};\n```","source":"_posts/React-Native-快速學習自我挑戰-Day3.md","raw":"---\ntitle: React Native 快速學習自我挑戰 Day3\nthumbnail:\n  - /images/learning/reactNative/reactnativeday3.jpg\ndate: 2017-08-08 17:41:08\ncategories: 學習歷程\ntags: React-Native\n---\n<img src=\"/images/learning/reactNative/reactnativeday3.jpg\">\n\n***\n### 處理 Component 的排版\n#### Flexbox 排版\n1. justifyContent: 'space-between'：上下頂到邊，平均分配空間排列\n2. justifyContent: 'space-around'：上下不頂到邊，平均分配空間排列\n3. flexDirection：'row', 'column'：決定方向\n#### 修改版面\n1. 修改 AlbumDetail.js，在 react-native 多引用 View\n`import { Text, View } from 'react-native';`\n2. 修改 AlbumDetail，將 artist 放進去\n```\nconst AlbumDetail = (props) => {\n    return (\n        <Card>\n            <CardSection>\n                <View></View>\n                <View style={styles.headerContentStyle}>\n                    <Text>{props.album.title}</Text>\n                    <Text>{props.album.artist}</Text>\n                </View>\n            </CardSection>\n        </Card>\n    );\n};\n```\n3. 新增 styles\n```\nconst styles = {\n    headerContentStyle: {\n        flexDirection: 'column',\n        justifyContent: 'space-around'\n    }\n};\n```\n4. 在 react-native 多引用 Image\n`import { Text, View, Image } from 'react-native';`\n5. 新增 image\n```\n<View>\n    <Image source={{ uri: props.album.thumbnail_image }} />\n</View>\n```\n6. 簡化傳遞的參數\n```\nconst AlbumDetail = ({ album }) => {\n    const { title, artist, thumbnail_image } = album;\n    \n    return (\n        <Card>\n            <CardSection>\n                <View>\n                    <Image source={{ uri: thumbnail_image }} />\n                </View>\n                <View style={styles.headerContentStyle}>\n                    <Text>{title}</Text>\n                    <Text>{artist}</Text>\n                </View>\n            </CardSection>\n        </Card>\n    );\n};\n```\n7. 新增圖片的 style\n```\nthumbnailStyle: {\n    height:50,\n    width: 50\n}\n```\n8. 將 sytle 加到圖片的 tag\n`<Image style={styles.thumbnailStyle} source={{\"{{uri: thumbnail_image\" }}}} />`\n9. 簡化 style 的參數\n```\nconst AlbumDetail = ({ album }) => {\n    const { title, artist, thumbnail_image } = album;\n    const { thumbnailStyle, headerContentStyle} = styles;\n\n    return (\n        <Card>\n            <CardSection>\n                <View>\n                    <Image\n                        style={thumbnailStyle}\n                        source={{ uri: thumbnail_image }}\n                    />\n                </View>\n                <View style={headerContentStyle}>\n                    <Text>{title}</Text>\n                    <Text>{artist}</Text>\n                </View>\n            </CardSection>\n        </Card>\n    );\n};\n```\n10. 新增兩個 styles: headerTextStyle、thumbnailContainerStyle\n```\nconst styles = {\n    headerContentStyle: {\n        flexDirection: 'column',\n        justifyContent: 'space-around'\n    },\n    headerTextStyle: {\n        fontSize: 18\n    },\n    thumbnailStyle: {\n        height:50,\n        width: 50\n    },\n    thumbnailContainerStyle: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 10,\n        marginRight: 10\n    }\n};\n```\n11. 加入簡化的常數\n```\nconst {\n    thumbnailStyle,\n    headerTextStyle,\n    headerContentStyle,\n    thumbnailContainerStyle\n} = styles;\n```\n12. 加入 style\n```\n<CardSection>\n    <View style={thumbnailContainerStyle}>\n        <Image\n            style={thumbnailStyle}\n            source={{ uri: thumbnail_image }}\n        />\n    </View>\n    <View style={headerContentStyle}>\n        <Text style={headerTextStyle}>{title}</Text>\n        <Text>{artist}</Text>\n    </View>\n</CardSection>\n```\n13. 新增專輯封面 style\n```\nimageStyle: {\n    height: 300,\n    flex: 1,\n    width: null\n}\n```\n```\nconst {\n    thumbnailStyle,\n    headerTextStyle,\n    headerContentStyle,\n    thumbnailContainerStyle,\n    imageStyle\n} = styles;\n```\n```\n<CardSection>\n    <Image style={imageStyle} source={{ uri: image }} />\n</CardSection>\n```\n14. 讓畫面可以滾動，修改 albumList.js\n`import { ScrollView } from 'react-native';`\n```\nrender () {\n    console.log(this.state);\n\n    return (\n        <ScrollView>\n            {this.renderAlbums()}\n        </ScrollView>\n    );\n}\n```\n15. 畫面卡住的問題，要修改 index.ios.js\n```\nconst App = () => (\n    <View style={{ flex: 1 }}>\n        <Header headerText={'Albums'} />\n        <AlbumList />\n    </View>\n);\n```\n16. 新增 src/components/Button.js\n```\nimport React from 'react';\nimport { Text } from 'react-native';\n\nconst Button = () => {\n    return (\n        <Text>Click me!!!</Text>\n    );\n};\n\nexport default Button;\n```\n17. 在 albumDetail.js 引用 Button\n`import Button from './Button';`\n再新增一個 CardSection\n```\n<CardSection>\n    <Button/>\n</CardSection>\n```\n18. 在 Button.js 新增 TouchableOpacity，讓使用者點擊 button 會有反饋\n`import { Text, TouchableOpacity } from 'react-native';`\n```\n<TouchableOpacity>\n    <Text>Click me!!!</Text>\n</TouchableOpacity>\n```\n19. 新增 Button style\n```\nconst styles = {\n    buttonStyle: {\n        flex: 1,\n        alignSelf: 'stretch',\n        backgroundColor: '#fff',\n        borderRadius: 5,\n        borderWidth: 1,\n        borderColor: '#007aff',\n        marginLeft: 5,\n        marginRight: 5\n    }\n};\n```\n```\nconst Button = () => {\n    const { buttonStyle } = styles;\n\n    return (\n        <TouchableOpacity style={buttonStyle}>\n            <Text>Click me!!!</Text>\n        </TouchableOpacity>\n    );\n};\n```\n20. 新增 Text style\n```\ntextStyle: {\n    alignSelf: 'center',\n    color: '#007aff',\n    fontSize: 16,\n    fontWeight: '600',\n    paddingTop: 10,\n    paddingBottom: 10\n},\n```\n```\nconst Button = () => {\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        <TouchableOpacity style={buttonStyle}>\n            <Text style={textStyle}>\n                Click me!!!\n            </Text>\n        </TouchableOpacity>\n    );\n};\n```\n21. 在 albumDetail.js 加上 onPress function，然後把値傳送到 Button.js \n```\n<CardSection>\n    <Button onPress={() => console.log(title)} />\n</CardSection>\n```\n```\nconst Button = ({ onPress }) => {\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        <TouchableOpacity onPress={onPress} style={buttonStyle}>\n            <Text style={textStyle}>\n                Click me!!!\n            </Text>\n        </TouchableOpacity>\n    );\n};\n```\n22. 在 albumDetail.js 新增 button 的超連結\n`import { Text, View, Image, Linking } from 'react-native';`\n`const { title, artist, thumbnail_image, image, url } = album;`\n```\n<CardSection>\n    <Button onPress={() => Linking.openURL(url)} />\n</CardSection>\n```\n23. 讓 Button 文字元件化\n修改 albumDetail.js\n```\n<CardSection>\n    <Button onPress={() => Linking.openURL(url)}>\n        Buy Now\n    </Button>\n</CardSection>\n```\n修改 Button.js\n```\nconst Button = ({ onPress, children }) => {\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        <TouchableOpacity onPress={onPress} style={buttonStyle}>\n            <Text style={textStyle}>\n                {children}\n            </Text>\n        </TouchableOpacity>\n    );\n};\n```","slug":"React-Native-快速學習自我挑戰-Day3","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxu004o7ifau121pl6h","content":"<img src=\"/images/learning/reactNative/reactnativeday3.jpg\">\n<hr>\n<h3>處理 Component 的排版</h3>\n<h4>Flexbox 排版</h4>\n<ol>\n<li>justifyContent: ‘space-between’：上下頂到邊，平均分配空間排列</li>\n<li>justifyContent: ‘space-around’：上下不頂到邊，平均分配空間排列</li>\n<li>flexDirection：‘row’, ‘column’：決定方向</li>\n</ol>\n<h4>修改版面</h4>\n<ol>\n<li>修改 AlbumDetail.js，在 react-native 多引用 View<br>\n<code>import { Text, View } from 'react-native';</code></li>\n<li>修改 AlbumDetail，將 artist 放進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">const AlbumDetail = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Card&gt;</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;View&gt;&lt;/View&gt;</div><div class=\"line\">                &lt;View style=&#123;styles.headerContentStyle&#125;&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;props.album.artist&#125;&lt;/Text&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        &lt;/Card&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    headerContentStyle: &#123;</div><div class=\"line\">        flexDirection: &apos;column&apos;,</div><div class=\"line\">        justifyContent: &apos;space-around&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 react-native 多引用 Image<br>\n<code>import { Text, View, Image } from 'react-native';</code></li>\n<li>新增 image</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">    &lt;Image source=&#123;&#123; uri: props.album.thumbnail_image &#125;&#125; /&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>簡化傳遞的參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const AlbumDetail = (&#123; album &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; title, artist, thumbnail_image &#125; = album;</div><div class=\"line\">    </div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Card&gt;</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;View&gt;</div><div class=\"line\">                    &lt;Image source=&#123;&#123; uri: thumbnail_image &#125;&#125; /&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">                &lt;View style=&#123;styles.headerContentStyle&#125;&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;title&#125;&lt;/Text&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        &lt;/Card&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增圖片的 style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">thumbnailStyle: &#123;</div><div class=\"line\">    height:50,</div><div class=\"line\">    width: 50</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>將 sytle 加到圖片的 tag<br>\n<code>&lt;Image style={styles.thumbnailStyle} source={{uri: thumbnail_image}} /&gt;</code></li>\n<li>簡化 style 的參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">const AlbumDetail = (&#123; album &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; title, artist, thumbnail_image &#125; = album;</div><div class=\"line\">    const &#123; thumbnailStyle, headerContentStyle&#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Card&gt;</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;View&gt;</div><div class=\"line\">                    &lt;Image</div><div class=\"line\">                        style=&#123;thumbnailStyle&#125;</div><div class=\"line\">                        source=&#123;&#123; uri: thumbnail_image &#125;&#125;</div><div class=\"line\">                    /&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">                &lt;View style=&#123;headerContentStyle&#125;&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;title&#125;&lt;/Text&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        &lt;/Card&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>新增兩個 styles: headerTextStyle、thumbnailContainerStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    headerContentStyle: &#123;</div><div class=\"line\">        flexDirection: &apos;column&apos;,</div><div class=\"line\">        justifyContent: &apos;space-around&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    headerTextStyle: &#123;</div><div class=\"line\">        fontSize: 18</div><div class=\"line\">    &#125;,</div><div class=\"line\">    thumbnailStyle: &#123;</div><div class=\"line\">        height:50,</div><div class=\"line\">        width: 50</div><div class=\"line\">    &#125;,</div><div class=\"line\">    thumbnailContainerStyle: &#123;</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;,</div><div class=\"line\">        marginLeft: 10,</div><div class=\"line\">        marginRight: 10</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>加入簡化的常數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;</div><div class=\"line\">    thumbnailStyle,</div><div class=\"line\">    headerTextStyle,</div><div class=\"line\">    headerContentStyle,</div><div class=\"line\">    thumbnailContainerStyle</div><div class=\"line\">&#125; = styles;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>加入 style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;View style=&#123;thumbnailContainerStyle&#125;&gt;</div><div class=\"line\">        &lt;Image</div><div class=\"line\">            style=&#123;thumbnailStyle&#125;</div><div class=\"line\">            source=&#123;&#123; uri: thumbnail_image &#125;&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">    &lt;View style=&#123;headerContentStyle&#125;&gt;</div><div class=\"line\">        &lt;Text style=&#123;headerTextStyle&#125;&gt;&#123;title&#125;&lt;/Text&gt;</div><div class=\"line\">        &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>新增專輯封面 style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageStyle: &#123;</div><div class=\"line\">    height: 300,</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    width: null</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;</div><div class=\"line\">    thumbnailStyle,</div><div class=\"line\">    headerTextStyle,</div><div class=\"line\">    headerContentStyle,</div><div class=\"line\">    thumbnailContainerStyle,</div><div class=\"line\">    imageStyle</div><div class=\"line\">&#125; = styles;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Image style=&#123;imageStyle&#125; source=&#123;&#123; uri: image &#125;&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li>讓畫面可以滾動，修改 albumList.js<br>\n<code>import { ScrollView } from 'react-native';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">render () &#123;</div><div class=\"line\">    console.log(this.state);</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;ScrollView&gt;</div><div class=\"line\">            &#123;this.renderAlbums()&#125;</div><div class=\"line\">        &lt;/ScrollView&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li>畫面卡住的問題，要修改 index.ios.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;View style=&#123;&#123; flex: 1 &#125;&#125;&gt;</div><div class=\"line\">        &lt;Header headerText=&#123;&apos;Albums&apos;&#125; /&gt;</div><div class=\"line\">        &lt;AlbumList /&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ol start=\"16\">\n<li>新增 src/components/Button.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Button = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Text&gt;Click me!!!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default Button;</div></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li>在 albumDetail.js 引用 Button<br>\n<code>import Button from './Button';</code><br>\n再新增一個 CardSection</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button/&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"18\">\n<li>在 Button.js 新增 TouchableOpacity，讓使用者點擊 button 會有反饋<br>\n<code>import { Text, TouchableOpacity } from 'react-native';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;TouchableOpacity&gt;</div><div class=\"line\">    &lt;Text&gt;Click me!!!&lt;/Text&gt;</div><div class=\"line\">&lt;/TouchableOpacity&gt;</div></pre></td></tr></table></figure>\n<ol start=\"19\">\n<li>新增 Button style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    buttonStyle: &#123;</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        alignSelf: &apos;stretch&apos;,</div><div class=\"line\">        backgroundColor: &apos;#fff&apos;,</div><div class=\"line\">        borderRadius: 5,</div><div class=\"line\">        borderWidth: 1,</div><div class=\"line\">        borderColor: &apos;#007aff&apos;,</div><div class=\"line\">        marginLeft: 5,</div><div class=\"line\">        marginRight: 5</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = () =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text&gt;Click me!!!&lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"20\">\n<li>新增 Text style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">textStyle: &#123;</div><div class=\"line\">    alignSelf: &apos;center&apos;,</div><div class=\"line\">    color: &apos;#007aff&apos;,</div><div class=\"line\">    fontSize: 16,</div><div class=\"line\">    fontWeight: &apos;600&apos;,</div><div class=\"line\">    paddingTop: 10,</div><div class=\"line\">    paddingBottom: 10</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = () =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                Click me!!!</div><div class=\"line\">            &lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"21\">\n<li>在 albumDetail.js 加上 onPress function，然後把値傳送到 Button.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; console.log(title)&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = (&#123; onPress &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                Click me!!!</div><div class=\"line\">            &lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"22\">\n<li>在 albumDetail.js 新增 button 的超連結<br>\n<code>import { Text, View, Image, Linking } from 'react-native';</code><br>\n<code>const { title, artist, thumbnail_image, image, url } = album;</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; Linking.openURL(url)&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"23\">\n<li>讓 Button 文字元件化<br>\n修改 albumDetail.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; Linking.openURL(url)&#125;&gt;</div><div class=\"line\">        Buy Now</div><div class=\"line\">    &lt;/Button&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<p>修改 Button.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = (&#123; onPress, children &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                &#123;children&#125;</div><div class=\"line\">            &lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/reactNative/reactnativeday3.jpg\">\n<hr>\n<h3>處理 Component 的排版</h3>\n<h4>Flexbox 排版</h4>\n<ol>\n<li>justifyContent: ‘space-between’：上下頂到邊，平均分配空間排列</li>\n<li>justifyContent: ‘space-around’：上下不頂到邊，平均分配空間排列</li>\n<li>flexDirection：‘row’, ‘column’：決定方向</li>\n</ol>\n<h4>修改版面</h4>\n<ol>\n<li>修改 AlbumDetail.js，在 react-native 多引用 View<br>\n<code>import { Text, View } from 'react-native';</code></li>\n<li>修改 AlbumDetail，將 artist 放進去</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">const AlbumDetail = (props) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Card&gt;</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;View&gt;&lt;/View&gt;</div><div class=\"line\">                &lt;View style=&#123;styles.headerContentStyle&#125;&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;props.album.artist&#125;&lt;/Text&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        &lt;/Card&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    headerContentStyle: &#123;</div><div class=\"line\">        flexDirection: &apos;column&apos;,</div><div class=\"line\">        justifyContent: &apos;space-around&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 react-native 多引用 Image<br>\n<code>import { Text, View, Image } from 'react-native';</code></li>\n<li>新增 image</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">    &lt;Image source=&#123;&#123; uri: props.album.thumbnail_image &#125;&#125; /&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>簡化傳遞的參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const AlbumDetail = (&#123; album &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; title, artist, thumbnail_image &#125; = album;</div><div class=\"line\">    </div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Card&gt;</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;View&gt;</div><div class=\"line\">                    &lt;Image source=&#123;&#123; uri: thumbnail_image &#125;&#125; /&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">                &lt;View style=&#123;styles.headerContentStyle&#125;&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;title&#125;&lt;/Text&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        &lt;/Card&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>新增圖片的 style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">thumbnailStyle: &#123;</div><div class=\"line\">    height:50,</div><div class=\"line\">    width: 50</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>將 sytle 加到圖片的 tag<br>\n<code>&lt;Image style={styles.thumbnailStyle} source={{uri: thumbnail_image}} /&gt;</code></li>\n<li>簡化 style 的參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">const AlbumDetail = (&#123; album &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; title, artist, thumbnail_image &#125; = album;</div><div class=\"line\">    const &#123; thumbnailStyle, headerContentStyle&#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Card&gt;</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;View&gt;</div><div class=\"line\">                    &lt;Image</div><div class=\"line\">                        style=&#123;thumbnailStyle&#125;</div><div class=\"line\">                        source=&#123;&#123; uri: thumbnail_image &#125;&#125;</div><div class=\"line\">                    /&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">                &lt;View style=&#123;headerContentStyle&#125;&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;title&#125;&lt;/Text&gt;</div><div class=\"line\">                    &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        &lt;/Card&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>新增兩個 styles: headerTextStyle、thumbnailContainerStyle</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    headerContentStyle: &#123;</div><div class=\"line\">        flexDirection: &apos;column&apos;,</div><div class=\"line\">        justifyContent: &apos;space-around&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    headerTextStyle: &#123;</div><div class=\"line\">        fontSize: 18</div><div class=\"line\">    &#125;,</div><div class=\"line\">    thumbnailStyle: &#123;</div><div class=\"line\">        height:50,</div><div class=\"line\">        width: 50</div><div class=\"line\">    &#125;,</div><div class=\"line\">    thumbnailContainerStyle: &#123;</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;,</div><div class=\"line\">        marginLeft: 10,</div><div class=\"line\">        marginRight: 10</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>加入簡化的常數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;</div><div class=\"line\">    thumbnailStyle,</div><div class=\"line\">    headerTextStyle,</div><div class=\"line\">    headerContentStyle,</div><div class=\"line\">    thumbnailContainerStyle</div><div class=\"line\">&#125; = styles;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>加入 style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;View style=&#123;thumbnailContainerStyle&#125;&gt;</div><div class=\"line\">        &lt;Image</div><div class=\"line\">            style=&#123;thumbnailStyle&#125;</div><div class=\"line\">            source=&#123;&#123; uri: thumbnail_image &#125;&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">    &lt;View style=&#123;headerContentStyle&#125;&gt;</div><div class=\"line\">        &lt;Text style=&#123;headerTextStyle&#125;&gt;&#123;title&#125;&lt;/Text&gt;</div><div class=\"line\">        &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>新增專輯封面 style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageStyle: &#123;</div><div class=\"line\">    height: 300,</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    width: null</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;</div><div class=\"line\">    thumbnailStyle,</div><div class=\"line\">    headerTextStyle,</div><div class=\"line\">    headerContentStyle,</div><div class=\"line\">    thumbnailContainerStyle,</div><div class=\"line\">    imageStyle</div><div class=\"line\">&#125; = styles;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Image style=&#123;imageStyle&#125; source=&#123;&#123; uri: image &#125;&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li>讓畫面可以滾動，修改 albumList.js<br>\n<code>import { ScrollView } from 'react-native';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">render () &#123;</div><div class=\"line\">    console.log(this.state);</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;ScrollView&gt;</div><div class=\"line\">            &#123;this.renderAlbums()&#125;</div><div class=\"line\">        &lt;/ScrollView&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li>畫面卡住的問題，要修改 index.ios.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; (</div><div class=\"line\">    &lt;View style=&#123;&#123; flex: 1 &#125;&#125;&gt;</div><div class=\"line\">        &lt;Header headerText=&#123;&apos;Albums&apos;&#125; /&gt;</div><div class=\"line\">        &lt;AlbumList /&gt;</div><div class=\"line\">    &lt;/View&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ol start=\"16\">\n<li>新增 src/components/Button.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Button = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Text&gt;Click me!!!&lt;/Text&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default Button;</div></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li>在 albumDetail.js 引用 Button<br>\n<code>import Button from './Button';</code><br>\n再新增一個 CardSection</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button/&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"18\">\n<li>在 Button.js 新增 TouchableOpacity，讓使用者點擊 button 會有反饋<br>\n<code>import { Text, TouchableOpacity } from 'react-native';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;TouchableOpacity&gt;</div><div class=\"line\">    &lt;Text&gt;Click me!!!&lt;/Text&gt;</div><div class=\"line\">&lt;/TouchableOpacity&gt;</div></pre></td></tr></table></figure>\n<ol start=\"19\">\n<li>新增 Button style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    buttonStyle: &#123;</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        alignSelf: &apos;stretch&apos;,</div><div class=\"line\">        backgroundColor: &apos;#fff&apos;,</div><div class=\"line\">        borderRadius: 5,</div><div class=\"line\">        borderWidth: 1,</div><div class=\"line\">        borderColor: &apos;#007aff&apos;,</div><div class=\"line\">        marginLeft: 5,</div><div class=\"line\">        marginRight: 5</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = () =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text&gt;Click me!!!&lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"20\">\n<li>新增 Text style</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">textStyle: &#123;</div><div class=\"line\">    alignSelf: &apos;center&apos;,</div><div class=\"line\">    color: &apos;#007aff&apos;,</div><div class=\"line\">    fontSize: 16,</div><div class=\"line\">    fontWeight: &apos;600&apos;,</div><div class=\"line\">    paddingTop: 10,</div><div class=\"line\">    paddingBottom: 10</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = () =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                Click me!!!</div><div class=\"line\">            &lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"21\">\n<li>在 albumDetail.js 加上 onPress function，然後把値傳送到 Button.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; console.log(title)&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = (&#123; onPress &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                Click me!!!</div><div class=\"line\">            &lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"22\">\n<li>在 albumDetail.js 新增 button 的超連結<br>\n<code>import { Text, View, Image, Linking } from 'react-native';</code><br>\n<code>const { title, artist, thumbnail_image, image, url } = album;</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; Linking.openURL(url)&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"23\">\n<li>讓 Button 文字元件化<br>\n修改 albumDetail.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; Linking.openURL(url)&#125;&gt;</div><div class=\"line\">        Buy Now</div><div class=\"line\">    &lt;/Button&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<p>修改 Button.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = (&#123; onPress, children &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                &#123;children&#125;</div><div class=\"line\">            &lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableOpacity&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"React Native 快速學習自我挑戰 Day4","thumbnail":["/images/learning/reactNative/reactnativeday4.jpg"],"date":"2017-08-15T21:41:09.000Z","_content":"<img src=\"/images/learning/reactNative/reactnativeday4.jpg\">\n\n***\n### 使用 Firebase 進行認證\n#### 前置作業\n1. 新增新的專案 `react-native init auth`\n2. 新增 src/app.js\n```\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nclass App extends Component {\n    render() {\n        return (\n            <View>\n                <Text>An App!</Text>\n            </View>\n        );\n    }\n}\n\nexport default App;\n```\n3. 在 ios.index.js 把 app.js 放進來\n```\nimport { AppRegistry } from 'react-native';\nimport App from './src/app';\n\nAppRegistry.registerComponent('auth', () => App);\n```\n4. 將 Album 專案的 src/components/Button.js Card.js CardSection.js header.js 複製到新專案目錄的 src/components/common/ 底下\n5. 在 src/components/common 底下新增 index.js\n```\nexport * from './BUtton';\nexport * from './Card';\nexport * from './CardSection';\nexport * from './Header';\n```\n6. 在個別檔案用元件的方式輸出\n`export { Button };`\n`export { Card };`\n`export { CardSection };`\n`export { Header };`\n#### Firebase\n1. [Firebase](https://firebase.google.com/)\n2. 在專案目錄下安裝 firebase `npm install --save firebase`\n3. Import firebase，且在 app.js 的 component 下新增 componentWillMount\n`import firebase from 'firebase';`\n```\ncomponentWillMount() {\n    firebase.initializeApp({\n        {CONFIG CODE FROM FIREBASE}\n    });\n}\n```\n4. 新增 src/components/LoginForm.js\n```\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { Button, Card, CardSection } from \"./common\";\n\nclass LoginForm extends Component {\n    render() {\n        return (\n            <Card>\n                <CardSection />\n                <CardSection />\n                <CardSection>\n                    <Button>\n                        Log in\n                    </Button>\n                </CardSection>\n            </Card>\n        );\n    }\n}\n\nexport default LoginForm;\n```\n5. 在 app.js 引用 LoginForm 且放到 View 裡面\n`import LoginForm from './components/LoginForm';`\n```\n<View>\n    <Header headerText=\"Authentication\" />\n    <LoginForm />\n</View>\n```\n6. 在 LoginForm.js 新增輸入欄位\n`import { TextInput } from 'react-native';`\n```\n<CardSection>\n    <TextInput style={{ height: 20, width: 100 }} />\n</CardSection>\n```\n7. 產生 state\n`state = { text: '' };`\n```\n<CardSection>\n    <TextInput\n        value={this.state.text}\n        onChangeText={text => this.setState({ text })}\n        style={{ height: 20, width: 100 }}\n    />\n</CardSection>\n```\n8. Text input 流程：TextInput => 使用者輸入 text => OnChange 事件被呼叫 => 給新的文字 「setState」=> 元件重新渲染\n9. 新增 src/components/common/Input.js\n```\nimport React from 'react';\nimport { TextInput, View, Text } from 'react-native';\n\nconst Input = ({ label }) => {\n    return (\n        <View>\n            <Text>{label}</Text>\n        </View>\n    );\n};\n\nexport { Input };\n```\n10. 在 common/index.js 加入 `export * from './Input';` 讓 input 可以到處存取\n11. 修改 LoginForm.js，把 import react-native 刪除，新增 Input 到 common import\n```\n<Input\n    value={this.state.text}\n    onChangeText={text => this.setState({ text })}\n/>\n```\n12. 修改 Input.js\n```\nconst Input = ({ label, value, onChangeText }) => {\n    return (\n        <View>\n            <Text>{label}</Text>\n            <TextInput\n                value={value}\n                onChangeText={onChangeText}\n                style={{ height: 20, width: 100 }}\n            />\n        </View>\n    );\n};\n\n```\n13. 在 Input.js 新增 styles \n```\nconst styles = {\n    inputStyle: {\n        color: '#000',\n        paddingRight: 5,\n        paddingLeft: 5,\n        fontSize: 18,\n        lineHight: 23,\n        flex: 2\n    },\n    labelStyle: {\n        fontSize: 18,\n        paddingLeft: 20,\n        flex: 1\n    },\n    containerStyle: {\n        height: 40,\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center'\n    }\n};\n```\n14. 在元件中加入 styles\n```\nconst Input = ({ label, value, onChangeText }) => {\n    const { inputStyle, labelStyle, containerStyle } = styles;\n\n    return (\n        <View style={containerStyle}>\n            <Text style={labelStyle}>{label}</Text>\n            <TextInput\n                style={inputStyle}\n                value={value}\n                onChangeText={onChangeText}\n            />\n        </View>\n    );\n};\n```\n15. 在 LoginForm.js 加入 label\n```\n<Input\n    label=\"Email\"\n    value={this.state.text}\n    onChangeText={text => this.setState({ text })}\n/>\n```\n16. 在 Input.js 加入 autoCorrect 且改成 false，讓 apple 不自動選取文字，新增 placeholder 參數\n```\n<TextInput\n    placeholder={placeholder}\n    autoCorrect={false}\n    style={inputStyle}\n    value={value}\n    onChangeText={onChangeText}\n/>\n```\n17. 取得上一層傳遞的 placeholder\n`const Input = ({ label, value, onChangeText, placeholder }) => {`\n18. 傳遞 placeholder 參數給 Input 元件\n```\n<Input\n    placeholder=\"user@gmail.com\"\n    label=\"Email\"\n    value={this.state.text}\n    onChangeText={text => this.setState({ text })}\n/>\n```\n19. 把 state 改為 email，避免重複使用參數\n```\nstate = { email: '' };\n\n<CardSection>\n    <Input\n        placeholder=\"user@gmail.com\"\n        label=\"Email\"\n        value={this.state.email}\n        onChangeText={email => this.setState({ email })}\n    />\n</CardSection>\n```\n20. 新增 password 欄位\n```\nstate = { email: '', password: '' };\n\n<CardSection>\n    <Input\n        placeholder=\"password\"\n        label=\"Password\"\n        value={this.state.password}\n        onChangeText={password => this.setState({ password })}\n    />\n</CardSection>\n```\n21. 在 Input.js 加入 secureTextEntry\n```\nconst Input = ({ label, value, onChangeText, placeholder, secureTextEntry }) => {\n    const { inputStyle, labelStyle, containerStyle } = styles;\n\n    return (\n        <View style={containerStyle}>\n            <Text style={labelStyle}>{label}</Text>\n            <TextInput\n                secureTextEntry={secureTextEntry}\n                placeholder={placeholder}\n                autoCorrect={false}\n                style={inputStyle}\n                value={value}\n                onChangeText={onChangeText}\n            />\n        </View>\n    );\n};\n```\n22. 直接加入 secureTextEntry，它就會知道是 true，如果沒有設定就是 undefined，在這邊跟 false 的意思一樣\n```\n<CardSection>\n    <Input\n        secureTextEntry\n        placeholder=\"password\"\n        label=\"Password\"\n        value={this.state.password}\n        onChangeText={password => this.setState({ password })}\n    />\n</CardSection>\n```","source":"_posts/React-Native-快速學習自我挑戰-Day4.md","raw":"---\ntitle: React Native 快速學習自我挑戰 Day4\nthumbnail:\n  - /images/learning/reactNative/reactnativeday4.jpg\ndate: 2017-08-16 05:41:09\ncategories: 學習歷程\ntags: React-Native\n---\n<img src=\"/images/learning/reactNative/reactnativeday4.jpg\">\n\n***\n### 使用 Firebase 進行認證\n#### 前置作業\n1. 新增新的專案 `react-native init auth`\n2. 新增 src/app.js\n```\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nclass App extends Component {\n    render() {\n        return (\n            <View>\n                <Text>An App!</Text>\n            </View>\n        );\n    }\n}\n\nexport default App;\n```\n3. 在 ios.index.js 把 app.js 放進來\n```\nimport { AppRegistry } from 'react-native';\nimport App from './src/app';\n\nAppRegistry.registerComponent('auth', () => App);\n```\n4. 將 Album 專案的 src/components/Button.js Card.js CardSection.js header.js 複製到新專案目錄的 src/components/common/ 底下\n5. 在 src/components/common 底下新增 index.js\n```\nexport * from './BUtton';\nexport * from './Card';\nexport * from './CardSection';\nexport * from './Header';\n```\n6. 在個別檔案用元件的方式輸出\n`export { Button };`\n`export { Card };`\n`export { CardSection };`\n`export { Header };`\n#### Firebase\n1. [Firebase](https://firebase.google.com/)\n2. 在專案目錄下安裝 firebase `npm install --save firebase`\n3. Import firebase，且在 app.js 的 component 下新增 componentWillMount\n`import firebase from 'firebase';`\n```\ncomponentWillMount() {\n    firebase.initializeApp({\n        {CONFIG CODE FROM FIREBASE}\n    });\n}\n```\n4. 新增 src/components/LoginForm.js\n```\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { Button, Card, CardSection } from \"./common\";\n\nclass LoginForm extends Component {\n    render() {\n        return (\n            <Card>\n                <CardSection />\n                <CardSection />\n                <CardSection>\n                    <Button>\n                        Log in\n                    </Button>\n                </CardSection>\n            </Card>\n        );\n    }\n}\n\nexport default LoginForm;\n```\n5. 在 app.js 引用 LoginForm 且放到 View 裡面\n`import LoginForm from './components/LoginForm';`\n```\n<View>\n    <Header headerText=\"Authentication\" />\n    <LoginForm />\n</View>\n```\n6. 在 LoginForm.js 新增輸入欄位\n`import { TextInput } from 'react-native';`\n```\n<CardSection>\n    <TextInput style={{ height: 20, width: 100 }} />\n</CardSection>\n```\n7. 產生 state\n`state = { text: '' };`\n```\n<CardSection>\n    <TextInput\n        value={this.state.text}\n        onChangeText={text => this.setState({ text })}\n        style={{ height: 20, width: 100 }}\n    />\n</CardSection>\n```\n8. Text input 流程：TextInput => 使用者輸入 text => OnChange 事件被呼叫 => 給新的文字 「setState」=> 元件重新渲染\n9. 新增 src/components/common/Input.js\n```\nimport React from 'react';\nimport { TextInput, View, Text } from 'react-native';\n\nconst Input = ({ label }) => {\n    return (\n        <View>\n            <Text>{label}</Text>\n        </View>\n    );\n};\n\nexport { Input };\n```\n10. 在 common/index.js 加入 `export * from './Input';` 讓 input 可以到處存取\n11. 修改 LoginForm.js，把 import react-native 刪除，新增 Input 到 common import\n```\n<Input\n    value={this.state.text}\n    onChangeText={text => this.setState({ text })}\n/>\n```\n12. 修改 Input.js\n```\nconst Input = ({ label, value, onChangeText }) => {\n    return (\n        <View>\n            <Text>{label}</Text>\n            <TextInput\n                value={value}\n                onChangeText={onChangeText}\n                style={{ height: 20, width: 100 }}\n            />\n        </View>\n    );\n};\n\n```\n13. 在 Input.js 新增 styles \n```\nconst styles = {\n    inputStyle: {\n        color: '#000',\n        paddingRight: 5,\n        paddingLeft: 5,\n        fontSize: 18,\n        lineHight: 23,\n        flex: 2\n    },\n    labelStyle: {\n        fontSize: 18,\n        paddingLeft: 20,\n        flex: 1\n    },\n    containerStyle: {\n        height: 40,\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center'\n    }\n};\n```\n14. 在元件中加入 styles\n```\nconst Input = ({ label, value, onChangeText }) => {\n    const { inputStyle, labelStyle, containerStyle } = styles;\n\n    return (\n        <View style={containerStyle}>\n            <Text style={labelStyle}>{label}</Text>\n            <TextInput\n                style={inputStyle}\n                value={value}\n                onChangeText={onChangeText}\n            />\n        </View>\n    );\n};\n```\n15. 在 LoginForm.js 加入 label\n```\n<Input\n    label=\"Email\"\n    value={this.state.text}\n    onChangeText={text => this.setState({ text })}\n/>\n```\n16. 在 Input.js 加入 autoCorrect 且改成 false，讓 apple 不自動選取文字，新增 placeholder 參數\n```\n<TextInput\n    placeholder={placeholder}\n    autoCorrect={false}\n    style={inputStyle}\n    value={value}\n    onChangeText={onChangeText}\n/>\n```\n17. 取得上一層傳遞的 placeholder\n`const Input = ({ label, value, onChangeText, placeholder }) => {`\n18. 傳遞 placeholder 參數給 Input 元件\n```\n<Input\n    placeholder=\"user@gmail.com\"\n    label=\"Email\"\n    value={this.state.text}\n    onChangeText={text => this.setState({ text })}\n/>\n```\n19. 把 state 改為 email，避免重複使用參數\n```\nstate = { email: '' };\n\n<CardSection>\n    <Input\n        placeholder=\"user@gmail.com\"\n        label=\"Email\"\n        value={this.state.email}\n        onChangeText={email => this.setState({ email })}\n    />\n</CardSection>\n```\n20. 新增 password 欄位\n```\nstate = { email: '', password: '' };\n\n<CardSection>\n    <Input\n        placeholder=\"password\"\n        label=\"Password\"\n        value={this.state.password}\n        onChangeText={password => this.setState({ password })}\n    />\n</CardSection>\n```\n21. 在 Input.js 加入 secureTextEntry\n```\nconst Input = ({ label, value, onChangeText, placeholder, secureTextEntry }) => {\n    const { inputStyle, labelStyle, containerStyle } = styles;\n\n    return (\n        <View style={containerStyle}>\n            <Text style={labelStyle}>{label}</Text>\n            <TextInput\n                secureTextEntry={secureTextEntry}\n                placeholder={placeholder}\n                autoCorrect={false}\n                style={inputStyle}\n                value={value}\n                onChangeText={onChangeText}\n            />\n        </View>\n    );\n};\n```\n22. 直接加入 secureTextEntry，它就會知道是 true，如果沒有設定就是 undefined，在這邊跟 false 的意思一樣\n```\n<CardSection>\n    <Input\n        secureTextEntry\n        placeholder=\"password\"\n        label=\"Password\"\n        value={this.state.password}\n        onChangeText={password => this.setState({ password })}\n    />\n</CardSection>\n```","slug":"React-Native-快速學習自我挑戰-Day4","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxu004r7ifa4wya6ysa","content":"<img src=\"/images/learning/reactNative/reactnativeday4.jpg\">\n<hr>\n<h3>使用 Firebase 進行認證</h3>\n<h4>前置作業</h4>\n<ol>\n<li>新增新的專案 <code>react-native init auth</code></li>\n<li>新增 src/app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">class App extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;An App!&lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default App;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 ios.index.js 把 app.js 放進來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</div><div class=\"line\">import App from &apos;./src/app&apos;;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;auth&apos;, () =&gt; App);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>將 Album 專案的 src/components/Button.js Card.js CardSection.js header.js 複製到新專案目錄的 src/components/common/ 底下</li>\n<li>在 src/components/common 底下新增 index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export * from &apos;./BUtton&apos;;</div><div class=\"line\">export * from &apos;./Card&apos;;</div><div class=\"line\">export * from &apos;./CardSection&apos;;</div><div class=\"line\">export * from &apos;./Header&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在個別檔案用元件的方式輸出<br>\n<code>export { Button };</code><br>\n<code>export { Card };</code><br>\n<code>export { CardSection };</code><br>\n<code>export { Header };</code></li>\n</ol>\n<h4>Firebase</h4>\n<ol>\n<li><a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"external\">Firebase</a></li>\n<li>在專案目錄下安裝 firebase <code>npm install --save firebase</code></li>\n<li>Import firebase，且在 app.js 的 component 下新增 componentWillMount<br>\n<code>import firebase from 'firebase';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    firebase.initializeApp(&#123;</div><div class=\"line\">        &#123;CONFIG CODE FROM FIREBASE&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 src/components/LoginForm.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\">import &#123; Button, Card, CardSection &#125; from &quot;./common&quot;;</div><div class=\"line\"></div><div class=\"line\">class LoginForm extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;Card&gt;</div><div class=\"line\">                &lt;CardSection /&gt;</div><div class=\"line\">                &lt;CardSection /&gt;</div><div class=\"line\">                &lt;CardSection&gt;</div><div class=\"line\">                    &lt;Button&gt;</div><div class=\"line\">                        Log in</div><div class=\"line\">                    &lt;/Button&gt;</div><div class=\"line\">                &lt;/CardSection&gt;</div><div class=\"line\">            &lt;/Card&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default LoginForm;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 app.js 引用 LoginForm 且放到 View 裡面<br>\n<code>import LoginForm from './components/LoginForm';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">    &lt;Header headerText=&quot;Authentication&quot; /&gt;</div><div class=\"line\">    &lt;LoginForm /&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 LoginForm.js 新增輸入欄位<br>\n<code>import { TextInput } from 'react-native';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;TextInput style=&#123;&#123; height: 20, width: 100 &#125;&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>產生 state<br>\n<code>state = { text: '' };</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;TextInput</div><div class=\"line\">        value=&#123;this.state.text&#125;</div><div class=\"line\">        onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">        style=&#123;&#123; height: 20, width: 100 &#125;&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Text input 流程：TextInput =&gt; 使用者輸入 text =&gt; OnChange 事件被呼叫 =&gt; 給新的文字 「setState」=&gt; 元件重新渲染</li>\n<li>新增 src/components/common/Input.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; TextInput, View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Input = (&#123; label &#125;) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export &#123; Input &#125;;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>在 common/index.js 加入 <code>export * from './Input';</code> 讓 input 可以到處存取</li>\n<li>修改 LoginForm.js，把 import react-native 刪除，新增 Input 到 common import</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Input</div><div class=\"line\">    value=&#123;this.state.text&#125;</div><div class=\"line\">    onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>修改 Input.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Input = (&#123; label, value, onChangeText &#125;) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;TextInput</div><div class=\"line\">                value=&#123;value&#125;</div><div class=\"line\">                onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">                style=&#123;&#123; height: 20, width: 100 &#125;&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 Input.js 新增 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    inputStyle: &#123;</div><div class=\"line\">        color: &apos;#000&apos;,</div><div class=\"line\">        paddingRight: 5,</div><div class=\"line\">        paddingLeft: 5,</div><div class=\"line\">        fontSize: 18,</div><div class=\"line\">        lineHight: 23,</div><div class=\"line\">        flex: 2</div><div class=\"line\">    &#125;,</div><div class=\"line\">    labelStyle: &#123;</div><div class=\"line\">        fontSize: 18,</div><div class=\"line\">        paddingLeft: 20,</div><div class=\"line\">        flex: 1</div><div class=\"line\">    &#125;,</div><div class=\"line\">    containerStyle: &#123;</div><div class=\"line\">        height: 40,</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        flexDirection: &apos;row&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li>在元件中加入 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Input = (&#123; label, value, onChangeText &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; inputStyle, labelStyle, containerStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;containerStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;labelStyle&#125;&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;TextInput</div><div class=\"line\">                style=&#123;inputStyle&#125;</div><div class=\"line\">                value=&#123;value&#125;</div><div class=\"line\">                onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li>在 LoginForm.js 加入 label</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Input</div><div class=\"line\">    label=&quot;Email&quot;</div><div class=\"line\">    value=&#123;this.state.text&#125;</div><div class=\"line\">    onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"16\">\n<li>在 Input.js 加入 autoCorrect 且改成 false，讓 apple 不自動選取文字，新增 placeholder 參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;TextInput</div><div class=\"line\">    placeholder=&#123;placeholder&#125;</div><div class=\"line\">    autoCorrect=&#123;false&#125;</div><div class=\"line\">    style=&#123;inputStyle&#125;</div><div class=\"line\">    value=&#123;value&#125;</div><div class=\"line\">    onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li>取得上一層傳遞的 placeholder<br>\n<code>const Input = ({ label, value, onChangeText, placeholder }) =&gt; {</code></li>\n<li>傳遞 placeholder 參數給 Input 元件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Input</div><div class=\"line\">    placeholder=&quot;user@gmail.com&quot;</div><div class=\"line\">    label=&quot;Email&quot;</div><div class=\"line\">    value=&#123;this.state.text&#125;</div><div class=\"line\">    onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"19\">\n<li>把 state 改為 email，避免重複使用參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; email: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Input</div><div class=\"line\">        placeholder=&quot;user@gmail.com&quot;</div><div class=\"line\">        label=&quot;Email&quot;</div><div class=\"line\">        value=&#123;this.state.email&#125;</div><div class=\"line\">        onChangeText=&#123;email =&gt; this.setState(&#123; email &#125;)&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"20\">\n<li>新增 password 欄位</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; email: &apos;&apos;, password: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Input</div><div class=\"line\">        placeholder=&quot;password&quot;</div><div class=\"line\">        label=&quot;Password&quot;</div><div class=\"line\">        value=&#123;this.state.password&#125;</div><div class=\"line\">        onChangeText=&#123;password =&gt; this.setState(&#123; password &#125;)&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"21\">\n<li>在 Input.js 加入 secureTextEntry</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Input = (&#123; label, value, onChangeText, placeholder, secureTextEntry &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; inputStyle, labelStyle, containerStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;containerStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;labelStyle&#125;&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;TextInput</div><div class=\"line\">                secureTextEntry=&#123;secureTextEntry&#125;</div><div class=\"line\">                placeholder=&#123;placeholder&#125;</div><div class=\"line\">                autoCorrect=&#123;false&#125;</div><div class=\"line\">                style=&#123;inputStyle&#125;</div><div class=\"line\">                value=&#123;value&#125;</div><div class=\"line\">                onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"22\">\n<li>直接加入 secureTextEntry，它就會知道是 true，如果沒有設定就是 undefined，在這邊跟 false 的意思一樣</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Input</div><div class=\"line\">        secureTextEntry</div><div class=\"line\">        placeholder=&quot;password&quot;</div><div class=\"line\">        label=&quot;Password&quot;</div><div class=\"line\">        value=&#123;this.state.password&#125;</div><div class=\"line\">        onChangeText=&#123;password =&gt; this.setState(&#123; password &#125;)&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/reactNative/reactnativeday4.jpg\">\n<hr>\n<h3>使用 Firebase 進行認證</h3>\n<h4>前置作業</h4>\n<ol>\n<li>新增新的專案 <code>react-native init auth</code></li>\n<li>新增 src/app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">class App extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Text&gt;An App!&lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default App;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 ios.index.js 把 app.js 放進來</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</div><div class=\"line\">import App from &apos;./src/app&apos;;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;auth&apos;, () =&gt; App);</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>將 Album 專案的 src/components/Button.js Card.js CardSection.js header.js 複製到新專案目錄的 src/components/common/ 底下</li>\n<li>在 src/components/common 底下新增 index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export * from &apos;./BUtton&apos;;</div><div class=\"line\">export * from &apos;./Card&apos;;</div><div class=\"line\">export * from &apos;./CardSection&apos;;</div><div class=\"line\">export * from &apos;./Header&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在個別檔案用元件的方式輸出<br>\n<code>export { Button };</code><br>\n<code>export { Card };</code><br>\n<code>export { CardSection };</code><br>\n<code>export { Header };</code></li>\n</ol>\n<h4>Firebase</h4>\n<ol>\n<li><a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"external\">Firebase</a></li>\n<li>在專案目錄下安裝 firebase <code>npm install --save firebase</code></li>\n<li>Import firebase，且在 app.js 的 component 下新增 componentWillMount<br>\n<code>import firebase from 'firebase';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    firebase.initializeApp(&#123;</div><div class=\"line\">        &#123;CONFIG CODE FROM FIREBASE&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 src/components/LoginForm.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\">import &#123; Button, Card, CardSection &#125; from &quot;./common&quot;;</div><div class=\"line\"></div><div class=\"line\">class LoginForm extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;Card&gt;</div><div class=\"line\">                &lt;CardSection /&gt;</div><div class=\"line\">                &lt;CardSection /&gt;</div><div class=\"line\">                &lt;CardSection&gt;</div><div class=\"line\">                    &lt;Button&gt;</div><div class=\"line\">                        Log in</div><div class=\"line\">                    &lt;/Button&gt;</div><div class=\"line\">                &lt;/CardSection&gt;</div><div class=\"line\">            &lt;/Card&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default LoginForm;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在 app.js 引用 LoginForm 且放到 View 裡面<br>\n<code>import LoginForm from './components/LoginForm';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">    &lt;Header headerText=&quot;Authentication&quot; /&gt;</div><div class=\"line\">    &lt;LoginForm /&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>在 LoginForm.js 新增輸入欄位<br>\n<code>import { TextInput } from 'react-native';</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;TextInput style=&#123;&#123; height: 20, width: 100 &#125;&#125; /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>產生 state<br>\n<code>state = { text: '' };</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;TextInput</div><div class=\"line\">        value=&#123;this.state.text&#125;</div><div class=\"line\">        onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">        style=&#123;&#123; height: 20, width: 100 &#125;&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Text input 流程：TextInput =&gt; 使用者輸入 text =&gt; OnChange 事件被呼叫 =&gt; 給新的文字 「setState」=&gt; 元件重新渲染</li>\n<li>新增 src/components/common/Input.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; TextInput, View, Text &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Input = (&#123; label &#125;) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export &#123; Input &#125;;</div></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>在 common/index.js 加入 <code>export * from './Input';</code> 讓 input 可以到處存取</li>\n<li>修改 LoginForm.js，把 import react-native 刪除，新增 Input 到 common import</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Input</div><div class=\"line\">    value=&#123;this.state.text&#125;</div><div class=\"line\">    onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>修改 Input.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Input = (&#123; label, value, onChangeText &#125;) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View&gt;</div><div class=\"line\">            &lt;Text&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;TextInput</div><div class=\"line\">                value=&#123;value&#125;</div><div class=\"line\">                onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">                style=&#123;&#123; height: 20, width: 100 &#125;&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>在 Input.js 新增 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    inputStyle: &#123;</div><div class=\"line\">        color: &apos;#000&apos;,</div><div class=\"line\">        paddingRight: 5,</div><div class=\"line\">        paddingLeft: 5,</div><div class=\"line\">        fontSize: 18,</div><div class=\"line\">        lineHight: 23,</div><div class=\"line\">        flex: 2</div><div class=\"line\">    &#125;,</div><div class=\"line\">    labelStyle: &#123;</div><div class=\"line\">        fontSize: 18,</div><div class=\"line\">        paddingLeft: 20,</div><div class=\"line\">        flex: 1</div><div class=\"line\">    &#125;,</div><div class=\"line\">    containerStyle: &#123;</div><div class=\"line\">        height: 40,</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        flexDirection: &apos;row&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li>在元件中加入 styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Input = (&#123; label, value, onChangeText &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; inputStyle, labelStyle, containerStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;containerStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;labelStyle&#125;&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;TextInput</div><div class=\"line\">                style=&#123;inputStyle&#125;</div><div class=\"line\">                value=&#123;value&#125;</div><div class=\"line\">                onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li>在 LoginForm.js 加入 label</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Input</div><div class=\"line\">    label=&quot;Email&quot;</div><div class=\"line\">    value=&#123;this.state.text&#125;</div><div class=\"line\">    onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"16\">\n<li>在 Input.js 加入 autoCorrect 且改成 false，讓 apple 不自動選取文字，新增 placeholder 參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;TextInput</div><div class=\"line\">    placeholder=&#123;placeholder&#125;</div><div class=\"line\">    autoCorrect=&#123;false&#125;</div><div class=\"line\">    style=&#123;inputStyle&#125;</div><div class=\"line\">    value=&#123;value&#125;</div><div class=\"line\">    onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li>取得上一層傳遞的 placeholder<br>\n<code>const Input = ({ label, value, onChangeText, placeholder }) =&gt; {</code></li>\n<li>傳遞 placeholder 參數給 Input 元件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Input</div><div class=\"line\">    placeholder=&quot;user@gmail.com&quot;</div><div class=\"line\">    label=&quot;Email&quot;</div><div class=\"line\">    value=&#123;this.state.text&#125;</div><div class=\"line\">    onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ol start=\"19\">\n<li>把 state 改為 email，避免重複使用參數</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; email: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Input</div><div class=\"line\">        placeholder=&quot;user@gmail.com&quot;</div><div class=\"line\">        label=&quot;Email&quot;</div><div class=\"line\">        value=&#123;this.state.email&#125;</div><div class=\"line\">        onChangeText=&#123;email =&gt; this.setState(&#123; email &#125;)&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"20\">\n<li>新增 password 欄位</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; email: &apos;&apos;, password: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Input</div><div class=\"line\">        placeholder=&quot;password&quot;</div><div class=\"line\">        label=&quot;Password&quot;</div><div class=\"line\">        value=&#123;this.state.password&#125;</div><div class=\"line\">        onChangeText=&#123;password =&gt; this.setState(&#123; password &#125;)&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"21\">\n<li>在 Input.js 加入 secureTextEntry</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Input = (&#123; label, value, onChangeText, placeholder, secureTextEntry &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; inputStyle, labelStyle, containerStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;containerStyle&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;labelStyle&#125;&gt;&#123;label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;TextInput</div><div class=\"line\">                secureTextEntry=&#123;secureTextEntry&#125;</div><div class=\"line\">                placeholder=&#123;placeholder&#125;</div><div class=\"line\">                autoCorrect=&#123;false&#125;</div><div class=\"line\">                style=&#123;inputStyle&#125;</div><div class=\"line\">                value=&#123;value&#125;</div><div class=\"line\">                onChangeText=&#123;onChangeText&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"22\">\n<li>直接加入 secureTextEntry，它就會知道是 true，如果沒有設定就是 undefined，在這邊跟 false 的意思一樣</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Input</div><div class=\"line\">        secureTextEntry</div><div class=\"line\">        placeholder=&quot;password&quot;</div><div class=\"line\">        label=&quot;Password&quot;</div><div class=\"line\">        value=&#123;this.state.password&#125;</div><div class=\"line\">        onChangeText=&#123;password =&gt; this.setState(&#123; password &#125;)&#125;</div><div class=\"line\">    /&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>"},{"title":"React Native 快速學習自我挑戰 Day5","thumbnail":["/images/learning/reactNative/reactnativeday5.png"],"date":"2017-08-17T08:39:32.000Z","_content":"<img src=\"/images/learning/reactNative/reactnativeday5.png\">\n\n***\n### 處理 Authentication Credentials\n#### 讓 User 登入\n1. 在送出 button 地方，要取得值之後，做 callback function\n2. 在送出的 button 加上 onPress 來取得值\n`<Button onPress={this.onButtonPress.bind(this)}>`\n3. 在 LoginForm.js 引入 firebase\n`import firebase from 'firebase';`\n4. 新增 onButtonPress 的 callback function\n```\nonButtonPress() {\n        const { email, password } = this.state;\n\n        firebase.auth().signInWithEmailAndPassword(email, password);\n    }\n```\n5. 登入的三種模式\n    - 登入 => 成功\n    - 登入 => 失敗 => 創建帳號 => 成功\n    - 登入 => 失敗 => 創建帳號 => 失敗 => 出現錯誤\n#### 錯誤處理\n1. 點擊之後，用 catch 來處理失敗的 Promise，最後顯示出 error，error 要新增一個空白的 state 讓它去改變\n```\nstate = { email: '', password: '', error: '' };\n\n    onButtonPress() {\n        const { email, password } = this.state;\n\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .catch(() => {\n                firebase.auth().createUserWithEmailAndPassword(email, password)\n                    .catch(() => {\n                        this.setState({ error: 'Authentication Failed.'})\n                    });\n            });\n    }\n```\n2. 把 Text 補回來，因為要讓 error 顯示\n`import { Text } from 'react-native';`\n3. 新增 Text 區塊來顯示 error\n```\n<Text style={styles.errorTextStyle}>\n    {this.state.error}\n</Text>\n```\n4. 新增 error Text 的 style 樣式\n```\nconst styles = {\n    errorTextStyle: {\n        fontSize: 20,\n        alignSelf: 'center',\n        color: 'red'\n    }\n};\n```\n#### 更多 Authentication Flow\n1. 在登入錯誤的密碼之後，如果又正確登入，要把錯誤訊息移除，所以要在 onPress 的 callback function 裡面把 state 設為預設空值\n`this.setState({error: ''});`\n2. 為了要讓送出的時候，等候存取資料庫回覆前，要做一個旋轉圖示 Spinner 讓用戶知道在等候，新增 src/components/Spinner.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst Spinner = () => {\n    return (\n        <View />\n    );\n};\n\nexport { Spinner };\n```\n3. 在 components/index.js 新增 component\n`export * from './Spinner';`\n#### 建立一個活動 Spinner\n1. 新增 ActivityIndicator\n`import { View, ActivityIndicator } from 'react-native';`\n2. 新增 spinner styles\n```\nconst styles = {\n    spinnerStyle: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    }\n};\n```\n3. 將 style 加到 View，然後從上層元件取得 size props，最後用預設的方式，如果沒有 size 的 props，預設 large\n```\nconst Spinner = ({ size }) => {\n    return (\n        <View style={styles.spinnerStyle}>\n            <ActivityIndicator size={size || 'large'} />\n        </View>\n    );\n};\n```\n#### JSX 中有條件的渲染\n1. 預設不顯示 loading\n`state = { email: '', password: '', error: '', loading: false };`\n2. 在 onButtonPress 的 callback function 加上 loading true，做法就是在點選登入時，清掉所有錯誤，然後顯示 Loading\n`this.setState({error: '', loading: true });`\n3. 把 Spinner 的元件也 load 進來\n`import { Button, Card, CardSection, Input, Spinner } from \"./common\";`\n4. 新增一個 renderButton 的 function，如果 this.state.loading === true，就 return spinner，如果不是，就 return 本來的 Button\n```\nrenderButton() {\n    if (this.state.loading) {\n        return <Spinner size=\"small\" />;\n    }\n\n    return (\n        <Button onPress={this.onButtonPress.bind(this)}>\n            登入\n        </Button>\n    )\n}\n```\n5. 最後把本來送出 Button 的地方用 renderButton 的 function 取代\n```\n<CardSection>\n    {this.renderButton()}\n</CardSection>\n```\n#### 清除表單 Spinner\n1. 建立 LoginSuccess function\n```\nonLoginSuccess() {\n    this.setState({\n        email: '',\n        password: '',\n        loading: false,\n        error: ''\n    });\n}\n```\n2. 建立 LoginFail function\n```\nonLoginFail() {\n    this.setState({ error: 'Authentication Failed', loading: false });\n}\n```\n3. 送出表單時候，正確的話，執行 .then 裡面的 function，錯誤的話，執行 .catch 裡面的 function\n```\nfirebase.auth().signInWithEmailAndPassword(email, password)\n    .then(this.onLoginSuccess.bind(this))\n    .catch(() => {\n        firebase.auth().createUserWithEmailAndPassword(email, password)\n            .then(this.onLoginSuccess.bind(this))\n            .catch(this.onLoginFail.bind(this));\n    });\n```\n#### 處理 Authentication 事件\n1. 新增一個 state 叫做 loggedIn，預設為未登入，然後在 componentWillMount 新增 onAuthStateChanged 的 function，如果是 user 就登入\n```\nstate = { loggedIn: false };\n\ncomponentWillMount() {\n    firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n            this.setState({ loggedIn: true});\n        } else {\n            this.setState({ loggedIn: false });\n        }\n    });\n}\n```\n#### 更多有條件的渲染\n1. 把 loggedIn 的 state 改成 null，然後新增 renderContent，登入時在讀取資料會先跑出 Spinner，成功的話就顯示登出的 Button，失敗的話就回到登入表單\n```\nstate = { loggedIn: null };\n\nrenderContent() {\n    switch (this.state.loggedIn) {\n        case true:\n            return <Button>登出</Button>;\n        case false:\n            return <LoginForm />;\n        default:\n            return <Spinner size=\"large\"/>;\n    }\n}\n```\n2. 引入 Button 和 Spinner\n`import { Header, Button, Spinner } from './components/common';`\n3. 修改 button 樣式，修改 src/component/common/Button.js\n```\nimport React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\nconst Button = ({ onPress, children }) => {\n    const { buttonStyle, textStyle, viewStyle } = styles;\n\n    return (\n        <View style={viewStyle}>\n            <TouchableOpacity onPress={onPress} style={buttonStyle}>\n                <Text style={textStyle}>\n                    {children}\n                </Text>\n            </TouchableOpacity>\n        </View>\n    );\n};\n\nconst styles = {\n    textStyle: {\n        alignSelf: 'center',\n        color: '#007aff',\n        fontSize: 16,\n        fontWeight: '600',\n        paddingTop: 10,\n        paddingBottom: 10\n    },\n    viewStyle: {\n        flexDirection: 'row',\n    },\n    buttonStyle: {\n        flex: 1,\n        alignSelf: 'stretch',\n        justifyContent: 'center',\n        height: 45,\n        backgroundColor: '#fff',\n        borderRadius: 5,\n        borderWidth: 1,\n        borderColor: '#007aff',\n        marginLeft: 5,\n        marginRight: 5\n    }\n};\n\nexport { Button };\n```\n#### 讓 User 登出和結束\n1. 用 firebase 的語法讓用戶登出\n```\nreturn (\n    <Button onPress={() => firebase.auth().signOut()}>\n        登出\n    </Button>\n);\n```","source":"_posts/React-Native-快速學習自我挑戰-Day5.md","raw":"---\ntitle: React Native 快速學習自我挑戰 Day5\nthumbnail:\n  - /images/learning/reactNative/reactnativeday5.png\ndate: 2017-08-17 16:39:32\ncategories: 學習歷程\ntags: React-Native\n---\n<img src=\"/images/learning/reactNative/reactnativeday5.png\">\n\n***\n### 處理 Authentication Credentials\n#### 讓 User 登入\n1. 在送出 button 地方，要取得值之後，做 callback function\n2. 在送出的 button 加上 onPress 來取得值\n`<Button onPress={this.onButtonPress.bind(this)}>`\n3. 在 LoginForm.js 引入 firebase\n`import firebase from 'firebase';`\n4. 新增 onButtonPress 的 callback function\n```\nonButtonPress() {\n        const { email, password } = this.state;\n\n        firebase.auth().signInWithEmailAndPassword(email, password);\n    }\n```\n5. 登入的三種模式\n    - 登入 => 成功\n    - 登入 => 失敗 => 創建帳號 => 成功\n    - 登入 => 失敗 => 創建帳號 => 失敗 => 出現錯誤\n#### 錯誤處理\n1. 點擊之後，用 catch 來處理失敗的 Promise，最後顯示出 error，error 要新增一個空白的 state 讓它去改變\n```\nstate = { email: '', password: '', error: '' };\n\n    onButtonPress() {\n        const { email, password } = this.state;\n\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .catch(() => {\n                firebase.auth().createUserWithEmailAndPassword(email, password)\n                    .catch(() => {\n                        this.setState({ error: 'Authentication Failed.'})\n                    });\n            });\n    }\n```\n2. 把 Text 補回來，因為要讓 error 顯示\n`import { Text } from 'react-native';`\n3. 新增 Text 區塊來顯示 error\n```\n<Text style={styles.errorTextStyle}>\n    {this.state.error}\n</Text>\n```\n4. 新增 error Text 的 style 樣式\n```\nconst styles = {\n    errorTextStyle: {\n        fontSize: 20,\n        alignSelf: 'center',\n        color: 'red'\n    }\n};\n```\n#### 更多 Authentication Flow\n1. 在登入錯誤的密碼之後，如果又正確登入，要把錯誤訊息移除，所以要在 onPress 的 callback function 裡面把 state 設為預設空值\n`this.setState({error: ''});`\n2. 為了要讓送出的時候，等候存取資料庫回覆前，要做一個旋轉圖示 Spinner 讓用戶知道在等候，新增 src/components/Spinner.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst Spinner = () => {\n    return (\n        <View />\n    );\n};\n\nexport { Spinner };\n```\n3. 在 components/index.js 新增 component\n`export * from './Spinner';`\n#### 建立一個活動 Spinner\n1. 新增 ActivityIndicator\n`import { View, ActivityIndicator } from 'react-native';`\n2. 新增 spinner styles\n```\nconst styles = {\n    spinnerStyle: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    }\n};\n```\n3. 將 style 加到 View，然後從上層元件取得 size props，最後用預設的方式，如果沒有 size 的 props，預設 large\n```\nconst Spinner = ({ size }) => {\n    return (\n        <View style={styles.spinnerStyle}>\n            <ActivityIndicator size={size || 'large'} />\n        </View>\n    );\n};\n```\n#### JSX 中有條件的渲染\n1. 預設不顯示 loading\n`state = { email: '', password: '', error: '', loading: false };`\n2. 在 onButtonPress 的 callback function 加上 loading true，做法就是在點選登入時，清掉所有錯誤，然後顯示 Loading\n`this.setState({error: '', loading: true });`\n3. 把 Spinner 的元件也 load 進來\n`import { Button, Card, CardSection, Input, Spinner } from \"./common\";`\n4. 新增一個 renderButton 的 function，如果 this.state.loading === true，就 return spinner，如果不是，就 return 本來的 Button\n```\nrenderButton() {\n    if (this.state.loading) {\n        return <Spinner size=\"small\" />;\n    }\n\n    return (\n        <Button onPress={this.onButtonPress.bind(this)}>\n            登入\n        </Button>\n    )\n}\n```\n5. 最後把本來送出 Button 的地方用 renderButton 的 function 取代\n```\n<CardSection>\n    {this.renderButton()}\n</CardSection>\n```\n#### 清除表單 Spinner\n1. 建立 LoginSuccess function\n```\nonLoginSuccess() {\n    this.setState({\n        email: '',\n        password: '',\n        loading: false,\n        error: ''\n    });\n}\n```\n2. 建立 LoginFail function\n```\nonLoginFail() {\n    this.setState({ error: 'Authentication Failed', loading: false });\n}\n```\n3. 送出表單時候，正確的話，執行 .then 裡面的 function，錯誤的話，執行 .catch 裡面的 function\n```\nfirebase.auth().signInWithEmailAndPassword(email, password)\n    .then(this.onLoginSuccess.bind(this))\n    .catch(() => {\n        firebase.auth().createUserWithEmailAndPassword(email, password)\n            .then(this.onLoginSuccess.bind(this))\n            .catch(this.onLoginFail.bind(this));\n    });\n```\n#### 處理 Authentication 事件\n1. 新增一個 state 叫做 loggedIn，預設為未登入，然後在 componentWillMount 新增 onAuthStateChanged 的 function，如果是 user 就登入\n```\nstate = { loggedIn: false };\n\ncomponentWillMount() {\n    firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n            this.setState({ loggedIn: true});\n        } else {\n            this.setState({ loggedIn: false });\n        }\n    });\n}\n```\n#### 更多有條件的渲染\n1. 把 loggedIn 的 state 改成 null，然後新增 renderContent，登入時在讀取資料會先跑出 Spinner，成功的話就顯示登出的 Button，失敗的話就回到登入表單\n```\nstate = { loggedIn: null };\n\nrenderContent() {\n    switch (this.state.loggedIn) {\n        case true:\n            return <Button>登出</Button>;\n        case false:\n            return <LoginForm />;\n        default:\n            return <Spinner size=\"large\"/>;\n    }\n}\n```\n2. 引入 Button 和 Spinner\n`import { Header, Button, Spinner } from './components/common';`\n3. 修改 button 樣式，修改 src/component/common/Button.js\n```\nimport React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\nconst Button = ({ onPress, children }) => {\n    const { buttonStyle, textStyle, viewStyle } = styles;\n\n    return (\n        <View style={viewStyle}>\n            <TouchableOpacity onPress={onPress} style={buttonStyle}>\n                <Text style={textStyle}>\n                    {children}\n                </Text>\n            </TouchableOpacity>\n        </View>\n    );\n};\n\nconst styles = {\n    textStyle: {\n        alignSelf: 'center',\n        color: '#007aff',\n        fontSize: 16,\n        fontWeight: '600',\n        paddingTop: 10,\n        paddingBottom: 10\n    },\n    viewStyle: {\n        flexDirection: 'row',\n    },\n    buttonStyle: {\n        flex: 1,\n        alignSelf: 'stretch',\n        justifyContent: 'center',\n        height: 45,\n        backgroundColor: '#fff',\n        borderRadius: 5,\n        borderWidth: 1,\n        borderColor: '#007aff',\n        marginLeft: 5,\n        marginRight: 5\n    }\n};\n\nexport { Button };\n```\n#### 讓 User 登出和結束\n1. 用 firebase 的語法讓用戶登出\n```\nreturn (\n    <Button onPress={() => firebase.auth().signOut()}>\n        登出\n    </Button>\n);\n```","slug":"React-Native-快速學習自我挑戰-Day5","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxw004u7ifa7o5l699e","content":"<img src=\"/images/learning/reactNative/reactnativeday5.png\">\n<hr>\n<h3>處理 Authentication Credentials</h3>\n<h4>讓 User 登入</h4>\n<ol>\n<li>在送出 button 地方，要取得值之後，做 callback function</li>\n<li>在送出的 button 加上 onPress 來取得值<br>\n<code>&lt;Button onPress={this.onButtonPress.bind(this)}&gt;</code></li>\n<li>在 LoginForm.js 引入 firebase<br>\n<code>import firebase from 'firebase';</code></li>\n<li>新增 onButtonPress 的 callback function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">onButtonPress() &#123;</div><div class=\"line\">        const &#123; email, password &#125; = this.state;</div><div class=\"line\"></div><div class=\"line\">        firebase.auth().signInWithEmailAndPassword(email, password);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>登入的三種模式\n<ul>\n<li>登入 =&gt; 成功</li>\n<li>登入 =&gt; 失敗 =&gt; 創建帳號 =&gt; 成功</li>\n<li>登入 =&gt; 失敗 =&gt; 創建帳號 =&gt; 失敗 =&gt; 出現錯誤</li>\n</ul>\n</li>\n</ol>\n<h4>錯誤處理</h4>\n<ol>\n<li>點擊之後，用 catch 來處理失敗的 Promise，最後顯示出 error，error 要新增一個空白的 state 讓它去改變</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; email: &apos;&apos;, password: &apos;&apos;, error: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">    onButtonPress() &#123;</div><div class=\"line\">        const &#123; email, password &#125; = this.state;</div><div class=\"line\"></div><div class=\"line\">        firebase.auth().signInWithEmailAndPassword(email, password)</div><div class=\"line\">            .catch(() =&gt; &#123;</div><div class=\"line\">                firebase.auth().createUserWithEmailAndPassword(email, password)</div><div class=\"line\">                    .catch(() =&gt; &#123;</div><div class=\"line\">                        this.setState(&#123; error: &apos;Authentication Failed.&apos;&#125;)</div><div class=\"line\">                    &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>把 Text 補回來，因為要讓 error 顯示<br>\n<code>import { Text } from 'react-native';</code></li>\n<li>新增 Text 區塊來顯示 error</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Text style=&#123;styles.errorTextStyle&#125;&gt;</div><div class=\"line\">    &#123;this.state.error&#125;</div><div class=\"line\">&lt;/Text&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 error Text 的 style 樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    errorTextStyle: &#123;</div><div class=\"line\">        fontSize: 20,</div><div class=\"line\">        alignSelf: &apos;center&apos;,</div><div class=\"line\">        color: &apos;red&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>更多 Authentication Flow</h4>\n<ol>\n<li>在登入錯誤的密碼之後，如果又正確登入，要把錯誤訊息移除，所以要在 onPress 的 callback function 裡面把 state 設為預設空值<br>\n<code>this.setState({error: ''});</code></li>\n<li>為了要讓送出的時候，等候存取資料庫回覆前，要做一個旋轉圖示 Spinner 讓用戶知道在等候，新增 src/components/Spinner.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Spinner = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View /&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export &#123; Spinner &#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 components/index.js 新增 component<br>\n<code>export * from './Spinner';</code></li>\n</ol>\n<h4>建立一個活動 Spinner</h4>\n<ol>\n<li>新增 ActivityIndicator<br>\n<code>import { View, ActivityIndicator } from 'react-native';</code></li>\n<li>新增 spinner styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    spinnerStyle: &#123;</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將 style 加到 View，然後從上層元件取得 size props，最後用預設的方式，如果沒有 size 的 props，預設 large</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Spinner = (&#123; size &#125;) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;styles.spinnerStyle&#125;&gt;</div><div class=\"line\">            &lt;ActivityIndicator size=&#123;size || &apos;large&apos;&#125; /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>JSX 中有條件的渲染</h4>\n<ol>\n<li>預設不顯示 loading<br>\n<code>state = { email: '', password: '', error: '', loading: false };</code></li>\n<li>在 onButtonPress 的 callback function 加上 loading true，做法就是在點選登入時，清掉所有錯誤，然後顯示 Loading<br>\n<code>this.setState({error: '', loading: true });</code></li>\n<li>把 Spinner 的元件也 load 進來<br>\n<code>import { Button, Card, CardSection, Input, Spinner } from &quot;./common&quot;;</code></li>\n<li>新增一個 renderButton 的 function，如果 this.state.loading === true，就 return spinner，如果不是，就 return 本來的 Button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderButton() &#123;</div><div class=\"line\">    if (this.state.loading) &#123;</div><div class=\"line\">        return &lt;Spinner size=&quot;small&quot; /&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Button onPress=&#123;this.onButtonPress.bind(this)&#125;&gt;</div><div class=\"line\">            登入</div><div class=\"line\">        &lt;/Button&gt;</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>最後把本來送出 Button 的地方用 renderButton 的 function 取代</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &#123;this.renderButton()&#125;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<h4>清除表單 Spinner</h4>\n<ol>\n<li>建立 LoginSuccess function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">onLoginSuccess() &#123;</div><div class=\"line\">    this.setState(&#123;</div><div class=\"line\">        email: &apos;&apos;,</div><div class=\"line\">        password: &apos;&apos;,</div><div class=\"line\">        loading: false,</div><div class=\"line\">        error: &apos;&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>建立 LoginFail function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">onLoginFail() &#123;</div><div class=\"line\">    this.setState(&#123; error: &apos;Authentication Failed&apos;, loading: false &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>送出表單時候，正確的話，執行 .then 裡面的 function，錯誤的話，執行 .catch 裡面的 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">firebase.auth().signInWithEmailAndPassword(email, password)</div><div class=\"line\">    .then(this.onLoginSuccess.bind(this))</div><div class=\"line\">    .catch(() =&gt; &#123;</div><div class=\"line\">        firebase.auth().createUserWithEmailAndPassword(email, password)</div><div class=\"line\">            .then(this.onLoginSuccess.bind(this))</div><div class=\"line\">            .catch(this.onLoginFail.bind(this));</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h4>處理 Authentication 事件</h4>\n<ol>\n<li>新增一個 state 叫做 loggedIn，預設為未登入，然後在 componentWillMount 新增 onAuthStateChanged 的 function，如果是 user 就登入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; loggedIn: false &#125;;</div><div class=\"line\"></div><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    firebase.auth().onAuthStateChanged((user) =&gt; &#123;</div><div class=\"line\">        if (user) &#123;</div><div class=\"line\">            this.setState(&#123; loggedIn: true&#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.setState(&#123; loggedIn: false &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>更多有條件的渲染</h4>\n<ol>\n<li>把 loggedIn 的 state 改成 null，然後新增 renderContent，登入時在讀取資料會先跑出 Spinner，成功的話就顯示登出的 Button，失敗的話就回到登入表單</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; loggedIn: null &#125;;</div><div class=\"line\"></div><div class=\"line\">renderContent() &#123;</div><div class=\"line\">    switch (this.state.loggedIn) &#123;</div><div class=\"line\">        case true:</div><div class=\"line\">            return &lt;Button&gt;登出&lt;/Button&gt;;</div><div class=\"line\">        case false:</div><div class=\"line\">            return &lt;LoginForm /&gt;;</div><div class=\"line\">        default:</div><div class=\"line\">            return &lt;Spinner size=&quot;large&quot;/&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 Button 和 Spinner<br>\n<code>import { Header, Button, Spinner } from './components/common';</code></li>\n<li>修改 button 樣式，修改 src/component/common/Button.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text, TouchableOpacity &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Button = (&#123; onPress, children &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle, viewStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;viewStyle&#125;&gt;</div><div class=\"line\">            &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">                &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                    &#123;children&#125;</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">            &lt;/TouchableOpacity&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const styles = &#123;</div><div class=\"line\">    textStyle: &#123;</div><div class=\"line\">        alignSelf: &apos;center&apos;,</div><div class=\"line\">        color: &apos;#007aff&apos;,</div><div class=\"line\">        fontSize: 16,</div><div class=\"line\">        fontWeight: &apos;600&apos;,</div><div class=\"line\">        paddingTop: 10,</div><div class=\"line\">        paddingBottom: 10</div><div class=\"line\">    &#125;,</div><div class=\"line\">    viewStyle: &#123;</div><div class=\"line\">        flexDirection: &apos;row&apos;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    buttonStyle: &#123;</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        alignSelf: &apos;stretch&apos;,</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        height: 45,</div><div class=\"line\">        backgroundColor: &apos;#fff&apos;,</div><div class=\"line\">        borderRadius: 5,</div><div class=\"line\">        borderWidth: 1,</div><div class=\"line\">        borderColor: &apos;#007aff&apos;,</div><div class=\"line\">        marginLeft: 5,</div><div class=\"line\">        marginRight: 5</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export &#123; Button &#125;;</div></pre></td></tr></table></figure>\n<h4>讓 User 登出和結束</h4>\n<ol>\n<li>用 firebase 的語法讓用戶登出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">return (</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; firebase.auth().signOut()&#125;&gt;</div><div class=\"line\">        登出</div><div class=\"line\">    &lt;/Button&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/reactNative/reactnativeday5.png\">\n<hr>\n<h3>處理 Authentication Credentials</h3>\n<h4>讓 User 登入</h4>\n<ol>\n<li>在送出 button 地方，要取得值之後，做 callback function</li>\n<li>在送出的 button 加上 onPress 來取得值<br>\n<code>&lt;Button onPress={this.onButtonPress.bind(this)}&gt;</code></li>\n<li>在 LoginForm.js 引入 firebase<br>\n<code>import firebase from 'firebase';</code></li>\n<li>新增 onButtonPress 的 callback function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">onButtonPress() &#123;</div><div class=\"line\">        const &#123; email, password &#125; = this.state;</div><div class=\"line\"></div><div class=\"line\">        firebase.auth().signInWithEmailAndPassword(email, password);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>登入的三種模式\n<ul>\n<li>登入 =&gt; 成功</li>\n<li>登入 =&gt; 失敗 =&gt; 創建帳號 =&gt; 成功</li>\n<li>登入 =&gt; 失敗 =&gt; 創建帳號 =&gt; 失敗 =&gt; 出現錯誤</li>\n</ul>\n</li>\n</ol>\n<h4>錯誤處理</h4>\n<ol>\n<li>點擊之後，用 catch 來處理失敗的 Promise，最後顯示出 error，error 要新增一個空白的 state 讓它去改變</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; email: &apos;&apos;, password: &apos;&apos;, error: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">    onButtonPress() &#123;</div><div class=\"line\">        const &#123; email, password &#125; = this.state;</div><div class=\"line\"></div><div class=\"line\">        firebase.auth().signInWithEmailAndPassword(email, password)</div><div class=\"line\">            .catch(() =&gt; &#123;</div><div class=\"line\">                firebase.auth().createUserWithEmailAndPassword(email, password)</div><div class=\"line\">                    .catch(() =&gt; &#123;</div><div class=\"line\">                        this.setState(&#123; error: &apos;Authentication Failed.&apos;&#125;)</div><div class=\"line\">                    &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>把 Text 補回來，因為要讓 error 顯示<br>\n<code>import { Text } from 'react-native';</code></li>\n<li>新增 Text 區塊來顯示 error</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Text style=&#123;styles.errorTextStyle&#125;&gt;</div><div class=\"line\">    &#123;this.state.error&#125;</div><div class=\"line\">&lt;/Text&gt;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>新增 error Text 的 style 樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    errorTextStyle: &#123;</div><div class=\"line\">        fontSize: 20,</div><div class=\"line\">        alignSelf: &apos;center&apos;,</div><div class=\"line\">        color: &apos;red&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>更多 Authentication Flow</h4>\n<ol>\n<li>在登入錯誤的密碼之後，如果又正確登入，要把錯誤訊息移除，所以要在 onPress 的 callback function 裡面把 state 設為預設空值<br>\n<code>this.setState({error: ''});</code></li>\n<li>為了要讓送出的時候，等候存取資料庫回覆前，要做一個旋轉圖示 Spinner 讓用戶知道在等候，新增 src/components/Spinner.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Spinner = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View /&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export &#123; Spinner &#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 components/index.js 新增 component<br>\n<code>export * from './Spinner';</code></li>\n</ol>\n<h4>建立一個活動 Spinner</h4>\n<ol>\n<li>新增 ActivityIndicator<br>\n<code>import { View, ActivityIndicator } from 'react-native';</code></li>\n<li>新增 spinner styles</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    spinnerStyle: &#123;</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        alignItems: &apos;center&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>將 style 加到 View，然後從上層元件取得 size props，最後用預設的方式，如果沒有 size 的 props，預設 large</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Spinner = (&#123; size &#125;) =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;styles.spinnerStyle&#125;&gt;</div><div class=\"line\">            &lt;ActivityIndicator size=&#123;size || &apos;large&apos;&#125; /&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>JSX 中有條件的渲染</h4>\n<ol>\n<li>預設不顯示 loading<br>\n<code>state = { email: '', password: '', error: '', loading: false };</code></li>\n<li>在 onButtonPress 的 callback function 加上 loading true，做法就是在點選登入時，清掉所有錯誤，然後顯示 Loading<br>\n<code>this.setState({error: '', loading: true });</code></li>\n<li>把 Spinner 的元件也 load 進來<br>\n<code>import { Button, Card, CardSection, Input, Spinner } from &quot;./common&quot;;</code></li>\n<li>新增一個 renderButton 的 function，如果 this.state.loading === true，就 return spinner，如果不是，就 return 本來的 Button</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderButton() &#123;</div><div class=\"line\">    if (this.state.loading) &#123;</div><div class=\"line\">        return &lt;Spinner size=&quot;small&quot; /&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Button onPress=&#123;this.onButtonPress.bind(this)&#125;&gt;</div><div class=\"line\">            登入</div><div class=\"line\">        &lt;/Button&gt;</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>最後把本來送出 Button 的地方用 renderButton 的 function 取代</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &#123;this.renderButton()&#125;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<h4>清除表單 Spinner</h4>\n<ol>\n<li>建立 LoginSuccess function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">onLoginSuccess() &#123;</div><div class=\"line\">    this.setState(&#123;</div><div class=\"line\">        email: &apos;&apos;,</div><div class=\"line\">        password: &apos;&apos;,</div><div class=\"line\">        loading: false,</div><div class=\"line\">        error: &apos;&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>建立 LoginFail function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">onLoginFail() &#123;</div><div class=\"line\">    this.setState(&#123; error: &apos;Authentication Failed&apos;, loading: false &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>送出表單時候，正確的話，執行 .then 裡面的 function，錯誤的話，執行 .catch 裡面的 function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">firebase.auth().signInWithEmailAndPassword(email, password)</div><div class=\"line\">    .then(this.onLoginSuccess.bind(this))</div><div class=\"line\">    .catch(() =&gt; &#123;</div><div class=\"line\">        firebase.auth().createUserWithEmailAndPassword(email, password)</div><div class=\"line\">            .then(this.onLoginSuccess.bind(this))</div><div class=\"line\">            .catch(this.onLoginFail.bind(this));</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h4>處理 Authentication 事件</h4>\n<ol>\n<li>新增一個 state 叫做 loggedIn，預設為未登入，然後在 componentWillMount 新增 onAuthStateChanged 的 function，如果是 user 就登入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; loggedIn: false &#125;;</div><div class=\"line\"></div><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    firebase.auth().onAuthStateChanged((user) =&gt; &#123;</div><div class=\"line\">        if (user) &#123;</div><div class=\"line\">            this.setState(&#123; loggedIn: true&#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.setState(&#123; loggedIn: false &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>更多有條件的渲染</h4>\n<ol>\n<li>把 loggedIn 的 state 改成 null，然後新增 renderContent，登入時在讀取資料會先跑出 Spinner，成功的話就顯示登出的 Button，失敗的話就回到登入表單</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">state = &#123; loggedIn: null &#125;;</div><div class=\"line\"></div><div class=\"line\">renderContent() &#123;</div><div class=\"line\">    switch (this.state.loggedIn) &#123;</div><div class=\"line\">        case true:</div><div class=\"line\">            return &lt;Button&gt;登出&lt;/Button&gt;;</div><div class=\"line\">        case false:</div><div class=\"line\">            return &lt;LoginForm /&gt;;</div><div class=\"line\">        default:</div><div class=\"line\">            return &lt;Spinner size=&quot;large&quot;/&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 Button 和 Spinner<br>\n<code>import { Header, Button, Spinner } from './components/common';</code></li>\n<li>修改 button 樣式，修改 src/component/common/Button.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View, Text, TouchableOpacity &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const Button = (&#123; onPress, children &#125;) =&gt; &#123;</div><div class=\"line\">    const &#123; buttonStyle, textStyle, viewStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View style=&#123;viewStyle&#125;&gt;</div><div class=\"line\">            &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt;</div><div class=\"line\">                &lt;Text style=&#123;textStyle&#125;&gt;</div><div class=\"line\">                    &#123;children&#125;</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">            &lt;/TouchableOpacity&gt;</div><div class=\"line\">        &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const styles = &#123;</div><div class=\"line\">    textStyle: &#123;</div><div class=\"line\">        alignSelf: &apos;center&apos;,</div><div class=\"line\">        color: &apos;#007aff&apos;,</div><div class=\"line\">        fontSize: 16,</div><div class=\"line\">        fontWeight: &apos;600&apos;,</div><div class=\"line\">        paddingTop: 10,</div><div class=\"line\">        paddingBottom: 10</div><div class=\"line\">    &#125;,</div><div class=\"line\">    viewStyle: &#123;</div><div class=\"line\">        flexDirection: &apos;row&apos;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    buttonStyle: &#123;</div><div class=\"line\">        flex: 1,</div><div class=\"line\">        alignSelf: &apos;stretch&apos;,</div><div class=\"line\">        justifyContent: &apos;center&apos;,</div><div class=\"line\">        height: 45,</div><div class=\"line\">        backgroundColor: &apos;#fff&apos;,</div><div class=\"line\">        borderRadius: 5,</div><div class=\"line\">        borderWidth: 1,</div><div class=\"line\">        borderColor: &apos;#007aff&apos;,</div><div class=\"line\">        marginLeft: 5,</div><div class=\"line\">        marginRight: 5</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export &#123; Button &#125;;</div></pre></td></tr></table></figure>\n<h4>讓 User 登出和結束</h4>\n<ol>\n<li>用 firebase 的語法讓用戶登出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">return (</div><div class=\"line\">    &lt;Button onPress=&#123;() =&gt; firebase.auth().signOut()&#125;&gt;</div><div class=\"line\">        登出</div><div class=\"line\">    &lt;/Button&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>"},{"title":"React Native 快速學習自我挑戰 Day6","thumbnail":["/images/learning/reactNative/reactnativeday6.png"],"date":"2017-08-18T11:54:13.000Z","_content":"<img src=\"/images/learning/reactNative/reactnativeday6.png\">\n\n***\n### 深入了解 Redux\n#### Redux 的基礎\n1. 建立新專案\n`react-native init tech_stack`\n2. [JSPlaygrounds](https://stephengrider.github.io/JSPlaygrounds/)\n3. Reducer：一個可以回傳一些資料的 function\n4. Action：一個告訴 reducer 如何改變它的資料的物件\n5. State：給 app 使用的資料\n#### 更多 Redux\n1. 簡易 Redux 範例\n```\nconst reducer = (state = [], action) => {\n\tif (action.type === 'split_string') {\n    return action.payload.split('');\n  } else if (action.type === 'add_character') {\n  \treturn [ ...state, action.payload ];\n  }\n  \n  return state;\n};\n\nconst store = Redux.createStore(reducer);\n\nstore.getState();\n\nconst action = {\n  type: 'split_string',\n  payload: 'asdf'\n};\n\nstore.dispatch(action);\n\nstore.getState();\n\nconst action2 = {\n  type: 'add_character',\n  payload: 'd'\n};\n\nstore.dispatch(action2);\nstore.getState();\n```\n#### Application 樣板\n1. 安裝 redux\n`npm install --save redux react-redux`\n2. 新增 src/app.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst App = () => {\n    return (\n        <View />\n    );\n};\n\nexport default App;\n```\n3. 刪除 ios.index.js 的所有內容，用以下取代\n```\nimport { AppRegistry } from 'react-native';\nimport App from './src/app';\n\nAppRegistry.registerComponent('tech_stack', () => App );\n```\n4. 在 app.js 引入函式庫\n```\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n```\n5. 新增 src/reducers/index.js\n```\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n    libraries: () => []\n});\n```\n6. 引入 reducers，將 reducers 放到 createStore 裡面\n```\nimport reducers from './reducers';\n\nconst App = () => {\n    return (\n        <Provider store={createStore(reducers)}>\n            <View />\n        </Provider>\n    );\n};\n```\n#### 渲染 Header\n1. 新增 src/components/common，把舊檔案複製進去\n2. 引入 Header\n`import { Header } from './components/common';`\n3. 使用 Header\n```\nconst App = () => {\n    return (\n        <Provider store={createStore(reducers)}>\n            <View>\n                <Header headerText=\"Tech Stack\" />\n            </View>\n        </Provider>\n    );\n};\n```\n#### Data 的 Library List\n1. 新增 src/reducers/LibraryReducer.js\n`export default () => [];`\n2. 在 reducers/index.js 引入 LibraryReducer.js\n```\nimport { combineReducers } from 'redux';\nimport LibraryReducer from './LibraryReducer';\n\nexport default combineReducers({\n    libraries: LibraryReducer\n});\n```\n3. 新增 src/reducers/LibraryList.json\n```\n[\n  {\"id\": 0,\n    \"title\": \"Webpack\",\n    \"description\": \"Webpack is a module bundler. It packs CommonJs/AMD modules i. e. for the browser. Allows to split your codebase into multiple bundles, which can be loaded on demand.\"\n  },\n  {\"id\": 1,\n    \"title\": \"React\",\n    \"description\": \"React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.\"\n  },\n  {\"id\": 2,\n    \"title\": \"Redux\",\n    \"description\": \"Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.\"\n  },\n  {\"id\": 3,\n    \"title\": \"React-Redux\",\n    \"description\": \"React-Redux is the official set of bindings between the React and Redux libraries. With this library you can keep your views and data in sync.\"\n  },\n  {\"id\": 4,\n    \"title\": \"Lodash\",\n    \"description\": \"A modern JavaScript utility library delivering modularity, performance, & extras. Lodash is released under the MIT license & supports modern environments.\"\n  },\n  {\"id\": 5,\n    \"title\": \"Redux-Thunk\",\n    \"description\": \"Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met.\"\n  },\n  {\"id\": 6,\n    \"title\": \"ESLint\",\n    \"description\": \"ESLint is an open source JavaScript linting utility originally created by Nicholas C. Zakas in June 2013. Code linting is a type of static analysis that is frequently used to find problematic patterns or code that doesn't adhere to certain style guidelines.\"\n  },\n  {\"id\": 7,\n    \"title\": \"Babel\",\n    \"description\": \"Babel has support for the latest version of JavaScript through syntax transformers. These plugins allow you to use new syntax, right now without waiting for browser support.\"\n  },\n  {\"id\": 8,\n    \"title\": \"Axios\",\n    \"description\": \"Promise based HTTP client for the browser and node.js. With Axios, you can make XMLHttpRequests from the browser or Node with the full Promise Api.\"\n  }\n]\n```\n#### The Connect Function\n1. 引入 json 的資料，然後輸出\n```\nimport data from './LibraryList.json';\n\nexport default () => data;\n```\n2. 新增 src/components/LibraryList.js，在這邊有一點要注意，可以直接引入 json 來使用，但是在 redux 不能這樣用\n```\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LibraryList extends Component {\n    render() {\n        return;\n    }\n}\n\nexport default connect()(LibraryList);\n```\n#### Connect 與 MapStateToProps\n1. 在 LibraryList.js 新增 mapStateToProps function\n```\nconst mapStateToProps = state => {\n    return { libraries: state.libraries };\n};\n```\n2. 在 LibraryList 裡面 console，會看到物件和 dispatch\n```\nclass LibraryList extends Component {\n    render() {\n        console.log(this.props);\n        return;\n    }\n}\n```\n### 用正確的方法渲染 List\n#### 實作 ListView\n1. 引入 ListView，然後用 componentWillMount 來取得值，最後送到 ListView\n```\nimport { ListView } from 'react-native';\n\nclass LibraryList extends Component {\n    componentWillMount() {\n        const ds = new ListView.DataSource({\n            rowHasChanged: (r1, r2) => r1 !== r2\n        });\n        \n        this.dataSource = ds.cloneWithRows(this.props.libraries);\n    }\n    \n    renderRow() {\n        \n    }\n    \n    render() {\n        return (\n            <ListView\n                dataSource={this.dataSource}\n                renderRow={this.renderRow}\n            />\n        );\n    }\n}\n```\n#### 渲染單一的列\n1. 新增 ListItem.js\n```\nimport React, { Component } from 'react';\n\nclass ListItem extends Component {\n    render() {\n        \n    }\n}\n\nexport default ListItem;\n```\n2. 在 LibraryList.js 引入 ListItem，然後放在 renderRow 裡面，並傳入 props 叫做 Library\n```\nimport ListItem from './ListItem';\n\nrenderRow(library) {\n    return <ListItem library={library} />;\n}\n```\n#### 美化 List\n1. 引入 CardSection，然後讓接收上一層傳過來的值並顯示它\n```\nimport { CardSection } from './common';\n\nclass ListItem extends Component {\n    render() {\n        const { titleStyle } = styles;\n\n        return (\n            <CardSection>\n                <Text style={titleStyle}>\n                    {this.props.library.title}\n                </Text>\n            </CardSection>\n        );\n    }\n}\n```\n2. 新增樣式\n```\nconst styles = {\n    titleStyle: {\n        fontSize: 18,\n        paddingLeft: 15\n    }\n};\n```\n3. 在 app.js 的 View 新增 flex 1 的樣式，讓 List 可以在整頁滾動\n`<View style={{\"{{ flex: 1 \"}}}}>`\n#### 創建 Selection Reducer\n1. 新增 src/reducers/SelectionReducer.js，在畫面產生的時候，預設不要選任何東西，所以送出 null\n```\nexport default () => {\n    return null;\n};\n```\n2. 在 reducer/index.js 把 SelectionReducer 加入\n```\nimport SelectionReducer from './SelectionReducer';\n\nexport default combineReducers({\n    libraries: LibraryReducer,\n    selectedLibraryId: SelectionReducer\n});\n```\n#### 介紹 Action Creator\n1. 在 Component 裡面用 Action Creator 呼叫 Action，Action 會去要求 Reducer 改變值\n2. 新增 src/actions/index.js\n```\nexport const selectLibrary = (libraryId) => {\n    return {\n        type: 'select_library',\n        payload: libraryId\n    };\n};\n```\n#### 呼叫 Action Creators\n1. 在 ListItem.js 引入所有 actions\n`import * as actions from '../actions';`\n2. 在 ListItem.js 引入 connect，connect 的第一個參數是傳入的 props 值，目前沒有要傳東西，所以用 null，第二個參數是 actions，最後把 action 傳入 ListItem 的 component\n```\nimport { connect } from 'react-redux';\n\nexport default connect(null, actions)(ListItem);\n```\n#### 新增 Touchable 元件\n1. 在 ListItem.js 引入 TouchableWithoutFeedback 和 View\n`import { Text, TouchableWithoutFeedback, View } from 'react-native';`\n2. 把 TouchableWithoutFeedback 和 View 加到元件裡面，onPress 之後，使用 action\n```\nclass ListItem extends Component {\n    render() {\n        const { titleStyle } = styles;\n        const { id, title } = this.props.library;\n\n        return (\n            <TouchableWithoutFeedback\n                onPress={() => this.props.selectLibrary(id)}\n            >\n                <View>\n                    <CardSection>\n                        <Text style={titleStyle}>\n                            {title}\n                        </Text>\n                    </CardSection>\n                </View>\n            </TouchableWithoutFeedback>\n        );\n    }\n}\n```\n#### Reducer 的規則\n1. 修改 SelectionReducer.js，如果選到東西就回傳 id，如果沒有就回傳現在的 state\n```\nexport default (state = null, action) => {\n    switch (action.type) {\n        case 'select_library':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n```\n#### 展開列\n1. 新增 mapStateToProps 回傳 object，然後會用 props 的形式放到 component 裡面，state.selectedLibraryId 是從 reducer/index.js 裡面取得的，最後將 mapStateToProps 和 actions 放在一起，就可以比較 selectedLibraryId 和 library.id 是不是一樣，一樣的話就展開\n```\nconst mapStateToProps = state => {\n    return { selectedLibraryId: state.selectedLibraryId };\n};\n\nexport default connect(mapStateToProps, actions)(ListItem);\n```\n2. 在 ListItem 的元件新增 renderDescription function 比較選擇的和本來的一不一樣，一樣就展開\n```\nrenderDescription() {\n    const { library, selectedLibraryId } = this.props;\n\n    if (library.id === selectedLibraryId) {\n        return (\n            <Text>{library.description}</Text>\n        );\n    }\n}\n```\n3. 最後把 renderDescription 放到 Component 裡面\n```\n<View>\n    <CardSection>\n        <Text style={titleStyle}>\n            {title}\n        </Text>\n    </CardSection>\n    {this.renderDescription()}\n</View>\n```\n#### 將邏輯移出 Component\n1. mapStateToProps 引入第二個參數 ownProps，它等於 this.props，所以最後可以用 expanded 簡化，它只會回傳 true 或 false\n```\nconst mapStateToProps = (state, ownProps) => {\n    const expanded = state.selectedLibraryId === ownProps.library.id;\n\n    return { expanded };\n};\n```\n2. 修改 renderDescription\n```\nrenderDescription() {\n    const { library, expanded } = this.props;\n\n    if (expanded) {\n        return (\n            <Text>{library.description}</Text>\n        );\n    }\n}\n```\n#### 動畫\n1. 在 renderDescription 加入 CardSection 讓版面更漂亮\n```\n<CardSection>\n    <Text>{library.description}</Text>\n</CardSection>\n```\n2. 引入 LayoutAnimation\n```\nimport {\n    Text,\n    TouchableWithoutFeedback,\n    View,\n    LayoutAnimation\n} from 'react-native';\n```\n3. 在 ListItem 的 Component 加入 componentWillUpdate\n```\ncomponentWillUpdate() {\n    LayoutAnimation.spring();\n}\n```\n4. 流程：User 點擊 Library => 呼叫 Action Creator => Action Creator 回傳 Action，然後傳到 Reducers => 新狀態會傳到 mapstateToProps => Components 重新渲染 => View 就會更新","source":"_posts/React-Native-快速學習自我挑戰-Day6.md","raw":"---\ntitle: React Native 快速學習自我挑戰 Day6\nthumbnail:\n  - /images/learning/reactNative/reactnativeday6.png\ndate: 2017-08-18 19:54:13\ncategories: 學習歷程\ntags: React-Native\n---\n<img src=\"/images/learning/reactNative/reactnativeday6.png\">\n\n***\n### 深入了解 Redux\n#### Redux 的基礎\n1. 建立新專案\n`react-native init tech_stack`\n2. [JSPlaygrounds](https://stephengrider.github.io/JSPlaygrounds/)\n3. Reducer：一個可以回傳一些資料的 function\n4. Action：一個告訴 reducer 如何改變它的資料的物件\n5. State：給 app 使用的資料\n#### 更多 Redux\n1. 簡易 Redux 範例\n```\nconst reducer = (state = [], action) => {\n\tif (action.type === 'split_string') {\n    return action.payload.split('');\n  } else if (action.type === 'add_character') {\n  \treturn [ ...state, action.payload ];\n  }\n  \n  return state;\n};\n\nconst store = Redux.createStore(reducer);\n\nstore.getState();\n\nconst action = {\n  type: 'split_string',\n  payload: 'asdf'\n};\n\nstore.dispatch(action);\n\nstore.getState();\n\nconst action2 = {\n  type: 'add_character',\n  payload: 'd'\n};\n\nstore.dispatch(action2);\nstore.getState();\n```\n#### Application 樣板\n1. 安裝 redux\n`npm install --save redux react-redux`\n2. 新增 src/app.js\n```\nimport React from 'react';\nimport { View } from 'react-native';\n\nconst App = () => {\n    return (\n        <View />\n    );\n};\n\nexport default App;\n```\n3. 刪除 ios.index.js 的所有內容，用以下取代\n```\nimport { AppRegistry } from 'react-native';\nimport App from './src/app';\n\nAppRegistry.registerComponent('tech_stack', () => App );\n```\n4. 在 app.js 引入函式庫\n```\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n```\n5. 新增 src/reducers/index.js\n```\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n    libraries: () => []\n});\n```\n6. 引入 reducers，將 reducers 放到 createStore 裡面\n```\nimport reducers from './reducers';\n\nconst App = () => {\n    return (\n        <Provider store={createStore(reducers)}>\n            <View />\n        </Provider>\n    );\n};\n```\n#### 渲染 Header\n1. 新增 src/components/common，把舊檔案複製進去\n2. 引入 Header\n`import { Header } from './components/common';`\n3. 使用 Header\n```\nconst App = () => {\n    return (\n        <Provider store={createStore(reducers)}>\n            <View>\n                <Header headerText=\"Tech Stack\" />\n            </View>\n        </Provider>\n    );\n};\n```\n#### Data 的 Library List\n1. 新增 src/reducers/LibraryReducer.js\n`export default () => [];`\n2. 在 reducers/index.js 引入 LibraryReducer.js\n```\nimport { combineReducers } from 'redux';\nimport LibraryReducer from './LibraryReducer';\n\nexport default combineReducers({\n    libraries: LibraryReducer\n});\n```\n3. 新增 src/reducers/LibraryList.json\n```\n[\n  {\"id\": 0,\n    \"title\": \"Webpack\",\n    \"description\": \"Webpack is a module bundler. It packs CommonJs/AMD modules i. e. for the browser. Allows to split your codebase into multiple bundles, which can be loaded on demand.\"\n  },\n  {\"id\": 1,\n    \"title\": \"React\",\n    \"description\": \"React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.\"\n  },\n  {\"id\": 2,\n    \"title\": \"Redux\",\n    \"description\": \"Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.\"\n  },\n  {\"id\": 3,\n    \"title\": \"React-Redux\",\n    \"description\": \"React-Redux is the official set of bindings between the React and Redux libraries. With this library you can keep your views and data in sync.\"\n  },\n  {\"id\": 4,\n    \"title\": \"Lodash\",\n    \"description\": \"A modern JavaScript utility library delivering modularity, performance, & extras. Lodash is released under the MIT license & supports modern environments.\"\n  },\n  {\"id\": 5,\n    \"title\": \"Redux-Thunk\",\n    \"description\": \"Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met.\"\n  },\n  {\"id\": 6,\n    \"title\": \"ESLint\",\n    \"description\": \"ESLint is an open source JavaScript linting utility originally created by Nicholas C. Zakas in June 2013. Code linting is a type of static analysis that is frequently used to find problematic patterns or code that doesn't adhere to certain style guidelines.\"\n  },\n  {\"id\": 7,\n    \"title\": \"Babel\",\n    \"description\": \"Babel has support for the latest version of JavaScript through syntax transformers. These plugins allow you to use new syntax, right now without waiting for browser support.\"\n  },\n  {\"id\": 8,\n    \"title\": \"Axios\",\n    \"description\": \"Promise based HTTP client for the browser and node.js. With Axios, you can make XMLHttpRequests from the browser or Node with the full Promise Api.\"\n  }\n]\n```\n#### The Connect Function\n1. 引入 json 的資料，然後輸出\n```\nimport data from './LibraryList.json';\n\nexport default () => data;\n```\n2. 新增 src/components/LibraryList.js，在這邊有一點要注意，可以直接引入 json 來使用，但是在 redux 不能這樣用\n```\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LibraryList extends Component {\n    render() {\n        return;\n    }\n}\n\nexport default connect()(LibraryList);\n```\n#### Connect 與 MapStateToProps\n1. 在 LibraryList.js 新增 mapStateToProps function\n```\nconst mapStateToProps = state => {\n    return { libraries: state.libraries };\n};\n```\n2. 在 LibraryList 裡面 console，會看到物件和 dispatch\n```\nclass LibraryList extends Component {\n    render() {\n        console.log(this.props);\n        return;\n    }\n}\n```\n### 用正確的方法渲染 List\n#### 實作 ListView\n1. 引入 ListView，然後用 componentWillMount 來取得值，最後送到 ListView\n```\nimport { ListView } from 'react-native';\n\nclass LibraryList extends Component {\n    componentWillMount() {\n        const ds = new ListView.DataSource({\n            rowHasChanged: (r1, r2) => r1 !== r2\n        });\n        \n        this.dataSource = ds.cloneWithRows(this.props.libraries);\n    }\n    \n    renderRow() {\n        \n    }\n    \n    render() {\n        return (\n            <ListView\n                dataSource={this.dataSource}\n                renderRow={this.renderRow}\n            />\n        );\n    }\n}\n```\n#### 渲染單一的列\n1. 新增 ListItem.js\n```\nimport React, { Component } from 'react';\n\nclass ListItem extends Component {\n    render() {\n        \n    }\n}\n\nexport default ListItem;\n```\n2. 在 LibraryList.js 引入 ListItem，然後放在 renderRow 裡面，並傳入 props 叫做 Library\n```\nimport ListItem from './ListItem';\n\nrenderRow(library) {\n    return <ListItem library={library} />;\n}\n```\n#### 美化 List\n1. 引入 CardSection，然後讓接收上一層傳過來的值並顯示它\n```\nimport { CardSection } from './common';\n\nclass ListItem extends Component {\n    render() {\n        const { titleStyle } = styles;\n\n        return (\n            <CardSection>\n                <Text style={titleStyle}>\n                    {this.props.library.title}\n                </Text>\n            </CardSection>\n        );\n    }\n}\n```\n2. 新增樣式\n```\nconst styles = {\n    titleStyle: {\n        fontSize: 18,\n        paddingLeft: 15\n    }\n};\n```\n3. 在 app.js 的 View 新增 flex 1 的樣式，讓 List 可以在整頁滾動\n`<View style={{\"{{ flex: 1 \"}}}}>`\n#### 創建 Selection Reducer\n1. 新增 src/reducers/SelectionReducer.js，在畫面產生的時候，預設不要選任何東西，所以送出 null\n```\nexport default () => {\n    return null;\n};\n```\n2. 在 reducer/index.js 把 SelectionReducer 加入\n```\nimport SelectionReducer from './SelectionReducer';\n\nexport default combineReducers({\n    libraries: LibraryReducer,\n    selectedLibraryId: SelectionReducer\n});\n```\n#### 介紹 Action Creator\n1. 在 Component 裡面用 Action Creator 呼叫 Action，Action 會去要求 Reducer 改變值\n2. 新增 src/actions/index.js\n```\nexport const selectLibrary = (libraryId) => {\n    return {\n        type: 'select_library',\n        payload: libraryId\n    };\n};\n```\n#### 呼叫 Action Creators\n1. 在 ListItem.js 引入所有 actions\n`import * as actions from '../actions';`\n2. 在 ListItem.js 引入 connect，connect 的第一個參數是傳入的 props 值，目前沒有要傳東西，所以用 null，第二個參數是 actions，最後把 action 傳入 ListItem 的 component\n```\nimport { connect } from 'react-redux';\n\nexport default connect(null, actions)(ListItem);\n```\n#### 新增 Touchable 元件\n1. 在 ListItem.js 引入 TouchableWithoutFeedback 和 View\n`import { Text, TouchableWithoutFeedback, View } from 'react-native';`\n2. 把 TouchableWithoutFeedback 和 View 加到元件裡面，onPress 之後，使用 action\n```\nclass ListItem extends Component {\n    render() {\n        const { titleStyle } = styles;\n        const { id, title } = this.props.library;\n\n        return (\n            <TouchableWithoutFeedback\n                onPress={() => this.props.selectLibrary(id)}\n            >\n                <View>\n                    <CardSection>\n                        <Text style={titleStyle}>\n                            {title}\n                        </Text>\n                    </CardSection>\n                </View>\n            </TouchableWithoutFeedback>\n        );\n    }\n}\n```\n#### Reducer 的規則\n1. 修改 SelectionReducer.js，如果選到東西就回傳 id，如果沒有就回傳現在的 state\n```\nexport default (state = null, action) => {\n    switch (action.type) {\n        case 'select_library':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n```\n#### 展開列\n1. 新增 mapStateToProps 回傳 object，然後會用 props 的形式放到 component 裡面，state.selectedLibraryId 是從 reducer/index.js 裡面取得的，最後將 mapStateToProps 和 actions 放在一起，就可以比較 selectedLibraryId 和 library.id 是不是一樣，一樣的話就展開\n```\nconst mapStateToProps = state => {\n    return { selectedLibraryId: state.selectedLibraryId };\n};\n\nexport default connect(mapStateToProps, actions)(ListItem);\n```\n2. 在 ListItem 的元件新增 renderDescription function 比較選擇的和本來的一不一樣，一樣就展開\n```\nrenderDescription() {\n    const { library, selectedLibraryId } = this.props;\n\n    if (library.id === selectedLibraryId) {\n        return (\n            <Text>{library.description}</Text>\n        );\n    }\n}\n```\n3. 最後把 renderDescription 放到 Component 裡面\n```\n<View>\n    <CardSection>\n        <Text style={titleStyle}>\n            {title}\n        </Text>\n    </CardSection>\n    {this.renderDescription()}\n</View>\n```\n#### 將邏輯移出 Component\n1. mapStateToProps 引入第二個參數 ownProps，它等於 this.props，所以最後可以用 expanded 簡化，它只會回傳 true 或 false\n```\nconst mapStateToProps = (state, ownProps) => {\n    const expanded = state.selectedLibraryId === ownProps.library.id;\n\n    return { expanded };\n};\n```\n2. 修改 renderDescription\n```\nrenderDescription() {\n    const { library, expanded } = this.props;\n\n    if (expanded) {\n        return (\n            <Text>{library.description}</Text>\n        );\n    }\n}\n```\n#### 動畫\n1. 在 renderDescription 加入 CardSection 讓版面更漂亮\n```\n<CardSection>\n    <Text>{library.description}</Text>\n</CardSection>\n```\n2. 引入 LayoutAnimation\n```\nimport {\n    Text,\n    TouchableWithoutFeedback,\n    View,\n    LayoutAnimation\n} from 'react-native';\n```\n3. 在 ListItem 的 Component 加入 componentWillUpdate\n```\ncomponentWillUpdate() {\n    LayoutAnimation.spring();\n}\n```\n4. 流程：User 點擊 Library => 呼叫 Action Creator => Action Creator 回傳 Action，然後傳到 Reducers => 新狀態會傳到 mapstateToProps => Components 重新渲染 => View 就會更新","slug":"React-Native-快速學習自我挑戰-Day6","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxx004x7ifalodds8r9","content":"<img src=\"/images/learning/reactNative/reactnativeday6.png\">\n<hr>\n<h3>深入了解 Redux</h3>\n<h4>Redux 的基礎</h4>\n<ol>\n<li>建立新專案<br>\n<code>react-native init tech_stack</code></li>\n<li><a href=\"https://stephengrider.github.io/JSPlaygrounds/\" target=\"_blank\" rel=\"external\">JSPlaygrounds</a></li>\n<li>Reducer：一個可以回傳一些資料的 function</li>\n<li>Action：一個告訴 reducer 如何改變它的資料的物件</li>\n<li>State：給 app 使用的資料</li>\n</ol>\n<h4>更多 Redux</h4>\n<ol>\n<li>簡易 Redux 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const reducer = (state = [], action) =&gt; &#123;</div><div class=\"line\">\tif (action.type === &apos;split_string&apos;) &#123;</div><div class=\"line\">    return action.payload.split(&apos;&apos;);</div><div class=\"line\">  &#125; else if (action.type === &apos;add_character&apos;) &#123;</div><div class=\"line\">  \treturn [ ...state, action.payload ];</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  return state;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const store = Redux.createStore(reducer);</div><div class=\"line\"></div><div class=\"line\">store.getState();</div><div class=\"line\"></div><div class=\"line\">const action = &#123;</div><div class=\"line\">  type: &apos;split_string&apos;,</div><div class=\"line\">  payload: &apos;asdf&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">store.dispatch(action);</div><div class=\"line\"></div><div class=\"line\">store.getState();</div><div class=\"line\"></div><div class=\"line\">const action2 = &#123;</div><div class=\"line\">  type: &apos;add_character&apos;,</div><div class=\"line\">  payload: &apos;d&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">store.dispatch(action2);</div><div class=\"line\">store.getState();</div></pre></td></tr></table></figure>\n<h4>Application 樣板</h4>\n<ol>\n<li>安裝 redux<br>\n<code>npm install --save redux react-redux</code></li>\n<li>新增 src/app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View /&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default App;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>刪除 ios.index.js 的所有內容，用以下取代</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</div><div class=\"line\">import App from &apos;./src/app&apos;;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;tech_stack&apos;, () =&gt; App );</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 app.js 引入函式庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</div><div class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 src/reducers/index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</div><div class=\"line\"></div><div class=\"line\">export default combineReducers(&#123;</div><div class=\"line\">    libraries: () =&gt; []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>引入 reducers，將 reducers 放到 createStore 裡面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">import reducers from &apos;./reducers&apos;;</div><div class=\"line\"></div><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Provider store=&#123;createStore(reducers)&#125;&gt;</div><div class=\"line\">            &lt;View /&gt;</div><div class=\"line\">        &lt;/Provider&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>渲染 Header</h4>\n<ol>\n<li>新增 src/components/common，把舊檔案複製進去</li>\n<li>引入 Header<br>\n<code>import { Header } from './components/common';</code></li>\n<li>使用 Header</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Provider store=&#123;createStore(reducers)&#125;&gt;</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Header headerText=&quot;Tech Stack&quot; /&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        &lt;/Provider&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>Data 的 Library List</h4>\n<ol>\n<li>新增 src/reducers/LibraryReducer.js<br>\n<code>export default () =&gt; [];</code></li>\n<li>在 reducers/index.js 引入 LibraryReducer.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</div><div class=\"line\">import LibraryReducer from &apos;./LibraryReducer&apos;;</div><div class=\"line\"></div><div class=\"line\">export default combineReducers(&#123;</div><div class=\"line\">    libraries: LibraryReducer</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 src/reducers/LibraryList.json</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  &#123;&quot;id&quot;: 0,</div><div class=\"line\">    &quot;title&quot;: &quot;Webpack&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Webpack is a module bundler. It packs CommonJs/AMD modules i. e. for the browser. Allows to split your codebase into multiple bundles, which can be loaded on demand.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 1,</div><div class=\"line\">    &quot;title&quot;: &quot;React&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 2,</div><div class=\"line\">    &quot;title&quot;: &quot;Redux&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 3,</div><div class=\"line\">    &quot;title&quot;: &quot;React-Redux&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;React-Redux is the official set of bindings between the React and Redux libraries. With this library you can keep your views and data in sync.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 4,</div><div class=\"line\">    &quot;title&quot;: &quot;Lodash&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;A modern JavaScript utility library delivering modularity, performance, &amp; extras. Lodash is released under the MIT license &amp; supports modern environments.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 5,</div><div class=\"line\">    &quot;title&quot;: &quot;Redux-Thunk&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 6,</div><div class=\"line\">    &quot;title&quot;: &quot;ESLint&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;ESLint is an open source JavaScript linting utility originally created by Nicholas C. Zakas in June 2013. Code linting is a type of static analysis that is frequently used to find problematic patterns or code that doesn&apos;t adhere to certain style guidelines.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 7,</div><div class=\"line\">    &quot;title&quot;: &quot;Babel&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Babel has support for the latest version of JavaScript through syntax transformers. These plugins allow you to use new syntax, right now without waiting for browser support.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 8,</div><div class=\"line\">    &quot;title&quot;: &quot;Axios&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Promise based HTTP client for the browser and node.js. With Axios, you can make XMLHttpRequests from the browser or Node with the full Promise Api.&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h4>The Connect Function</h4>\n<ol>\n<li>引入 json 的資料，然後輸出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import data from &apos;./LibraryList.json&apos;;</div><div class=\"line\"></div><div class=\"line\">export default () =&gt; data;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 src/components/LibraryList.js，在這邊有一點要注意，可以直接引入 json 來使用，但是在 redux 不能這樣用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class=\"line\"></div><div class=\"line\">class LibraryList extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default connect()(LibraryList);</div></pre></td></tr></table></figure>\n<h4>Connect 與 MapStateToProps</h4>\n<ol>\n<li>在 LibraryList.js 新增 mapStateToProps function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mapStateToProps = state =&gt; &#123;</div><div class=\"line\">    return &#123; libraries: state.libraries &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 LibraryList 裡面 console，會看到物件和 dispatch</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class LibraryList extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        console.log(this.props);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>用正確的方法渲染 List</h3>\n<h4>實作 ListView</h4>\n<ol>\n<li>引入 ListView，然後用 componentWillMount 來取得值，最後送到 ListView</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; ListView &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">class LibraryList extends Component &#123;</div><div class=\"line\">    componentWillMount() &#123;</div><div class=\"line\">        const ds = new ListView.DataSource(&#123;</div><div class=\"line\">            rowHasChanged: (r1, r2) =&gt; r1 !== r2</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        this.dataSource = ds.cloneWithRows(this.props.libraries);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    renderRow() &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;ListView</div><div class=\"line\">                dataSource=&#123;this.dataSource&#125;</div><div class=\"line\">                renderRow=&#123;this.renderRow&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>渲染單一的列</h4>\n<ol>\n<li>新增 ListItem.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\"></div><div class=\"line\">class ListItem extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default ListItem;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 LibraryList.js 引入 ListItem，然後放在 renderRow 裡面，並傳入 props 叫做 Library</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import ListItem from &apos;./ListItem&apos;;</div><div class=\"line\"></div><div class=\"line\">renderRow(library) &#123;</div><div class=\"line\">    return &lt;ListItem library=&#123;library&#125; /&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>美化 List</h4>\n<ol>\n<li>引入 CardSection，然後讓接收上一層傳過來的值並顯示它</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; CardSection &#125; from &apos;./common&apos;;</div><div class=\"line\"></div><div class=\"line\">class ListItem extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123; titleStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">        return (</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;Text style=&#123;titleStyle&#125;&gt;</div><div class=\"line\">                    &#123;this.props.library.title&#125;</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    titleStyle: &#123;</div><div class=\"line\">        fontSize: 18,</div><div class=\"line\">        paddingLeft: 15</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 app.js 的 View 新增 flex 1 的樣式，讓 List 可以在整頁滾動<br>\n<code>&lt;View style={{ flex: 1 }}&gt;</code></li>\n</ol>\n<h4>創建 Selection Reducer</h4>\n<ol>\n<li>新增 src/reducers/SelectionReducer.js，在畫面產生的時候，預設不要選任何東西，所以送出 null</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default () =&gt; &#123;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 reducer/index.js 把 SelectionReducer 加入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import SelectionReducer from &apos;./SelectionReducer&apos;;</div><div class=\"line\"></div><div class=\"line\">export default combineReducers(&#123;</div><div class=\"line\">    libraries: LibraryReducer,</div><div class=\"line\">    selectedLibraryId: SelectionReducer</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>介紹 Action Creator</h4>\n<ol>\n<li>在 Component 裡面用 Action Creator 呼叫 Action，Action 會去要求 Reducer 改變值</li>\n<li>新增 src/actions/index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export const selectLibrary = (libraryId) =&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        type: &apos;select_library&apos;,</div><div class=\"line\">        payload: libraryId</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>呼叫 Action Creators</h4>\n<ol>\n<li>在 ListItem.js 引入所有 actions<br>\n<code>import * as actions from '../actions';</code></li>\n<li>在 ListItem.js 引入 connect，connect 的第一個參數是傳入的 props 值，目前沒有要傳東西，所以用 null，第二個參數是 actions，最後把 action 傳入 ListItem 的 component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class=\"line\"></div><div class=\"line\">export default connect(null, actions)(ListItem);</div></pre></td></tr></table></figure>\n<h4>新增 Touchable 元件</h4>\n<ol>\n<li>在 ListItem.js 引入 TouchableWithoutFeedback 和 View<br>\n<code>import { Text, TouchableWithoutFeedback, View } from 'react-native';</code></li>\n<li>把 TouchableWithoutFeedback 和 View 加到元件裡面，onPress 之後，使用 action</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ListItem extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123; titleStyle &#125; = styles;</div><div class=\"line\">        const &#123; id, title &#125; = this.props.library;</div><div class=\"line\"></div><div class=\"line\">        return (</div><div class=\"line\">            &lt;TouchableWithoutFeedback</div><div class=\"line\">                onPress=&#123;() =&gt; this.props.selectLibrary(id)&#125;</div><div class=\"line\">            &gt;</div><div class=\"line\">                &lt;View&gt;</div><div class=\"line\">                    &lt;CardSection&gt;</div><div class=\"line\">                        &lt;Text style=&#123;titleStyle&#125;&gt;</div><div class=\"line\">                            &#123;title&#125;</div><div class=\"line\">                        &lt;/Text&gt;</div><div class=\"line\">                    &lt;/CardSection&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/TouchableWithoutFeedback&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Reducer 的規則</h4>\n<ol>\n<li>修改 SelectionReducer.js，如果選到東西就回傳 id，如果沒有就回傳現在的 state</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default (state = null, action) =&gt; &#123;</div><div class=\"line\">    switch (action.type) &#123;</div><div class=\"line\">        case &apos;select_library&apos;:</div><div class=\"line\">            return action.payload;</div><div class=\"line\">        default:</div><div class=\"line\">            return state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>展開列</h4>\n<ol>\n<li>新增 mapStateToProps 回傳 object，然後會用 props 的形式放到 component 裡面，state.selectedLibraryId 是從 reducer/index.js 裡面取得的，最後將 mapStateToProps 和 actions 放在一起，就可以比較 selectedLibraryId 和 <a href=\"http://library.id\" target=\"_blank\" rel=\"external\">library.id</a> 是不是一樣，一樣的話就展開</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mapStateToProps = state =&gt; &#123;</div><div class=\"line\">    return &#123; selectedLibraryId: state.selectedLibraryId &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default connect(mapStateToProps, actions)(ListItem);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 ListItem 的元件新增 renderDescription function 比較選擇的和本來的一不一樣，一樣就展開</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderDescription() &#123;</div><div class=\"line\">    const &#123; library, selectedLibraryId &#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    if (library.id === selectedLibraryId) &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>最後把 renderDescription 放到 Component 裡面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">    &lt;CardSection&gt;</div><div class=\"line\">        &lt;Text style=&#123;titleStyle&#125;&gt;</div><div class=\"line\">            &#123;title&#125;</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">    &lt;/CardSection&gt;</div><div class=\"line\">    &#123;this.renderDescription()&#125;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure>\n<h4>將邏輯移出 Component</h4>\n<ol>\n<li>mapStateToProps 引入第二個參數 ownProps，它等於 this.props，所以最後可以用 expanded 簡化，它只會回傳 true 或 false</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mapStateToProps = (state, ownProps) =&gt; &#123;</div><div class=\"line\">    const expanded = state.selectedLibraryId === ownProps.library.id;</div><div class=\"line\"></div><div class=\"line\">    return &#123; expanded &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 renderDescription</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderDescription() &#123;</div><div class=\"line\">    const &#123; library, expanded &#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    if (expanded) &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>動畫</h4>\n<ol>\n<li>在 renderDescription 加入 CardSection 讓版面更漂亮</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 LayoutAnimation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123;</div><div class=\"line\">    Text,</div><div class=\"line\">    TouchableWithoutFeedback,</div><div class=\"line\">    View,</div><div class=\"line\">    LayoutAnimation</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 ListItem 的 Component 加入 componentWillUpdate</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillUpdate() &#123;</div><div class=\"line\">    LayoutAnimation.spring();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>流程：User 點擊 Library =&gt; 呼叫 Action Creator =&gt; Action Creator 回傳 Action，然後傳到 Reducers =&gt; 新狀態會傳到 mapstateToProps =&gt; Components 重新渲染 =&gt; View 就會更新</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/reactNative/reactnativeday6.png\">\n<hr>\n<h3>深入了解 Redux</h3>\n<h4>Redux 的基礎</h4>\n<ol>\n<li>建立新專案<br>\n<code>react-native init tech_stack</code></li>\n<li><a href=\"https://stephengrider.github.io/JSPlaygrounds/\" target=\"_blank\" rel=\"external\">JSPlaygrounds</a></li>\n<li>Reducer：一個可以回傳一些資料的 function</li>\n<li>Action：一個告訴 reducer 如何改變它的資料的物件</li>\n<li>State：給 app 使用的資料</li>\n</ol>\n<h4>更多 Redux</h4>\n<ol>\n<li>簡易 Redux 範例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">const reducer = (state = [], action) =&gt; &#123;</div><div class=\"line\">\tif (action.type === &apos;split_string&apos;) &#123;</div><div class=\"line\">    return action.payload.split(&apos;&apos;);</div><div class=\"line\">  &#125; else if (action.type === &apos;add_character&apos;) &#123;</div><div class=\"line\">  \treturn [ ...state, action.payload ];</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  return state;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">const store = Redux.createStore(reducer);</div><div class=\"line\"></div><div class=\"line\">store.getState();</div><div class=\"line\"></div><div class=\"line\">const action = &#123;</div><div class=\"line\">  type: &apos;split_string&apos;,</div><div class=\"line\">  payload: &apos;asdf&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">store.dispatch(action);</div><div class=\"line\"></div><div class=\"line\">store.getState();</div><div class=\"line\"></div><div class=\"line\">const action2 = &#123;</div><div class=\"line\">  type: &apos;add_character&apos;,</div><div class=\"line\">  payload: &apos;d&apos;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">store.dispatch(action2);</div><div class=\"line\">store.getState();</div></pre></td></tr></table></figure>\n<h4>Application 樣板</h4>\n<ol>\n<li>安裝 redux<br>\n<code>npm install --save redux react-redux</code></li>\n<li>新增 src/app.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; View &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;View /&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default App;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>刪除 ios.index.js 的所有內容，用以下取代</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</div><div class=\"line\">import App from &apos;./src/app&apos;;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;tech_stack&apos;, () =&gt; App );</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在 app.js 引入函式庫</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</div><div class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>新增 src/reducers/index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</div><div class=\"line\"></div><div class=\"line\">export default combineReducers(&#123;</div><div class=\"line\">    libraries: () =&gt; []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>引入 reducers，將 reducers 放到 createStore 裡面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">import reducers from &apos;./reducers&apos;;</div><div class=\"line\"></div><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Provider store=&#123;createStore(reducers)&#125;&gt;</div><div class=\"line\">            &lt;View /&gt;</div><div class=\"line\">        &lt;/Provider&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>渲染 Header</h4>\n<ol>\n<li>新增 src/components/common，把舊檔案複製進去</li>\n<li>引入 Header<br>\n<code>import { Header } from './components/common';</code></li>\n<li>使用 Header</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = () =&gt; &#123;</div><div class=\"line\">    return (</div><div class=\"line\">        &lt;Provider store=&#123;createStore(reducers)&#125;&gt;</div><div class=\"line\">            &lt;View&gt;</div><div class=\"line\">                &lt;Header headerText=&quot;Tech Stack&quot; /&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        &lt;/Provider&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>Data 的 Library List</h4>\n<ol>\n<li>新增 src/reducers/LibraryReducer.js<br>\n<code>export default () =&gt; [];</code></li>\n<li>在 reducers/index.js 引入 LibraryReducer.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</div><div class=\"line\">import LibraryReducer from &apos;./LibraryReducer&apos;;</div><div class=\"line\"></div><div class=\"line\">export default combineReducers(&#123;</div><div class=\"line\">    libraries: LibraryReducer</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 src/reducers/LibraryList.json</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  &#123;&quot;id&quot;: 0,</div><div class=\"line\">    &quot;title&quot;: &quot;Webpack&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Webpack is a module bundler. It packs CommonJs/AMD modules i. e. for the browser. Allows to split your codebase into multiple bundles, which can be loaded on demand.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 1,</div><div class=\"line\">    &quot;title&quot;: &quot;React&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 2,</div><div class=\"line\">    &quot;title&quot;: &quot;Redux&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 3,</div><div class=\"line\">    &quot;title&quot;: &quot;React-Redux&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;React-Redux is the official set of bindings between the React and Redux libraries. With this library you can keep your views and data in sync.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 4,</div><div class=\"line\">    &quot;title&quot;: &quot;Lodash&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;A modern JavaScript utility library delivering modularity, performance, &amp; extras. Lodash is released under the MIT license &amp; supports modern environments.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 5,</div><div class=\"line\">    &quot;title&quot;: &quot;Redux-Thunk&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 6,</div><div class=\"line\">    &quot;title&quot;: &quot;ESLint&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;ESLint is an open source JavaScript linting utility originally created by Nicholas C. Zakas in June 2013. Code linting is a type of static analysis that is frequently used to find problematic patterns or code that doesn&apos;t adhere to certain style guidelines.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 7,</div><div class=\"line\">    &quot;title&quot;: &quot;Babel&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Babel has support for the latest version of JavaScript through syntax transformers. These plugins allow you to use new syntax, right now without waiting for browser support.&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;&quot;id&quot;: 8,</div><div class=\"line\">    &quot;title&quot;: &quot;Axios&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;Promise based HTTP client for the browser and node.js. With Axios, you can make XMLHttpRequests from the browser or Node with the full Promise Api.&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h4>The Connect Function</h4>\n<ol>\n<li>引入 json 的資料，然後輸出</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import data from &apos;./LibraryList.json&apos;;</div><div class=\"line\"></div><div class=\"line\">export default () =&gt; data;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增 src/components/LibraryList.js，在這邊有一點要注意，可以直接引入 json 來使用，但是在 redux 不能這樣用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class=\"line\"></div><div class=\"line\">class LibraryList extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default connect()(LibraryList);</div></pre></td></tr></table></figure>\n<h4>Connect 與 MapStateToProps</h4>\n<ol>\n<li>在 LibraryList.js 新增 mapStateToProps function</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mapStateToProps = state =&gt; &#123;</div><div class=\"line\">    return &#123; libraries: state.libraries &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 LibraryList 裡面 console，會看到物件和 dispatch</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class LibraryList extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        console.log(this.props);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>用正確的方法渲染 List</h3>\n<h4>實作 ListView</h4>\n<ol>\n<li>引入 ListView，然後用 componentWillMount 來取得值，最後送到 ListView</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; ListView &#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">class LibraryList extends Component &#123;</div><div class=\"line\">    componentWillMount() &#123;</div><div class=\"line\">        const ds = new ListView.DataSource(&#123;</div><div class=\"line\">            rowHasChanged: (r1, r2) =&gt; r1 !== r2</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        this.dataSource = ds.cloneWithRows(this.props.libraries);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    renderRow() &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;ListView</div><div class=\"line\">                dataSource=&#123;this.dataSource&#125;</div><div class=\"line\">                renderRow=&#123;this.renderRow&#125;</div><div class=\"line\">            /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>渲染單一的列</h4>\n<ol>\n<li>新增 ListItem.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\"></div><div class=\"line\">class ListItem extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default ListItem;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 LibraryList.js 引入 ListItem，然後放在 renderRow 裡面，並傳入 props 叫做 Library</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import ListItem from &apos;./ListItem&apos;;</div><div class=\"line\"></div><div class=\"line\">renderRow(library) &#123;</div><div class=\"line\">    return &lt;ListItem library=&#123;library&#125; /&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>美化 List</h4>\n<ol>\n<li>引入 CardSection，然後讓接收上一層傳過來的值並顯示它</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; CardSection &#125; from &apos;./common&apos;;</div><div class=\"line\"></div><div class=\"line\">class ListItem extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123; titleStyle &#125; = styles;</div><div class=\"line\"></div><div class=\"line\">        return (</div><div class=\"line\">            &lt;CardSection&gt;</div><div class=\"line\">                &lt;Text style=&#123;titleStyle&#125;&gt;</div><div class=\"line\">                    &#123;this.props.library.title&#125;</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">            &lt;/CardSection&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新增樣式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = &#123;</div><div class=\"line\">    titleStyle: &#123;</div><div class=\"line\">        fontSize: 18,</div><div class=\"line\">        paddingLeft: 15</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 app.js 的 View 新增 flex 1 的樣式，讓 List 可以在整頁滾動<br>\n<code>&lt;View style={{ flex: 1 }}&gt;</code></li>\n</ol>\n<h4>創建 Selection Reducer</h4>\n<ol>\n<li>新增 src/reducers/SelectionReducer.js，在畫面產生的時候，預設不要選任何東西，所以送出 null</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default () =&gt; &#123;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 reducer/index.js 把 SelectionReducer 加入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import SelectionReducer from &apos;./SelectionReducer&apos;;</div><div class=\"line\"></div><div class=\"line\">export default combineReducers(&#123;</div><div class=\"line\">    libraries: LibraryReducer,</div><div class=\"line\">    selectedLibraryId: SelectionReducer</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4>介紹 Action Creator</h4>\n<ol>\n<li>在 Component 裡面用 Action Creator 呼叫 Action，Action 會去要求 Reducer 改變值</li>\n<li>新增 src/actions/index.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export const selectLibrary = (libraryId) =&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        type: &apos;select_library&apos;,</div><div class=\"line\">        payload: libraryId</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>呼叫 Action Creators</h4>\n<ol>\n<li>在 ListItem.js 引入所有 actions<br>\n<code>import * as actions from '../actions';</code></li>\n<li>在 ListItem.js 引入 connect，connect 的第一個參數是傳入的 props 值，目前沒有要傳東西，所以用 null，第二個參數是 actions，最後把 action 傳入 ListItem 的 component</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class=\"line\"></div><div class=\"line\">export default connect(null, actions)(ListItem);</div></pre></td></tr></table></figure>\n<h4>新增 Touchable 元件</h4>\n<ol>\n<li>在 ListItem.js 引入 TouchableWithoutFeedback 和 View<br>\n<code>import { Text, TouchableWithoutFeedback, View } from 'react-native';</code></li>\n<li>把 TouchableWithoutFeedback 和 View 加到元件裡面，onPress 之後，使用 action</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ListItem extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123; titleStyle &#125; = styles;</div><div class=\"line\">        const &#123; id, title &#125; = this.props.library;</div><div class=\"line\"></div><div class=\"line\">        return (</div><div class=\"line\">            &lt;TouchableWithoutFeedback</div><div class=\"line\">                onPress=&#123;() =&gt; this.props.selectLibrary(id)&#125;</div><div class=\"line\">            &gt;</div><div class=\"line\">                &lt;View&gt;</div><div class=\"line\">                    &lt;CardSection&gt;</div><div class=\"line\">                        &lt;Text style=&#123;titleStyle&#125;&gt;</div><div class=\"line\">                            &#123;title&#125;</div><div class=\"line\">                        &lt;/Text&gt;</div><div class=\"line\">                    &lt;/CardSection&gt;</div><div class=\"line\">                &lt;/View&gt;</div><div class=\"line\">            &lt;/TouchableWithoutFeedback&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>Reducer 的規則</h4>\n<ol>\n<li>修改 SelectionReducer.js，如果選到東西就回傳 id，如果沒有就回傳現在的 state</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default (state = null, action) =&gt; &#123;</div><div class=\"line\">    switch (action.type) &#123;</div><div class=\"line\">        case &apos;select_library&apos;:</div><div class=\"line\">            return action.payload;</div><div class=\"line\">        default:</div><div class=\"line\">            return state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>展開列</h4>\n<ol>\n<li>新增 mapStateToProps 回傳 object，然後會用 props 的形式放到 component 裡面，state.selectedLibraryId 是從 reducer/index.js 裡面取得的，最後將 mapStateToProps 和 actions 放在一起，就可以比較 selectedLibraryId 和 <a href=\"http://library.id\" target=\"_blank\" rel=\"external\">library.id</a> 是不是一樣，一樣的話就展開</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mapStateToProps = state =&gt; &#123;</div><div class=\"line\">    return &#123; selectedLibraryId: state.selectedLibraryId &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default connect(mapStateToProps, actions)(ListItem);</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 ListItem 的元件新增 renderDescription function 比較選擇的和本來的一不一樣，一樣就展開</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderDescription() &#123;</div><div class=\"line\">    const &#123; library, selectedLibraryId &#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    if (library.id === selectedLibraryId) &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>最後把 renderDescription 放到 Component 裡面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">    &lt;CardSection&gt;</div><div class=\"line\">        &lt;Text style=&#123;titleStyle&#125;&gt;</div><div class=\"line\">            &#123;title&#125;</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">    &lt;/CardSection&gt;</div><div class=\"line\">    &#123;this.renderDescription()&#125;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure>\n<h4>將邏輯移出 Component</h4>\n<ol>\n<li>mapStateToProps 引入第二個參數 ownProps，它等於 this.props，所以最後可以用 expanded 簡化，它只會回傳 true 或 false</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mapStateToProps = (state, ownProps) =&gt; &#123;</div><div class=\"line\">    const expanded = state.selectedLibraryId === ownProps.library.id;</div><div class=\"line\"></div><div class=\"line\">    return &#123; expanded &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 renderDescription</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">renderDescription() &#123;</div><div class=\"line\">    const &#123; library, expanded &#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    if (expanded) &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>動畫</h4>\n<ol>\n<li>在 renderDescription 加入 CardSection 讓版面更漂亮</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;CardSection&gt;</div><div class=\"line\">    &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt;</div><div class=\"line\">&lt;/CardSection&gt;</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 LayoutAnimation</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123;</div><div class=\"line\">    Text,</div><div class=\"line\">    TouchableWithoutFeedback,</div><div class=\"line\">    View,</div><div class=\"line\">    LayoutAnimation</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 ListItem 的 Component 加入 componentWillUpdate</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillUpdate() &#123;</div><div class=\"line\">    LayoutAnimation.spring();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>流程：User 點擊 Library =&gt; 呼叫 Action Creator =&gt; Action Creator 回傳 Action，然後傳到 Reducers =&gt; 新狀態會傳到 mapstateToProps =&gt; Components 重新渲染 =&gt; View 就會更新</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day1","thumbnail":["/images/learning/react/react.png"],"date":"2017-03-05T13:00:59.000Z","_content":"<img src=\"/images/learning/react/react.png\">\n\n***\n1. Reactjs 和 Redux 有 Library 可以使用。\n2. 瀏覽器尚未支援 ES6。\n3. 完成的檔案用 webpack + babel 來 transpile 變成網頁。\n    - index.html\n    - application.js\n    - style.css\n\n***\n起手專案(boilerplate)：React + Youtube API\n直接在 Command line 開 atom： `atom .`\n1. Component 是 JS 的 Function 的組合，用來生成 HTML。\n2. 使用 const 取變數，代表不改變的值；用 var 取變數，代表會改變的值。\n3. JSX 是一種 JavaScript 的類別，允許我們可以寫 HTML 在 JavaScript 裡面。\n4. 寫 index.js 的邏輯\n    - 創建一個元件，元件應該可以產生 HTML。\n    - 把創建好的元件產生 HTML，然後放到頁面上(這個動作叫做 Render)。\n\n***\nJSX 轉換範例(使用[babel轉換工具](https://babeljs.io/repl))\n轉換前(1)\n```\nconst App = function() {\n  return <div>Hi!</div>;\n}\n```\n轉換後(1)\n```\nvar App = function App() {\n  return React.createElement(\n    \"div\",\n    null,\n    \"Hi!\"\n  );\n};\n```\n***\n轉換前(2)\n```\nconst App = function() {\n  return <ol>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n  </ol>;\n}\n```\n轉換後(2)\n```\nvar App = function App() {\n  return React.createElement(\n    \"ol\",\n    null,\n    React.createElement(\n      \"li\",\n      null,\n      \"1\"\n    ),\n    React.createElement(\n      \"li\",\n      null,\n      \"2\"\n    ),\n    React.createElement(\n      \"li\",\n      null,\n      \"3\"\n    )\n  );\n};\n```\n","source":"_posts/React快速學習自我挑戰-Day1.md","raw":"---\ntitle: React快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/react/react.png\ndate: 2017-03-05 21:00:59\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/react.png\">\n\n***\n1. Reactjs 和 Redux 有 Library 可以使用。\n2. 瀏覽器尚未支援 ES6。\n3. 完成的檔案用 webpack + babel 來 transpile 變成網頁。\n    - index.html\n    - application.js\n    - style.css\n\n***\n起手專案(boilerplate)：React + Youtube API\n直接在 Command line 開 atom： `atom .`\n1. Component 是 JS 的 Function 的組合，用來生成 HTML。\n2. 使用 const 取變數，代表不改變的值；用 var 取變數，代表會改變的值。\n3. JSX 是一種 JavaScript 的類別，允許我們可以寫 HTML 在 JavaScript 裡面。\n4. 寫 index.js 的邏輯\n    - 創建一個元件，元件應該可以產生 HTML。\n    - 把創建好的元件產生 HTML，然後放到頁面上(這個動作叫做 Render)。\n\n***\nJSX 轉換範例(使用[babel轉換工具](https://babeljs.io/repl))\n轉換前(1)\n```\nconst App = function() {\n  return <div>Hi!</div>;\n}\n```\n轉換後(1)\n```\nvar App = function App() {\n  return React.createElement(\n    \"div\",\n    null,\n    \"Hi!\"\n  );\n};\n```\n***\n轉換前(2)\n```\nconst App = function() {\n  return <ol>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n  </ol>;\n}\n```\n轉換後(2)\n```\nvar App = function App() {\n  return React.createElement(\n    \"ol\",\n    null,\n    React.createElement(\n      \"li\",\n      null,\n      \"1\"\n    ),\n    React.createElement(\n      \"li\",\n      null,\n      \"2\"\n    ),\n    React.createElement(\n      \"li\",\n      null,\n      \"3\"\n    )\n  );\n};\n```\n","slug":"React快速學習自我挑戰-Day1","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxy00507ifa03x6b3kl","content":"<img src=\"/images/learning/react/react.png\">\n<hr>\n<ol>\n<li>Reactjs 和 Redux 有 Library 可以使用。</li>\n<li>瀏覽器尚未支援 ES6。</li>\n<li>完成的檔案用 webpack + babel 來 transpile 變成網頁。\n<ul>\n<li>index.html</li>\n<li>application.js</li>\n<li>style.css</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>起手專案(boilerplate)：React + Youtube API<br>\n直接在 Command line 開 atom： <code>atom .</code></p>\n<ol>\n<li>Component 是 JS 的 Function 的組合，用來生成 HTML。</li>\n<li>使用 const 取變數，代表不改變的值；用 var 取變數，代表會改變的值。</li>\n<li>JSX 是一種 JavaScript 的類別，允許我們可以寫 HTML 在 JavaScript 裡面。</li>\n<li>寫 index.js 的邏輯\n<ul>\n<li>創建一個元件，元件應該可以產生 HTML。</li>\n<li>把創建好的元件產生 HTML，然後放到頁面上(這個動作叫做 Render)。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>JSX 轉換範例(使用<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"external\">babel轉換工具</a>)<br>\n轉換前(1)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = function() &#123;</div><div class=\"line\">  return &lt;div&gt;Hi!&lt;/div&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>轉換後(1)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var App = function App() &#123;</div><div class=\"line\">  return React.createElement(</div><div class=\"line\">    &quot;div&quot;,</div><div class=\"line\">    null,</div><div class=\"line\">    &quot;Hi!&quot;</div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<hr>\n<p>轉換前(2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = function() &#123;</div><div class=\"line\">  return &lt;ol&gt;</div><div class=\"line\">    &lt;li&gt;1&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;2&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;3&lt;/li&gt;</div><div class=\"line\">  &lt;/ol&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>轉換後(2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var App = function App() &#123;</div><div class=\"line\">  return React.createElement(</div><div class=\"line\">    &quot;ol&quot;,</div><div class=\"line\">    null,</div><div class=\"line\">    React.createElement(</div><div class=\"line\">      &quot;li&quot;,</div><div class=\"line\">      null,</div><div class=\"line\">      &quot;1&quot;</div><div class=\"line\">    ),</div><div class=\"line\">    React.createElement(</div><div class=\"line\">      &quot;li&quot;,</div><div class=\"line\">      null,</div><div class=\"line\">      &quot;2&quot;</div><div class=\"line\">    ),</div><div class=\"line\">    React.createElement(</div><div class=\"line\">      &quot;li&quot;,</div><div class=\"line\">      null,</div><div class=\"line\">      &quot;3&quot;</div><div class=\"line\">    )</div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/react.png\">\n<hr>\n<ol>\n<li>Reactjs 和 Redux 有 Library 可以使用。</li>\n<li>瀏覽器尚未支援 ES6。</li>\n<li>完成的檔案用 webpack + babel 來 transpile 變成網頁。\n<ul>\n<li>index.html</li>\n<li>application.js</li>\n<li>style.css</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>起手專案(boilerplate)：React + Youtube API<br>\n直接在 Command line 開 atom： <code>atom .</code></p>\n<ol>\n<li>Component 是 JS 的 Function 的組合，用來生成 HTML。</li>\n<li>使用 const 取變數，代表不改變的值；用 var 取變數，代表會改變的值。</li>\n<li>JSX 是一種 JavaScript 的類別，允許我們可以寫 HTML 在 JavaScript 裡面。</li>\n<li>寫 index.js 的邏輯\n<ul>\n<li>創建一個元件，元件應該可以產生 HTML。</li>\n<li>把創建好的元件產生 HTML，然後放到頁面上(這個動作叫做 Render)。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>JSX 轉換範例(使用<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"external\">babel轉換工具</a>)<br>\n轉換前(1)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = function() &#123;</div><div class=\"line\">  return &lt;div&gt;Hi!&lt;/div&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>轉換後(1)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var App = function App() &#123;</div><div class=\"line\">  return React.createElement(</div><div class=\"line\">    &quot;div&quot;,</div><div class=\"line\">    null,</div><div class=\"line\">    &quot;Hi!&quot;</div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<hr>\n<p>轉換前(2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App = function() &#123;</div><div class=\"line\">  return &lt;ol&gt;</div><div class=\"line\">    &lt;li&gt;1&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;2&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;3&lt;/li&gt;</div><div class=\"line\">  &lt;/ol&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>轉換後(2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var App = function App() &#123;</div><div class=\"line\">  return React.createElement(</div><div class=\"line\">    &quot;ol&quot;,</div><div class=\"line\">    null,</div><div class=\"line\">    React.createElement(</div><div class=\"line\">      &quot;li&quot;,</div><div class=\"line\">      null,</div><div class=\"line\">      &quot;1&quot;</div><div class=\"line\">    ),</div><div class=\"line\">    React.createElement(</div><div class=\"line\">      &quot;li&quot;,</div><div class=\"line\">      null,</div><div class=\"line\">      &quot;2&quot;</div><div class=\"line\">    ),</div><div class=\"line\">    React.createElement(</div><div class=\"line\">      &quot;li&quot;,</div><div class=\"line\">      null,</div><div class=\"line\">      &quot;3&quot;</div><div class=\"line\">    )</div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"React快速學習自我挑戰 Day10","thumbnail":["/images/learning/react/reactday10.jpg"],"date":"2017-03-22T02:16:50.000Z","_content":"<img src=\"/images/learning/react/reactday10.jpg\">\n\n***\n1. [Redux Blog Post API Reference](http://reduxblog.herokuapp.com/)。\n2. Postman 是一個 HTTP client 的 API。\n3. `npm install --save react-router@2.0.0-rc5`，安裝 react router。\n4. React-Router 套件有 History 的子套件，用來管理網頁的 URL，監控改變並隨著時間更新。\n5. History 對 URL 互動，並將更新傳送給 React-Router，React-Router 拿到 URL 之後並根據 URL 決定哪個 React Component 需要更新。\n6. Router 是一個當 URL 改變時，我們需要決定哪個 React Component 需要重新 render 的物件。\n7. browserHistory 是一個告訴 React-Router 如何 interpret URL changes 物件。\n8. History 有 browserHistory、hashHistory、memoryHistory 可以使用。\n9. IndexRoute 是一個做起來像是 Route，但是當 URL 符合我們所定義的 parent path 才會出現的 helper。","source":"_posts/React快速學習自我挑戰-Day10.md","raw":"---\ntitle: React快速學習自我挑戰 Day10\nthumbnail:\n  - /images/learning/react/reactday10.jpg\ndate: 2017-03-22 10:16:50\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday10.jpg\">\n\n***\n1. [Redux Blog Post API Reference](http://reduxblog.herokuapp.com/)。\n2. Postman 是一個 HTTP client 的 API。\n3. `npm install --save react-router@2.0.0-rc5`，安裝 react router。\n4. React-Router 套件有 History 的子套件，用來管理網頁的 URL，監控改變並隨著時間更新。\n5. History 對 URL 互動，並將更新傳送給 React-Router，React-Router 拿到 URL 之後並根據 URL 決定哪個 React Component 需要更新。\n6. Router 是一個當 URL 改變時，我們需要決定哪個 React Component 需要重新 render 的物件。\n7. browserHistory 是一個告訴 React-Router 如何 interpret URL changes 物件。\n8. History 有 browserHistory、hashHistory、memoryHistory 可以使用。\n9. IndexRoute 是一個做起來像是 Route，但是當 URL 符合我們所定義的 parent path 才會出現的 helper。","slug":"React快速學習自我挑戰-Day10","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwxy00537ifa0ykjrxew","content":"<img src=\"/images/learning/react/reactday10.jpg\">\n<hr>\n<ol>\n<li><a href=\"http://reduxblog.herokuapp.com/\" target=\"_blank\" rel=\"external\">Redux Blog Post API Reference</a>。</li>\n<li>Postman 是一個 HTTP client 的 API。</li>\n<li><code>npm install --save react-router@2.0.0-rc5</code>，安裝 react router。</li>\n<li>React-Router 套件有 History 的子套件，用來管理網頁的 URL，監控改變並隨著時間更新。</li>\n<li>History 對 URL 互動，並將更新傳送給 React-Router，React-Router 拿到 URL 之後並根據 URL 決定哪個 React Component 需要更新。</li>\n<li>Router 是一個當 URL 改變時，我們需要決定哪個 React Component 需要重新 render 的物件。</li>\n<li>browserHistory 是一個告訴 React-Router 如何 interpret URL changes 物件。</li>\n<li>History 有 browserHistory、hashHistory、memoryHistory 可以使用。</li>\n<li>IndexRoute 是一個做起來像是 Route，但是當 URL 符合我們所定義的 parent path 才會出現的 helper。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday10.jpg\">\n<hr>\n<ol>\n<li><a href=\"http://reduxblog.herokuapp.com/\" target=\"_blank\" rel=\"external\">Redux Blog Post API Reference</a>。</li>\n<li>Postman 是一個 HTTP client 的 API。</li>\n<li><code>npm install --save react-router@2.0.0-rc5</code>，安裝 react router。</li>\n<li>React-Router 套件有 History 的子套件，用來管理網頁的 URL，監控改變並隨著時間更新。</li>\n<li>History 對 URL 互動，並將更新傳送給 React-Router，React-Router 拿到 URL 之後並根據 URL 決定哪個 React Component 需要更新。</li>\n<li>Router 是一個當 URL 改變時，我們需要決定哪個 React Component 需要重新 render 的物件。</li>\n<li>browserHistory 是一個告訴 React-Router 如何 interpret URL changes 物件。</li>\n<li>History 有 browserHistory、hashHistory、memoryHistory 可以使用。</li>\n<li>IndexRoute 是一個做起來像是 Route，但是當 URL 符合我們所定義的 parent path 才會出現的 helper。</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day11","thumbnail":["/images/learning/react/reactday11.png"],"date":"2017-03-30T06:35:46.000Z","_content":"<img src=\"/images/learning/react/reactday11.png\">\n\n***\n1. React Lifecycle method 是一個 React Component class 的 function，用來被 React 自動呼叫。\n2. componentWillMount 是一個 Lifecycle method，他會在第一次 component 將要被 DOM render 的時候自動呼叫 componentWillMount，但是當下一次執行 component 的時候，就不會再執行 componentWillMount。\n3. componentWillMount 用在不知道什麼情況下要 fetch data。\n4. 如果要讓 react component 可以呼叫 action creator，我們必須要把 component 提升為 container。\n5. 製作 container 的方法。\n    * import connect\n    * import action creator\n    * 定義 mapDispatchToProps function，然後連接到 component。\n6. [Redux Form](https://github.com/erikras/redux-form)。\n7. `import { reducer as formReducer } from 'redux-form';`，import redux-form，拿取 reducer 這個 property，然後建立一個名為 formReducer 的變數。(此用法為了避免命名上的衝突)\n8. `const { handleSubmit } = this.props;` === `const handleSubmit = this.props.handleSubmit;`\n9. ` const { fields: { title, categories, content},  handleSubmit } = this.props;` === `const title = this.props.fields.title;`。\n10. reduxform 可以被用來注入 action creators 到 component 裡面，然後創建一個在 component 外的 container。\n11. reduxform 和 connect 的不同就是 reduxform 有一個額外的參數傳遞給他。\n    * connect：第一個參數是 mapStateToProps，第二個是 mapDispatchToProps。\n    * reduxform：第一個是 form config，第二個是 mapStateToProps，第三個是 mapDispatchToProps。\n","source":"_posts/React快速學習自我挑戰-Day11.md","raw":"---\ntitle: React快速學習自我挑戰 Day11\nthumbnail:\n  - /images/learning/react/reactday11.png\ndate: 2017-03-30 14:35:46\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday11.png\">\n\n***\n1. React Lifecycle method 是一個 React Component class 的 function，用來被 React 自動呼叫。\n2. componentWillMount 是一個 Lifecycle method，他會在第一次 component 將要被 DOM render 的時候自動呼叫 componentWillMount，但是當下一次執行 component 的時候，就不會再執行 componentWillMount。\n3. componentWillMount 用在不知道什麼情況下要 fetch data。\n4. 如果要讓 react component 可以呼叫 action creator，我們必須要把 component 提升為 container。\n5. 製作 container 的方法。\n    * import connect\n    * import action creator\n    * 定義 mapDispatchToProps function，然後連接到 component。\n6. [Redux Form](https://github.com/erikras/redux-form)。\n7. `import { reducer as formReducer } from 'redux-form';`，import redux-form，拿取 reducer 這個 property，然後建立一個名為 formReducer 的變數。(此用法為了避免命名上的衝突)\n8. `const { handleSubmit } = this.props;` === `const handleSubmit = this.props.handleSubmit;`\n9. ` const { fields: { title, categories, content},  handleSubmit } = this.props;` === `const title = this.props.fields.title;`。\n10. reduxform 可以被用來注入 action creators 到 component 裡面，然後創建一個在 component 外的 container。\n11. reduxform 和 connect 的不同就是 reduxform 有一個額外的參數傳遞給他。\n    * connect：第一個參數是 mapStateToProps，第二個是 mapDispatchToProps。\n    * reduxform：第一個是 form config，第二個是 mapStateToProps，第三個是 mapDispatchToProps。\n","slug":"React快速學習自我挑戰-Day11","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy000567ifa8oq65xlc","content":"<img src=\"/images/learning/react/reactday11.png\">\n<hr>\n<ol>\n<li>React Lifecycle method 是一個 React Component class 的 function，用來被 React 自動呼叫。</li>\n<li>componentWillMount 是一個 Lifecycle method，他會在第一次 component 將要被 DOM render 的時候自動呼叫 componentWillMount，但是當下一次執行 component 的時候，就不會再執行 componentWillMount。</li>\n<li>componentWillMount 用在不知道什麼情況下要 fetch data。</li>\n<li>如果要讓 react component 可以呼叫 action creator，我們必須要把 component 提升為 container。</li>\n<li>製作 container 的方法。\n<ul>\n<li>import connect</li>\n<li>import action creator</li>\n<li>定義 mapDispatchToProps function，然後連接到 component。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/erikras/redux-form\" target=\"_blank\" rel=\"external\">Redux Form</a>。</li>\n<li><code>import { reducer as formReducer } from 'redux-form';</code>，import redux-form，拿取 reducer 這個 property，然後建立一個名為 formReducer 的變數。(此用法為了避免命名上的衝突)</li>\n<li><code>const { handleSubmit } = this.props;</code> === <code>const handleSubmit = this.props.handleSubmit;</code></li>\n<li><code>const { fields: { title, categories, content}, handleSubmit } = this.props;</code> === <code>const title = this.props.fields.title;</code>。</li>\n<li>reduxform 可以被用來注入 action creators 到 component 裡面，然後創建一個在 component 外的 container。</li>\n<li>reduxform 和 connect 的不同就是 reduxform 有一個額外的參數傳遞給他。\n<ul>\n<li>connect：第一個參數是 mapStateToProps，第二個是 mapDispatchToProps。</li>\n<li>reduxform：第一個是 form config，第二個是 mapStateToProps，第三個是 mapDispatchToProps。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday11.png\">\n<hr>\n<ol>\n<li>React Lifecycle method 是一個 React Component class 的 function，用來被 React 自動呼叫。</li>\n<li>componentWillMount 是一個 Lifecycle method，他會在第一次 component 將要被 DOM render 的時候自動呼叫 componentWillMount，但是當下一次執行 component 的時候，就不會再執行 componentWillMount。</li>\n<li>componentWillMount 用在不知道什麼情況下要 fetch data。</li>\n<li>如果要讓 react component 可以呼叫 action creator，我們必須要把 component 提升為 container。</li>\n<li>製作 container 的方法。\n<ul>\n<li>import connect</li>\n<li>import action creator</li>\n<li>定義 mapDispatchToProps function，然後連接到 component。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/erikras/redux-form\" target=\"_blank\" rel=\"external\">Redux Form</a>。</li>\n<li><code>import { reducer as formReducer } from 'redux-form';</code>，import redux-form，拿取 reducer 這個 property，然後建立一個名為 formReducer 的變數。(此用法為了避免命名上的衝突)</li>\n<li><code>const { handleSubmit } = this.props;</code> === <code>const handleSubmit = this.props.handleSubmit;</code></li>\n<li><code>const { fields: { title, categories, content}, handleSubmit } = this.props;</code> === <code>const title = this.props.fields.title;</code>。</li>\n<li>reduxform 可以被用來注入 action creators 到 component 裡面，然後創建一個在 component 外的 container。</li>\n<li>reduxform 和 connect 的不同就是 reduxform 有一個額外的參數傳遞給他。\n<ul>\n<li>connect：第一個參數是 mapStateToProps，第二個是 mapDispatchToProps。</li>\n<li>reduxform：第一個是 form config，第二個是 mapStateToProps，第三個是 mapDispatchToProps。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day12","thumbnail":["/images/learning/react/reactday12.jpg"],"date":"2017-04-03T06:41:19.000Z","_content":"<img src=\"/images/learning/react/reactday12.jpg\">\n\n***\n1. `{title.touched ? title.error : ''}`，如果 title.touched 是  true，顯示 title.error，如果不是，什麼都不要顯示。\n2. ```{`form-group ${title.touched && title.invalid ? 'has-danger' : ''}`}```，如果 title 被 touched，而且 title 是 invalid，顯示 className \"has-danger\"，否則顯示空白 string。\n3. 盡量避免使用 context。只有在我們使用 react-router 的時候再使用 context。\n4. Create Post 是一個 action creator，action creator 可以創造一個 promise 當作他自己的 payload。當我們呼叫 action creator，就會產生一個當作 payload 的 promise，所以當 promise 解決以後，就等同於我們順利創建一個 post 了。\n5. 要存取 react-router，我們必須定義 contextTypes。這告訴 react 我想要從 parent component 存取這個 property。\n6. [Lorem Ipsum 產生器](http://www.lipsum.com/)。\n7. redux thunk 是用來處理非同步的 action creator。\n8. dispatch method 是 redux store 的一部份，包含了 application state。\n9. [Firebase react library](https://www.firebase.com/docs/web/libraries/react/)。\n","source":"_posts/React快速學習自我挑戰-Day12.md","raw":"---\ntitle: React快速學習自我挑戰 Day12\nthumbnail:\n  - /images/learning/react/reactday12.jpg\ndate: 2017-04-03 14:41:19\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday12.jpg\">\n\n***\n1. `{title.touched ? title.error : ''}`，如果 title.touched 是  true，顯示 title.error，如果不是，什麼都不要顯示。\n2. ```{`form-group ${title.touched && title.invalid ? 'has-danger' : ''}`}```，如果 title 被 touched，而且 title 是 invalid，顯示 className \"has-danger\"，否則顯示空白 string。\n3. 盡量避免使用 context。只有在我們使用 react-router 的時候再使用 context。\n4. Create Post 是一個 action creator，action creator 可以創造一個 promise 當作他自己的 payload。當我們呼叫 action creator，就會產生一個當作 payload 的 promise，所以當 promise 解決以後，就等同於我們順利創建一個 post 了。\n5. 要存取 react-router，我們必須定義 contextTypes。這告訴 react 我想要從 parent component 存取這個 property。\n6. [Lorem Ipsum 產生器](http://www.lipsum.com/)。\n7. redux thunk 是用來處理非同步的 action creator。\n8. dispatch method 是 redux store 的一部份，包含了 application state。\n9. [Firebase react library](https://www.firebase.com/docs/web/libraries/react/)。\n","slug":"React快速學習自我挑戰-Day12","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy100597ifa0ngjoaqs","content":"<img src=\"/images/learning/react/reactday12.jpg\">\n<hr>\n<ol>\n<li><code>{title.touched ? title.error : ''}</code>，如果 title.touched 是  true，顯示 title.error，如果不是，什麼都不要顯示。</li>\n<li><code>{`form-group ${title.touched &amp;&amp; title.invalid ? 'has-danger' : ''}`}</code>，如果 title 被 touched，而且 title 是 invalid，顯示 className “has-danger”，否則顯示空白 string。</li>\n<li>盡量避免使用 context。只有在我們使用 react-router 的時候再使用 context。</li>\n<li>Create Post 是一個 action creator，action creator 可以創造一個 promise 當作他自己的 payload。當我們呼叫 action creator，就會產生一個當作 payload 的 promise，所以當 promise 解決以後，就等同於我們順利創建一個 post 了。</li>\n<li>要存取 react-router，我們必須定義 contextTypes。這告訴 react 我想要從 parent component 存取這個 property。</li>\n<li><a href=\"http://www.lipsum.com/\" target=\"_blank\" rel=\"external\">Lorem Ipsum 產生器</a>。</li>\n<li>redux thunk 是用來處理非同步的 action creator。</li>\n<li>dispatch method 是 redux store 的一部份，包含了 application state。</li>\n<li><a href=\"https://www.firebase.com/docs/web/libraries/react/\" target=\"_blank\" rel=\"external\">Firebase react library</a>。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday12.jpg\">\n<hr>\n<ol>\n<li><code>{title.touched ? title.error : ''}</code>，如果 title.touched 是  true，顯示 title.error，如果不是，什麼都不要顯示。</li>\n<li><code>{`form-group ${title.touched &amp;&amp; title.invalid ? 'has-danger' : ''}`}</code>，如果 title 被 touched，而且 title 是 invalid，顯示 className “has-danger”，否則顯示空白 string。</li>\n<li>盡量避免使用 context。只有在我們使用 react-router 的時候再使用 context。</li>\n<li>Create Post 是一個 action creator，action creator 可以創造一個 promise 當作他自己的 payload。當我們呼叫 action creator，就會產生一個當作 payload 的 promise，所以當 promise 解決以後，就等同於我們順利創建一個 post 了。</li>\n<li>要存取 react-router，我們必須定義 contextTypes。這告訴 react 我想要從 parent component 存取這個 property。</li>\n<li><a href=\"http://www.lipsum.com/\" target=\"_blank\" rel=\"external\">Lorem Ipsum 產生器</a>。</li>\n<li>redux thunk 是用來處理非同步的 action creator。</li>\n<li>dispatch method 是 redux store 的一部份，包含了 application state。</li>\n<li><a href=\"https://www.firebase.com/docs/web/libraries/react/\" target=\"_blank\" rel=\"external\">Firebase react library</a>。</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day2","thumbnail":["/images/learning/react/reactday2.png"],"date":"2017-03-06T02:13:59.000Z","_content":"<img src=\"/images/learning/react/reactday2.png\">\n\n***\n1. 從 node modules 呼叫 react：`import React from 'react';`。\n2. 從 node modules 呼叫 react-dom：`import ReactDOM from 'react-dom';`。\n3. React Render 要用元件方式包裝：`<App />`。\n4. 指定 Render 的地方：`document.querySelector('.container')`。\n5. 每個檔案都只能有一個元件。\n6. Youtube API 的使用。\n    - 註冊 Youtube API Key。\n        * 前往[Goolge開發者界面](https://console.developers.google.com)。\n        * 點選左方選單的 Library。\n        * 搜尋 Youtube，並選擇「YouTube Data API v3」。\n        * Enable 該套件。\n        * 選擇左方選單的 Credentials。\n        * Create Credentials => API key => Restrict Key。\n        * 設定名稱，設定類別為「HTTP referrers (web sites) 」\n        * Save => 拿到 API Key\n    - 安裝 Youtube API 套件。\n        * Youtube API Search\n        * `npm install --save youtube-api-search`\n7. 輸出值：`export default SearchBar;`。\n8. 得到輸出值：`import SearchBar from './components/search_bar';`(需要包含路徑)。\n9. Class Base Method: `class SearchBar extends React.Component`。\n10. 語法糖：`import React, { Component } from 'react';` 等於\n    `import React from 'react';`\n    `const Component = React.Component;`\n11. React 處理事件有兩個步驟。\n    - Declare \"Event handler\" => 當事件發生時啟動 handler\n    - Pass \"Event handler\" => 直接跳到我們想對事件顯示的某元素\n12. State 是 React 最令人困惑的部分。\n    - 定義：State 是 JS 純物件，且用來記錄和對使用者事件做反應。不論元件的 State 是否改變、元件是否立刻 Render或是子原件也重新 Rerender，每一個 Class based 元件都有自己的 State Object。\n13. 所有的 JS classes 都有一個名為 constructor 的特別函式。\n14. class 的元件用來追蹤 State 的狀態或是值需要持續改變；functional 的元件用來取得某些資訊。\n\n***\n建立搜尋欄位\n```\nconst SearchBar = () => {\n  return <input />\n};\n```\n即時顯示值\nthis.state => 創建一個 term 的空值。\nthis.setState => 得到現在 input 裡面的值(並非直接改變)。\nvalue={this.state.term} => 取得 this.state 的值。\n```\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { term: '' };\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.term}\n          onChange={event => this.setState({ term: event.target.value })} />\n        Value of the input: {this.state.term}\n      </div>\n    );\n  }\n}\n```\n","source":"_posts/React快速學習自我挑戰-Day2.md","raw":"---\ntitle: React快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/react/reactday2.png\ndate: 2017-03-06 10:13:59\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday2.png\">\n\n***\n1. 從 node modules 呼叫 react：`import React from 'react';`。\n2. 從 node modules 呼叫 react-dom：`import ReactDOM from 'react-dom';`。\n3. React Render 要用元件方式包裝：`<App />`。\n4. 指定 Render 的地方：`document.querySelector('.container')`。\n5. 每個檔案都只能有一個元件。\n6. Youtube API 的使用。\n    - 註冊 Youtube API Key。\n        * 前往[Goolge開發者界面](https://console.developers.google.com)。\n        * 點選左方選單的 Library。\n        * 搜尋 Youtube，並選擇「YouTube Data API v3」。\n        * Enable 該套件。\n        * 選擇左方選單的 Credentials。\n        * Create Credentials => API key => Restrict Key。\n        * 設定名稱，設定類別為「HTTP referrers (web sites) 」\n        * Save => 拿到 API Key\n    - 安裝 Youtube API 套件。\n        * Youtube API Search\n        * `npm install --save youtube-api-search`\n7. 輸出值：`export default SearchBar;`。\n8. 得到輸出值：`import SearchBar from './components/search_bar';`(需要包含路徑)。\n9. Class Base Method: `class SearchBar extends React.Component`。\n10. 語法糖：`import React, { Component } from 'react';` 等於\n    `import React from 'react';`\n    `const Component = React.Component;`\n11. React 處理事件有兩個步驟。\n    - Declare \"Event handler\" => 當事件發生時啟動 handler\n    - Pass \"Event handler\" => 直接跳到我們想對事件顯示的某元素\n12. State 是 React 最令人困惑的部分。\n    - 定義：State 是 JS 純物件，且用來記錄和對使用者事件做反應。不論元件的 State 是否改變、元件是否立刻 Render或是子原件也重新 Rerender，每一個 Class based 元件都有自己的 State Object。\n13. 所有的 JS classes 都有一個名為 constructor 的特別函式。\n14. class 的元件用來追蹤 State 的狀態或是值需要持續改變；functional 的元件用來取得某些資訊。\n\n***\n建立搜尋欄位\n```\nconst SearchBar = () => {\n  return <input />\n};\n```\n即時顯示值\nthis.state => 創建一個 term 的空值。\nthis.setState => 得到現在 input 裡面的值(並非直接改變)。\nvalue={this.state.term} => 取得 this.state 的值。\n```\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { term: '' };\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.term}\n          onChange={event => this.setState({ term: event.target.value })} />\n        Value of the input: {this.state.term}\n      </div>\n    );\n  }\n}\n```\n","slug":"React快速學習自我挑戰-Day2","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy2005c7ifaxdbdl5jv","content":"<img src=\"/images/learning/react/reactday2.png\">\n<hr>\n<ol>\n<li>從 node modules 呼叫 react：<code>import React from 'react';</code>。</li>\n<li>從 node modules 呼叫 react-dom：<code>import ReactDOM from 'react-dom';</code>。</li>\n<li>React Render 要用元件方式包裝：<code>&lt;App /&gt;</code>。</li>\n<li>指定 Render 的地方：<code>document.querySelector('.container')</code>。</li>\n<li>每個檔案都只能有一個元件。</li>\n<li>Youtube API 的使用。\n<ul>\n<li>註冊 Youtube API Key。\n<ul>\n<li>前往<a href=\"https://console.developers.google.com\" target=\"_blank\" rel=\"external\">Goolge開發者界面</a>。</li>\n<li>點選左方選單的 Library。</li>\n<li>搜尋 Youtube，並選擇「YouTube Data API v3」。</li>\n<li>Enable 該套件。</li>\n<li>選擇左方選單的 Credentials。</li>\n<li>Create Credentials =&gt; API key =&gt; Restrict Key。</li>\n<li>設定名稱，設定類別為「HTTP referrers (web sites) 」</li>\n<li>Save =&gt; 拿到 API Key</li>\n</ul>\n</li>\n<li>安裝 Youtube API 套件。\n<ul>\n<li>Youtube API Search</li>\n<li><code>npm install --save youtube-api-search</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>輸出值：<code>export default SearchBar;</code>。</li>\n<li>得到輸出值：<code>import SearchBar from './components/search_bar';</code>(需要包含路徑)。</li>\n<li>Class Base Method: <code>class SearchBar extends React.Component</code>。</li>\n<li>語法糖：<code>import React, { Component } from 'react';</code> 等於<br>\n<code>import React from 'react';</code><br>\n<code>const Component = React.Component;</code></li>\n<li>React 處理事件有兩個步驟。\n<ul>\n<li>Declare “Event handler” =&gt; 當事件發生時啟動 handler</li>\n<li>Pass “Event handler” =&gt; 直接跳到我們想對事件顯示的某元素</li>\n</ul>\n</li>\n<li>State 是 React 最令人困惑的部分。\n<ul>\n<li>定義：State 是 JS 純物件，且用來記錄和對使用者事件做反應。不論元件的 State 是否改變、元件是否立刻 Render或是子原件也重新 Rerender，每一個 Class based 元件都有自己的 State Object。</li>\n</ul>\n</li>\n<li>所有的 JS classes 都有一個名為 constructor 的特別函式。</li>\n<li>class 的元件用來追蹤 State 的狀態或是值需要持續改變；functional 的元件用來取得某些資訊。</li>\n</ol>\n<hr>\n<p>建立搜尋欄位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const SearchBar = () =&gt; &#123;</div><div class=\"line\">  return &lt;input /&gt;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>即時顯示值<br>\nthis.state =&gt; 創建一個 term 的空值。<br>\nthis.setState =&gt; 得到現在 input 裡面的值(並非直接改變)。<br>\nvalue={this.state.term} =&gt; 取得 this.state 的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class SearchBar extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\"></div><div class=\"line\">    this.state = &#123; term: &apos;&apos; &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;input</div><div class=\"line\">          value=&#123;this.state.term&#125;</div><div class=\"line\">          onChange=&#123;event =&gt; this.setState(&#123; term: event.target.value &#125;)&#125; /&gt;</div><div class=\"line\">        Value of the input: &#123;this.state.term&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday2.png\">\n<hr>\n<ol>\n<li>從 node modules 呼叫 react：<code>import React from 'react';</code>。</li>\n<li>從 node modules 呼叫 react-dom：<code>import ReactDOM from 'react-dom';</code>。</li>\n<li>React Render 要用元件方式包裝：<code>&lt;App /&gt;</code>。</li>\n<li>指定 Render 的地方：<code>document.querySelector('.container')</code>。</li>\n<li>每個檔案都只能有一個元件。</li>\n<li>Youtube API 的使用。\n<ul>\n<li>註冊 Youtube API Key。\n<ul>\n<li>前往<a href=\"https://console.developers.google.com\" target=\"_blank\" rel=\"external\">Goolge開發者界面</a>。</li>\n<li>點選左方選單的 Library。</li>\n<li>搜尋 Youtube，並選擇「YouTube Data API v3」。</li>\n<li>Enable 該套件。</li>\n<li>選擇左方選單的 Credentials。</li>\n<li>Create Credentials =&gt; API key =&gt; Restrict Key。</li>\n<li>設定名稱，設定類別為「HTTP referrers (web sites) 」</li>\n<li>Save =&gt; 拿到 API Key</li>\n</ul>\n</li>\n<li>安裝 Youtube API 套件。\n<ul>\n<li>Youtube API Search</li>\n<li><code>npm install --save youtube-api-search</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>輸出值：<code>export default SearchBar;</code>。</li>\n<li>得到輸出值：<code>import SearchBar from './components/search_bar';</code>(需要包含路徑)。</li>\n<li>Class Base Method: <code>class SearchBar extends React.Component</code>。</li>\n<li>語法糖：<code>import React, { Component } from 'react';</code> 等於<br>\n<code>import React from 'react';</code><br>\n<code>const Component = React.Component;</code></li>\n<li>React 處理事件有兩個步驟。\n<ul>\n<li>Declare “Event handler” =&gt; 當事件發生時啟動 handler</li>\n<li>Pass “Event handler” =&gt; 直接跳到我們想對事件顯示的某元素</li>\n</ul>\n</li>\n<li>State 是 React 最令人困惑的部分。\n<ul>\n<li>定義：State 是 JS 純物件，且用來記錄和對使用者事件做反應。不論元件的 State 是否改變、元件是否立刻 Render或是子原件也重新 Rerender，每一個 Class based 元件都有自己的 State Object。</li>\n</ul>\n</li>\n<li>所有的 JS classes 都有一個名為 constructor 的特別函式。</li>\n<li>class 的元件用來追蹤 State 的狀態或是值需要持續改變；functional 的元件用來取得某些資訊。</li>\n</ol>\n<hr>\n<p>建立搜尋欄位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const SearchBar = () =&gt; &#123;</div><div class=\"line\">  return &lt;input /&gt;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>即時顯示值<br>\nthis.state =&gt; 創建一個 term 的空值。<br>\nthis.setState =&gt; 得到現在 input 裡面的值(並非直接改變)。<br>\nvalue={this.state.term} =&gt; 取得 this.state 的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class SearchBar extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\"></div><div class=\"line\">    this.state = &#123; term: &apos;&apos; &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;input</div><div class=\"line\">          value=&#123;this.state.term&#125;</div><div class=\"line\">          onChange=&#123;event =&gt; this.setState(&#123; term: event.target.value &#125;)&#125; /&gt;</div><div class=\"line\">        Value of the input: &#123;this.state.term&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"React快速學習自我挑戰 Day3","thumbnail":["/images/learning/react/reactday3.png"],"date":"2017-03-07T14:13:59.000Z","_content":"<img src=\"/images/learning/react/reactday3.png\">\n\n***\n1. 在 React 中，只有最上層的元件需要從 API 或 flux 取得資料。\n2. 用 className 來當作平常在 html 看到的 class，以跟 class based function 做區別。\n3. `function()`可以簡化為`() =>`。\n4. React 處理 List 的時候，不要使用 for 迴圈，用 map 來取代。\n5. React 會辨識變數是否為 List 或是 Array of Component。\n6. 在處理 List 的時候，React會要求給每個 element 一個 ID。\n7. 以下兩行一樣，下面為 ES6 語法。\n    - `const VideoListItem = (props) => { const video = props.video;`\n    - `const VideoListItem = ({video}) => {`\n8. 以下兩行一樣，下面為 ES6 語法。(string interpolation)\n    - `const url = 'https://www.youtube.com/embed/' + videoId;`\n    - ```const url = `https://www.youtube.com/embed/${videoId}`;```\n9. 降低 callback function 執行速度的套件 `lodash` 。\n10. 在 class based component，我們將 state 設定在 constructor 裡面。\n11. 範例中，四個元件用了兩個 callback function，我們要用 redux 來讓 callback 更乾淨。\n12. 在 react 中用的 state 屬於 Component level，而在 redux 上面使用的則是 application level。\n","source":"_posts/React快速學習自我挑戰-Day3.md","raw":"---\ntitle: React快速學習自我挑戰 Day3\nthumbnail:\n  - /images/learning/react/reactday3.png\ndate: 2017-03-07 22:13:59\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday3.png\">\n\n***\n1. 在 React 中，只有最上層的元件需要從 API 或 flux 取得資料。\n2. 用 className 來當作平常在 html 看到的 class，以跟 class based function 做區別。\n3. `function()`可以簡化為`() =>`。\n4. React 處理 List 的時候，不要使用 for 迴圈，用 map 來取代。\n5. React 會辨識變數是否為 List 或是 Array of Component。\n6. 在處理 List 的時候，React會要求給每個 element 一個 ID。\n7. 以下兩行一樣，下面為 ES6 語法。\n    - `const VideoListItem = (props) => { const video = props.video;`\n    - `const VideoListItem = ({video}) => {`\n8. 以下兩行一樣，下面為 ES6 語法。(string interpolation)\n    - `const url = 'https://www.youtube.com/embed/' + videoId;`\n    - ```const url = `https://www.youtube.com/embed/${videoId}`;```\n9. 降低 callback function 執行速度的套件 `lodash` 。\n10. 在 class based component，我們將 state 設定在 constructor 裡面。\n11. 範例中，四個元件用了兩個 callback function，我們要用 redux 來讓 callback 更乾淨。\n12. 在 react 中用的 state 屬於 Component level，而在 redux 上面使用的則是 application level。\n","slug":"React快速學習自我挑戰-Day3","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy3005f7ifa2286svcs","content":"<img src=\"/images/learning/react/reactday3.png\">\n<hr>\n<ol>\n<li>在 React 中，只有最上層的元件需要從 API 或 flux 取得資料。</li>\n<li>用 className 來當作平常在 html 看到的 class，以跟 class based function 做區別。</li>\n<li><code>function()</code>可以簡化為<code>() =&gt;</code>。</li>\n<li>React 處理 List 的時候，不要使用 for 迴圈，用 map 來取代。</li>\n<li>React 會辨識變數是否為 List 或是 Array of Component。</li>\n<li>在處理 List 的時候，React會要求給每個 element 一個 ID。</li>\n<li>以下兩行一樣，下面為 ES6 語法。\n<ul>\n<li><code>const VideoListItem = (props) =&gt; { const video = props.video;</code></li>\n<li><code>const VideoListItem = ({video}) =&gt; {</code></li>\n</ul>\n</li>\n<li>以下兩行一樣，下面為 ES6 語法。(string interpolation)\n<ul>\n<li><code>const url = 'https://www.youtube.com/embed/' + videoId;</code></li>\n<li><code>const url = `https://www.youtube.com/embed/${videoId}`;</code></li>\n</ul>\n</li>\n<li>降低 callback function 執行速度的套件 <code>lodash</code> 。</li>\n<li>在 class based component，我們將 state 設定在 constructor 裡面。</li>\n<li>範例中，四個元件用了兩個 callback function，我們要用 redux 來讓 callback 更乾淨。</li>\n<li>在 react 中用的 state 屬於 Component level，而在 redux 上面使用的則是 application level。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday3.png\">\n<hr>\n<ol>\n<li>在 React 中，只有最上層的元件需要從 API 或 flux 取得資料。</li>\n<li>用 className 來當作平常在 html 看到的 class，以跟 class based function 做區別。</li>\n<li><code>function()</code>可以簡化為<code>() =&gt;</code>。</li>\n<li>React 處理 List 的時候，不要使用 for 迴圈，用 map 來取代。</li>\n<li>React 會辨識變數是否為 List 或是 Array of Component。</li>\n<li>在處理 List 的時候，React會要求給每個 element 一個 ID。</li>\n<li>以下兩行一樣，下面為 ES6 語法。\n<ul>\n<li><code>const VideoListItem = (props) =&gt; { const video = props.video;</code></li>\n<li><code>const VideoListItem = ({video}) =&gt; {</code></li>\n</ul>\n</li>\n<li>以下兩行一樣，下面為 ES6 語法。(string interpolation)\n<ul>\n<li><code>const url = 'https://www.youtube.com/embed/' + videoId;</code></li>\n<li><code>const url = `https://www.youtube.com/embed/${videoId}`;</code></li>\n</ul>\n</li>\n<li>降低 callback function 執行速度的套件 <code>lodash</code> 。</li>\n<li>在 class based component，我們將 state 設定在 constructor 裡面。</li>\n<li>範例中，四個元件用了兩個 callback function，我們要用 redux 來讓 callback 更乾淨。</li>\n<li>在 react 中用的 state 屬於 Component level，而在 redux 上面使用的則是 application level。</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day4","thumbnail":["/images/learning/react/reactday4.jpg"],"date":"2017-03-08T14:10:00.000Z","_content":"<img src=\"/images/learning/react/reactday4.jpg\">\n\n***\n1. [Redux 參考資料](http://redux.js.org/)。\n2. 學習完 Redux 之後，還要學 webpack、Redux Router、Redux Promise、Redux Thunk、Hot Reloading。\n3. Redux 是一個針對 JS application 的可預測 state container。\n4. Redux 處理 data 的部分，React 處理 View 的部分。\n5. React 和其他框架不同的地方就是將所有 data 放到 central single object，這個 object 可被用來查詢 state。\n","source":"_posts/React快速學習自我挑戰-Day4.md","raw":"---\ntitle: React快速學習自我挑戰 Day4\nthumbnail:\n  - /images/learning/react/reactday4.jpg\ndate: 2017-03-08 22:10:00\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday4.jpg\">\n\n***\n1. [Redux 參考資料](http://redux.js.org/)。\n2. 學習完 Redux 之後，還要學 webpack、Redux Router、Redux Promise、Redux Thunk、Hot Reloading。\n3. Redux 是一個針對 JS application 的可預測 state container。\n4. Redux 處理 data 的部分，React 處理 View 的部分。\n5. React 和其他框架不同的地方就是將所有 data 放到 central single object，這個 object 可被用來查詢 state。\n","slug":"React快速學習自我挑戰-Day4","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy5005i7ifazfedckzx","content":"<img src=\"/images/learning/react/reactday4.jpg\">\n<hr>\n<ol>\n<li><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux 參考資料</a>。</li>\n<li>學習完 Redux 之後，還要學 webpack、Redux Router、Redux Promise、Redux Thunk、Hot Reloading。</li>\n<li>Redux 是一個針對 JS application 的可預測 state container。</li>\n<li>Redux 處理 data 的部分，React 處理 View 的部分。</li>\n<li>React 和其他框架不同的地方就是將所有 data 放到 central single object，這個 object 可被用來查詢 state。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday4.jpg\">\n<hr>\n<ol>\n<li><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux 參考資料</a>。</li>\n<li>學習完 Redux 之後，還要學 webpack、Redux Router、Redux Promise、Redux Thunk、Hot Reloading。</li>\n<li>Redux 是一個針對 JS application 的可預測 state container。</li>\n<li>Redux 處理 data 的部分，React 處理 View 的部分。</li>\n<li>React 和其他框架不同的地方就是將所有 data 放到 central single object，這個 object 可被用來查詢 state。</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day5","thumbnail":["/images/learning/react/reactday5.jpg"],"date":"2017-03-09T03:01:39.000Z","_content":"<img src=\"/images/learning/react/reactday5.jpg\">\n\n***\n1. Reducer 是一個 function 用來 return piece of the application state。\n2. Reducer 產出 state 的值。\n3. 在檔名的命名中，應該在前面加前綴，例如：`reducer_books.js`。(不是一定要，作者提供的方法)\n4. Container 是 react component，對 Redux 所管理的 state 有直接的連結。\n5. 有一個 Library 叫做 React-Redux，負責 React 和 Redux 的溝通橋樑。(本身 React 和 Redux 是完全分開的 Library)\n6. Container 在 Redux 的官方文件中叫做 Smart Component。\n7. 以整體來說，整個 App 並不在乎任何 state，而是由各個元件去在乎個別需要在乎的 state(所以 App 被稱為 dumb component)。\n8. mapStateToProps 以陣列的形式得到 application state。\n9. Redux 建構 application state，React 提供 View 來顯示 State，這兩個是不同的 Library，唯有透過 React-Redux 才能將這兩個連結。\n10. 如果 application state 改變，Container 也會跟著 rerender。\n11. 按按鈕 => 呼叫 action creator => action automatically sent to all reducers => reducer 可以選擇根據 action 來 return 不同的 state，然後將 state pipe into application => application state 會 pump back into React application，然後所有的 components 就會 rerender。\n    - action creator 會 return 物件。\n    - 在所有不同的 reducer 裡面，我們會設置一個 switch statement。\n","source":"_posts/React快速學習自我挑戰-Day5.md","raw":"---\ntitle: React快速學習自我挑戰 Day5\nthumbnail:\n  - /images/learning/react/reactday5.jpg\ndate: 2017-03-09 11:01:39\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday5.jpg\">\n\n***\n1. Reducer 是一個 function 用來 return piece of the application state。\n2. Reducer 產出 state 的值。\n3. 在檔名的命名中，應該在前面加前綴，例如：`reducer_books.js`。(不是一定要，作者提供的方法)\n4. Container 是 react component，對 Redux 所管理的 state 有直接的連結。\n5. 有一個 Library 叫做 React-Redux，負責 React 和 Redux 的溝通橋樑。(本身 React 和 Redux 是完全分開的 Library)\n6. Container 在 Redux 的官方文件中叫做 Smart Component。\n7. 以整體來說，整個 App 並不在乎任何 state，而是由各個元件去在乎個別需要在乎的 state(所以 App 被稱為 dumb component)。\n8. mapStateToProps 以陣列的形式得到 application state。\n9. Redux 建構 application state，React 提供 View 來顯示 State，這兩個是不同的 Library，唯有透過 React-Redux 才能將這兩個連結。\n10. 如果 application state 改變，Container 也會跟著 rerender。\n11. 按按鈕 => 呼叫 action creator => action automatically sent to all reducers => reducer 可以選擇根據 action 來 return 不同的 state，然後將 state pipe into application => application state 會 pump back into React application，然後所有的 components 就會 rerender。\n    - action creator 會 return 物件。\n    - 在所有不同的 reducer 裡面，我們會設置一個 switch statement。\n","slug":"React快速學習自我挑戰-Day5","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy7005l7ifaflp7nr6l","content":"<img src=\"/images/learning/react/reactday5.jpg\">\n<hr>\n<ol>\n<li>Reducer 是一個 function 用來 return piece of the application state。</li>\n<li>Reducer 產出 state 的值。</li>\n<li>在檔名的命名中，應該在前面加前綴，例如：<code>reducer_books.js</code>。(不是一定要，作者提供的方法)</li>\n<li>Container 是 react component，對 Redux 所管理的 state 有直接的連結。</li>\n<li>有一個 Library 叫做 React-Redux，負責 React 和 Redux 的溝通橋樑。(本身 React 和 Redux 是完全分開的 Library)</li>\n<li>Container 在 Redux 的官方文件中叫做 Smart Component。</li>\n<li>以整體來說，整個 App 並不在乎任何 state，而是由各個元件去在乎個別需要在乎的 state(所以 App 被稱為 dumb component)。</li>\n<li>mapStateToProps 以陣列的形式得到 application state。</li>\n<li>Redux 建構 application state，React 提供 View 來顯示 State，這兩個是不同的 Library，唯有透過 React-Redux 才能將這兩個連結。</li>\n<li>如果 application state 改變，Container 也會跟著 rerender。</li>\n<li>按按鈕 =&gt; 呼叫 action creator =&gt; action automatically sent to all reducers =&gt; reducer 可以選擇根據 action 來 return 不同的 state，然後將 state pipe into application =&gt; application state 會 pump back into React application，然後所有的 components 就會 rerender。\n<ul>\n<li>action creator 會 return 物件。</li>\n<li>在所有不同的 reducer 裡面，我們會設置一個 switch statement。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday5.jpg\">\n<hr>\n<ol>\n<li>Reducer 是一個 function 用來 return piece of the application state。</li>\n<li>Reducer 產出 state 的值。</li>\n<li>在檔名的命名中，應該在前面加前綴，例如：<code>reducer_books.js</code>。(不是一定要，作者提供的方法)</li>\n<li>Container 是 react component，對 Redux 所管理的 state 有直接的連結。</li>\n<li>有一個 Library 叫做 React-Redux，負責 React 和 Redux 的溝通橋樑。(本身 React 和 Redux 是完全分開的 Library)</li>\n<li>Container 在 Redux 的官方文件中叫做 Smart Component。</li>\n<li>以整體來說，整個 App 並不在乎任何 state，而是由各個元件去在乎個別需要在乎的 state(所以 App 被稱為 dumb component)。</li>\n<li>mapStateToProps 以陣列的形式得到 application state。</li>\n<li>Redux 建構 application state，React 提供 View 來顯示 State，這兩個是不同的 Library，唯有透過 React-Redux 才能將這兩個連結。</li>\n<li>如果 application state 改變，Container 也會跟著 rerender。</li>\n<li>按按鈕 =&gt; 呼叫 action creator =&gt; action automatically sent to all reducers =&gt; reducer 可以選擇根據 action 來 return 不同的 state，然後將 state pipe into application =&gt; application state 會 pump back into React application，然後所有的 components 就會 rerender。\n<ul>\n<li>action creator 會 return 物件。</li>\n<li>在所有不同的 reducer 裡面，我們會設置一個 switch statement。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day6","thumbnail":["/images/learning/react/reactday6.png"],"date":"2017-03-10T05:02:52.000Z","_content":"<img src=\"/images/learning/react/reactday6.png\">\n\n***\n1. 當知道 action creactor 將要呼叫(但不知道什麼時候)，當被呼叫的時候，我想要確定 flow 的結果能夠經過 dispatch function，然後這個 dispatch function 會像是漏斗般的接收這些 actions，最後再把 actions 分別送回不同的 reducers。\n2. action 通常有兩種值：type 和 payload。\n3. 不管 action 有沒有 dispatch，reducer 都會被呼叫，所以 function 隨時會頻繁的被呼叫，因為 action 不在乎任何時間、任何特定的 reducer。\n4. 用來 combine reducer 的 object 的任何 key 都會以 global state key 的方式結尾。\n5. 當想要做一個可以直接接觸 redux state 的 component，就要用 container。\n6. 定義一個 function 呼叫 Map state 來 process ，然後我們 connect book detail 的 props。\n7. Redux 控制整個 application 的 state，state 是 single plain javascript object。\n8. Component state 跟 application state 是完全分離的。\n9. 用 combineReducer 的方法可以將 reducer 全部連結在一起。\n    - function 內每一個 key 都會指定一個 reducer，然後 reducer 必須對創造 state 負責。\n10. reducer 負責隨著時間改變 application state，這個是透過 action 來使用。\n11. 當有一個 action dispatch，action 會流過 application 內不同的 reducer；所以每一個 reducer 有選擇的根據收到不同的 action type 來 return state。\n12. action creator 是一個  simple function 來 return 一個 action，action 是 single plain javascript object。","source":"_posts/React快速學習自我挑戰-Day6.md","raw":"---\ntitle: React快速學習自我挑戰 Day6\nthumbnail:\n  - /images/learning/react/reactday6.png\ndate: 2017-03-10 13:02:52\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday6.png\">\n\n***\n1. 當知道 action creactor 將要呼叫(但不知道什麼時候)，當被呼叫的時候，我想要確定 flow 的結果能夠經過 dispatch function，然後這個 dispatch function 會像是漏斗般的接收這些 actions，最後再把 actions 分別送回不同的 reducers。\n2. action 通常有兩種值：type 和 payload。\n3. 不管 action 有沒有 dispatch，reducer 都會被呼叫，所以 function 隨時會頻繁的被呼叫，因為 action 不在乎任何時間、任何特定的 reducer。\n4. 用來 combine reducer 的 object 的任何 key 都會以 global state key 的方式結尾。\n5. 當想要做一個可以直接接觸 redux state 的 component，就要用 container。\n6. 定義一個 function 呼叫 Map state 來 process ，然後我們 connect book detail 的 props。\n7. Redux 控制整個 application 的 state，state 是 single plain javascript object。\n8. Component state 跟 application state 是完全分離的。\n9. 用 combineReducer 的方法可以將 reducer 全部連結在一起。\n    - function 內每一個 key 都會指定一個 reducer，然後 reducer 必須對創造 state 負責。\n10. reducer 負責隨著時間改變 application state，這個是透過 action 來使用。\n11. 當有一個 action dispatch，action 會流過 application 內不同的 reducer；所以每一個 reducer 有選擇的根據收到不同的 action type 來 return state。\n12. action creator 是一個  simple function 來 return 一個 action，action 是 single plain javascript object。","slug":"React快速學習自我挑戰-Day6","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy7005o7ifaeh6bfs9m","content":"<img src=\"/images/learning/react/reactday6.png\">\n<hr>\n<ol>\n<li>當知道 action creactor 將要呼叫(但不知道什麼時候)，當被呼叫的時候，我想要確定 flow 的結果能夠經過 dispatch function，然後這個 dispatch function 會像是漏斗般的接收這些 actions，最後再把 actions 分別送回不同的 reducers。</li>\n<li>action 通常有兩種值：type 和 payload。</li>\n<li>不管 action 有沒有 dispatch，reducer 都會被呼叫，所以 function 隨時會頻繁的被呼叫，因為 action 不在乎任何時間、任何特定的 reducer。</li>\n<li>用來 combine reducer 的 object 的任何 key 都會以 global state key 的方式結尾。</li>\n<li>當想要做一個可以直接接觸 redux state 的 component，就要用 container。</li>\n<li>定義一個 function 呼叫 Map state 來 process ，然後我們 connect book detail 的 props。</li>\n<li>Redux 控制整個 application 的 state，state 是 single plain javascript object。</li>\n<li>Component state 跟 application state 是完全分離的。</li>\n<li>用 combineReducer 的方法可以將 reducer 全部連結在一起。\n<ul>\n<li>function 內每一個 key 都會指定一個 reducer，然後 reducer 必須對創造 state 負責。</li>\n</ul>\n</li>\n<li>reducer 負責隨著時間改變 application state，這個是透過 action 來使用。</li>\n<li>當有一個 action dispatch，action 會流過 application 內不同的 reducer；所以每一個 reducer 有選擇的根據收到不同的 action type 來 return state。</li>\n<li>action creator 是一個  simple function 來 return 一個 action，action 是 single plain javascript object。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday6.png\">\n<hr>\n<ol>\n<li>當知道 action creactor 將要呼叫(但不知道什麼時候)，當被呼叫的時候，我想要確定 flow 的結果能夠經過 dispatch function，然後這個 dispatch function 會像是漏斗般的接收這些 actions，最後再把 actions 分別送回不同的 reducers。</li>\n<li>action 通常有兩種值：type 和 payload。</li>\n<li>不管 action 有沒有 dispatch，reducer 都會被呼叫，所以 function 隨時會頻繁的被呼叫，因為 action 不在乎任何時間、任何特定的 reducer。</li>\n<li>用來 combine reducer 的 object 的任何 key 都會以 global state key 的方式結尾。</li>\n<li>當想要做一個可以直接接觸 redux state 的 component，就要用 container。</li>\n<li>定義一個 function 呼叫 Map state 來 process ，然後我們 connect book detail 的 props。</li>\n<li>Redux 控制整個 application 的 state，state 是 single plain javascript object。</li>\n<li>Component state 跟 application state 是完全分離的。</li>\n<li>用 combineReducer 的方法可以將 reducer 全部連結在一起。\n<ul>\n<li>function 內每一個 key 都會指定一個 reducer，然後 reducer 必須對創造 state 負責。</li>\n</ul>\n</li>\n<li>reducer 負責隨著時間改變 application state，這個是透過 action 來使用。</li>\n<li>當有一個 action dispatch，action 會流過 application 內不同的 reducer；所以每一個 reducer 有選擇的根據收到不同的 action type 來 return state。</li>\n<li>action creator 是一個  simple function 來 return 一個 action，action 是 single plain javascript object。</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day7","thumbnail":["/images/learning/react/reactday7.png"],"date":"2017-03-11T12:15:40.000Z","_content":"<img src=\"/images/learning/react/reactday7.png\">\n\n***\n1. React Component 只負責顯示 data，而 Redux 則負責提取 data。\n2. 設計一個元件的時候，記得要先問自己該元件是 Container 還是 Component。\n3. 基本上需要跟 Redux 溝通的就是 Container。\n4. 下面範例中，this (就是 SearchBar) 有一個 function 叫做 onInputChange，然後把這個 function bind 到 this，然後把得到值放到下方的 onInputChange 裡面。\n```\nconstructor(props) {\n        super(props);\n\n        this.state = { term: '' };\n\n        this.onInputChange = this.onInputChange.bind(this);\n    }\n\n    onInputChange(event) {\n        this.setState({ term: event.target.value })\n    }\n```\n5. 如果不希望 User 一直重新整理頁面，我們可以加 event handler。\n6. [open weather API](http://openweathermap.org/forecast5)。\n    - sign up 之後，進入 API Key 的頁面，就可以拿到 API key 囉！\n7. [JSON Formatter (chrome 外掛)](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa/related)。","source":"_posts/React快速學習自我挑戰-Day7.md","raw":"---\ntitle: React快速學習自我挑戰 Day7\nthumbnail:\n  - /images/learning/react/reactday7.png\ndate: 2017-03-11 20:15:40\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday7.png\">\n\n***\n1. React Component 只負責顯示 data，而 Redux 則負責提取 data。\n2. 設計一個元件的時候，記得要先問自己該元件是 Container 還是 Component。\n3. 基本上需要跟 Redux 溝通的就是 Container。\n4. 下面範例中，this (就是 SearchBar) 有一個 function 叫做 onInputChange，然後把這個 function bind 到 this，然後把得到值放到下方的 onInputChange 裡面。\n```\nconstructor(props) {\n        super(props);\n\n        this.state = { term: '' };\n\n        this.onInputChange = this.onInputChange.bind(this);\n    }\n\n    onInputChange(event) {\n        this.setState({ term: event.target.value })\n    }\n```\n5. 如果不希望 User 一直重新整理頁面，我們可以加 event handler。\n6. [open weather API](http://openweathermap.org/forecast5)。\n    - sign up 之後，進入 API Key 的頁面，就可以拿到 API key 囉！\n7. [JSON Formatter (chrome 外掛)](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa/related)。","slug":"React快速學習自我挑戰-Day7","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwy9005r7ifaglgsymvv","content":"<img src=\"/images/learning/react/reactday7.png\">\n<hr>\n<ol>\n<li>React Component 只負責顯示 data，而 Redux 則負責提取 data。</li>\n<li>設計一個元件的時候，記得要先問自己該元件是 Container 還是 Component。</li>\n<li>基本上需要跟 Redux 溝通的就是 Container。</li>\n<li>下面範例中，this (就是 SearchBar) 有一個 function 叫做 onInputChange，然後把這個 function bind 到 this，然後把得到值放到下方的 onInputChange 裡面。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">constructor(props) &#123;</div><div class=\"line\">        super(props);</div><div class=\"line\"></div><div class=\"line\">        this.state = &#123; term: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">        this.onInputChange = this.onInputChange.bind(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    onInputChange(event) &#123;</div><div class=\"line\">        this.setState(&#123; term: event.target.value &#125;)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>如果不希望 User 一直重新整理頁面，我們可以加 event handler。</li>\n<li><a href=\"http://openweathermap.org/forecast5\" target=\"_blank\" rel=\"external\">open weather API</a>。\n<ul>\n<li>sign up 之後，進入 API Key 的頁面，就可以拿到 API key 囉！</li>\n</ul>\n</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa/related\" target=\"_blank\" rel=\"external\">JSON Formatter (chrome 外掛)</a>。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday7.png\">\n<hr>\n<ol>\n<li>React Component 只負責顯示 data，而 Redux 則負責提取 data。</li>\n<li>設計一個元件的時候，記得要先問自己該元件是 Container 還是 Component。</li>\n<li>基本上需要跟 Redux 溝通的就是 Container。</li>\n<li>下面範例中，this (就是 SearchBar) 有一個 function 叫做 onInputChange，然後把這個 function bind 到 this，然後把得到值放到下方的 onInputChange 裡面。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">constructor(props) &#123;</div><div class=\"line\">        super(props);</div><div class=\"line\"></div><div class=\"line\">        this.state = &#123; term: &apos;&apos; &#125;;</div><div class=\"line\"></div><div class=\"line\">        this.onInputChange = this.onInputChange.bind(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    onInputChange(event) &#123;</div><div class=\"line\">        this.setState(&#123; term: event.target.value &#125;)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>如果不希望 User 一直重新整理頁面，我們可以加 event handler。</li>\n<li><a href=\"http://openweathermap.org/forecast5\" target=\"_blank\" rel=\"external\">open weather API</a>。\n<ul>\n<li>sign up 之後，進入 API Key 的頁面，就可以拿到 API key 囉！</li>\n</ul>\n</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa/related\" target=\"_blank\" rel=\"external\">JSON Formatter (chrome 外掛)</a>。</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day8","thumbnail":["/images/learning/react/reactday8.jpg"],"date":"2017-03-13T14:56:31.000Z","_content":"<img src=\"/images/learning/react/reactday8.jpg\">\n\n***\n1. Middleware 是一個 function，Middleware 可以選擇讓 action 通過，還可以操縱 action。\n2. 在到達 reducer 之前，我們可以在 action 上的所有不同型態的小任務做 console.log 或 stop。\n3. application state 擁有 application 全部的 data。\n4. 新增 data 需要 dispatch 一個 action 來呼叫(action creactor)，然後他要 AJAX request 負責。\n5. 在處理 action type 的時候，不可將不同型態的值傳遞到 reducer，需要先做 `export const FETCH_WEATHER = 'FETCH_WEATHER';`。\n6. axios 是一個從瀏覽器製作 Ajax request 的 Library。\n7. Promise 不包含任何 data。\n8. Redux Promis 是一個 Middleware，在點擊任何 reducer 之前，Middleware 都可以選擇讓 action 通過，還可以操縱 action。\n9. state.push 的用法會回傳一整個新的 array；用 state.concat 則是將新東西加上 array。\n10. ES5 `return state.concat([action.payload.data]);` = ES6 `return [ action.payload.data, ...state ];`。\n11. `{ weather }` === `{ weather: weather }`。","source":"_posts/React快速學習自我挑戰-Day8.md","raw":"---\ntitle: React快速學習自我挑戰 Day8\nthumbnail:\n  - /images/learning/react/reactday8.jpg\ndate: 2017-03-13 22:56:31\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday8.jpg\">\n\n***\n1. Middleware 是一個 function，Middleware 可以選擇讓 action 通過，還可以操縱 action。\n2. 在到達 reducer 之前，我們可以在 action 上的所有不同型態的小任務做 console.log 或 stop。\n3. application state 擁有 application 全部的 data。\n4. 新增 data 需要 dispatch 一個 action 來呼叫(action creactor)，然後他要 AJAX request 負責。\n5. 在處理 action type 的時候，不可將不同型態的值傳遞到 reducer，需要先做 `export const FETCH_WEATHER = 'FETCH_WEATHER';`。\n6. axios 是一個從瀏覽器製作 Ajax request 的 Library。\n7. Promise 不包含任何 data。\n8. Redux Promis 是一個 Middleware，在點擊任何 reducer 之前，Middleware 都可以選擇讓 action 通過，還可以操縱 action。\n9. state.push 的用法會回傳一整個新的 array；用 state.concat 則是將新東西加上 array。\n10. ES5 `return state.concat([action.payload.data]);` = ES6 `return [ action.payload.data, ...state ];`。\n11. `{ weather }` === `{ weather: weather }`。","slug":"React快速學習自我挑戰-Day8","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwya005u7ifa54wou6ex","content":"<img src=\"/images/learning/react/reactday8.jpg\">\n<hr>\n<ol>\n<li>Middleware 是一個 function，Middleware 可以選擇讓 action 通過，還可以操縱 action。</li>\n<li>在到達 reducer 之前，我們可以在 action 上的所有不同型態的小任務做 console.log 或 stop。</li>\n<li>application state 擁有 application 全部的 data。</li>\n<li>新增 data 需要 dispatch 一個 action 來呼叫(action creactor)，然後他要 AJAX request 負責。</li>\n<li>在處理 action type 的時候，不可將不同型態的值傳遞到 reducer，需要先做 <code>export const FETCH_WEATHER = 'FETCH_WEATHER';</code>。</li>\n<li>axios 是一個從瀏覽器製作 Ajax request 的 Library。</li>\n<li>Promise 不包含任何 data。</li>\n<li>Redux Promis 是一個 Middleware，在點擊任何 reducer 之前，Middleware 都可以選擇讓 action 通過，還可以操縱 action。</li>\n<li>state.push 的用法會回傳一整個新的 array；用 state.concat 則是將新東西加上 array。</li>\n<li>ES5 <code>return state.concat([action.payload.data]);</code> = ES6 <code>return [ action.payload.data, ...state ];</code>。</li>\n<li><code>{ weather }</code> === <code>{ weather: weather }</code>。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday8.jpg\">\n<hr>\n<ol>\n<li>Middleware 是一個 function，Middleware 可以選擇讓 action 通過，還可以操縱 action。</li>\n<li>在到達 reducer 之前，我們可以在 action 上的所有不同型態的小任務做 console.log 或 stop。</li>\n<li>application state 擁有 application 全部的 data。</li>\n<li>新增 data 需要 dispatch 一個 action 來呼叫(action creactor)，然後他要 AJAX request 負責。</li>\n<li>在處理 action type 的時候，不可將不同型態的值傳遞到 reducer，需要先做 <code>export const FETCH_WEATHER = 'FETCH_WEATHER';</code>。</li>\n<li>axios 是一個從瀏覽器製作 Ajax request 的 Library。</li>\n<li>Promise 不包含任何 data。</li>\n<li>Redux Promis 是一個 Middleware，在點擊任何 reducer 之前，Middleware 都可以選擇讓 action 通過，還可以操縱 action。</li>\n<li>state.push 的用法會回傳一整個新的 array；用 state.concat 則是將新東西加上 array。</li>\n<li>ES5 <code>return state.concat([action.payload.data]);</code> = ES6 <code>return [ action.payload.data, ...state ];</code>。</li>\n<li><code>{ weather }</code> === <code>{ weather: weather }</code>。</li>\n</ol>\n"},{"title":"React快速學習自我挑戰 Day9","thumbnail":["/images/learning/react/reactday9.jpg"],"date":"2017-03-14T12:17:57.000Z","_content":"<img src=\"/images/learning/react/reactday9.jpg\">\n\n***\n1. [React Sparkline(畫圖工具)](https://github.com/borisyankov/react-sparklines)。\n2. class based component：有變數傳遞。 function based component：無變數傳遞。\n3. action type 用 const 定義，這樣才能在 action 和 reducer 裡面指定 action type。\n4. 在本專案中用的 middleware 就是 redux promise，我們用 redux promise 來處理收到的 promise，然後使用 axios 來產生 AJAX request，這個 middleware 會自動偵測我們提供的 promise 的 payload，middleware 會停止 action 並等到問題解決、promise 才會解決，middleware 就會從 request 把回傳的 data 拿來塞在 payload 這個 property，然後把 action 送到本專案的所有 reducer 中。\n5. 雖然 Ajax request 本質上涉及非同步式語言，但我們完全不需要思考到非同步語言的部分。我們只要寫創造 action、然後流向 reducer，我們並不需要擔心任何 promise 或是 callback。\n6. 我們從不做 state.weather.push 這樣的動作，不要直接修改 state，取而代之的是，我們 return 一個新物件來代替已經存在的 state。\n","source":"_posts/React快速學習自我挑戰-Day9.md","raw":"---\ntitle: React快速學習自我挑戰 Day9\nthumbnail:\n  - /images/learning/react/reactday9.jpg\ndate: 2017-03-14 20:17:57\ncategories: 學習歷程\ntags: React\n---\n<img src=\"/images/learning/react/reactday9.jpg\">\n\n***\n1. [React Sparkline(畫圖工具)](https://github.com/borisyankov/react-sparklines)。\n2. class based component：有變數傳遞。 function based component：無變數傳遞。\n3. action type 用 const 定義，這樣才能在 action 和 reducer 裡面指定 action type。\n4. 在本專案中用的 middleware 就是 redux promise，我們用 redux promise 來處理收到的 promise，然後使用 axios 來產生 AJAX request，這個 middleware 會自動偵測我們提供的 promise 的 payload，middleware 會停止 action 並等到問題解決、promise 才會解決，middleware 就會從 request 把回傳的 data 拿來塞在 payload 這個 property，然後把 action 送到本專案的所有 reducer 中。\n5. 雖然 Ajax request 本質上涉及非同步式語言，但我們完全不需要思考到非同步語言的部分。我們只要寫創造 action、然後流向 reducer，我們並不需要擔心任何 promise 或是 callback。\n6. 我們從不做 state.weather.push 這樣的動作，不要直接修改 state，取而代之的是，我們 return 一個新物件來代替已經存在的 state。\n","slug":"React快速學習自我挑戰-Day9","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyb005x7ifa5v2wn4st","content":"<img src=\"/images/learning/react/reactday9.jpg\">\n<hr>\n<ol>\n<li><a href=\"https://github.com/borisyankov/react-sparklines\" target=\"_blank\" rel=\"external\">React Sparkline(畫圖工具)</a>。</li>\n<li>class based component：有變數傳遞。 function based component：無變數傳遞。</li>\n<li>action type 用 const 定義，這樣才能在 action 和 reducer 裡面指定 action type。</li>\n<li>在本專案中用的 middleware 就是 redux promise，我們用 redux promise 來處理收到的 promise，然後使用 axios 來產生 AJAX request，這個 middleware 會自動偵測我們提供的 promise 的 payload，middleware 會停止 action 並等到問題解決、promise 才會解決，middleware 就會從 request 把回傳的 data 拿來塞在 payload 這個 property，然後把 action 送到本專案的所有 reducer 中。</li>\n<li>雖然 Ajax request 本質上涉及非同步式語言，但我們完全不需要思考到非同步語言的部分。我們只要寫創造 action、然後流向 reducer，我們並不需要擔心任何 promise 或是 callback。</li>\n<li>我們從不做 state.weather.push 這樣的動作，不要直接修改 state，取而代之的是，我們 return 一個新物件來代替已經存在的 state。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/react/reactday9.jpg\">\n<hr>\n<ol>\n<li><a href=\"https://github.com/borisyankov/react-sparklines\" target=\"_blank\" rel=\"external\">React Sparkline(畫圖工具)</a>。</li>\n<li>class based component：有變數傳遞。 function based component：無變數傳遞。</li>\n<li>action type 用 const 定義，這樣才能在 action 和 reducer 裡面指定 action type。</li>\n<li>在本專案中用的 middleware 就是 redux promise，我們用 redux promise 來處理收到的 promise，然後使用 axios 來產生 AJAX request，這個 middleware 會自動偵測我們提供的 promise 的 payload，middleware 會停止 action 並等到問題解決、promise 才會解決，middleware 就會從 request 把回傳的 data 拿來塞在 payload 這個 property，然後把 action 送到本專案的所有 reducer 中。</li>\n<li>雖然 Ajax request 本質上涉及非同步式語言，但我們完全不需要思考到非同步語言的部分。我們只要寫創造 action、然後流向 reducer，我們並不需要擔心任何 promise 或是 callback。</li>\n<li>我們從不做 state.weather.push 這樣的動作，不要直接修改 state，取而代之的是，我們 return 一個新物件來代替已經存在的 state。</li>\n</ol>\n"},{"title":"The connection of people in the age of information","date":"2016-09-03T08:40:08.000Z","thumbnail":["/images/Connection.jpg"],"_content":"<img src=\"/images/Connection.jpg\">\n\n***\n&emsp;&emsp;In the past, people were separated by the distant ocean, they got each others’ message need a long time through letters. Nowadays, we just need to sign in the account through internet, we can chat with each other. Not only that, we can use video to see each other as truly communication. It’s much more convenient than before, but this feature doesn’t make the interpersonal networks closely than before. We increased our quality of life, but also decreased our humanity. I’m so curious what happened in nowadays world?\n\n&emsp;&emsp;Surfing on internet and open Facebook, a piece of photos and so many short words which are expressing someone’s feelings. You can see all of current situations of your friends and relatives. Even you have had a friend which lost contact for ten years, you still can use the various search method and “catch the line” with that friend. If you are lucky, you can contact with overseas people through these convenient networks and become the friends. Furthermore, you will be the member of internationalization. All steps sound like just need one finger. It seems like you caught a mouse and you caught the corner of interpersonal network. All of connections naturally become the “object of hand”, you can play it as you want between the hands.\n\n&emsp;&emsp;However, rapid transmission of information also caused rapid interpersonal conversion. I think perhaps it’s the attitude of “the most beautiful star is that one you can’t pick it.”. Something was hard-earned in the past, but now you can easily get it. That star which already holds on your hand is not shiny anymore and it will be discarded in the end. Moreover, people who had bad idea use internet to cheat some good people. In the ginormous networks, someone is pretending as your friends and family. You can’t recognize and verify, how to protect yourself? More and more frauds and criminal events make people stopping use internet to communicate with others because they don’t want to be the next victims. And some people talk very happy on internet, but they are speechless in the reality. Comparing the warm and lively talk in virtual with the silent in reality,  this phenomenon make me unable to stop sighing and sobbing. People addicted with online unreal world and ignored people and things they should concern about in reality. In addition, people are growing further apart in reality and try to seek the new warm from internet, the vicious cycles trigger again and again and difficult to save.\n\n&emsp;&emsp;In conclusion, although convenient networks shorten the distance between people, but the distance of heart is far away than before. We don’t have truly personal experience in many things, many things are hard to understand if you just rely on touching the cold screen. For me, instead of waiting people in front of computer all day, I would rather to turn around to talk someone who was waiting for my reply. Internet is convenient and just for moderate using. After all, something can tighten interpersonal networks is your hand but not the little mouse you hold on.\n","source":"_posts/The-connection-of-people-in-the-age-of-information.md","raw":"---\ntitle: The connection of people in the age of information\ndate: 2016-09-03 16:40:08\ncategories: 英文寫作\ntags:\nthumbnail:\n  - /images/Connection.jpg\n---\n<img src=\"/images/Connection.jpg\">\n\n***\n&emsp;&emsp;In the past, people were separated by the distant ocean, they got each others’ message need a long time through letters. Nowadays, we just need to sign in the account through internet, we can chat with each other. Not only that, we can use video to see each other as truly communication. It’s much more convenient than before, but this feature doesn’t make the interpersonal networks closely than before. We increased our quality of life, but also decreased our humanity. I’m so curious what happened in nowadays world?\n\n&emsp;&emsp;Surfing on internet and open Facebook, a piece of photos and so many short words which are expressing someone’s feelings. You can see all of current situations of your friends and relatives. Even you have had a friend which lost contact for ten years, you still can use the various search method and “catch the line” with that friend. If you are lucky, you can contact with overseas people through these convenient networks and become the friends. Furthermore, you will be the member of internationalization. All steps sound like just need one finger. It seems like you caught a mouse and you caught the corner of interpersonal network. All of connections naturally become the “object of hand”, you can play it as you want between the hands.\n\n&emsp;&emsp;However, rapid transmission of information also caused rapid interpersonal conversion. I think perhaps it’s the attitude of “the most beautiful star is that one you can’t pick it.”. Something was hard-earned in the past, but now you can easily get it. That star which already holds on your hand is not shiny anymore and it will be discarded in the end. Moreover, people who had bad idea use internet to cheat some good people. In the ginormous networks, someone is pretending as your friends and family. You can’t recognize and verify, how to protect yourself? More and more frauds and criminal events make people stopping use internet to communicate with others because they don’t want to be the next victims. And some people talk very happy on internet, but they are speechless in the reality. Comparing the warm and lively talk in virtual with the silent in reality,  this phenomenon make me unable to stop sighing and sobbing. People addicted with online unreal world and ignored people and things they should concern about in reality. In addition, people are growing further apart in reality and try to seek the new warm from internet, the vicious cycles trigger again and again and difficult to save.\n\n&emsp;&emsp;In conclusion, although convenient networks shorten the distance between people, but the distance of heart is far away than before. We don’t have truly personal experience in many things, many things are hard to understand if you just rely on touching the cold screen. For me, instead of waiting people in front of computer all day, I would rather to turn around to talk someone who was waiting for my reply. Internet is convenient and just for moderate using. After all, something can tighten interpersonal networks is your hand but not the little mouse you hold on.\n","slug":"The-connection-of-people-in-the-age-of-information","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyc00607ifah8icox1o","content":"<img src=\"/images/Connection.jpg\">\n<hr>\n<p>  In the past, people were separated by the distant ocean, they got each others’ message need a long time through letters. Nowadays, we just need to sign in the account through internet, we can chat with each other. Not only that, we can use video to see each other as truly communication. It’s much more convenient than before, but this feature doesn’t make the interpersonal networks closely than before. We increased our quality of life, but also decreased our humanity. I’m so curious what happened in nowadays world?</p>\n<p>  Surfing on internet and open Facebook, a piece of photos and so many short words which are expressing someone’s feelings. You can see all of current situations of your friends and relatives. Even you have had a friend which lost contact for ten years, you still can use the various search method and “catch the line” with that friend. If you are lucky, you can contact with overseas people through these convenient networks and become the friends. Furthermore, you will be the member of internationalization. All steps sound like just need one finger. It seems like you caught a mouse and you caught the corner of interpersonal network. All of connections naturally become the “object of hand”, you can play it as you want between the hands.</p>\n<p>  However, rapid transmission of information also caused rapid interpersonal conversion. I think perhaps it’s the attitude of “the most beautiful star is that one you can’t pick it.”. Something was hard-earned in the past, but now you can easily get it. That star which already holds on your hand is not shiny anymore and it will be discarded in the end. Moreover, people who had bad idea use internet to cheat some good people. In the ginormous networks, someone is pretending as your friends and family. You can’t recognize and verify, how to protect yourself? More and more frauds and criminal events make people stopping use internet to communicate with others because they don’t want to be the next victims. And some people talk very happy on internet, but they are speechless in the reality. Comparing the warm and lively talk in virtual with the silent in reality,  this phenomenon make me unable to stop sighing and sobbing. People addicted with online unreal world and ignored people and things they should concern about in reality. In addition, people are growing further apart in reality and try to seek the new warm from internet, the vicious cycles trigger again and again and difficult to save.</p>\n<p>  In conclusion, although convenient networks shorten the distance between people, but the distance of heart is far away than before. We don’t have truly personal experience in many things, many things are hard to understand if you just rely on touching the cold screen. For me, instead of waiting people in front of computer all day, I would rather to turn around to talk someone who was waiting for my reply. Internet is convenient and just for moderate using. After all, something can tighten interpersonal networks is your hand but not the little mouse you hold on.</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/Connection.jpg\">\n<hr>\n<p>  In the past, people were separated by the distant ocean, they got each others’ message need a long time through letters. Nowadays, we just need to sign in the account through internet, we can chat with each other. Not only that, we can use video to see each other as truly communication. It’s much more convenient than before, but this feature doesn’t make the interpersonal networks closely than before. We increased our quality of life, but also decreased our humanity. I’m so curious what happened in nowadays world?</p>\n<p>  Surfing on internet and open Facebook, a piece of photos and so many short words which are expressing someone’s feelings. You can see all of current situations of your friends and relatives. Even you have had a friend which lost contact for ten years, you still can use the various search method and “catch the line” with that friend. If you are lucky, you can contact with overseas people through these convenient networks and become the friends. Furthermore, you will be the member of internationalization. All steps sound like just need one finger. It seems like you caught a mouse and you caught the corner of interpersonal network. All of connections naturally become the “object of hand”, you can play it as you want between the hands.</p>\n<p>  However, rapid transmission of information also caused rapid interpersonal conversion. I think perhaps it’s the attitude of “the most beautiful star is that one you can’t pick it.”. Something was hard-earned in the past, but now you can easily get it. That star which already holds on your hand is not shiny anymore and it will be discarded in the end. Moreover, people who had bad idea use internet to cheat some good people. In the ginormous networks, someone is pretending as your friends and family. You can’t recognize and verify, how to protect yourself? More and more frauds and criminal events make people stopping use internet to communicate with others because they don’t want to be the next victims. And some people talk very happy on internet, but they are speechless in the reality. Comparing the warm and lively talk in virtual with the silent in reality,  this phenomenon make me unable to stop sighing and sobbing. People addicted with online unreal world and ignored people and things they should concern about in reality. In addition, people are growing further apart in reality and try to seek the new warm from internet, the vicious cycles trigger again and again and difficult to save.</p>\n<p>  In conclusion, although convenient networks shorten the distance between people, but the distance of heart is far away than before. We don’t have truly personal experience in many things, many things are hard to understand if you just rely on touching the cold screen. For me, instead of waiting people in front of computer all day, I would rather to turn around to talk someone who was waiting for my reply. Internet is convenient and just for moderate using. After all, something can tighten interpersonal networks is your hand but not the little mouse you hold on.</p>\n"},{"title":"Train to Busan (屍速列車) - 劇透","thumbnail":["/images/train_to_busan.jpg"],"date":"2016-09-10T02:59:31.000Z","_content":"<img src=\"/images/train_to_busan.jpg\">\n\n***\n#### 評價分數（滿分十分）：:star::star::star::star::star::star::star::star::star:\n#### 地點：台中新時代威秀影城\n#### 陪看：豪豪、毛董、柏勳\n\n***\n#### 劇情簡介：\n&emsp;&emsp;劇情一開始，有位不知名的大叔開著車回家(應該是回家？)，前方有安檢人員消毒說前方洩漏了一點東西，不知名大叔抱怨說不知道這是第幾次了，進入之後，他為了接電話不小心撞死一隻小鹿，不知名大叔下車看了一下，覺得運氣很背的把車開走，結果，小鹿竟然站起來變成喪屍，病毒就這樣開始了...\n&emsp;&emsp;男主角是一間證券公司的經理，他在電腦上看到某地區魚全部死光，就自私地賣掉所有相關股票，也不管是不是會造成市場動盪，只在乎有沒有賺錢。\n&emsp;&emsp;男主角回家看到小孩秀安在跟媽媽講電話，今天是秀安的生日，爸爸特地買禮物回去給他，結果沒想到去年生日已經送過同樣的禮物了，秀安想要去釜山找媽媽，男主角擔心秀安的安全，決定一同前往，隔天要出發的時候，遠遠看到火燒的大樓，只是推斷那邊有事情發生，也沒有想太多。\n&emsp;&emsp;大家上車之後，出現一個臨時衝上車的女生，她已經快要病變成殭屍，列車就這樣關上門了，火車離開之前，車站外已經有人開始大打出手，秀安看到外面有人咬人，想要叫醒男主角，可是男主角卻睡得正甜。秀安跑去上廁所發現一個流浪漢說著：「都死掉了...(碎碎念)」。\n&emsp;&emsp;這個時候，病變的那個女生咬了要急救她的列車服務員，開始了一連串的有人被咬，男配角尹相華和他的老婆盛景在最後要逃到活人車廂的時候，被男主角關上門，後來秀安大叫是剛剛在廁所看到的大叔，男主角才開門讓他進來。男主角發現，殭屍不會開門，然後看到人才追擊，所以盛景把玻璃門用報紙貼起來，順利的讓殭屍安靜下來。男主角的媽媽剛好打電話來，詢問男主角是否平安，還有抱怨媳婦的不好之後，電話的另一頭就突然聽不到聲音了。\n&emsp;&emsp;新聞訊息開始大量曝光，網路影片都開始看到殭屍的蹤影，車站到達下一站的時候因為不停使繼續開，外面卻是一陣混亂的殭屍追擊，車站經由管控室通知，決定在大田停車，男主角打電話給認識的人，請他幫忙確認大田的情況，友人指示讓他出站之後右轉會有人接應，一旁的流浪漢也聽到了。\n&emsp;&emsp;抵達大田要出站之前，所有的軍人全部變成殭屍，追擊上來，只有一些人順利逃走，卻把男主角、尹相華、閔英國分在同個車廂，秀安、盛景、流浪漢、還有一對姐妹的姊姊在同個車廂，後來列車長決定繼續把列車開往釜山，男主角、尹相華、閔英國在和秀安、盛景、金珍熙分別通話之後，決定全副武裝通過數個車廂去找對方，在穿越車廂的時候，男主角又意外發現，如果列車進山洞的話，殭屍會停止追擊，只朝有聲音的地方移動，後來順利的找到秀安、盛景、流浪漢、還有一對姐妹的姊姊。閔英國打電話給金珍熙說要去同個車廂找他們，結果被金珍熙同車廂的自私客運營運長煽動不要讓其他人過來，結果讓尹相華被殭屍咬到，還有那對姐妹的姊姊也因為沒有順利抵達在妹妹面前被殭屍咬死了。男主角一群人雖然順利的到達活人的車廂，卻又被營運長說他們都被感染了煽動群眾，結果被所有人把男主角一群人趕到更前面的車廂。營運長的那個車廂開始吵架，在大家都不注意的時候，剛剛那對姐妹花的妹妹抱怨完姊姊為什麼那麼傻之後，就跑去把殭屍的門打開，營運長那個車廂的人就被咬了。\n&emsp;&emsp;男主角一行人抵達東大區時，因為前面的列車東倒西歪而停住了，列車長廣播要大家下車跑向其他列車，繼續開往釜山。而營運長的那個車廂，服務員和營運長因為趁混亂中逃進了廁所逃過一劫，卻沒想到營運長為了到下一個列車，推了服務員一把，自己順利逃出。有一台不知道從哪裡來的冒火列車，突然撞上了男主角一群人附近的列車，把男主角一行人分開，棒球隊的閔英國和金珍熙為了破壞一個打不開的門拖了很久，營運長從剛剛的列車跑出之後，剛好也到了他們那個車廂，營運長又拉著金珍熙去撞殭屍，讓金珍熙被殭屍咬到，閔英國傷心地抱著她大哭，金珍熙變成殭屍之後也咬了閔英國一口。營運長繼續往要開往釜山的列車奔跑，結果列車長看到營運長要上來，過去幫他一把，沒想到列車長也被營運長推了一把之後被殭屍咬到，營運長自己順利逃到列車上。\n&emsp;&emsp;男主角、秀安、盛景、流浪漢因為冒火的列車撞上其他列車，把他們困在列車之間，流浪漢也為了救他們自己犧牲而死，最後男主角帶著秀安、盛景順利地跑上開往釜山的列車，卻發現營運長已經被咬了，男主角為了救秀安和盛景，把營運長推下列車之後，因為自己也被咬，所以也跳下列車自殺。\n&emsp;&emsp;最後剩下秀安和盛景抵達釜山，山洞的另一頭軍人看到兩個模糊的人走向他們，準備把他們射殺，這時候秀安卻唱起了歌，讓他們順利地被拯救了。\n\n***\n#### 評論：\n&emsp;&emsp;整部影片劇情緊湊，殭屍也演得很到位，在電影院被很多畫面嚇到，內容除了殭屍，也帶出了一些引人深思的議題，大部分的人都很自私，也正因為這種自私把大家帶入死亡，如果能更信賴彼此，其實很快就能把殭屍控制住了。除了這部電影，其實很多殭屍類別的影集也同樣帶出這樣的議題，人，其實比殭屍還要可怕。聽說要出前傳啦！會解釋到那個上車的女生怎麼來的，為什麼一直說對不起？非常期待十月的前傳。\n&emsp;&emsp;要去看的時候也是臨時約的，我完全沒有看預告片，還以為是美劇之類的，沒想到韓國的電影已經有這樣的成熟度，也相當令我驚訝。\n\n***\n圖片來源：[WellGoUSA](http://wellgousa.com/theatrical/train-to-busan)\n","source":"_posts/Train-to-Busan-屍速列車-劇透.md","raw":"---\ntitle: Train to Busan (屍速列車) - 劇透\nthumbnail:\n  - /images/train_to_busan.jpg\ndate: 2016-09-10 10:59:31\ncategories: 閱讀賞析\ntags:\n---\n<img src=\"/images/train_to_busan.jpg\">\n\n***\n#### 評價分數（滿分十分）：:star::star::star::star::star::star::star::star::star:\n#### 地點：台中新時代威秀影城\n#### 陪看：豪豪、毛董、柏勳\n\n***\n#### 劇情簡介：\n&emsp;&emsp;劇情一開始，有位不知名的大叔開著車回家(應該是回家？)，前方有安檢人員消毒說前方洩漏了一點東西，不知名大叔抱怨說不知道這是第幾次了，進入之後，他為了接電話不小心撞死一隻小鹿，不知名大叔下車看了一下，覺得運氣很背的把車開走，結果，小鹿竟然站起來變成喪屍，病毒就這樣開始了...\n&emsp;&emsp;男主角是一間證券公司的經理，他在電腦上看到某地區魚全部死光，就自私地賣掉所有相關股票，也不管是不是會造成市場動盪，只在乎有沒有賺錢。\n&emsp;&emsp;男主角回家看到小孩秀安在跟媽媽講電話，今天是秀安的生日，爸爸特地買禮物回去給他，結果沒想到去年生日已經送過同樣的禮物了，秀安想要去釜山找媽媽，男主角擔心秀安的安全，決定一同前往，隔天要出發的時候，遠遠看到火燒的大樓，只是推斷那邊有事情發生，也沒有想太多。\n&emsp;&emsp;大家上車之後，出現一個臨時衝上車的女生，她已經快要病變成殭屍，列車就這樣關上門了，火車離開之前，車站外已經有人開始大打出手，秀安看到外面有人咬人，想要叫醒男主角，可是男主角卻睡得正甜。秀安跑去上廁所發現一個流浪漢說著：「都死掉了...(碎碎念)」。\n&emsp;&emsp;這個時候，病變的那個女生咬了要急救她的列車服務員，開始了一連串的有人被咬，男配角尹相華和他的老婆盛景在最後要逃到活人車廂的時候，被男主角關上門，後來秀安大叫是剛剛在廁所看到的大叔，男主角才開門讓他進來。男主角發現，殭屍不會開門，然後看到人才追擊，所以盛景把玻璃門用報紙貼起來，順利的讓殭屍安靜下來。男主角的媽媽剛好打電話來，詢問男主角是否平安，還有抱怨媳婦的不好之後，電話的另一頭就突然聽不到聲音了。\n&emsp;&emsp;新聞訊息開始大量曝光，網路影片都開始看到殭屍的蹤影，車站到達下一站的時候因為不停使繼續開，外面卻是一陣混亂的殭屍追擊，車站經由管控室通知，決定在大田停車，男主角打電話給認識的人，請他幫忙確認大田的情況，友人指示讓他出站之後右轉會有人接應，一旁的流浪漢也聽到了。\n&emsp;&emsp;抵達大田要出站之前，所有的軍人全部變成殭屍，追擊上來，只有一些人順利逃走，卻把男主角、尹相華、閔英國分在同個車廂，秀安、盛景、流浪漢、還有一對姐妹的姊姊在同個車廂，後來列車長決定繼續把列車開往釜山，男主角、尹相華、閔英國在和秀安、盛景、金珍熙分別通話之後，決定全副武裝通過數個車廂去找對方，在穿越車廂的時候，男主角又意外發現，如果列車進山洞的話，殭屍會停止追擊，只朝有聲音的地方移動，後來順利的找到秀安、盛景、流浪漢、還有一對姐妹的姊姊。閔英國打電話給金珍熙說要去同個車廂找他們，結果被金珍熙同車廂的自私客運營運長煽動不要讓其他人過來，結果讓尹相華被殭屍咬到，還有那對姐妹的姊姊也因為沒有順利抵達在妹妹面前被殭屍咬死了。男主角一群人雖然順利的到達活人的車廂，卻又被營運長說他們都被感染了煽動群眾，結果被所有人把男主角一群人趕到更前面的車廂。營運長的那個車廂開始吵架，在大家都不注意的時候，剛剛那對姐妹花的妹妹抱怨完姊姊為什麼那麼傻之後，就跑去把殭屍的門打開，營運長那個車廂的人就被咬了。\n&emsp;&emsp;男主角一行人抵達東大區時，因為前面的列車東倒西歪而停住了，列車長廣播要大家下車跑向其他列車，繼續開往釜山。而營運長的那個車廂，服務員和營運長因為趁混亂中逃進了廁所逃過一劫，卻沒想到營運長為了到下一個列車，推了服務員一把，自己順利逃出。有一台不知道從哪裡來的冒火列車，突然撞上了男主角一群人附近的列車，把男主角一行人分開，棒球隊的閔英國和金珍熙為了破壞一個打不開的門拖了很久，營運長從剛剛的列車跑出之後，剛好也到了他們那個車廂，營運長又拉著金珍熙去撞殭屍，讓金珍熙被殭屍咬到，閔英國傷心地抱著她大哭，金珍熙變成殭屍之後也咬了閔英國一口。營運長繼續往要開往釜山的列車奔跑，結果列車長看到營運長要上來，過去幫他一把，沒想到列車長也被營運長推了一把之後被殭屍咬到，營運長自己順利逃到列車上。\n&emsp;&emsp;男主角、秀安、盛景、流浪漢因為冒火的列車撞上其他列車，把他們困在列車之間，流浪漢也為了救他們自己犧牲而死，最後男主角帶著秀安、盛景順利地跑上開往釜山的列車，卻發現營運長已經被咬了，男主角為了救秀安和盛景，把營運長推下列車之後，因為自己也被咬，所以也跳下列車自殺。\n&emsp;&emsp;最後剩下秀安和盛景抵達釜山，山洞的另一頭軍人看到兩個模糊的人走向他們，準備把他們射殺，這時候秀安卻唱起了歌，讓他們順利地被拯救了。\n\n***\n#### 評論：\n&emsp;&emsp;整部影片劇情緊湊，殭屍也演得很到位，在電影院被很多畫面嚇到，內容除了殭屍，也帶出了一些引人深思的議題，大部分的人都很自私，也正因為這種自私把大家帶入死亡，如果能更信賴彼此，其實很快就能把殭屍控制住了。除了這部電影，其實很多殭屍類別的影集也同樣帶出這樣的議題，人，其實比殭屍還要可怕。聽說要出前傳啦！會解釋到那個上車的女生怎麼來的，為什麼一直說對不起？非常期待十月的前傳。\n&emsp;&emsp;要去看的時候也是臨時約的，我完全沒有看預告片，還以為是美劇之類的，沒想到韓國的電影已經有這樣的成熟度，也相當令我驚訝。\n\n***\n圖片來源：[WellGoUSA](http://wellgousa.com/theatrical/train-to-busan)\n","slug":"Train-to-Busan-屍速列車-劇透","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyc00637ifa2u6f6fw1","content":"<img src=\"/images/train_to_busan.jpg\">\n<hr>\n<h4>評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️</h4>\n<h4>地點：台中新時代威秀影城</h4>\n<h4>陪看：豪豪、毛董、柏勳</h4>\n<hr>\n<h4>劇情簡介：</h4>\n<p>  劇情一開始，有位不知名的大叔開著車回家(應該是回家？)，前方有安檢人員消毒說前方洩漏了一點東西，不知名大叔抱怨說不知道這是第幾次了，進入之後，他為了接電話不小心撞死一隻小鹿，不知名大叔下車看了一下，覺得運氣很背的把車開走，結果，小鹿竟然站起來變成喪屍，病毒就這樣開始了…<br>\n  男主角是一間證券公司的經理，他在電腦上看到某地區魚全部死光，就自私地賣掉所有相關股票，也不管是不是會造成市場動盪，只在乎有沒有賺錢。<br>\n  男主角回家看到小孩秀安在跟媽媽講電話，今天是秀安的生日，爸爸特地買禮物回去給他，結果沒想到去年生日已經送過同樣的禮物了，秀安想要去釜山找媽媽，男主角擔心秀安的安全，決定一同前往，隔天要出發的時候，遠遠看到火燒的大樓，只是推斷那邊有事情發生，也沒有想太多。<br>\n  大家上車之後，出現一個臨時衝上車的女生，她已經快要病變成殭屍，列車就這樣關上門了，火車離開之前，車站外已經有人開始大打出手，秀安看到外面有人咬人，想要叫醒男主角，可是男主角卻睡得正甜。秀安跑去上廁所發現一個流浪漢說著：「都死掉了…(碎碎念)」。<br>\n  這個時候，病變的那個女生咬了要急救她的列車服務員，開始了一連串的有人被咬，男配角尹相華和他的老婆盛景在最後要逃到活人車廂的時候，被男主角關上門，後來秀安大叫是剛剛在廁所看到的大叔，男主角才開門讓他進來。男主角發現，殭屍不會開門，然後看到人才追擊，所以盛景把玻璃門用報紙貼起來，順利的讓殭屍安靜下來。男主角的媽媽剛好打電話來，詢問男主角是否平安，還有抱怨媳婦的不好之後，電話的另一頭就突然聽不到聲音了。<br>\n  新聞訊息開始大量曝光，網路影片都開始看到殭屍的蹤影，車站到達下一站的時候因為不停使繼續開，外面卻是一陣混亂的殭屍追擊，車站經由管控室通知，決定在大田停車，男主角打電話給認識的人，請他幫忙確認大田的情況，友人指示讓他出站之後右轉會有人接應，一旁的流浪漢也聽到了。<br>\n  抵達大田要出站之前，所有的軍人全部變成殭屍，追擊上來，只有一些人順利逃走，卻把男主角、尹相華、閔英國分在同個車廂，秀安、盛景、流浪漢、還有一對姐妹的姊姊在同個車廂，後來列車長決定繼續把列車開往釜山，男主角、尹相華、閔英國在和秀安、盛景、金珍熙分別通話之後，決定全副武裝通過數個車廂去找對方，在穿越車廂的時候，男主角又意外發現，如果列車進山洞的話，殭屍會停止追擊，只朝有聲音的地方移動，後來順利的找到秀安、盛景、流浪漢、還有一對姐妹的姊姊。閔英國打電話給金珍熙說要去同個車廂找他們，結果被金珍熙同車廂的自私客運營運長煽動不要讓其他人過來，結果讓尹相華被殭屍咬到，還有那對姐妹的姊姊也因為沒有順利抵達在妹妹面前被殭屍咬死了。男主角一群人雖然順利的到達活人的車廂，卻又被營運長說他們都被感染了煽動群眾，結果被所有人把男主角一群人趕到更前面的車廂。營運長的那個車廂開始吵架，在大家都不注意的時候，剛剛那對姐妹花的妹妹抱怨完姊姊為什麼那麼傻之後，就跑去把殭屍的門打開，營運長那個車廂的人就被咬了。<br>\n  男主角一行人抵達東大區時，因為前面的列車東倒西歪而停住了，列車長廣播要大家下車跑向其他列車，繼續開往釜山。而營運長的那個車廂，服務員和營運長因為趁混亂中逃進了廁所逃過一劫，卻沒想到營運長為了到下一個列車，推了服務員一把，自己順利逃出。有一台不知道從哪裡來的冒火列車，突然撞上了男主角一群人附近的列車，把男主角一行人分開，棒球隊的閔英國和金珍熙為了破壞一個打不開的門拖了很久，營運長從剛剛的列車跑出之後，剛好也到了他們那個車廂，營運長又拉著金珍熙去撞殭屍，讓金珍熙被殭屍咬到，閔英國傷心地抱著她大哭，金珍熙變成殭屍之後也咬了閔英國一口。營運長繼續往要開往釜山的列車奔跑，結果列車長看到營運長要上來，過去幫他一把，沒想到列車長也被營運長推了一把之後被殭屍咬到，營運長自己順利逃到列車上。<br>\n  男主角、秀安、盛景、流浪漢因為冒火的列車撞上其他列車，把他們困在列車之間，流浪漢也為了救他們自己犧牲而死，最後男主角帶著秀安、盛景順利地跑上開往釜山的列車，卻發現營運長已經被咬了，男主角為了救秀安和盛景，把營運長推下列車之後，因為自己也被咬，所以也跳下列車自殺。<br>\n  最後剩下秀安和盛景抵達釜山，山洞的另一頭軍人看到兩個模糊的人走向他們，準備把他們射殺，這時候秀安卻唱起了歌，讓他們順利地被拯救了。</p>\n<hr>\n<h4>評論：</h4>\n<p>  整部影片劇情緊湊，殭屍也演得很到位，在電影院被很多畫面嚇到，內容除了殭屍，也帶出了一些引人深思的議題，大部分的人都很自私，也正因為這種自私把大家帶入死亡，如果能更信賴彼此，其實很快就能把殭屍控制住了。除了這部電影，其實很多殭屍類別的影集也同樣帶出這樣的議題，人，其實比殭屍還要可怕。聽說要出前傳啦！會解釋到那個上車的女生怎麼來的，為什麼一直說對不起？非常期待十月的前傳。<br>\n  要去看的時候也是臨時約的，我完全沒有看預告片，還以為是美劇之類的，沒想到韓國的電影已經有這樣的成熟度，也相當令我驚訝。</p>\n<hr>\n<p>圖片來源：<a href=\"http://wellgousa.com/theatrical/train-to-busan\" target=\"_blank\" rel=\"external\">WellGoUSA</a></p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/train_to_busan.jpg\">\n<hr>\n<h4>評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️</h4>\n<h4>地點：台中新時代威秀影城</h4>\n<h4>陪看：豪豪、毛董、柏勳</h4>\n<hr>\n<h4>劇情簡介：</h4>\n<p>  劇情一開始，有位不知名的大叔開著車回家(應該是回家？)，前方有安檢人員消毒說前方洩漏了一點東西，不知名大叔抱怨說不知道這是第幾次了，進入之後，他為了接電話不小心撞死一隻小鹿，不知名大叔下車看了一下，覺得運氣很背的把車開走，結果，小鹿竟然站起來變成喪屍，病毒就這樣開始了…<br>\n  男主角是一間證券公司的經理，他在電腦上看到某地區魚全部死光，就自私地賣掉所有相關股票，也不管是不是會造成市場動盪，只在乎有沒有賺錢。<br>\n  男主角回家看到小孩秀安在跟媽媽講電話，今天是秀安的生日，爸爸特地買禮物回去給他，結果沒想到去年生日已經送過同樣的禮物了，秀安想要去釜山找媽媽，男主角擔心秀安的安全，決定一同前往，隔天要出發的時候，遠遠看到火燒的大樓，只是推斷那邊有事情發生，也沒有想太多。<br>\n  大家上車之後，出現一個臨時衝上車的女生，她已經快要病變成殭屍，列車就這樣關上門了，火車離開之前，車站外已經有人開始大打出手，秀安看到外面有人咬人，想要叫醒男主角，可是男主角卻睡得正甜。秀安跑去上廁所發現一個流浪漢說著：「都死掉了…(碎碎念)」。<br>\n  這個時候，病變的那個女生咬了要急救她的列車服務員，開始了一連串的有人被咬，男配角尹相華和他的老婆盛景在最後要逃到活人車廂的時候，被男主角關上門，後來秀安大叫是剛剛在廁所看到的大叔，男主角才開門讓他進來。男主角發現，殭屍不會開門，然後看到人才追擊，所以盛景把玻璃門用報紙貼起來，順利的讓殭屍安靜下來。男主角的媽媽剛好打電話來，詢問男主角是否平安，還有抱怨媳婦的不好之後，電話的另一頭就突然聽不到聲音了。<br>\n  新聞訊息開始大量曝光，網路影片都開始看到殭屍的蹤影，車站到達下一站的時候因為不停使繼續開，外面卻是一陣混亂的殭屍追擊，車站經由管控室通知，決定在大田停車，男主角打電話給認識的人，請他幫忙確認大田的情況，友人指示讓他出站之後右轉會有人接應，一旁的流浪漢也聽到了。<br>\n  抵達大田要出站之前，所有的軍人全部變成殭屍，追擊上來，只有一些人順利逃走，卻把男主角、尹相華、閔英國分在同個車廂，秀安、盛景、流浪漢、還有一對姐妹的姊姊在同個車廂，後來列車長決定繼續把列車開往釜山，男主角、尹相華、閔英國在和秀安、盛景、金珍熙分別通話之後，決定全副武裝通過數個車廂去找對方，在穿越車廂的時候，男主角又意外發現，如果列車進山洞的話，殭屍會停止追擊，只朝有聲音的地方移動，後來順利的找到秀安、盛景、流浪漢、還有一對姐妹的姊姊。閔英國打電話給金珍熙說要去同個車廂找他們，結果被金珍熙同車廂的自私客運營運長煽動不要讓其他人過來，結果讓尹相華被殭屍咬到，還有那對姐妹的姊姊也因為沒有順利抵達在妹妹面前被殭屍咬死了。男主角一群人雖然順利的到達活人的車廂，卻又被營運長說他們都被感染了煽動群眾，結果被所有人把男主角一群人趕到更前面的車廂。營運長的那個車廂開始吵架，在大家都不注意的時候，剛剛那對姐妹花的妹妹抱怨完姊姊為什麼那麼傻之後，就跑去把殭屍的門打開，營運長那個車廂的人就被咬了。<br>\n  男主角一行人抵達東大區時，因為前面的列車東倒西歪而停住了，列車長廣播要大家下車跑向其他列車，繼續開往釜山。而營運長的那個車廂，服務員和營運長因為趁混亂中逃進了廁所逃過一劫，卻沒想到營運長為了到下一個列車，推了服務員一把，自己順利逃出。有一台不知道從哪裡來的冒火列車，突然撞上了男主角一群人附近的列車，把男主角一行人分開，棒球隊的閔英國和金珍熙為了破壞一個打不開的門拖了很久，營運長從剛剛的列車跑出之後，剛好也到了他們那個車廂，營運長又拉著金珍熙去撞殭屍，讓金珍熙被殭屍咬到，閔英國傷心地抱著她大哭，金珍熙變成殭屍之後也咬了閔英國一口。營運長繼續往要開往釜山的列車奔跑，結果列車長看到營運長要上來，過去幫他一把，沒想到列車長也被營運長推了一把之後被殭屍咬到，營運長自己順利逃到列車上。<br>\n  男主角、秀安、盛景、流浪漢因為冒火的列車撞上其他列車，把他們困在列車之間，流浪漢也為了救他們自己犧牲而死，最後男主角帶著秀安、盛景順利地跑上開往釜山的列車，卻發現營運長已經被咬了，男主角為了救秀安和盛景，把營運長推下列車之後，因為自己也被咬，所以也跳下列車自殺。<br>\n  最後剩下秀安和盛景抵達釜山，山洞的另一頭軍人看到兩個模糊的人走向他們，準備把他們射殺，這時候秀安卻唱起了歌，讓他們順利地被拯救了。</p>\n<hr>\n<h4>評論：</h4>\n<p>  整部影片劇情緊湊，殭屍也演得很到位，在電影院被很多畫面嚇到，內容除了殭屍，也帶出了一些引人深思的議題，大部分的人都很自私，也正因為這種自私把大家帶入死亡，如果能更信賴彼此，其實很快就能把殭屍控制住了。除了這部電影，其實很多殭屍類別的影集也同樣帶出這樣的議題，人，其實比殭屍還要可怕。聽說要出前傳啦！會解釋到那個上車的女生怎麼來的，為什麼一直說對不起？非常期待十月的前傳。<br>\n  要去看的時候也是臨時約的，我完全沒有看預告片，還以為是美劇之類的，沒想到韓國的電影已經有這樣的成熟度，也相當令我驚訝。</p>\n<hr>\n<p>圖片來源：<a href=\"http://wellgousa.com/theatrical/train-to-busan\" target=\"_blank\" rel=\"external\">WellGoUSA</a></p>\n"},{"title":"UI 網頁設計快速學習自我挑戰 Day1","thumbnail":["/images/learning/ui/UIDay1.png"],"date":"2017-11-09T09:30:02.000Z","_content":"<img src=\"/images/learning/ui/UIDay1.png\">\n\n***\n#### 修改 Illustrator 環境\n1. Illustrator CC => Preferences => Units，把 General、Stroke 和 Type 改為 Pixels\n2. Window => Workspace，選擇 Web，如果有問題，選擇 Reset Web\n#### 在 Illustrator 新增 sitemap\n1. New => 選擇 A4\n2. 打開 Adobe Muse => New => 直接新增\n3. 修改 Muse 背景：Preferences => Color theme 挑一個\n4. 用 Command + Shift + 4 截圖，把檔案貼到 Illustrator\n#### Desktop、Tablet、Mobile 網頁設計用什麼螢幕尺寸\n1. [了解裝置大小](http://mydevice.io/devices)\n2. New => 選擇 Web => Common size => 將 width 改為 1200 => 新增\n3. 開啟左邊選單列的 artboard tool => 選擇 New Artboard => 將寬度調為 768 px\n4. 按住 Option 鍵 => 按鈕會變成有陰影的箭頭 => 拖移也可以產生新的 Artboard\n5. Window => Artboard => Artboard 出現在右邊選單，將 Artboard 改為以下\n    - Desktop 1200px\n    - Tablet 768px\n    - Mobile 400px\n6. Save => 按照預設值即可\n#### 什麼是 Grid System 和 Responsive Mobile & Tablet Design？\n1. 12 個 column，不能用 13，因為難以切割\n#### 如何在 Illustrator 製作 12 個 column 的 responsive grid？\n1. 先選擇 Rectangle Tool => 內部選擇 None => 外部選擇黑色 => 把 Desktop 部分框起來\n2. 選擇 Object => Path => Split Into Grid => Column number 選擇 12 => Gutter 選擇 30px =>  Add Guides 要打勾 => 點選 OK\n3. 選擇出現的 object => 按滑鼠右鍵 ungroup => 把畫面往下移動\n4. View => Make Guides => View => Lock Guides，然後線條就鎖住了\n5. 把所有的線框起來 => 刪掉\n6. 點選左邊選單的 Artboard，把左右兩邊邊界拉大\n7. Tablet 和 Mobile 步驟都跟上面一樣，但是 Tablet Column number 選擇 6，Mobile Column 選擇 2\n#### 建立 Wireframe\n1. `Command + ;` 可以關閉和開啟 Guides\n2. 新增 Logo，左上角佔用 4 個 column\n3. 新增 Navigation，右上角佔用 6 個 column\n4. 新增 Hero box，放到 Logo 下方，佔用 12 個 column\n5. 在 Hero box 裡面的第二個 column 新增佔用 5 個 column 的文字\n6. `Command + Shift + .` 放大字體，`Command + Shift + ,` 縮小字體\n7. 全選文字 => 點選右方段落 => 取消勾選 Hyphenate\n8. 在文字下方新增佔用 3 個 column 的 button，文字打入 AMAZING CALL TO ACTION\n9. 在 Hero box 下方新增 4 個 column 的區塊，裡面要打上叉叉，先用 Line Segment Tool 新增一條斜線，再用 Object => Transform => Reflect，產生相反的線，用 Transform 對齊，最後把區塊和叉叉組合在一起 => Object => Group\n10. 最後複製三個 4 column 區塊，然後對齊，並間隔一個位置。\n#### 建立 Tablet 和 Mobile Wireframe\n1. 把 Guides 延長的方法：View => Guides => Unlock Guides => 把下面的線框起來 => 選擇 Direct Selection Tool => 把線拉長並按住 Shift (可以保持直線) => View => Guides => Lock Guides\n2. Mobile Hamburger Bar：用 Line Segment Tool 拉出直線 => 設定 Stroke 線為黑色且寬度設為 4px => 複製三個 => 用 transform 的 Vertical Distribute Center\n3. 剩下的按照位置移動，並調整大小即可。\n#### 網頁設計的靈感\n1. [AWWWARDS](https://www.awwwards.com/)\n#### 使用 Illustrator 模板開始網頁設計\n1. New => Web => TEMPLATES => 選擇需要的下載\n2. 打開 Creative Cloud => Assets => Market => 選擇需要的 => Add to Library\n#### 將 Vector Logo 放到版面編排\n1. 使用 svg 再放大也不會失真，所以最好使用 svg\n2. 用 Rectangle Tool 拉出背景，選擇黑色，透明度選擇 81%，把位置放到最後面 => 按滑鼠右鍵 => Arrange => Send to Back\n3. 放上 Navigation 文字 => ABOUT ME、CONTACT ME\n#### 使用 Adobe 顏色\n1. [Adobe 顏色選擇器](https://color.adobe.com/create/color-wheel/)\n2. 進去網頁之後 => 選擇 Explore => 選擇喜歡的色盤 => 按下 Save => 選擇要存入的 Library => 就可以在 Illustrator 看到了\n#### 使用 Adobe Illustrator 來對應品牌顏色\n1. 把 Google Logo 放到頁面裡面 => 使用 Eyedropper Tool 點需要的顏色 => 在畫面左上方顏色選擇器的地方選擇 New Swatch => 輸入名稱 => 儲存到 Library","source":"_posts/UI-網頁設計快速學習自我挑戰-Day1.md","raw":"---\ntitle: UI 網頁設計快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/ui/UIDay1.png\ndate: 2017-11-09 17:30:02\ncategories: 學習歷程\ntags: \n    - UI\n    - Illustrator\n---\n<img src=\"/images/learning/ui/UIDay1.png\">\n\n***\n#### 修改 Illustrator 環境\n1. Illustrator CC => Preferences => Units，把 General、Stroke 和 Type 改為 Pixels\n2. Window => Workspace，選擇 Web，如果有問題，選擇 Reset Web\n#### 在 Illustrator 新增 sitemap\n1. New => 選擇 A4\n2. 打開 Adobe Muse => New => 直接新增\n3. 修改 Muse 背景：Preferences => Color theme 挑一個\n4. 用 Command + Shift + 4 截圖，把檔案貼到 Illustrator\n#### Desktop、Tablet、Mobile 網頁設計用什麼螢幕尺寸\n1. [了解裝置大小](http://mydevice.io/devices)\n2. New => 選擇 Web => Common size => 將 width 改為 1200 => 新增\n3. 開啟左邊選單列的 artboard tool => 選擇 New Artboard => 將寬度調為 768 px\n4. 按住 Option 鍵 => 按鈕會變成有陰影的箭頭 => 拖移也可以產生新的 Artboard\n5. Window => Artboard => Artboard 出現在右邊選單，將 Artboard 改為以下\n    - Desktop 1200px\n    - Tablet 768px\n    - Mobile 400px\n6. Save => 按照預設值即可\n#### 什麼是 Grid System 和 Responsive Mobile & Tablet Design？\n1. 12 個 column，不能用 13，因為難以切割\n#### 如何在 Illustrator 製作 12 個 column 的 responsive grid？\n1. 先選擇 Rectangle Tool => 內部選擇 None => 外部選擇黑色 => 把 Desktop 部分框起來\n2. 選擇 Object => Path => Split Into Grid => Column number 選擇 12 => Gutter 選擇 30px =>  Add Guides 要打勾 => 點選 OK\n3. 選擇出現的 object => 按滑鼠右鍵 ungroup => 把畫面往下移動\n4. View => Make Guides => View => Lock Guides，然後線條就鎖住了\n5. 把所有的線框起來 => 刪掉\n6. 點選左邊選單的 Artboard，把左右兩邊邊界拉大\n7. Tablet 和 Mobile 步驟都跟上面一樣，但是 Tablet Column number 選擇 6，Mobile Column 選擇 2\n#### 建立 Wireframe\n1. `Command + ;` 可以關閉和開啟 Guides\n2. 新增 Logo，左上角佔用 4 個 column\n3. 新增 Navigation，右上角佔用 6 個 column\n4. 新增 Hero box，放到 Logo 下方，佔用 12 個 column\n5. 在 Hero box 裡面的第二個 column 新增佔用 5 個 column 的文字\n6. `Command + Shift + .` 放大字體，`Command + Shift + ,` 縮小字體\n7. 全選文字 => 點選右方段落 => 取消勾選 Hyphenate\n8. 在文字下方新增佔用 3 個 column 的 button，文字打入 AMAZING CALL TO ACTION\n9. 在 Hero box 下方新增 4 個 column 的區塊，裡面要打上叉叉，先用 Line Segment Tool 新增一條斜線，再用 Object => Transform => Reflect，產生相反的線，用 Transform 對齊，最後把區塊和叉叉組合在一起 => Object => Group\n10. 最後複製三個 4 column 區塊，然後對齊，並間隔一個位置。\n#### 建立 Tablet 和 Mobile Wireframe\n1. 把 Guides 延長的方法：View => Guides => Unlock Guides => 把下面的線框起來 => 選擇 Direct Selection Tool => 把線拉長並按住 Shift (可以保持直線) => View => Guides => Lock Guides\n2. Mobile Hamburger Bar：用 Line Segment Tool 拉出直線 => 設定 Stroke 線為黑色且寬度設為 4px => 複製三個 => 用 transform 的 Vertical Distribute Center\n3. 剩下的按照位置移動，並調整大小即可。\n#### 網頁設計的靈感\n1. [AWWWARDS](https://www.awwwards.com/)\n#### 使用 Illustrator 模板開始網頁設計\n1. New => Web => TEMPLATES => 選擇需要的下載\n2. 打開 Creative Cloud => Assets => Market => 選擇需要的 => Add to Library\n#### 將 Vector Logo 放到版面編排\n1. 使用 svg 再放大也不會失真，所以最好使用 svg\n2. 用 Rectangle Tool 拉出背景，選擇黑色，透明度選擇 81%，把位置放到最後面 => 按滑鼠右鍵 => Arrange => Send to Back\n3. 放上 Navigation 文字 => ABOUT ME、CONTACT ME\n#### 使用 Adobe 顏色\n1. [Adobe 顏色選擇器](https://color.adobe.com/create/color-wheel/)\n2. 進去網頁之後 => 選擇 Explore => 選擇喜歡的色盤 => 按下 Save => 選擇要存入的 Library => 就可以在 Illustrator 看到了\n#### 使用 Adobe Illustrator 來對應品牌顏色\n1. 把 Google Logo 放到頁面裡面 => 使用 Eyedropper Tool 點需要的顏色 => 在畫面左上方顏色選擇器的地方選擇 New Swatch => 輸入名稱 => 儲存到 Library","slug":"UI-網頁設計快速學習自我挑戰-Day1","published":1,"updated":"2017-11-10T08:05:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyd00667ifa1303zt8q","content":"<img src=\"/images/learning/ui/UIDay1.png\">\n<hr>\n<h4>修改 Illustrator 環境</h4>\n<ol>\n<li>Illustrator CC =&gt; Preferences =&gt; Units，把 General、Stroke 和 Type 改為 Pixels</li>\n<li>Window =&gt; Workspace，選擇 Web，如果有問題，選擇 Reset Web</li>\n</ol>\n<h4>在 Illustrator 新增 sitemap</h4>\n<ol>\n<li>New =&gt; 選擇 A4</li>\n<li>打開 Adobe Muse =&gt; New =&gt; 直接新增</li>\n<li>修改 Muse 背景：Preferences =&gt; Color theme 挑一個</li>\n<li>用 Command + Shift + 4 截圖，把檔案貼到 Illustrator</li>\n</ol>\n<h4>Desktop、Tablet、Mobile 網頁設計用什麼螢幕尺寸</h4>\n<ol>\n<li><a href=\"http://mydevice.io/devices\" target=\"_blank\" rel=\"external\">了解裝置大小</a></li>\n<li>New =&gt; 選擇 Web =&gt; Common size =&gt; 將 width 改為 1200 =&gt; 新增</li>\n<li>開啟左邊選單列的 artboard tool =&gt; 選擇 New Artboard =&gt; 將寬度調為 768 px</li>\n<li>按住 Option 鍵 =&gt; 按鈕會變成有陰影的箭頭 =&gt; 拖移也可以產生新的 Artboard</li>\n<li>Window =&gt; Artboard =&gt; Artboard 出現在右邊選單，將 Artboard 改為以下\n<ul>\n<li>Desktop 1200px</li>\n<li>Tablet 768px</li>\n<li>Mobile 400px</li>\n</ul>\n</li>\n<li>Save =&gt; 按照預設值即可</li>\n</ol>\n<h4>什麼是 Grid System 和 Responsive Mobile &amp; Tablet Design？</h4>\n<ol>\n<li>12 個 column，不能用 13，因為難以切割</li>\n</ol>\n<h4>如何在 Illustrator 製作 12 個 column 的 responsive grid？</h4>\n<ol>\n<li>先選擇 Rectangle Tool =&gt; 內部選擇 None =&gt; 外部選擇黑色 =&gt; 把 Desktop 部分框起來</li>\n<li>選擇 Object =&gt; Path =&gt; Split Into Grid =&gt; Column number 選擇 12 =&gt; Gutter 選擇 30px =&gt;  Add Guides 要打勾 =&gt; 點選 OK</li>\n<li>選擇出現的 object =&gt; 按滑鼠右鍵 ungroup =&gt; 把畫面往下移動</li>\n<li>View =&gt; Make Guides =&gt; View =&gt; Lock Guides，然後線條就鎖住了</li>\n<li>把所有的線框起來 =&gt; 刪掉</li>\n<li>點選左邊選單的 Artboard，把左右兩邊邊界拉大</li>\n<li>Tablet 和 Mobile 步驟都跟上面一樣，但是 Tablet Column number 選擇 6，Mobile Column 選擇 2</li>\n</ol>\n<h4>建立 Wireframe</h4>\n<ol>\n<li><code>Command + ;</code> 可以關閉和開啟 Guides</li>\n<li>新增 Logo，左上角佔用 4 個 column</li>\n<li>新增 Navigation，右上角佔用 6 個 column</li>\n<li>新增 Hero box，放到 Logo 下方，佔用 12 個 column</li>\n<li>在 Hero box 裡面的第二個 column 新增佔用 5 個 column 的文字</li>\n<li><code>Command + Shift + .</code> 放大字體，<code>Command + Shift + ,</code> 縮小字體</li>\n<li>全選文字 =&gt; 點選右方段落 =&gt; 取消勾選 Hyphenate</li>\n<li>在文字下方新增佔用 3 個 column 的 button，文字打入 AMAZING CALL TO ACTION</li>\n<li>在 Hero box 下方新增 4 個 column 的區塊，裡面要打上叉叉，先用 Line Segment Tool 新增一條斜線，再用 Object =&gt; Transform =&gt; Reflect，產生相反的線，用 Transform 對齊，最後把區塊和叉叉組合在一起 =&gt; Object =&gt; Group</li>\n<li>最後複製三個 4 column 區塊，然後對齊，並間隔一個位置。</li>\n</ol>\n<h4>建立 Tablet 和 Mobile Wireframe</h4>\n<ol>\n<li>把 Guides 延長的方法：View =&gt; Guides =&gt; Unlock Guides =&gt; 把下面的線框起來 =&gt; 選擇 Direct Selection Tool =&gt; 把線拉長並按住 Shift (可以保持直線) =&gt; View =&gt; Guides =&gt; Lock Guides</li>\n<li>Mobile Hamburger Bar：用 Line Segment Tool 拉出直線 =&gt; 設定 Stroke 線為黑色且寬度設為 4px =&gt; 複製三個 =&gt; 用 transform 的 Vertical Distribute Center</li>\n<li>剩下的按照位置移動，並調整大小即可。</li>\n</ol>\n<h4>網頁設計的靈感</h4>\n<ol>\n<li><a href=\"https://www.awwwards.com/\" target=\"_blank\" rel=\"external\">AWWWARDS</a></li>\n</ol>\n<h4>使用 Illustrator 模板開始網頁設計</h4>\n<ol>\n<li>New =&gt; Web =&gt; TEMPLATES =&gt; 選擇需要的下載</li>\n<li>打開 Creative Cloud =&gt; Assets =&gt; Market =&gt; 選擇需要的 =&gt; Add to Library</li>\n</ol>\n<h4>將 Vector Logo 放到版面編排</h4>\n<ol>\n<li>使用 svg 再放大也不會失真，所以最好使用 svg</li>\n<li>用 Rectangle Tool 拉出背景，選擇黑色，透明度選擇 81%，把位置放到最後面 =&gt; 按滑鼠右鍵 =&gt; Arrange =&gt; Send to Back</li>\n<li>放上 Navigation 文字 =&gt; ABOUT ME、CONTACT ME</li>\n</ol>\n<h4>使用 Adobe 顏色</h4>\n<ol>\n<li><a href=\"https://color.adobe.com/create/color-wheel/\" target=\"_blank\" rel=\"external\">Adobe 顏色選擇器</a></li>\n<li>進去網頁之後 =&gt; 選擇 Explore =&gt; 選擇喜歡的色盤 =&gt; 按下 Save =&gt; 選擇要存入的 Library =&gt; 就可以在 Illustrator 看到了</li>\n</ol>\n<h4>使用 Adobe Illustrator 來對應品牌顏色</h4>\n<ol>\n<li>把 Google Logo 放到頁面裡面 =&gt; 使用 Eyedropper Tool 點需要的顏色 =&gt; 在畫面左上方顏色選擇器的地方選擇 New Swatch =&gt; 輸入名稱 =&gt; 儲存到 Library</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/ui/UIDay1.png\">\n<hr>\n<h4>修改 Illustrator 環境</h4>\n<ol>\n<li>Illustrator CC =&gt; Preferences =&gt; Units，把 General、Stroke 和 Type 改為 Pixels</li>\n<li>Window =&gt; Workspace，選擇 Web，如果有問題，選擇 Reset Web</li>\n</ol>\n<h4>在 Illustrator 新增 sitemap</h4>\n<ol>\n<li>New =&gt; 選擇 A4</li>\n<li>打開 Adobe Muse =&gt; New =&gt; 直接新增</li>\n<li>修改 Muse 背景：Preferences =&gt; Color theme 挑一個</li>\n<li>用 Command + Shift + 4 截圖，把檔案貼到 Illustrator</li>\n</ol>\n<h4>Desktop、Tablet、Mobile 網頁設計用什麼螢幕尺寸</h4>\n<ol>\n<li><a href=\"http://mydevice.io/devices\" target=\"_blank\" rel=\"external\">了解裝置大小</a></li>\n<li>New =&gt; 選擇 Web =&gt; Common size =&gt; 將 width 改為 1200 =&gt; 新增</li>\n<li>開啟左邊選單列的 artboard tool =&gt; 選擇 New Artboard =&gt; 將寬度調為 768 px</li>\n<li>按住 Option 鍵 =&gt; 按鈕會變成有陰影的箭頭 =&gt; 拖移也可以產生新的 Artboard</li>\n<li>Window =&gt; Artboard =&gt; Artboard 出現在右邊選單，將 Artboard 改為以下\n<ul>\n<li>Desktop 1200px</li>\n<li>Tablet 768px</li>\n<li>Mobile 400px</li>\n</ul>\n</li>\n<li>Save =&gt; 按照預設值即可</li>\n</ol>\n<h4>什麼是 Grid System 和 Responsive Mobile &amp; Tablet Design？</h4>\n<ol>\n<li>12 個 column，不能用 13，因為難以切割</li>\n</ol>\n<h4>如何在 Illustrator 製作 12 個 column 的 responsive grid？</h4>\n<ol>\n<li>先選擇 Rectangle Tool =&gt; 內部選擇 None =&gt; 外部選擇黑色 =&gt; 把 Desktop 部分框起來</li>\n<li>選擇 Object =&gt; Path =&gt; Split Into Grid =&gt; Column number 選擇 12 =&gt; Gutter 選擇 30px =&gt;  Add Guides 要打勾 =&gt; 點選 OK</li>\n<li>選擇出現的 object =&gt; 按滑鼠右鍵 ungroup =&gt; 把畫面往下移動</li>\n<li>View =&gt; Make Guides =&gt; View =&gt; Lock Guides，然後線條就鎖住了</li>\n<li>把所有的線框起來 =&gt; 刪掉</li>\n<li>點選左邊選單的 Artboard，把左右兩邊邊界拉大</li>\n<li>Tablet 和 Mobile 步驟都跟上面一樣，但是 Tablet Column number 選擇 6，Mobile Column 選擇 2</li>\n</ol>\n<h4>建立 Wireframe</h4>\n<ol>\n<li><code>Command + ;</code> 可以關閉和開啟 Guides</li>\n<li>新增 Logo，左上角佔用 4 個 column</li>\n<li>新增 Navigation，右上角佔用 6 個 column</li>\n<li>新增 Hero box，放到 Logo 下方，佔用 12 個 column</li>\n<li>在 Hero box 裡面的第二個 column 新增佔用 5 個 column 的文字</li>\n<li><code>Command + Shift + .</code> 放大字體，<code>Command + Shift + ,</code> 縮小字體</li>\n<li>全選文字 =&gt; 點選右方段落 =&gt; 取消勾選 Hyphenate</li>\n<li>在文字下方新增佔用 3 個 column 的 button，文字打入 AMAZING CALL TO ACTION</li>\n<li>在 Hero box 下方新增 4 個 column 的區塊，裡面要打上叉叉，先用 Line Segment Tool 新增一條斜線，再用 Object =&gt; Transform =&gt; Reflect，產生相反的線，用 Transform 對齊，最後把區塊和叉叉組合在一起 =&gt; Object =&gt; Group</li>\n<li>最後複製三個 4 column 區塊，然後對齊，並間隔一個位置。</li>\n</ol>\n<h4>建立 Tablet 和 Mobile Wireframe</h4>\n<ol>\n<li>把 Guides 延長的方法：View =&gt; Guides =&gt; Unlock Guides =&gt; 把下面的線框起來 =&gt; 選擇 Direct Selection Tool =&gt; 把線拉長並按住 Shift (可以保持直線) =&gt; View =&gt; Guides =&gt; Lock Guides</li>\n<li>Mobile Hamburger Bar：用 Line Segment Tool 拉出直線 =&gt; 設定 Stroke 線為黑色且寬度設為 4px =&gt; 複製三個 =&gt; 用 transform 的 Vertical Distribute Center</li>\n<li>剩下的按照位置移動，並調整大小即可。</li>\n</ol>\n<h4>網頁設計的靈感</h4>\n<ol>\n<li><a href=\"https://www.awwwards.com/\" target=\"_blank\" rel=\"external\">AWWWARDS</a></li>\n</ol>\n<h4>使用 Illustrator 模板開始網頁設計</h4>\n<ol>\n<li>New =&gt; Web =&gt; TEMPLATES =&gt; 選擇需要的下載</li>\n<li>打開 Creative Cloud =&gt; Assets =&gt; Market =&gt; 選擇需要的 =&gt; Add to Library</li>\n</ol>\n<h4>將 Vector Logo 放到版面編排</h4>\n<ol>\n<li>使用 svg 再放大也不會失真，所以最好使用 svg</li>\n<li>用 Rectangle Tool 拉出背景，選擇黑色，透明度選擇 81%，把位置放到最後面 =&gt; 按滑鼠右鍵 =&gt; Arrange =&gt; Send to Back</li>\n<li>放上 Navigation 文字 =&gt; ABOUT ME、CONTACT ME</li>\n</ol>\n<h4>使用 Adobe 顏色</h4>\n<ol>\n<li><a href=\"https://color.adobe.com/create/color-wheel/\" target=\"_blank\" rel=\"external\">Adobe 顏色選擇器</a></li>\n<li>進去網頁之後 =&gt; 選擇 Explore =&gt; 選擇喜歡的色盤 =&gt; 按下 Save =&gt; 選擇要存入的 Library =&gt; 就可以在 Illustrator 看到了</li>\n</ol>\n<h4>使用 Adobe Illustrator 來對應品牌顏色</h4>\n<ol>\n<li>把 Google Logo 放到頁面裡面 =&gt; 使用 Eyedropper Tool 點需要的顏色 =&gt; 在畫面左上方顏色選擇器的地方選擇 New Swatch =&gt; 輸入名稱 =&gt; 儲存到 Library</li>\n</ol>\n"},{"title":"Wordpress 處理中文檔名上傳","thumbnail":["/images/wordpress.png"],"date":"2017-03-04T08:29:52.000Z","_content":"<img src=\"/images/wordpress.png\">\n\n***\n1. 修改  wp-admin\\includes\\file.php\n找：\n```\n$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );\n```\n在其後加上：\n```\n$fileTypeNameArr =explode(\".\" , $filename);\n$countNum=count($fileTypeNameArr)-1;\n$fileExt = $fileTypeNameArr[$countNum]; //取得所上傳文件後綴名\n$filename = time().'-'.rand(0,999999999).'.'.$fileExt;//將文件由原名改為時間戳\n```\n\n這樣上傳的文件會以時間戳為名稱儲存。\n上傳中文名的文件後，依然能夠將原中文文件名作為文件的標題。\n在後台管理界面顯示的是中文標題，因此對於使用沒有影響。\n","source":"_posts/Wordpress-處理中文檔名上傳.md","raw":"---\ntitle: Wordpress 處理中文檔名上傳\nthumbnail:\n  - /images/wordpress.png\ndate: 2017-03-04 16:29:52\ncategories: 技術分享\ntags:\n---\n<img src=\"/images/wordpress.png\">\n\n***\n1. 修改  wp-admin\\includes\\file.php\n找：\n```\n$filename = wp_unique_filename( $uploads['path'], $file['name'], $unique_filename_callback );\n```\n在其後加上：\n```\n$fileTypeNameArr =explode(\".\" , $filename);\n$countNum=count($fileTypeNameArr)-1;\n$fileExt = $fileTypeNameArr[$countNum]; //取得所上傳文件後綴名\n$filename = time().'-'.rand(0,999999999).'.'.$fileExt;//將文件由原名改為時間戳\n```\n\n這樣上傳的文件會以時間戳為名稱儲存。\n上傳中文名的文件後，依然能夠將原中文文件名作為文件的標題。\n在後台管理界面顯示的是中文標題，因此對於使用沒有影響。\n","slug":"Wordpress-處理中文檔名上傳","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwye00697ifazh42emng","content":"<img src=\"/images/wordpress.png\">\n<hr>\n<ol>\n<li>修改  wp-admin\\includes\\file.php<br>\n找：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = wp_unique_filename( $uploads[&apos;path&apos;], $file[&apos;name&apos;], $unique_filename_callback );</div></pre></td></tr></table></figure>\n<p>在其後加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fileTypeNameArr =explode(&quot;.&quot; , $filename);</div><div class=\"line\">$countNum=count($fileTypeNameArr)-1;</div><div class=\"line\">$fileExt = $fileTypeNameArr[$countNum]; //取得所上傳文件後綴名</div><div class=\"line\">$filename = time().&apos;-&apos;.rand(0,999999999).&apos;.&apos;.$fileExt;//將文件由原名改為時間戳</div></pre></td></tr></table></figure>\n<p>這樣上傳的文件會以時間戳為名稱儲存。<br>\n上傳中文名的文件後，依然能夠將原中文文件名作為文件的標題。<br>\n在後台管理界面顯示的是中文標題，因此對於使用沒有影響。</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/wordpress.png\">\n<hr>\n<ol>\n<li>修改  wp-admin\\includes\\file.php<br>\n找：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = wp_unique_filename( $uploads[&apos;path&apos;], $file[&apos;name&apos;], $unique_filename_callback );</div></pre></td></tr></table></figure>\n<p>在其後加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fileTypeNameArr =explode(&quot;.&quot; , $filename);</div><div class=\"line\">$countNum=count($fileTypeNameArr)-1;</div><div class=\"line\">$fileExt = $fileTypeNameArr[$countNum]; //取得所上傳文件後綴名</div><div class=\"line\">$filename = time().&apos;-&apos;.rand(0,999999999).&apos;.&apos;.$fileExt;//將文件由原名改為時間戳</div></pre></td></tr></table></figure>\n<p>這樣上傳的文件會以時間戳為名稱儲存。<br>\n上傳中文名的文件後，依然能夠將原中文文件名作為文件的標題。<br>\n在後台管理界面顯示的是中文標題，因此對於使用沒有影響。</p>\n"},{"title":"docker 快速學習自我挑戰 Day1","thumbnail":["/images/learning/docker/dockerday1.png"],"date":"2017-07-22T18:55:38.000Z","_content":"<img src=\"/images/learning/docker/dockerday1.png\">\n\n***\n### 課程 Roadmap\n#### Part I\n1. Install Docker\n2. Terminal/CLI Tools\n3. Download the Repo (github)\n#### Part II\n1. CURD of Containers\n2. Just A Process\n3. Shell into Container\n4. Docker Networking\n#### Part III\n1. Use Docker Hub\n2. Make Dockerfiles\n3. Push Custom Images\n4. Build Images\n#### Part IV\n1. Container Lifetime\n2. Docker Volumes\n3. Build Mounts\n#### Part V\n1. Do's and Don'ts\n2. docker-compose.yml\n3. docker-compose up\n#### Part VI (BIG ONE)\n1. Build A Cluster\n2. Overlay Networks\n3. Routing Mesh\n4. Swarm Services\n5. Stacks\n6. Secrets\n7. App Deploy Lifecycle\n### 安裝與版本\n#### 安裝\n1. [Win10](https://www.docker.com/docker-windows)\n2. [Win8.1 以前的版本](https://www.docker.com/products/docker-toolbox) \n注意：範例所使用的 http://localhost，必須要改為 http://192.168.99.100\n3. [Mac](https://www.docker.com/docker-mac)，如果使用低於版本 OSX Yosemite 10.10.3，改用 [Toolbox](https://www.docker.com/products/docker-toolbox)\n4. 千萬不要使用 `apt/yum install docker`，請使用自動化安裝 `curl -sSL https://get.docker.com/ | sh`\n#### 版本\n1. Docker Engine 現在改為 Docker CE (Community Edition)\n2. Docker Data Center 現在改為 Docker EE (Enterprise Edition)\n3. Docker 的版本改為 `YY.MM` 的命名方式\n### 創建和使用 Container\n#### 檢查 Docker 的安裝和設定\n1. `docker version` 檢查版本\nClient 的版本是 Command Line 的版本，Server 則被稱為 docker engine，docker engine 是在背景執行的 daemon，而我們執行的 Command Line 就跟伺服器的 API 來進行溝通，\n2. `docker info` 取得更詳細的資訊\n3. docker 指令格式 `docker <command> <sub-command> (options)`\n#### 開始使用 Nginx Server\n1. Image 是我們想要跑的應用程式\n2. Container 是 image 所產生的 instance，並用進程的方式執行\n3. 可以使用同個 image 來產生很多 Container\n4. `docker container run --publish 80:80 nginx` 新建 ngix server，執行完成之後可以直接用瀏覽器看到 nginx，語法背後執行的邏輯如下：\n    - 從 Docker Hub 下載「nginx」的 image\n    - 從這個 image 開始一個新的 container\n    - 開啟本機端的 80 port\n    - 將 80 port 路由到 container 的 80 port\n5. `docker container run --publish 80:80 --detach nginx` 加上 detach 可以讓 docker 在背景執行，這個指令會 echo 出 container ID\n6. `docker container ls` 列出所有的 container\n7. `docker container stop 889` 停止某個 container，stop 後面加上 id 前三碼 (只要是唯一即可，若三碼非唯一，則用四碼，後面以此類推)\n8. `docker container ls -a` 列出所有(包含關閉的) container\n9. 當使用 `run` 的時候，一定會新增新的 container，但是當使用 `start` 的時候，則會開啟一個存在但關閉的 container\n10. `docker container run --publish 80:80 --detach --name webhost nginx` 新增客製化名稱的 container\n11. `docker container logs webhost` 檢查 container 名稱為「webhost」的 log 檔\n12. `docker container top webhost` 檢查 container 名稱為「webhost」的 process\n13. `docker container rm 2e5 889 dc1` 刪除所選的 container\n14. 如果有在執行中的 container，則要強制刪除 `docker container rm -f 2e5`\n#### \"docker container run\" 做了什麼事情？\n1. 在本地 image cache 搜尋 image\n2. 如果找不到，則搜尋遠端的 image repository (預設為 Docker Hub)\n3. 下載最新版本 (nginx：預設為最新版，可以使用 nginx:版本號來取得所需版本)\n4. 根據拿到的 image 來創建新的 container，並準備開始\n5. 在 docker engine 裡面給 container 私有網路上的虛擬 ip\n6. 開啟 host 端的 80 port 並轉址到 container 的 80 port，如果沒有使用 `--publish` 則不會打開任何 port\n7. 藉由使用 image Dockerfile 裡的 **CMD** 開啟 container\n8. `docker container run --publish 8080:80 --name webhost -d nginx:1.11 nginx -T`\n    - host port 可以改為 8080\n    - 可修改 nginx 的版本為 1.11  \n    - `nginx -T` 修改開啟時的 CMD\n#### Container VS. VM\n1. Container 不是縮小版的 VM\n    - Container 只是 Process\n    - Container 能夠存取的資源有限\n    - 當 Process 暫停的時候離開\n2. 用命令提示字元了解更多\n    - `docker run --name mongo -d mongo` 新建一個 mongo DB 的 container 並在背景執行\n    - `ps aux` 檢視所有正在執行的程式，`docker top mongo` 檢視服務的狀態\n    - `ps aux | grep mongo` 搜尋 mongo 的服務\n    - `docker stop mongo` 關閉 mongo，檢視和搜尋都會找不到該服務\n    - `docker start mongo` 再次打開 mongo，檢視和搜尋都又會再找到該服務","source":"_posts/docker-快速學習自我挑戰-Day1.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day1\nthumbnail:\n  - /images/learning/docker/dockerday1.png\ndate: 2017-07-23 02:55:38\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday1.png\">\n\n***\n### 課程 Roadmap\n#### Part I\n1. Install Docker\n2. Terminal/CLI Tools\n3. Download the Repo (github)\n#### Part II\n1. CURD of Containers\n2. Just A Process\n3. Shell into Container\n4. Docker Networking\n#### Part III\n1. Use Docker Hub\n2. Make Dockerfiles\n3. Push Custom Images\n4. Build Images\n#### Part IV\n1. Container Lifetime\n2. Docker Volumes\n3. Build Mounts\n#### Part V\n1. Do's and Don'ts\n2. docker-compose.yml\n3. docker-compose up\n#### Part VI (BIG ONE)\n1. Build A Cluster\n2. Overlay Networks\n3. Routing Mesh\n4. Swarm Services\n5. Stacks\n6. Secrets\n7. App Deploy Lifecycle\n### 安裝與版本\n#### 安裝\n1. [Win10](https://www.docker.com/docker-windows)\n2. [Win8.1 以前的版本](https://www.docker.com/products/docker-toolbox) \n注意：範例所使用的 http://localhost，必須要改為 http://192.168.99.100\n3. [Mac](https://www.docker.com/docker-mac)，如果使用低於版本 OSX Yosemite 10.10.3，改用 [Toolbox](https://www.docker.com/products/docker-toolbox)\n4. 千萬不要使用 `apt/yum install docker`，請使用自動化安裝 `curl -sSL https://get.docker.com/ | sh`\n#### 版本\n1. Docker Engine 現在改為 Docker CE (Community Edition)\n2. Docker Data Center 現在改為 Docker EE (Enterprise Edition)\n3. Docker 的版本改為 `YY.MM` 的命名方式\n### 創建和使用 Container\n#### 檢查 Docker 的安裝和設定\n1. `docker version` 檢查版本\nClient 的版本是 Command Line 的版本，Server 則被稱為 docker engine，docker engine 是在背景執行的 daemon，而我們執行的 Command Line 就跟伺服器的 API 來進行溝通，\n2. `docker info` 取得更詳細的資訊\n3. docker 指令格式 `docker <command> <sub-command> (options)`\n#### 開始使用 Nginx Server\n1. Image 是我們想要跑的應用程式\n2. Container 是 image 所產生的 instance，並用進程的方式執行\n3. 可以使用同個 image 來產生很多 Container\n4. `docker container run --publish 80:80 nginx` 新建 ngix server，執行完成之後可以直接用瀏覽器看到 nginx，語法背後執行的邏輯如下：\n    - 從 Docker Hub 下載「nginx」的 image\n    - 從這個 image 開始一個新的 container\n    - 開啟本機端的 80 port\n    - 將 80 port 路由到 container 的 80 port\n5. `docker container run --publish 80:80 --detach nginx` 加上 detach 可以讓 docker 在背景執行，這個指令會 echo 出 container ID\n6. `docker container ls` 列出所有的 container\n7. `docker container stop 889` 停止某個 container，stop 後面加上 id 前三碼 (只要是唯一即可，若三碼非唯一，則用四碼，後面以此類推)\n8. `docker container ls -a` 列出所有(包含關閉的) container\n9. 當使用 `run` 的時候，一定會新增新的 container，但是當使用 `start` 的時候，則會開啟一個存在但關閉的 container\n10. `docker container run --publish 80:80 --detach --name webhost nginx` 新增客製化名稱的 container\n11. `docker container logs webhost` 檢查 container 名稱為「webhost」的 log 檔\n12. `docker container top webhost` 檢查 container 名稱為「webhost」的 process\n13. `docker container rm 2e5 889 dc1` 刪除所選的 container\n14. 如果有在執行中的 container，則要強制刪除 `docker container rm -f 2e5`\n#### \"docker container run\" 做了什麼事情？\n1. 在本地 image cache 搜尋 image\n2. 如果找不到，則搜尋遠端的 image repository (預設為 Docker Hub)\n3. 下載最新版本 (nginx：預設為最新版，可以使用 nginx:版本號來取得所需版本)\n4. 根據拿到的 image 來創建新的 container，並準備開始\n5. 在 docker engine 裡面給 container 私有網路上的虛擬 ip\n6. 開啟 host 端的 80 port 並轉址到 container 的 80 port，如果沒有使用 `--publish` 則不會打開任何 port\n7. 藉由使用 image Dockerfile 裡的 **CMD** 開啟 container\n8. `docker container run --publish 8080:80 --name webhost -d nginx:1.11 nginx -T`\n    - host port 可以改為 8080\n    - 可修改 nginx 的版本為 1.11  \n    - `nginx -T` 修改開啟時的 CMD\n#### Container VS. VM\n1. Container 不是縮小版的 VM\n    - Container 只是 Process\n    - Container 能夠存取的資源有限\n    - 當 Process 暫停的時候離開\n2. 用命令提示字元了解更多\n    - `docker run --name mongo -d mongo` 新建一個 mongo DB 的 container 並在背景執行\n    - `ps aux` 檢視所有正在執行的程式，`docker top mongo` 檢視服務的狀態\n    - `ps aux | grep mongo` 搜尋 mongo 的服務\n    - `docker stop mongo` 關閉 mongo，檢視和搜尋都會找不到該服務\n    - `docker start mongo` 再次打開 mongo，檢視和搜尋都又會再找到該服務","slug":"docker-快速學習自我挑戰-Day1","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyf006c7ifax7z6a8kb","content":"<img src=\"/images/learning/docker/dockerday1.png\">\n<hr>\n<h3>課程 Roadmap</h3>\n<h4>Part I</h4>\n<ol>\n<li>Install Docker</li>\n<li>Terminal/CLI Tools</li>\n<li>Download the Repo (github)</li>\n</ol>\n<h4>Part II</h4>\n<ol>\n<li>CURD of Containers</li>\n<li>Just A Process</li>\n<li>Shell into Container</li>\n<li>Docker Networking</li>\n</ol>\n<h4>Part III</h4>\n<ol>\n<li>Use Docker Hub</li>\n<li>Make Dockerfiles</li>\n<li>Push Custom Images</li>\n<li>Build Images</li>\n</ol>\n<h4>Part IV</h4>\n<ol>\n<li>Container Lifetime</li>\n<li>Docker Volumes</li>\n<li>Build Mounts</li>\n</ol>\n<h4>Part V</h4>\n<ol>\n<li>Do’s and Don’ts</li>\n<li>docker-compose.yml</li>\n<li>docker-compose up</li>\n</ol>\n<h4>Part VI (BIG ONE)</h4>\n<ol>\n<li>Build A Cluster</li>\n<li>Overlay Networks</li>\n<li>Routing Mesh</li>\n<li>Swarm Services</li>\n<li>Stacks</li>\n<li>Secrets</li>\n<li>App Deploy Lifecycle</li>\n</ol>\n<h3>安裝與版本</h3>\n<h4>安裝</h4>\n<ol>\n<li><a href=\"https://www.docker.com/docker-windows\" target=\"_blank\" rel=\"external\">Win10</a></li>\n<li><a href=\"https://www.docker.com/products/docker-toolbox\" target=\"_blank\" rel=\"external\">Win8.1 以前的版本</a><br>\n注意：範例所使用的 <a href=\"http://localhost\" target=\"_blank\" rel=\"external\">http://localhost</a>，必須要改為 <a href=\"http://192.168.99.100\" target=\"_blank\" rel=\"external\">http://192.168.99.100</a></li>\n<li><a href=\"https://www.docker.com/docker-mac\" target=\"_blank\" rel=\"external\">Mac</a>，如果使用低於版本 OSX Yosemite 10.10.3，改用 <a href=\"https://www.docker.com/products/docker-toolbox\" target=\"_blank\" rel=\"external\">Toolbox</a></li>\n<li>千萬不要使用 <code>apt/yum install docker</code>，請使用自動化安裝 <code>curl -sSL https://get.docker.com/ | sh</code></li>\n</ol>\n<h4>版本</h4>\n<ol>\n<li>Docker Engine 現在改為 Docker CE (Community Edition)</li>\n<li>Docker Data Center 現在改為 Docker EE (Enterprise Edition)</li>\n<li>Docker 的版本改為 <code>YY.MM</code> 的命名方式</li>\n</ol>\n<h3>創建和使用 Container</h3>\n<h4>檢查 Docker 的安裝和設定</h4>\n<ol>\n<li><code>docker version</code> 檢查版本<br>\nClient 的版本是 Command Line 的版本，Server 則被稱為 docker engine，docker engine 是在背景執行的 daemon，而我們執行的 Command Line 就跟伺服器的 API 來進行溝通，</li>\n<li><code>docker info</code> 取得更詳細的資訊</li>\n<li>docker 指令格式 <code>docker &lt;command&gt; &lt;sub-command&gt; (options)</code></li>\n</ol>\n<h4>開始使用 Nginx Server</h4>\n<ol>\n<li>Image 是我們想要跑的應用程式</li>\n<li>Container 是 image 所產生的 instance，並用進程的方式執行</li>\n<li>可以使用同個 image 來產生很多 Container</li>\n<li><code>docker container run --publish 80:80 nginx</code> 新建 ngix server，執行完成之後可以直接用瀏覽器看到 nginx，語法背後執行的邏輯如下：\n<ul>\n<li>從 Docker Hub 下載「nginx」的 image</li>\n<li>從這個 image 開始一個新的 container</li>\n<li>開啟本機端的 80 port</li>\n<li>將 80 port 路由到 container 的 80 port</li>\n</ul>\n</li>\n<li><code>docker container run --publish 80:80 --detach nginx</code> 加上 detach 可以讓 docker 在背景執行，這個指令會 echo 出 container ID</li>\n<li><code>docker container ls</code> 列出所有的 container</li>\n<li><code>docker container stop 889</code> 停止某個 container，stop 後面加上 id 前三碼 (只要是唯一即可，若三碼非唯一，則用四碼，後面以此類推)</li>\n<li><code>docker container ls -a</code> 列出所有(包含關閉的) container</li>\n<li>當使用 <code>run</code> 的時候，一定會新增新的 container，但是當使用 <code>start</code> 的時候，則會開啟一個存在但關閉的 container</li>\n<li><code>docker container run --publish 80:80 --detach --name webhost nginx</code> 新增客製化名稱的 container</li>\n<li><code>docker container logs webhost</code> 檢查 container 名稱為「webhost」的 log 檔</li>\n<li><code>docker container top webhost</code> 檢查 container 名稱為「webhost」的 process</li>\n<li><code>docker container rm 2e5 889 dc1</code> 刪除所選的 container</li>\n<li>如果有在執行中的 container，則要強制刪除 <code>docker container rm -f 2e5</code></li>\n</ol>\n<h4>“docker container run” 做了什麼事情？</h4>\n<ol>\n<li>在本地 image cache 搜尋 image</li>\n<li>如果找不到，則搜尋遠端的 image repository (預設為 Docker Hub)</li>\n<li>下載最新版本 (nginx：預設為最新版，可以使用 nginx:版本號來取得所需版本)</li>\n<li>根據拿到的 image 來創建新的 container，並準備開始</li>\n<li>在 docker engine 裡面給 container 私有網路上的虛擬 ip</li>\n<li>開啟 host 端的 80 port 並轉址到 container 的 80 port，如果沒有使用 <code>--publish</code> 則不會打開任何 port</li>\n<li>藉由使用 image Dockerfile 裡的 <strong>CMD</strong> 開啟 container</li>\n<li><code>docker container run --publish 8080:80 --name webhost -d nginx:1.11 nginx -T</code>\n<ul>\n<li>host port 可以改為 8080</li>\n<li>可修改 nginx 的版本為 1.11</li>\n<li><code>nginx -T</code> 修改開啟時的 CMD</li>\n</ul>\n</li>\n</ol>\n<h4>Container VS. VM</h4>\n<ol>\n<li>Container 不是縮小版的 VM\n<ul>\n<li>Container 只是 Process</li>\n<li>Container 能夠存取的資源有限</li>\n<li>當 Process 暫停的時候離開</li>\n</ul>\n</li>\n<li>用命令提示字元了解更多\n<ul>\n<li><code>docker run --name mongo -d mongo</code> 新建一個 mongo DB 的 container 並在背景執行</li>\n<li><code>ps aux</code> 檢視所有正在執行的程式，<code>docker top mongo</code> 檢視服務的狀態</li>\n<li><code>ps aux | grep mongo</code> 搜尋 mongo 的服務</li>\n<li><code>docker stop mongo</code> 關閉 mongo，檢視和搜尋都會找不到該服務</li>\n<li><code>docker start mongo</code> 再次打開 mongo，檢視和搜尋都又會再找到該服務</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday1.png\">\n<hr>\n<h3>課程 Roadmap</h3>\n<h4>Part I</h4>\n<ol>\n<li>Install Docker</li>\n<li>Terminal/CLI Tools</li>\n<li>Download the Repo (github)</li>\n</ol>\n<h4>Part II</h4>\n<ol>\n<li>CURD of Containers</li>\n<li>Just A Process</li>\n<li>Shell into Container</li>\n<li>Docker Networking</li>\n</ol>\n<h4>Part III</h4>\n<ol>\n<li>Use Docker Hub</li>\n<li>Make Dockerfiles</li>\n<li>Push Custom Images</li>\n<li>Build Images</li>\n</ol>\n<h4>Part IV</h4>\n<ol>\n<li>Container Lifetime</li>\n<li>Docker Volumes</li>\n<li>Build Mounts</li>\n</ol>\n<h4>Part V</h4>\n<ol>\n<li>Do’s and Don’ts</li>\n<li>docker-compose.yml</li>\n<li>docker-compose up</li>\n</ol>\n<h4>Part VI (BIG ONE)</h4>\n<ol>\n<li>Build A Cluster</li>\n<li>Overlay Networks</li>\n<li>Routing Mesh</li>\n<li>Swarm Services</li>\n<li>Stacks</li>\n<li>Secrets</li>\n<li>App Deploy Lifecycle</li>\n</ol>\n<h3>安裝與版本</h3>\n<h4>安裝</h4>\n<ol>\n<li><a href=\"https://www.docker.com/docker-windows\" target=\"_blank\" rel=\"external\">Win10</a></li>\n<li><a href=\"https://www.docker.com/products/docker-toolbox\" target=\"_blank\" rel=\"external\">Win8.1 以前的版本</a><br>\n注意：範例所使用的 <a href=\"http://localhost\" target=\"_blank\" rel=\"external\">http://localhost</a>，必須要改為 <a href=\"http://192.168.99.100\" target=\"_blank\" rel=\"external\">http://192.168.99.100</a></li>\n<li><a href=\"https://www.docker.com/docker-mac\" target=\"_blank\" rel=\"external\">Mac</a>，如果使用低於版本 OSX Yosemite 10.10.3，改用 <a href=\"https://www.docker.com/products/docker-toolbox\" target=\"_blank\" rel=\"external\">Toolbox</a></li>\n<li>千萬不要使用 <code>apt/yum install docker</code>，請使用自動化安裝 <code>curl -sSL https://get.docker.com/ | sh</code></li>\n</ol>\n<h4>版本</h4>\n<ol>\n<li>Docker Engine 現在改為 Docker CE (Community Edition)</li>\n<li>Docker Data Center 現在改為 Docker EE (Enterprise Edition)</li>\n<li>Docker 的版本改為 <code>YY.MM</code> 的命名方式</li>\n</ol>\n<h3>創建和使用 Container</h3>\n<h4>檢查 Docker 的安裝和設定</h4>\n<ol>\n<li><code>docker version</code> 檢查版本<br>\nClient 的版本是 Command Line 的版本，Server 則被稱為 docker engine，docker engine 是在背景執行的 daemon，而我們執行的 Command Line 就跟伺服器的 API 來進行溝通，</li>\n<li><code>docker info</code> 取得更詳細的資訊</li>\n<li>docker 指令格式 <code>docker &lt;command&gt; &lt;sub-command&gt; (options)</code></li>\n</ol>\n<h4>開始使用 Nginx Server</h4>\n<ol>\n<li>Image 是我們想要跑的應用程式</li>\n<li>Container 是 image 所產生的 instance，並用進程的方式執行</li>\n<li>可以使用同個 image 來產生很多 Container</li>\n<li><code>docker container run --publish 80:80 nginx</code> 新建 ngix server，執行完成之後可以直接用瀏覽器看到 nginx，語法背後執行的邏輯如下：\n<ul>\n<li>從 Docker Hub 下載「nginx」的 image</li>\n<li>從這個 image 開始一個新的 container</li>\n<li>開啟本機端的 80 port</li>\n<li>將 80 port 路由到 container 的 80 port</li>\n</ul>\n</li>\n<li><code>docker container run --publish 80:80 --detach nginx</code> 加上 detach 可以讓 docker 在背景執行，這個指令會 echo 出 container ID</li>\n<li><code>docker container ls</code> 列出所有的 container</li>\n<li><code>docker container stop 889</code> 停止某個 container，stop 後面加上 id 前三碼 (只要是唯一即可，若三碼非唯一，則用四碼，後面以此類推)</li>\n<li><code>docker container ls -a</code> 列出所有(包含關閉的) container</li>\n<li>當使用 <code>run</code> 的時候，一定會新增新的 container，但是當使用 <code>start</code> 的時候，則會開啟一個存在但關閉的 container</li>\n<li><code>docker container run --publish 80:80 --detach --name webhost nginx</code> 新增客製化名稱的 container</li>\n<li><code>docker container logs webhost</code> 檢查 container 名稱為「webhost」的 log 檔</li>\n<li><code>docker container top webhost</code> 檢查 container 名稱為「webhost」的 process</li>\n<li><code>docker container rm 2e5 889 dc1</code> 刪除所選的 container</li>\n<li>如果有在執行中的 container，則要強制刪除 <code>docker container rm -f 2e5</code></li>\n</ol>\n<h4>“docker container run” 做了什麼事情？</h4>\n<ol>\n<li>在本地 image cache 搜尋 image</li>\n<li>如果找不到，則搜尋遠端的 image repository (預設為 Docker Hub)</li>\n<li>下載最新版本 (nginx：預設為最新版，可以使用 nginx:版本號來取得所需版本)</li>\n<li>根據拿到的 image 來創建新的 container，並準備開始</li>\n<li>在 docker engine 裡面給 container 私有網路上的虛擬 ip</li>\n<li>開啟 host 端的 80 port 並轉址到 container 的 80 port，如果沒有使用 <code>--publish</code> 則不會打開任何 port</li>\n<li>藉由使用 image Dockerfile 裡的 <strong>CMD</strong> 開啟 container</li>\n<li><code>docker container run --publish 8080:80 --name webhost -d nginx:1.11 nginx -T</code>\n<ul>\n<li>host port 可以改為 8080</li>\n<li>可修改 nginx 的版本為 1.11</li>\n<li><code>nginx -T</code> 修改開啟時的 CMD</li>\n</ul>\n</li>\n</ol>\n<h4>Container VS. VM</h4>\n<ol>\n<li>Container 不是縮小版的 VM\n<ul>\n<li>Container 只是 Process</li>\n<li>Container 能夠存取的資源有限</li>\n<li>當 Process 暫停的時候離開</li>\n</ul>\n</li>\n<li>用命令提示字元了解更多\n<ul>\n<li><code>docker run --name mongo -d mongo</code> 新建一個 mongo DB 的 container 並在背景執行</li>\n<li><code>ps aux</code> 檢視所有正在執行的程式，<code>docker top mongo</code> 檢視服務的狀態</li>\n<li><code>ps aux | grep mongo</code> 搜尋 mongo 的服務</li>\n<li><code>docker stop mongo</code> 關閉 mongo，檢視和搜尋都會找不到該服務</li>\n<li><code>docker start mongo</code> 再次打開 mongo，檢視和搜尋都又會再找到該服務</li>\n</ul>\n</li>\n</ol>\n"},{"title":"docker 快速學習自我挑戰 Day2","thumbnail":["/images/learning/docker/dockerday2.png"],"date":"2017-07-24T07:09:19.000Z","_content":"<img src=\"/images/learning/docker/dockerday2.png\">\n\n***\n### 安裝與版本\n#### Windows Container：Docker 不再只能在 Linux 上面執行\n1. 目前 17 版已經可以在 windows 上執行 docker，但有些功能不能使用，包括 Swarm Overlay、Secret...等等\n2. 可以參考以下影片\n    - [Windows Containers and Docker: 101](https://www.youtube.com/watch?v=066-9yw8-7c)\n    - [Beyond \\ - the path to Windows and Linux parity in Docker](https://www.youtube.com/watch?v=4ZY_4OeyJsw)\n    - [Docker + Microsoft - Investing in the Future of your Applications](https://www.youtube.com/watch?v=QASAqcuuzgI)\n#### 作業 - 管理多個 container\n1. Docker 小幫手 (1) [官方文件](https://docs.docker.com/) (2) `--help`\n2. 運行 nginx、MySQL、httpd(apache) server\n3. 運行以上軟體，並使用 `--detached` (或 `-d`)，並用 `--name` 命名\n4. nginx 要使用 80:80，httpd 用 8080:80，MySQL 用 3306:3306\n5. 當執行 MySQL，使用 --environment (或 `-e`) 將 `MYSQL_RANDOM_ROOT_PASSWORD=yes` 參數傳進去 container\n6. 在 MySQL 使用 `docker container logs` 來找到創建時所產生的隨機密碼\n7. 使用 `docker container stop` 和 `docker container rm` 將全部的資料清除\n8. 在清除之前，使用 `docker container ls` 確定資料的狀態是否正確\n9. 可以使用 `curl localhost` 會出現網頁 index 的檔案\n#### Container 裡面發生了什麼事情呢？CLI 進程監控\n1. `docker container top` 某一個 container 的進程清單\n2. `docker container inspect` 某一個 container 的設定細節\n3. `docker container stats` 所有 container 的效能統計\n#### 在 Container 裡面取得 Shell：不需要使用 SSH\n1. `docker container run -it` 以交互方式開啟新的 container\n2. `docker container exec -it` 在已存在的 container 執行額外的 command\n3. 在眾多 container 裡面有不同的 Linux 發行版本\n4. `docker container run -it --name proxy nginx bash` 進去 container 裡面\n5. `docker container run -it --name ubuntu ubuntu` 直接執行，不需加 bash 結果會一樣，因為預設就是 bash\n6. `docker container start -ai ubuntu` 如果要重新開機，可以使用這個指令\n7. Alpine Linux：一個小型且以安全為目的的 Linux 分支 `docker pull alpine` 下載最新的 alpine\n8. `docker container run -it alpine sh` 因為沒有 bash，所以用 sh\n9. [套件管理基本](https://www.digitalocean.com/community/tutorials/package-management-basics-apt-yum-dnf-pkg)\n#### Docker 網路：眾多 Container 裡面的私有和公有網路的溝通觀念\n1. 觀念\n    - `docker container run -p` p 就是你機器上的 port\n    - 對於本地端的開發/測試，網路通常『只是堪用』\n    - `docker container port <container>` 這個指令可以快速輸出哪一個 port 為這個 container 開啟\n    - 學習 Docker 網路、虛擬網路和封包如何傳遞\n    - 了解網路封包如何在 Docker 之間移動\n2. 預設 Docker 網路\n    - 每一個 container 都會連接到虛擬網路 「橋(bridge)」\n    - 每一個虛擬網路路由都會透過 NAT 防火牆轉址到 host IP\n    - 在虛擬網路上所有的 container 都可以互相溝通，而不需要 `-p`\n    - 最好的練習就是對個別的 app 新增虛擬網路\n        * MySQL 和 php/apache 用「my\\_web_app」網路\n        * Mongo 和 nodejs 用 「my_api」網路\n    - 「含電池，但可拆卸 (battery included, But Removable)」\n        * 在多數情況下，預設會運行的很好，但很容易換掉客製化的 ports\n    - 新建虛擬網路\n    - 連結 container 們到大於1(或者沒有)的虛擬網路\n    - 省略虛擬網路且使用 host IP (--net=host)\n    - 使用不同的 Docker 網路驅動來取得新的能力\n#### 錯誤修改：Nginx 官方 image 移除 Ping 功能\n1. 因為最新 2017 官方修改 ping 功能，所以把 `docker container run <stuff> nginx`，要把 `nginx` 取代為 `nginx:alpine`，這樣就可以繼續使用 ping 的 command\n#### Docker 網路：虛擬網路的 CLI 管理\n1. `docker network ls` 顯示所有網路\n2. `docker network inspect` 檢查特定網路\n3. `docker network create --driver` 創建一個網路\n4. `docker network connect` 連結一個網路到 container\n5. `docker network disconnect` 從 container 移除一個網路\n6. 在同個 Docker 網路創建前端/後端應用，這樣他們之間的溝通就不會留給 host\n7. 所有的在外部暴露的 port 預設會關閉，需要手動使用 `-p` 打開，這樣才有更好的預設安全\n8. 接下來後面要提到的 Swarm 和 Overlay 網路更好\n#### Docker 網路：DNS 和 container 如何找到彼此\n1. 了解 DNS 是如何成為容易交互溝通的關鍵\n2. 觀察客製化的網路預設是如何運作的\n3. 學習如何使用 `--link` 來讓 DNS 在預設橋接網路生效\n4. 請遺忘 IP：固定 ip 和使用 ip 來讓 container 之間溝通是一種反面模式，盡可能地避免這樣的事情發生\n5. Docker DNS：Docker daemon 有內建的 DNS server，而Container 會預設使用它\n6. DNS 預設名稱：Docker 預設 hostname 到 container 的名字，但是還是可以設定 aliases\n7. 如果使用客製網路，友善的 DNS 名稱是內建的\n8. 這些使用 Docker Compose 都會更簡單\n#### 作業：使用 container 做 CLI testing\n1. 知道如何使用 -it 在 container 裡面使用 shell\n2. 了解基本的 linux distribution，像是 Ubuntu 和 CentOS\n3. 了解如何執行 container\n4. 作業\n    - 使用不同的 distro container 來檢查 curl cli 工具版本\n    - 使用兩個不同的終端視窗來開啟 bash，使用 -it 來啟動 **centos:7** 和 **ubuntu:14.04**\n    - 學習 `docker container --rm` 選項，這樣可以 save cleanup\n    - 確定最新版本的 curl 有安裝在相對應的 distro\n        * ubuntu: `apt-get update && apt-get install curl`\n        * centos: `yum update curl`\n    - 檢查 `curl --version`\n#### 作業：DNS Round Robin 測試\n1. 了解如何使用 `-it` 在 container 裡面使用 shell\n2. 了解基本的 linux distribution，像是 Ubuntu 和 CentOS\n3. 了解如何執行 container\n4. 了解 DNS 紀錄的基礎\n5. 從 Docker Engine 1.11 之後，我們可以創建很多 container 到一個網路且傳遞到相關的 DNS 位址\n6. 創建一個新的虛擬網路(預設 bridge driver)\n7. 從 `elasticsearch:2` 的 image 創建兩個 container\n8. 搜尋和使用 `--net-alias search`，當我們創建 container 的時候，同時給他們額外的 DNS name 去響應\n9. 執行 `alpine nslookup search` 並加上 `--net` 來觀察兩個使用相同 DNS 名稱的 container 列表\n10. 多次執行 `centos curl -s search:9200` 並加上 `--net`，直到觀察到**名稱**欄位出現\n#### 完成作業\n1. 執行兩次 `docker container run -d --net dude --net-alias search elasticsearch:2`，開啟兩個 container\n2. `docker container run --rm --net dude alpine nslookup search` 觀察兩個使用相同 DNS 名稱的 container 列表\n3. `docker container run --rm --net dude centos curl -s search:9200`","source":"_posts/docker-快速學習自我挑戰-Day2.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day2\nthumbnail:\n  - /images/learning/docker/dockerday2.png\ndate: 2017-07-24 15:09:19\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday2.png\">\n\n***\n### 安裝與版本\n#### Windows Container：Docker 不再只能在 Linux 上面執行\n1. 目前 17 版已經可以在 windows 上執行 docker，但有些功能不能使用，包括 Swarm Overlay、Secret...等等\n2. 可以參考以下影片\n    - [Windows Containers and Docker: 101](https://www.youtube.com/watch?v=066-9yw8-7c)\n    - [Beyond \\ - the path to Windows and Linux parity in Docker](https://www.youtube.com/watch?v=4ZY_4OeyJsw)\n    - [Docker + Microsoft - Investing in the Future of your Applications](https://www.youtube.com/watch?v=QASAqcuuzgI)\n#### 作業 - 管理多個 container\n1. Docker 小幫手 (1) [官方文件](https://docs.docker.com/) (2) `--help`\n2. 運行 nginx、MySQL、httpd(apache) server\n3. 運行以上軟體，並使用 `--detached` (或 `-d`)，並用 `--name` 命名\n4. nginx 要使用 80:80，httpd 用 8080:80，MySQL 用 3306:3306\n5. 當執行 MySQL，使用 --environment (或 `-e`) 將 `MYSQL_RANDOM_ROOT_PASSWORD=yes` 參數傳進去 container\n6. 在 MySQL 使用 `docker container logs` 來找到創建時所產生的隨機密碼\n7. 使用 `docker container stop` 和 `docker container rm` 將全部的資料清除\n8. 在清除之前，使用 `docker container ls` 確定資料的狀態是否正確\n9. 可以使用 `curl localhost` 會出現網頁 index 的檔案\n#### Container 裡面發生了什麼事情呢？CLI 進程監控\n1. `docker container top` 某一個 container 的進程清單\n2. `docker container inspect` 某一個 container 的設定細節\n3. `docker container stats` 所有 container 的效能統計\n#### 在 Container 裡面取得 Shell：不需要使用 SSH\n1. `docker container run -it` 以交互方式開啟新的 container\n2. `docker container exec -it` 在已存在的 container 執行額外的 command\n3. 在眾多 container 裡面有不同的 Linux 發行版本\n4. `docker container run -it --name proxy nginx bash` 進去 container 裡面\n5. `docker container run -it --name ubuntu ubuntu` 直接執行，不需加 bash 結果會一樣，因為預設就是 bash\n6. `docker container start -ai ubuntu` 如果要重新開機，可以使用這個指令\n7. Alpine Linux：一個小型且以安全為目的的 Linux 分支 `docker pull alpine` 下載最新的 alpine\n8. `docker container run -it alpine sh` 因為沒有 bash，所以用 sh\n9. [套件管理基本](https://www.digitalocean.com/community/tutorials/package-management-basics-apt-yum-dnf-pkg)\n#### Docker 網路：眾多 Container 裡面的私有和公有網路的溝通觀念\n1. 觀念\n    - `docker container run -p` p 就是你機器上的 port\n    - 對於本地端的開發/測試，網路通常『只是堪用』\n    - `docker container port <container>` 這個指令可以快速輸出哪一個 port 為這個 container 開啟\n    - 學習 Docker 網路、虛擬網路和封包如何傳遞\n    - 了解網路封包如何在 Docker 之間移動\n2. 預設 Docker 網路\n    - 每一個 container 都會連接到虛擬網路 「橋(bridge)」\n    - 每一個虛擬網路路由都會透過 NAT 防火牆轉址到 host IP\n    - 在虛擬網路上所有的 container 都可以互相溝通，而不需要 `-p`\n    - 最好的練習就是對個別的 app 新增虛擬網路\n        * MySQL 和 php/apache 用「my\\_web_app」網路\n        * Mongo 和 nodejs 用 「my_api」網路\n    - 「含電池，但可拆卸 (battery included, But Removable)」\n        * 在多數情況下，預設會運行的很好，但很容易換掉客製化的 ports\n    - 新建虛擬網路\n    - 連結 container 們到大於1(或者沒有)的虛擬網路\n    - 省略虛擬網路且使用 host IP (--net=host)\n    - 使用不同的 Docker 網路驅動來取得新的能力\n#### 錯誤修改：Nginx 官方 image 移除 Ping 功能\n1. 因為最新 2017 官方修改 ping 功能，所以把 `docker container run <stuff> nginx`，要把 `nginx` 取代為 `nginx:alpine`，這樣就可以繼續使用 ping 的 command\n#### Docker 網路：虛擬網路的 CLI 管理\n1. `docker network ls` 顯示所有網路\n2. `docker network inspect` 檢查特定網路\n3. `docker network create --driver` 創建一個網路\n4. `docker network connect` 連結一個網路到 container\n5. `docker network disconnect` 從 container 移除一個網路\n6. 在同個 Docker 網路創建前端/後端應用，這樣他們之間的溝通就不會留給 host\n7. 所有的在外部暴露的 port 預設會關閉，需要手動使用 `-p` 打開，這樣才有更好的預設安全\n8. 接下來後面要提到的 Swarm 和 Overlay 網路更好\n#### Docker 網路：DNS 和 container 如何找到彼此\n1. 了解 DNS 是如何成為容易交互溝通的關鍵\n2. 觀察客製化的網路預設是如何運作的\n3. 學習如何使用 `--link` 來讓 DNS 在預設橋接網路生效\n4. 請遺忘 IP：固定 ip 和使用 ip 來讓 container 之間溝通是一種反面模式，盡可能地避免這樣的事情發生\n5. Docker DNS：Docker daemon 有內建的 DNS server，而Container 會預設使用它\n6. DNS 預設名稱：Docker 預設 hostname 到 container 的名字，但是還是可以設定 aliases\n7. 如果使用客製網路，友善的 DNS 名稱是內建的\n8. 這些使用 Docker Compose 都會更簡單\n#### 作業：使用 container 做 CLI testing\n1. 知道如何使用 -it 在 container 裡面使用 shell\n2. 了解基本的 linux distribution，像是 Ubuntu 和 CentOS\n3. 了解如何執行 container\n4. 作業\n    - 使用不同的 distro container 來檢查 curl cli 工具版本\n    - 使用兩個不同的終端視窗來開啟 bash，使用 -it 來啟動 **centos:7** 和 **ubuntu:14.04**\n    - 學習 `docker container --rm` 選項，這樣可以 save cleanup\n    - 確定最新版本的 curl 有安裝在相對應的 distro\n        * ubuntu: `apt-get update && apt-get install curl`\n        * centos: `yum update curl`\n    - 檢查 `curl --version`\n#### 作業：DNS Round Robin 測試\n1. 了解如何使用 `-it` 在 container 裡面使用 shell\n2. 了解基本的 linux distribution，像是 Ubuntu 和 CentOS\n3. 了解如何執行 container\n4. 了解 DNS 紀錄的基礎\n5. 從 Docker Engine 1.11 之後，我們可以創建很多 container 到一個網路且傳遞到相關的 DNS 位址\n6. 創建一個新的虛擬網路(預設 bridge driver)\n7. 從 `elasticsearch:2` 的 image 創建兩個 container\n8. 搜尋和使用 `--net-alias search`，當我們創建 container 的時候，同時給他們額外的 DNS name 去響應\n9. 執行 `alpine nslookup search` 並加上 `--net` 來觀察兩個使用相同 DNS 名稱的 container 列表\n10. 多次執行 `centos curl -s search:9200` 並加上 `--net`，直到觀察到**名稱**欄位出現\n#### 完成作業\n1. 執行兩次 `docker container run -d --net dude --net-alias search elasticsearch:2`，開啟兩個 container\n2. `docker container run --rm --net dude alpine nslookup search` 觀察兩個使用相同 DNS 名稱的 container 列表\n3. `docker container run --rm --net dude centos curl -s search:9200`","slug":"docker-快速學習自我挑戰-Day2","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyg006f7ifani8ulx40","content":"<img src=\"/images/learning/docker/dockerday2.png\">\n<hr>\n<h3>安裝與版本</h3>\n<h4>Windows Container：Docker 不再只能在 Linux 上面執行</h4>\n<ol>\n<li>目前 17 版已經可以在 windows 上執行 docker，但有些功能不能使用，包括 Swarm Overlay、Secret…等等</li>\n<li>可以參考以下影片\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=066-9yw8-7c\" target=\"_blank\" rel=\"external\">Windows Containers and Docker: 101</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=4ZY_4OeyJsw\" target=\"_blank\" rel=\"external\">Beyond \\ - the path to Windows and Linux parity in Docker</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QASAqcuuzgI\" target=\"_blank\" rel=\"external\">Docker + Microsoft - Investing in the Future of your Applications</a></li>\n</ul>\n</li>\n</ol>\n<h4>作業 - 管理多個 container</h4>\n<ol>\n<li>Docker 小幫手 (1) <a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"external\">官方文件</a> (2) <code>--help</code></li>\n<li>運行 nginx、MySQL、httpd(apache) server</li>\n<li>運行以上軟體，並使用 <code>--detached</code> (或 <code>-d</code>)，並用 <code>--name</code> 命名</li>\n<li>nginx 要使用 80:80，httpd 用 8080:80，MySQL 用 3306:3306</li>\n<li>當執行 MySQL，使用 --environment (或 <code>-e</code>) 將 <code>MYSQL_RANDOM_ROOT_PASSWORD=yes</code> 參數傳進去 container</li>\n<li>在 MySQL 使用 <code>docker container logs</code> 來找到創建時所產生的隨機密碼</li>\n<li>使用 <code>docker container stop</code> 和 <code>docker container rm</code> 將全部的資料清除</li>\n<li>在清除之前，使用 <code>docker container ls</code> 確定資料的狀態是否正確</li>\n<li>可以使用 <code>curl localhost</code> 會出現網頁 index 的檔案</li>\n</ol>\n<h4>Container 裡面發生了什麼事情呢？CLI 進程監控</h4>\n<ol>\n<li><code>docker container top</code> 某一個 container 的進程清單</li>\n<li><code>docker container inspect</code> 某一個 container 的設定細節</li>\n<li><code>docker container stats</code> 所有 container 的效能統計</li>\n</ol>\n<h4>在 Container 裡面取得 Shell：不需要使用 SSH</h4>\n<ol>\n<li><code>docker container run -it</code> 以交互方式開啟新的 container</li>\n<li><code>docker container exec -it</code> 在已存在的 container 執行額外的 command</li>\n<li>在眾多 container 裡面有不同的 Linux 發行版本</li>\n<li><code>docker container run -it --name proxy nginx bash</code> 進去 container 裡面</li>\n<li><code>docker container run -it --name ubuntu ubuntu</code> 直接執行，不需加 bash 結果會一樣，因為預設就是 bash</li>\n<li><code>docker container start -ai ubuntu</code> 如果要重新開機，可以使用這個指令</li>\n<li>Alpine Linux：一個小型且以安全為目的的 Linux 分支 <code>docker pull alpine</code> 下載最新的 alpine</li>\n<li><code>docker container run -it alpine sh</code> 因為沒有 bash，所以用 sh</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/package-management-basics-apt-yum-dnf-pkg\" target=\"_blank\" rel=\"external\">套件管理基本</a></li>\n</ol>\n<h4>Docker 網路：眾多 Container 裡面的私有和公有網路的溝通觀念</h4>\n<ol>\n<li>觀念\n<ul>\n<li><code>docker container run -p</code> p 就是你機器上的 port</li>\n<li>對於本地端的開發/測試，網路通常『只是堪用』</li>\n<li><code>docker container port &lt;container&gt;</code> 這個指令可以快速輸出哪一個 port 為這個 container 開啟</li>\n<li>學習 Docker 網路、虛擬網路和封包如何傳遞</li>\n<li>了解網路封包如何在 Docker 之間移動</li>\n</ul>\n</li>\n<li>預設 Docker 網路\n<ul>\n<li>每一個 container 都會連接到虛擬網路 「橋(bridge)」</li>\n<li>每一個虛擬網路路由都會透過 NAT 防火牆轉址到 host IP</li>\n<li>在虛擬網路上所有的 container 都可以互相溝通，而不需要 <code>-p</code></li>\n<li>最好的練習就是對個別的 app 新增虛擬網路\n<ul>\n<li>MySQL 和 php/apache 用「my_web_app」網路</li>\n<li>Mongo 和 nodejs 用 「my_api」網路</li>\n</ul>\n</li>\n<li>「含電池，但可拆卸 (battery included, But Removable)」\n<ul>\n<li>在多數情況下，預設會運行的很好，但很容易換掉客製化的 ports</li>\n</ul>\n</li>\n<li>新建虛擬網路</li>\n<li>連結 container 們到大於1(或者沒有)的虛擬網路</li>\n<li>省略虛擬網路且使用 host IP (–net=host)</li>\n<li>使用不同的 Docker 網路驅動來取得新的能力</li>\n</ul>\n</li>\n</ol>\n<h4>錯誤修改：Nginx 官方 image 移除 Ping 功能</h4>\n<ol>\n<li>因為最新 2017 官方修改 ping 功能，所以把 <code>docker container run &lt;stuff&gt; nginx</code>，要把 <code>nginx</code> 取代為 <code>nginx:alpine</code>，這樣就可以繼續使用 ping 的 command</li>\n</ol>\n<h4>Docker 網路：虛擬網路的 CLI 管理</h4>\n<ol>\n<li><code>docker network ls</code> 顯示所有網路</li>\n<li><code>docker network inspect</code> 檢查特定網路</li>\n<li><code>docker network create --driver</code> 創建一個網路</li>\n<li><code>docker network connect</code> 連結一個網路到 container</li>\n<li><code>docker network disconnect</code> 從 container 移除一個網路</li>\n<li>在同個 Docker 網路創建前端/後端應用，這樣他們之間的溝通就不會留給 host</li>\n<li>所有的在外部暴露的 port 預設會關閉，需要手動使用 <code>-p</code> 打開，這樣才有更好的預設安全</li>\n<li>接下來後面要提到的 Swarm 和 Overlay 網路更好</li>\n</ol>\n<h4>Docker 網路：DNS 和 container 如何找到彼此</h4>\n<ol>\n<li>了解 DNS 是如何成為容易交互溝通的關鍵</li>\n<li>觀察客製化的網路預設是如何運作的</li>\n<li>學習如何使用 <code>--link</code> 來讓 DNS 在預設橋接網路生效</li>\n<li>請遺忘 IP：固定 ip 和使用 ip 來讓 container 之間溝通是一種反面模式，盡可能地避免這樣的事情發生</li>\n<li>Docker DNS：Docker daemon 有內建的 DNS server，而Container 會預設使用它</li>\n<li>DNS 預設名稱：Docker 預設 hostname 到 container 的名字，但是還是可以設定 aliases</li>\n<li>如果使用客製網路，友善的 DNS 名稱是內建的</li>\n<li>這些使用 Docker Compose 都會更簡單</li>\n</ol>\n<h4>作業：使用 container 做 CLI testing</h4>\n<ol>\n<li>知道如何使用 -it 在 container 裡面使用 shell</li>\n<li>了解基本的 linux distribution，像是 Ubuntu 和 CentOS</li>\n<li>了解如何執行 container</li>\n<li>作業\n<ul>\n<li>使用不同的 distro container 來檢查 curl cli 工具版本</li>\n<li>使用兩個不同的終端視窗來開啟 bash，使用 -it 來啟動 <strong>centos:7</strong> 和 <strong>ubuntu:14.04</strong></li>\n<li>學習 <code>docker container --rm</code> 選項，這樣可以 save cleanup</li>\n<li>確定最新版本的 curl 有安裝在相對應的 distro\n<ul>\n<li>ubuntu: <code>apt-get update &amp;&amp; apt-get install curl</code></li>\n<li>centos: <code>yum update curl</code></li>\n</ul>\n</li>\n<li>檢查 <code>curl --version</code></li>\n</ul>\n</li>\n</ol>\n<h4>作業：DNS Round Robin 測試</h4>\n<ol>\n<li>了解如何使用 <code>-it</code> 在 container 裡面使用 shell</li>\n<li>了解基本的 linux distribution，像是 Ubuntu 和 CentOS</li>\n<li>了解如何執行 container</li>\n<li>了解 DNS 紀錄的基礎</li>\n<li>從 Docker Engine 1.11 之後，我們可以創建很多 container 到一個網路且傳遞到相關的 DNS 位址</li>\n<li>創建一個新的虛擬網路(預設 bridge driver)</li>\n<li>從 <code>elasticsearch:2</code> 的 image 創建兩個 container</li>\n<li>搜尋和使用 <code>--net-alias search</code>，當我們創建 container 的時候，同時給他們額外的 DNS name 去響應</li>\n<li>執行 <code>alpine nslookup search</code> 並加上 <code>--net</code> 來觀察兩個使用相同 DNS 名稱的 container 列表</li>\n<li>多次執行 <code>centos curl -s search:9200</code> 並加上 <code>--net</code>，直到觀察到<strong>名稱</strong>欄位出現</li>\n</ol>\n<h4>完成作業</h4>\n<ol>\n<li>執行兩次 <code>docker container run -d --net dude --net-alias search elasticsearch:2</code>，開啟兩個 container</li>\n<li><code>docker container run --rm --net dude alpine nslookup search</code> 觀察兩個使用相同 DNS 名稱的 container 列表</li>\n<li><code>docker container run --rm --net dude centos curl -s search:9200</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday2.png\">\n<hr>\n<h3>安裝與版本</h3>\n<h4>Windows Container：Docker 不再只能在 Linux 上面執行</h4>\n<ol>\n<li>目前 17 版已經可以在 windows 上執行 docker，但有些功能不能使用，包括 Swarm Overlay、Secret…等等</li>\n<li>可以參考以下影片\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=066-9yw8-7c\" target=\"_blank\" rel=\"external\">Windows Containers and Docker: 101</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=4ZY_4OeyJsw\" target=\"_blank\" rel=\"external\">Beyond \\ - the path to Windows and Linux parity in Docker</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QASAqcuuzgI\" target=\"_blank\" rel=\"external\">Docker + Microsoft - Investing in the Future of your Applications</a></li>\n</ul>\n</li>\n</ol>\n<h4>作業 - 管理多個 container</h4>\n<ol>\n<li>Docker 小幫手 (1) <a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"external\">官方文件</a> (2) <code>--help</code></li>\n<li>運行 nginx、MySQL、httpd(apache) server</li>\n<li>運行以上軟體，並使用 <code>--detached</code> (或 <code>-d</code>)，並用 <code>--name</code> 命名</li>\n<li>nginx 要使用 80:80，httpd 用 8080:80，MySQL 用 3306:3306</li>\n<li>當執行 MySQL，使用 --environment (或 <code>-e</code>) 將 <code>MYSQL_RANDOM_ROOT_PASSWORD=yes</code> 參數傳進去 container</li>\n<li>在 MySQL 使用 <code>docker container logs</code> 來找到創建時所產生的隨機密碼</li>\n<li>使用 <code>docker container stop</code> 和 <code>docker container rm</code> 將全部的資料清除</li>\n<li>在清除之前，使用 <code>docker container ls</code> 確定資料的狀態是否正確</li>\n<li>可以使用 <code>curl localhost</code> 會出現網頁 index 的檔案</li>\n</ol>\n<h4>Container 裡面發生了什麼事情呢？CLI 進程監控</h4>\n<ol>\n<li><code>docker container top</code> 某一個 container 的進程清單</li>\n<li><code>docker container inspect</code> 某一個 container 的設定細節</li>\n<li><code>docker container stats</code> 所有 container 的效能統計</li>\n</ol>\n<h4>在 Container 裡面取得 Shell：不需要使用 SSH</h4>\n<ol>\n<li><code>docker container run -it</code> 以交互方式開啟新的 container</li>\n<li><code>docker container exec -it</code> 在已存在的 container 執行額外的 command</li>\n<li>在眾多 container 裡面有不同的 Linux 發行版本</li>\n<li><code>docker container run -it --name proxy nginx bash</code> 進去 container 裡面</li>\n<li><code>docker container run -it --name ubuntu ubuntu</code> 直接執行，不需加 bash 結果會一樣，因為預設就是 bash</li>\n<li><code>docker container start -ai ubuntu</code> 如果要重新開機，可以使用這個指令</li>\n<li>Alpine Linux：一個小型且以安全為目的的 Linux 分支 <code>docker pull alpine</code> 下載最新的 alpine</li>\n<li><code>docker container run -it alpine sh</code> 因為沒有 bash，所以用 sh</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/package-management-basics-apt-yum-dnf-pkg\" target=\"_blank\" rel=\"external\">套件管理基本</a></li>\n</ol>\n<h4>Docker 網路：眾多 Container 裡面的私有和公有網路的溝通觀念</h4>\n<ol>\n<li>觀念\n<ul>\n<li><code>docker container run -p</code> p 就是你機器上的 port</li>\n<li>對於本地端的開發/測試，網路通常『只是堪用』</li>\n<li><code>docker container port &lt;container&gt;</code> 這個指令可以快速輸出哪一個 port 為這個 container 開啟</li>\n<li>學習 Docker 網路、虛擬網路和封包如何傳遞</li>\n<li>了解網路封包如何在 Docker 之間移動</li>\n</ul>\n</li>\n<li>預設 Docker 網路\n<ul>\n<li>每一個 container 都會連接到虛擬網路 「橋(bridge)」</li>\n<li>每一個虛擬網路路由都會透過 NAT 防火牆轉址到 host IP</li>\n<li>在虛擬網路上所有的 container 都可以互相溝通，而不需要 <code>-p</code></li>\n<li>最好的練習就是對個別的 app 新增虛擬網路\n<ul>\n<li>MySQL 和 php/apache 用「my_web_app」網路</li>\n<li>Mongo 和 nodejs 用 「my_api」網路</li>\n</ul>\n</li>\n<li>「含電池，但可拆卸 (battery included, But Removable)」\n<ul>\n<li>在多數情況下，預設會運行的很好，但很容易換掉客製化的 ports</li>\n</ul>\n</li>\n<li>新建虛擬網路</li>\n<li>連結 container 們到大於1(或者沒有)的虛擬網路</li>\n<li>省略虛擬網路且使用 host IP (–net=host)</li>\n<li>使用不同的 Docker 網路驅動來取得新的能力</li>\n</ul>\n</li>\n</ol>\n<h4>錯誤修改：Nginx 官方 image 移除 Ping 功能</h4>\n<ol>\n<li>因為最新 2017 官方修改 ping 功能，所以把 <code>docker container run &lt;stuff&gt; nginx</code>，要把 <code>nginx</code> 取代為 <code>nginx:alpine</code>，這樣就可以繼續使用 ping 的 command</li>\n</ol>\n<h4>Docker 網路：虛擬網路的 CLI 管理</h4>\n<ol>\n<li><code>docker network ls</code> 顯示所有網路</li>\n<li><code>docker network inspect</code> 檢查特定網路</li>\n<li><code>docker network create --driver</code> 創建一個網路</li>\n<li><code>docker network connect</code> 連結一個網路到 container</li>\n<li><code>docker network disconnect</code> 從 container 移除一個網路</li>\n<li>在同個 Docker 網路創建前端/後端應用，這樣他們之間的溝通就不會留給 host</li>\n<li>所有的在外部暴露的 port 預設會關閉，需要手動使用 <code>-p</code> 打開，這樣才有更好的預設安全</li>\n<li>接下來後面要提到的 Swarm 和 Overlay 網路更好</li>\n</ol>\n<h4>Docker 網路：DNS 和 container 如何找到彼此</h4>\n<ol>\n<li>了解 DNS 是如何成為容易交互溝通的關鍵</li>\n<li>觀察客製化的網路預設是如何運作的</li>\n<li>學習如何使用 <code>--link</code> 來讓 DNS 在預設橋接網路生效</li>\n<li>請遺忘 IP：固定 ip 和使用 ip 來讓 container 之間溝通是一種反面模式，盡可能地避免這樣的事情發生</li>\n<li>Docker DNS：Docker daemon 有內建的 DNS server，而Container 會預設使用它</li>\n<li>DNS 預設名稱：Docker 預設 hostname 到 container 的名字，但是還是可以設定 aliases</li>\n<li>如果使用客製網路，友善的 DNS 名稱是內建的</li>\n<li>這些使用 Docker Compose 都會更簡單</li>\n</ol>\n<h4>作業：使用 container 做 CLI testing</h4>\n<ol>\n<li>知道如何使用 -it 在 container 裡面使用 shell</li>\n<li>了解基本的 linux distribution，像是 Ubuntu 和 CentOS</li>\n<li>了解如何執行 container</li>\n<li>作業\n<ul>\n<li>使用不同的 distro container 來檢查 curl cli 工具版本</li>\n<li>使用兩個不同的終端視窗來開啟 bash，使用 -it 來啟動 <strong>centos:7</strong> 和 <strong>ubuntu:14.04</strong></li>\n<li>學習 <code>docker container --rm</code> 選項，這樣可以 save cleanup</li>\n<li>確定最新版本的 curl 有安裝在相對應的 distro\n<ul>\n<li>ubuntu: <code>apt-get update &amp;&amp; apt-get install curl</code></li>\n<li>centos: <code>yum update curl</code></li>\n</ul>\n</li>\n<li>檢查 <code>curl --version</code></li>\n</ul>\n</li>\n</ol>\n<h4>作業：DNS Round Robin 測試</h4>\n<ol>\n<li>了解如何使用 <code>-it</code> 在 container 裡面使用 shell</li>\n<li>了解基本的 linux distribution，像是 Ubuntu 和 CentOS</li>\n<li>了解如何執行 container</li>\n<li>了解 DNS 紀錄的基礎</li>\n<li>從 Docker Engine 1.11 之後，我們可以創建很多 container 到一個網路且傳遞到相關的 DNS 位址</li>\n<li>創建一個新的虛擬網路(預設 bridge driver)</li>\n<li>從 <code>elasticsearch:2</code> 的 image 創建兩個 container</li>\n<li>搜尋和使用 <code>--net-alias search</code>，當我們創建 container 的時候，同時給他們額外的 DNS name 去響應</li>\n<li>執行 <code>alpine nslookup search</code> 並加上 <code>--net</code> 來觀察兩個使用相同 DNS 名稱的 container 列表</li>\n<li>多次執行 <code>centos curl -s search:9200</code> 並加上 <code>--net</code>，直到觀察到<strong>名稱</strong>欄位出現</li>\n</ol>\n<h4>完成作業</h4>\n<ol>\n<li>執行兩次 <code>docker container run -d --net dude --net-alias search elasticsearch:2</code>，開啟兩個 container</li>\n<li><code>docker container run --rm --net dude alpine nslookup search</code> 觀察兩個使用相同 DNS 名稱的 container 列表</li>\n<li><code>docker container run --rm --net dude centos curl -s search:9200</code></li>\n</ol>\n"},{"title":"docker 快速學習自我挑戰 Day3","thumbnail":["/images/learning/docker/dockerday3.png"],"date":"2017-07-26T13:34:35.000Z","_content":"<img src=\"/images/learning/docker/dockerday3.png\">\n\n***\n### 如何找到且使用 container images\n#### 什麼是 image (什麼不是)？\n##### 章節簡介\n1. 關於 images，container 的基礎要件\n2. 什麼是 image (什麼不是)\n3. 使用 Docker Hub 註冊\n4. 管理本地 image cache\n5. 建立自己的 image\n##### 什麼是 image (什麼不是)\n1. App binaries and dependencies\n2. image data 的元數據和如何使用 image\n3. 官方定義：「image 是根目錄系統變化的有序集合，而且對 container runtime 的使用有相應的執行參數」\n4. 不是完整的操作系統，沒有核心、核心模組(例如：drivers)\n5. 小的跟一個檔案(app binary)一樣，就像 Go 語言的 static binary\n6. 大的跟帶有 apt、Apache、PHP和更多被安裝軟體的 Ubuntu 一樣\n#### 強大的 hub：使用 Docker Hub Registry images\n1. [Docker Hub](https://hub.docker.com) 的基礎\n2. 找到官方和其它很棒的公開 image\n3. 下載 images 和 image tags 的基礎\n4. Docker Hub：container 版的 apt 套件系統\n5. 官方 image 和如何使用它\n6. 如何辨別好的公開 image\n7. 使用不同 base 的 image，像是 Debian 或 Alpine\n#### Images 和他們的 Layers：找出 Image Cache\n1. Image layers\n2. Union file system：顯示出一系列 file system 的改變，跟實際的系統一樣\n3. `history` 和 `inspect`：了解 image 如何構成\n4. copy on write：container 如何在 image 上執行\n5. Image 是由 file system changes 和 metadata 組成的\n6. 每一層都被獨一無二的被辨識而且只存在 host 一次\n7. 這樣的模式可以省下 host 的空間和 push/pull 的傳送時間\n8. Container 只是在 image 上層的一個單一 read/write 層\n9. `docker image history` 和 `inspect` 可以幫助我們了解這些資訊\n#### Image Tagging 和推送到 Docker Hub\n1. 學習前必須要會的：\n    - 了解 container 和 image\n    - 了解 image layer 的基礎\n    - 了解 Docker Hub 的基礎\n2. 這個章節要學的\n    - 都在講 image tags\n    - 如何上傳到 Docker Hub\n    - Image ID vs. Tag\n3. `cat .docker/config.json` 確認已認證登入\n4. `docker image tag nginx tingsyuanwang/nginx` 給 image tag 到 Docker Hub 的帳戶\n5. `docker image push tingsyuanwang/nginx` 推送到自己的 Docker Hub\n6. `docker image tag tingsyuanwang/nginx tingsyuanwang/nginx:testing` 給定名為 testing 的 tag\n7. `docker image push tingsyuanwang/nginx:testing` 上傳 image，實際上不會全部上傳，只上傳 tag\n8. 回顧\n    - 適時的 tagging images\n    - 給 image tag 是為了要上傳到 Docker Hub\n    - Tagging 是如何和 image ID 做關聯的\n    - Latest Tag 只是預設標籤，並不代表最新\n    - 從 Docker cli 登入 Docker Hub\n    - 如何創建私有的 Docker Hub images\n#### 建立 images：Dockerfile 的基礎\n1. `docker build -f some-dockerfile` 創建 Dockerfile\n2. `ENV NGINX_VERSION 1.13.1-1~stretch` 這邊的 ENV 是用來設定環境變數，這是對建立或運行 container 去設定 key 和 value 的主要方法\n3. `&&` 是為了確保這些指令可以符合進一個單一 layer\n4. `RUN ln -sf /dev/stdout /var/log/nginx/access.log \\` 這行是關於 log 記錄檔，container 只要確保所有我們想要抓的資訊都有在 stdout 的 log 記錄檔案裡面，docker engine 本身就有 logging drivers 可以去控制 host 上所有 containers 的 logs\n5. `EXPOSE 80 443` 預設來說，container 裡面沒有 TCP 或 UDP port 是開啟的，除非在這邊定義，`EXPOSE` 指令並不會讓 host 上的 port 開啟，要在執行 `docker run -p` 的時候設定 host 的 port\n6. `CMD [\"nginx\", \"-g\", \"daemon off;\"]` `CMD`是必填參數，這是最後的指令，且在每次開啟、重啟或暫停新的 container 都會執行的命令\n#### 建立 images：運行 Docker Builds\n1. 新增一個 [Dockerfile](https://raw.githubusercontent.com/BretFisher/udemy-docker-mastery/master/dockerfile-sample-1/Dockerfile) 到根目錄\n2. `docker image build -t customnginx .` 用 dockerfile 新建一個 image\n#### 建立 images：擴展官方 image\n1. `WORKDIR /usr/share/nginx/html` 這個就是在跑 `cd` 的語法\n2. `COPY index.html index.html` 複製本地檔案到 docker container 裡面\n3. `docker image build -t nginx-with-html .` 執行檔案\n4. `docker container run -p 80:80 --rm nginx-with-html` 用剛剛建立出來的 image 來執行\n#### 作業：建立自己的 Dockerfile 且使用它運行 container\n1. Dockerfiles 是 process workflow 和藝術組合而成的\n2. 使用已存在的 Node.js app 並把它 docker 化\n3. 製作 Dockerfile，建立它，測試它，上傳它，(刪除它)，並運行它\n4. 預期這樣的過程是反覆的，很少能夠一次就完成它的\n5. 細節都在 `dockerfile-assignment-1/Dockerfile`\n6. 使用官方 **node** 6.x image 的 alpine 版本\n7. 預期結果會呈現在 `http://localhost` 的網頁\n8. 標籤並推送到自己的 Docker Hub\n9. 從本機的 cache 移除 image，並從 Hub 重新運行一次\n#### 解答：建立自己的 Dockerfile 且使用它運行 container\n1. Dockerfile\n```\n# Instructions from the app developer\n# - you should use the 'node' official image, with the alpine 6.x branch\nFROM node:6-alpine\n# - this app listens on port 3000, but the container should launch on port 80\n#  so it will respond to http://localhost:80 on your computer\nEXPOSE 3000\n# - then it should use alpine package manager to install tini: 'apk add --update tini'\nRUN apk add --update tini\n# - then it should create directory /usr/src/app for app files with 'mkdir -p /usr/src/app'\nRUN mkdir -p /usr/src/app\n# - Node uses a \"package manager\", so it needs to copy in package.json file\nCOPY package.json package.json\n# - then it needs to run 'npm install' to install dependencies from that file\nRUN npm install && npm cache clean\n# - to keep it clean and small, run 'npm cache clean --force' after above\n# - then it needs to copy in all files from current director\nCOPY . .\n# - then it needs to start container with command 'tini -- node ./bin/www'\nCMD [ \"tini\", \"--\", \"node\", \"./bin/www\"]\n# - in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD commands\n```\n2. `docker build -t testnode .` 使用 Dockerfile 建立 image\n3. `docker container run --rm -p 80:3000 testnode` 使用 image 建立 container\n4. `docker tag testnode tingsyuanwang/testing-node` 修改 tag\n5. `docker push tingsyuanwang/testing-node` 將檔案推送到 Docker Hub\n6. `docker image rm tingsyuanwang/testing-node` 將本地端的 node image 移除\n7. `docker container run --rm -p 80:3000 tingsyuanwang/testing-node` 運行 container 讓 docker 自動從遠端抓回來","source":"_posts/docker-快速學習自我挑戰-Day3.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day3\nthumbnail:\n  - /images/learning/docker/dockerday3.png\ndate: 2017-07-26 21:34:35\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday3.png\">\n\n***\n### 如何找到且使用 container images\n#### 什麼是 image (什麼不是)？\n##### 章節簡介\n1. 關於 images，container 的基礎要件\n2. 什麼是 image (什麼不是)\n3. 使用 Docker Hub 註冊\n4. 管理本地 image cache\n5. 建立自己的 image\n##### 什麼是 image (什麼不是)\n1. App binaries and dependencies\n2. image data 的元數據和如何使用 image\n3. 官方定義：「image 是根目錄系統變化的有序集合，而且對 container runtime 的使用有相應的執行參數」\n4. 不是完整的操作系統，沒有核心、核心模組(例如：drivers)\n5. 小的跟一個檔案(app binary)一樣，就像 Go 語言的 static binary\n6. 大的跟帶有 apt、Apache、PHP和更多被安裝軟體的 Ubuntu 一樣\n#### 強大的 hub：使用 Docker Hub Registry images\n1. [Docker Hub](https://hub.docker.com) 的基礎\n2. 找到官方和其它很棒的公開 image\n3. 下載 images 和 image tags 的基礎\n4. Docker Hub：container 版的 apt 套件系統\n5. 官方 image 和如何使用它\n6. 如何辨別好的公開 image\n7. 使用不同 base 的 image，像是 Debian 或 Alpine\n#### Images 和他們的 Layers：找出 Image Cache\n1. Image layers\n2. Union file system：顯示出一系列 file system 的改變，跟實際的系統一樣\n3. `history` 和 `inspect`：了解 image 如何構成\n4. copy on write：container 如何在 image 上執行\n5. Image 是由 file system changes 和 metadata 組成的\n6. 每一層都被獨一無二的被辨識而且只存在 host 一次\n7. 這樣的模式可以省下 host 的空間和 push/pull 的傳送時間\n8. Container 只是在 image 上層的一個單一 read/write 層\n9. `docker image history` 和 `inspect` 可以幫助我們了解這些資訊\n#### Image Tagging 和推送到 Docker Hub\n1. 學習前必須要會的：\n    - 了解 container 和 image\n    - 了解 image layer 的基礎\n    - 了解 Docker Hub 的基礎\n2. 這個章節要學的\n    - 都在講 image tags\n    - 如何上傳到 Docker Hub\n    - Image ID vs. Tag\n3. `cat .docker/config.json` 確認已認證登入\n4. `docker image tag nginx tingsyuanwang/nginx` 給 image tag 到 Docker Hub 的帳戶\n5. `docker image push tingsyuanwang/nginx` 推送到自己的 Docker Hub\n6. `docker image tag tingsyuanwang/nginx tingsyuanwang/nginx:testing` 給定名為 testing 的 tag\n7. `docker image push tingsyuanwang/nginx:testing` 上傳 image，實際上不會全部上傳，只上傳 tag\n8. 回顧\n    - 適時的 tagging images\n    - 給 image tag 是為了要上傳到 Docker Hub\n    - Tagging 是如何和 image ID 做關聯的\n    - Latest Tag 只是預設標籤，並不代表最新\n    - 從 Docker cli 登入 Docker Hub\n    - 如何創建私有的 Docker Hub images\n#### 建立 images：Dockerfile 的基礎\n1. `docker build -f some-dockerfile` 創建 Dockerfile\n2. `ENV NGINX_VERSION 1.13.1-1~stretch` 這邊的 ENV 是用來設定環境變數，這是對建立或運行 container 去設定 key 和 value 的主要方法\n3. `&&` 是為了確保這些指令可以符合進一個單一 layer\n4. `RUN ln -sf /dev/stdout /var/log/nginx/access.log \\` 這行是關於 log 記錄檔，container 只要確保所有我們想要抓的資訊都有在 stdout 的 log 記錄檔案裡面，docker engine 本身就有 logging drivers 可以去控制 host 上所有 containers 的 logs\n5. `EXPOSE 80 443` 預設來說，container 裡面沒有 TCP 或 UDP port 是開啟的，除非在這邊定義，`EXPOSE` 指令並不會讓 host 上的 port 開啟，要在執行 `docker run -p` 的時候設定 host 的 port\n6. `CMD [\"nginx\", \"-g\", \"daemon off;\"]` `CMD`是必填參數，這是最後的指令，且在每次開啟、重啟或暫停新的 container 都會執行的命令\n#### 建立 images：運行 Docker Builds\n1. 新增一個 [Dockerfile](https://raw.githubusercontent.com/BretFisher/udemy-docker-mastery/master/dockerfile-sample-1/Dockerfile) 到根目錄\n2. `docker image build -t customnginx .` 用 dockerfile 新建一個 image\n#### 建立 images：擴展官方 image\n1. `WORKDIR /usr/share/nginx/html` 這個就是在跑 `cd` 的語法\n2. `COPY index.html index.html` 複製本地檔案到 docker container 裡面\n3. `docker image build -t nginx-with-html .` 執行檔案\n4. `docker container run -p 80:80 --rm nginx-with-html` 用剛剛建立出來的 image 來執行\n#### 作業：建立自己的 Dockerfile 且使用它運行 container\n1. Dockerfiles 是 process workflow 和藝術組合而成的\n2. 使用已存在的 Node.js app 並把它 docker 化\n3. 製作 Dockerfile，建立它，測試它，上傳它，(刪除它)，並運行它\n4. 預期這樣的過程是反覆的，很少能夠一次就完成它的\n5. 細節都在 `dockerfile-assignment-1/Dockerfile`\n6. 使用官方 **node** 6.x image 的 alpine 版本\n7. 預期結果會呈現在 `http://localhost` 的網頁\n8. 標籤並推送到自己的 Docker Hub\n9. 從本機的 cache 移除 image，並從 Hub 重新運行一次\n#### 解答：建立自己的 Dockerfile 且使用它運行 container\n1. Dockerfile\n```\n# Instructions from the app developer\n# - you should use the 'node' official image, with the alpine 6.x branch\nFROM node:6-alpine\n# - this app listens on port 3000, but the container should launch on port 80\n#  so it will respond to http://localhost:80 on your computer\nEXPOSE 3000\n# - then it should use alpine package manager to install tini: 'apk add --update tini'\nRUN apk add --update tini\n# - then it should create directory /usr/src/app for app files with 'mkdir -p /usr/src/app'\nRUN mkdir -p /usr/src/app\n# - Node uses a \"package manager\", so it needs to copy in package.json file\nCOPY package.json package.json\n# - then it needs to run 'npm install' to install dependencies from that file\nRUN npm install && npm cache clean\n# - to keep it clean and small, run 'npm cache clean --force' after above\n# - then it needs to copy in all files from current director\nCOPY . .\n# - then it needs to start container with command 'tini -- node ./bin/www'\nCMD [ \"tini\", \"--\", \"node\", \"./bin/www\"]\n# - in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD commands\n```\n2. `docker build -t testnode .` 使用 Dockerfile 建立 image\n3. `docker container run --rm -p 80:3000 testnode` 使用 image 建立 container\n4. `docker tag testnode tingsyuanwang/testing-node` 修改 tag\n5. `docker push tingsyuanwang/testing-node` 將檔案推送到 Docker Hub\n6. `docker image rm tingsyuanwang/testing-node` 將本地端的 node image 移除\n7. `docker container run --rm -p 80:3000 tingsyuanwang/testing-node` 運行 container 讓 docker 自動從遠端抓回來","slug":"docker-快速學習自我挑戰-Day3","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwym006i7ifatowjagf5","content":"<img src=\"/images/learning/docker/dockerday3.png\">\n<hr>\n<h3>如何找到且使用 container images</h3>\n<h4>什麼是 image (什麼不是)？</h4>\n<h5>章節簡介</h5>\n<ol>\n<li>關於 images，container 的基礎要件</li>\n<li>什麼是 image (什麼不是)</li>\n<li>使用 Docker Hub 註冊</li>\n<li>管理本地 image cache</li>\n<li>建立自己的 image</li>\n</ol>\n<h5>什麼是 image (什麼不是)</h5>\n<ol>\n<li>App binaries and dependencies</li>\n<li>image data 的元數據和如何使用 image</li>\n<li>官方定義：「image 是根目錄系統變化的有序集合，而且對 container runtime 的使用有相應的執行參數」</li>\n<li>不是完整的操作系統，沒有核心、核心模組(例如：drivers)</li>\n<li>小的跟一個檔案(app binary)一樣，就像 Go 語言的 static binary</li>\n<li>大的跟帶有 apt、Apache、PHP和更多被安裝軟體的 Ubuntu 一樣</li>\n</ol>\n<h4>強大的 hub：使用 Docker Hub Registry images</h4>\n<ol>\n<li><a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"external\">Docker Hub</a> 的基礎</li>\n<li>找到官方和其它很棒的公開 image</li>\n<li>下載 images 和 image tags 的基礎</li>\n<li>Docker Hub：container 版的 apt 套件系統</li>\n<li>官方 image 和如何使用它</li>\n<li>如何辨別好的公開 image</li>\n<li>使用不同 base 的 image，像是 Debian 或 Alpine</li>\n</ol>\n<h4>Images 和他們的 Layers：找出 Image Cache</h4>\n<ol>\n<li>Image layers</li>\n<li>Union file system：顯示出一系列 file system 的改變，跟實際的系統一樣</li>\n<li><code>history</code> 和 <code>inspect</code>：了解 image 如何構成</li>\n<li>copy on write：container 如何在 image 上執行</li>\n<li>Image 是由 file system changes 和 metadata 組成的</li>\n<li>每一層都被獨一無二的被辨識而且只存在 host 一次</li>\n<li>這樣的模式可以省下 host 的空間和 push/pull 的傳送時間</li>\n<li>Container 只是在 image 上層的一個單一 read/write 層</li>\n<li><code>docker image history</code> 和 <code>inspect</code> 可以幫助我們了解這些資訊</li>\n</ol>\n<h4>Image Tagging 和推送到 Docker Hub</h4>\n<ol>\n<li>學習前必須要會的：\n<ul>\n<li>了解 container 和 image</li>\n<li>了解 image layer 的基礎</li>\n<li>了解 Docker Hub 的基礎</li>\n</ul>\n</li>\n<li>這個章節要學的\n<ul>\n<li>都在講 image tags</li>\n<li>如何上傳到 Docker Hub</li>\n<li>Image ID vs. Tag</li>\n</ul>\n</li>\n<li><code>cat .docker/config.json</code> 確認已認證登入</li>\n<li><code>docker image tag nginx tingsyuanwang/nginx</code> 給 image tag 到 Docker Hub 的帳戶</li>\n<li><code>docker image push tingsyuanwang/nginx</code> 推送到自己的 Docker Hub</li>\n<li><code>docker image tag tingsyuanwang/nginx tingsyuanwang/nginx:testing</code> 給定名為 testing 的 tag</li>\n<li><code>docker image push tingsyuanwang/nginx:testing</code> 上傳 image，實際上不會全部上傳，只上傳 tag</li>\n<li>回顧\n<ul>\n<li>適時的 tagging images</li>\n<li>給 image tag 是為了要上傳到 Docker Hub</li>\n<li>Tagging 是如何和 image ID 做關聯的</li>\n<li>Latest Tag 只是預設標籤，並不代表最新</li>\n<li>從 Docker cli 登入 Docker Hub</li>\n<li>如何創建私有的 Docker Hub images</li>\n</ul>\n</li>\n</ol>\n<h4>建立 images：Dockerfile 的基礎</h4>\n<ol>\n<li><code>docker build -f some-dockerfile</code> 創建 Dockerfile</li>\n<li><code>ENV NGINX_VERSION 1.13.1-1~stretch</code> 這邊的 ENV 是用來設定環境變數，這是對建立或運行 container 去設定 key 和 value 的主要方法</li>\n<li><code>&amp;&amp;</code> 是為了確保這些指令可以符合進一個單一 layer</li>\n<li><code>RUN ln -sf /dev/stdout /var/log/nginx/access.log \\</code> 這行是關於 log 記錄檔，container 只要確保所有我們想要抓的資訊都有在 stdout 的 log 記錄檔案裡面，docker engine 本身就有 logging drivers 可以去控制 host 上所有 containers 的 logs</li>\n<li><code>EXPOSE 80 443</code> 預設來說，container 裡面沒有 TCP 或 UDP port 是開啟的，除非在這邊定義，<code>EXPOSE</code> 指令並不會讓 host 上的 port 開啟，要在執行 <code>docker run -p</code> 的時候設定 host 的 port</li>\n<li><code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code> <code>CMD</code>是必填參數，這是最後的指令，且在每次開啟、重啟或暫停新的 container 都會執行的命令</li>\n</ol>\n<h4>建立 images：運行 Docker Builds</h4>\n<ol>\n<li>新增一個 <a href=\"https://raw.githubusercontent.com/BretFisher/udemy-docker-mastery/master/dockerfile-sample-1/Dockerfile\" target=\"_blank\" rel=\"external\">Dockerfile</a> 到根目錄</li>\n<li><code>docker image build -t customnginx .</code> 用 dockerfile 新建一個 image</li>\n</ol>\n<h4>建立 images：擴展官方 image</h4>\n<ol>\n<li><code>WORKDIR /usr/share/nginx/html</code> 這個就是在跑 <code>cd</code> 的語法</li>\n<li><code>COPY index.html index.html</code> 複製本地檔案到 docker container 裡面</li>\n<li><code>docker image build -t nginx-with-html .</code> 執行檔案</li>\n<li><code>docker container run -p 80:80 --rm nginx-with-html</code> 用剛剛建立出來的 image 來執行</li>\n</ol>\n<h4>作業：建立自己的 Dockerfile 且使用它運行 container</h4>\n<ol>\n<li>Dockerfiles 是 process workflow 和藝術組合而成的</li>\n<li>使用已存在的 Node.js app 並把它 docker 化</li>\n<li>製作 Dockerfile，建立它，測試它，上傳它，(刪除它)，並運行它</li>\n<li>預期這樣的過程是反覆的，很少能夠一次就完成它的</li>\n<li>細節都在 <code>dockerfile-assignment-1/Dockerfile</code></li>\n<li>使用官方 <strong>node</strong> 6.x image 的 alpine 版本</li>\n<li>預期結果會呈現在 <code>http://localhost</code> 的網頁</li>\n<li>標籤並推送到自己的 Docker Hub</li>\n<li>從本機的 cache 移除 image，並從 Hub 重新運行一次</li>\n</ol>\n<h4>解答：建立自己的 Dockerfile 且使用它運行 container</h4>\n<ol>\n<li>Dockerfile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Instructions from the app developer</div><div class=\"line\"># - you should use the &apos;node&apos; official image, with the alpine 6.x branch</div><div class=\"line\">FROM node:6-alpine</div><div class=\"line\"># - this app listens on port 3000, but the container should launch on port 80</div><div class=\"line\">#  so it will respond to http://localhost:80 on your computer</div><div class=\"line\">EXPOSE 3000</div><div class=\"line\"># - then it should use alpine package manager to install tini: &apos;apk add --update tini&apos;</div><div class=\"line\">RUN apk add --update tini</div><div class=\"line\"># - then it should create directory /usr/src/app for app files with &apos;mkdir -p /usr/src/app&apos;</div><div class=\"line\">RUN mkdir -p /usr/src/app</div><div class=\"line\"># - Node uses a &quot;package manager&quot;, so it needs to copy in package.json file</div><div class=\"line\">COPY package.json package.json</div><div class=\"line\"># - then it needs to run &apos;npm install&apos; to install dependencies from that file</div><div class=\"line\">RUN npm install &amp;&amp; npm cache clean</div><div class=\"line\"># - to keep it clean and small, run &apos;npm cache clean --force&apos; after above</div><div class=\"line\"># - then it needs to copy in all files from current director</div><div class=\"line\">COPY . .</div><div class=\"line\"># - then it needs to start container with command &apos;tini -- node ./bin/www&apos;</div><div class=\"line\">CMD [ &quot;tini&quot;, &quot;--&quot;, &quot;node&quot;, &quot;./bin/www&quot;]</div><div class=\"line\"># - in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD commands</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>docker build -t testnode .</code> 使用 Dockerfile 建立 image</li>\n<li><code>docker container run --rm -p 80:3000 testnode</code> 使用 image 建立 container</li>\n<li><code>docker tag testnode tingsyuanwang/testing-node</code> 修改 tag</li>\n<li><code>docker push tingsyuanwang/testing-node</code> 將檔案推送到 Docker Hub</li>\n<li><code>docker image rm tingsyuanwang/testing-node</code> 將本地端的 node image 移除</li>\n<li><code>docker container run --rm -p 80:3000 tingsyuanwang/testing-node</code> 運行 container 讓 docker 自動從遠端抓回來</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday3.png\">\n<hr>\n<h3>如何找到且使用 container images</h3>\n<h4>什麼是 image (什麼不是)？</h4>\n<h5>章節簡介</h5>\n<ol>\n<li>關於 images，container 的基礎要件</li>\n<li>什麼是 image (什麼不是)</li>\n<li>使用 Docker Hub 註冊</li>\n<li>管理本地 image cache</li>\n<li>建立自己的 image</li>\n</ol>\n<h5>什麼是 image (什麼不是)</h5>\n<ol>\n<li>App binaries and dependencies</li>\n<li>image data 的元數據和如何使用 image</li>\n<li>官方定義：「image 是根目錄系統變化的有序集合，而且對 container runtime 的使用有相應的執行參數」</li>\n<li>不是完整的操作系統，沒有核心、核心模組(例如：drivers)</li>\n<li>小的跟一個檔案(app binary)一樣，就像 Go 語言的 static binary</li>\n<li>大的跟帶有 apt、Apache、PHP和更多被安裝軟體的 Ubuntu 一樣</li>\n</ol>\n<h4>強大的 hub：使用 Docker Hub Registry images</h4>\n<ol>\n<li><a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"external\">Docker Hub</a> 的基礎</li>\n<li>找到官方和其它很棒的公開 image</li>\n<li>下載 images 和 image tags 的基礎</li>\n<li>Docker Hub：container 版的 apt 套件系統</li>\n<li>官方 image 和如何使用它</li>\n<li>如何辨別好的公開 image</li>\n<li>使用不同 base 的 image，像是 Debian 或 Alpine</li>\n</ol>\n<h4>Images 和他們的 Layers：找出 Image Cache</h4>\n<ol>\n<li>Image layers</li>\n<li>Union file system：顯示出一系列 file system 的改變，跟實際的系統一樣</li>\n<li><code>history</code> 和 <code>inspect</code>：了解 image 如何構成</li>\n<li>copy on write：container 如何在 image 上執行</li>\n<li>Image 是由 file system changes 和 metadata 組成的</li>\n<li>每一層都被獨一無二的被辨識而且只存在 host 一次</li>\n<li>這樣的模式可以省下 host 的空間和 push/pull 的傳送時間</li>\n<li>Container 只是在 image 上層的一個單一 read/write 層</li>\n<li><code>docker image history</code> 和 <code>inspect</code> 可以幫助我們了解這些資訊</li>\n</ol>\n<h4>Image Tagging 和推送到 Docker Hub</h4>\n<ol>\n<li>學習前必須要會的：\n<ul>\n<li>了解 container 和 image</li>\n<li>了解 image layer 的基礎</li>\n<li>了解 Docker Hub 的基礎</li>\n</ul>\n</li>\n<li>這個章節要學的\n<ul>\n<li>都在講 image tags</li>\n<li>如何上傳到 Docker Hub</li>\n<li>Image ID vs. Tag</li>\n</ul>\n</li>\n<li><code>cat .docker/config.json</code> 確認已認證登入</li>\n<li><code>docker image tag nginx tingsyuanwang/nginx</code> 給 image tag 到 Docker Hub 的帳戶</li>\n<li><code>docker image push tingsyuanwang/nginx</code> 推送到自己的 Docker Hub</li>\n<li><code>docker image tag tingsyuanwang/nginx tingsyuanwang/nginx:testing</code> 給定名為 testing 的 tag</li>\n<li><code>docker image push tingsyuanwang/nginx:testing</code> 上傳 image，實際上不會全部上傳，只上傳 tag</li>\n<li>回顧\n<ul>\n<li>適時的 tagging images</li>\n<li>給 image tag 是為了要上傳到 Docker Hub</li>\n<li>Tagging 是如何和 image ID 做關聯的</li>\n<li>Latest Tag 只是預設標籤，並不代表最新</li>\n<li>從 Docker cli 登入 Docker Hub</li>\n<li>如何創建私有的 Docker Hub images</li>\n</ul>\n</li>\n</ol>\n<h4>建立 images：Dockerfile 的基礎</h4>\n<ol>\n<li><code>docker build -f some-dockerfile</code> 創建 Dockerfile</li>\n<li><code>ENV NGINX_VERSION 1.13.1-1~stretch</code> 這邊的 ENV 是用來設定環境變數，這是對建立或運行 container 去設定 key 和 value 的主要方法</li>\n<li><code>&amp;&amp;</code> 是為了確保這些指令可以符合進一個單一 layer</li>\n<li><code>RUN ln -sf /dev/stdout /var/log/nginx/access.log \\</code> 這行是關於 log 記錄檔，container 只要確保所有我們想要抓的資訊都有在 stdout 的 log 記錄檔案裡面，docker engine 本身就有 logging drivers 可以去控制 host 上所有 containers 的 logs</li>\n<li><code>EXPOSE 80 443</code> 預設來說，container 裡面沒有 TCP 或 UDP port 是開啟的，除非在這邊定義，<code>EXPOSE</code> 指令並不會讓 host 上的 port 開啟，要在執行 <code>docker run -p</code> 的時候設定 host 的 port</li>\n<li><code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code> <code>CMD</code>是必填參數，這是最後的指令，且在每次開啟、重啟或暫停新的 container 都會執行的命令</li>\n</ol>\n<h4>建立 images：運行 Docker Builds</h4>\n<ol>\n<li>新增一個 <a href=\"https://raw.githubusercontent.com/BretFisher/udemy-docker-mastery/master/dockerfile-sample-1/Dockerfile\" target=\"_blank\" rel=\"external\">Dockerfile</a> 到根目錄</li>\n<li><code>docker image build -t customnginx .</code> 用 dockerfile 新建一個 image</li>\n</ol>\n<h4>建立 images：擴展官方 image</h4>\n<ol>\n<li><code>WORKDIR /usr/share/nginx/html</code> 這個就是在跑 <code>cd</code> 的語法</li>\n<li><code>COPY index.html index.html</code> 複製本地檔案到 docker container 裡面</li>\n<li><code>docker image build -t nginx-with-html .</code> 執行檔案</li>\n<li><code>docker container run -p 80:80 --rm nginx-with-html</code> 用剛剛建立出來的 image 來執行</li>\n</ol>\n<h4>作業：建立自己的 Dockerfile 且使用它運行 container</h4>\n<ol>\n<li>Dockerfiles 是 process workflow 和藝術組合而成的</li>\n<li>使用已存在的 Node.js app 並把它 docker 化</li>\n<li>製作 Dockerfile，建立它，測試它，上傳它，(刪除它)，並運行它</li>\n<li>預期這樣的過程是反覆的，很少能夠一次就完成它的</li>\n<li>細節都在 <code>dockerfile-assignment-1/Dockerfile</code></li>\n<li>使用官方 <strong>node</strong> 6.x image 的 alpine 版本</li>\n<li>預期結果會呈現在 <code>http://localhost</code> 的網頁</li>\n<li>標籤並推送到自己的 Docker Hub</li>\n<li>從本機的 cache 移除 image，並從 Hub 重新運行一次</li>\n</ol>\n<h4>解答：建立自己的 Dockerfile 且使用它運行 container</h4>\n<ol>\n<li>Dockerfile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Instructions from the app developer</div><div class=\"line\"># - you should use the &apos;node&apos; official image, with the alpine 6.x branch</div><div class=\"line\">FROM node:6-alpine</div><div class=\"line\"># - this app listens on port 3000, but the container should launch on port 80</div><div class=\"line\">#  so it will respond to http://localhost:80 on your computer</div><div class=\"line\">EXPOSE 3000</div><div class=\"line\"># - then it should use alpine package manager to install tini: &apos;apk add --update tini&apos;</div><div class=\"line\">RUN apk add --update tini</div><div class=\"line\"># - then it should create directory /usr/src/app for app files with &apos;mkdir -p /usr/src/app&apos;</div><div class=\"line\">RUN mkdir -p /usr/src/app</div><div class=\"line\"># - Node uses a &quot;package manager&quot;, so it needs to copy in package.json file</div><div class=\"line\">COPY package.json package.json</div><div class=\"line\"># - then it needs to run &apos;npm install&apos; to install dependencies from that file</div><div class=\"line\">RUN npm install &amp;&amp; npm cache clean</div><div class=\"line\"># - to keep it clean and small, run &apos;npm cache clean --force&apos; after above</div><div class=\"line\"># - then it needs to copy in all files from current director</div><div class=\"line\">COPY . .</div><div class=\"line\"># - then it needs to start container with command &apos;tini -- node ./bin/www&apos;</div><div class=\"line\">CMD [ &quot;tini&quot;, &quot;--&quot;, &quot;node&quot;, &quot;./bin/www&quot;]</div><div class=\"line\"># - in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD commands</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>docker build -t testnode .</code> 使用 Dockerfile 建立 image</li>\n<li><code>docker container run --rm -p 80:3000 testnode</code> 使用 image 建立 container</li>\n<li><code>docker tag testnode tingsyuanwang/testing-node</code> 修改 tag</li>\n<li><code>docker push tingsyuanwang/testing-node</code> 將檔案推送到 Docker Hub</li>\n<li><code>docker image rm tingsyuanwang/testing-node</code> 將本地端的 node image 移除</li>\n<li><code>docker container run --rm -p 80:3000 tingsyuanwang/testing-node</code> 運行 container 讓 docker 自動從遠端抓回來</li>\n</ol>\n"},{"title":"docker 快速學習自我挑戰 Day4","thumbnail":["/images/learning/docker/dockerday4.png"],"date":"2017-07-28T07:32:17.000Z","_content":"<img src=\"/images/learning/docker/dockerday4.png\">\n\n***\n### Container 生命週期和持久性數據：Volumes, Volumes, Volumes\n#### Container 生命週期和持久性數據\n##### 學習重點\n1. 定義持久性數據的問題\n2. Container 的關鍵觀念：immutable，ephemeral\n3. 學習使用 Data Volumes\n4. 學習使用 Bind Mounts\n5. 作業\n##### 觀念\n1. Container **通常**是 immutable 而且 ephemeral\n2. 「immutable infrastructure」：只重新部署 container，從來都不改變\n3. 這些都是理想的情境，但是 databases 或 unique data 呢？\n4. Docker 給我們一些特色來確保這些「separation of concerns」\n5. 這些被稱為「persistent data」\n6. 兩種方法：Volumes 和 Bind Mounts\n7. Volumes：製作一個特別的地點在 container UFS(Unit File System) 之外\n8. Bind Mounts：連結 container 路徑到 host 路徑\n#### 持久性數據：Data Volumes\n1. Dockerfile 裡面的 `VOLUME` 命令\n2. `docker volume prune` 可以清除未使用的 volume\n3. `docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql` 使用 mysql 的 image 開啟一個 container\n4. `docker container inspect mysql` 查看 mysql 狀態，`Mounts` 可以看到路徑\n5. `docker volume inspect {Volume Name}` 可以看到 Mountpoint 路徑\n6. `docker container rm {container name}` 將 container 都刪除之後，使用 `docker volume ls` 觀察，會發現 Volume 都還會在\n7. `docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql` `-v` 的指令在這邊表示外接 volume，volume 的名稱為 mysql-db\n8. `docker volume create` 必須要在 `docker container run` 之前執行，這樣才能選擇自訂的 drives 和 labels\n#### 持久性數據：Bind Mounting\n1. Map host 檔案或目錄到 container 的檔案或目錄\n2. 基本上只有兩個位址會指定到相同的檔案\n3. 省略 UFS 和 host 檔案覆寫任何 container 裡的東西\n4. 不能在 Dockerfile 使用，必須在 `container run` 的時候使用\n5. `... run -v /Users/vincent/stuff:/path/container` (Mac/Linux)\n6. `... run -v //c/Users/vincent/stuff:/path/container` (Windows)\n7. `docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx` 新增一個 container 並指定 volume 到現在的路徑 $(pwd)\n8. `docker container run -d --name nginx2 -p 8080:80 nginx` 再新增一個 container 做比較\n9. `docker container exec -it nginx bash` 用 bash 連進去 nginx\n10. `touch testme.txt` 在本來的目錄新增檔案，最後檔案會出現在 container 裡面，因為目錄是共用的\n#### 作業：Database 與命名好的 Volume 一起升級\n1. 讓 database 跟 container 一起升級\n2. 創建一個 **postgres** container 並將 volume 命名為 psql-data，且使用版本 **9.6.1**\n3. 使用 Docker Hub 學習 **VOLUME** 必要路徑和版本，然後運行它\n4. 檢查 logs 並停止 container\n5. 再創建一個 **postgres** container 並使用同個 volume 名稱，且使用版本 **9.6.2**\n6. 透過檢查 logs 來驗證\n7. (這些只在 patch 版本能運作，大部分 SQL 資料庫需要手動設定指令來升級資料庫到主要/次要版本，換言之，這是資料庫的限制，而非 container 的限制)\n#### 答案：Database 與命名好的 Volume 一起升級\n1. `docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6.1`\n2. `docker container logs -f psql` `-f` 代表持續 follow\n3. `docker container stop psql`\n4. `docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6.2`\n5. `docker container logs psql2`\n#### 作業：編輯與 Bind Mounts 一起運行的 container 的程式碼\n1. 使用 Jekyll 「靜態網頁生成器」來啟動本地端的 web server\n2. 不一定要成為 web 開發者：這是一個橋接在本地檔案存取和運行在 container 的 apps 間的 gap 的範例\n3. 來源程式碼在 **bindmount-sample-1** 的課程 repo 裡面\n4. 我們會用 host 上的原生工具當作編輯器來編輯檔案\n5. Container 偵測到 host 端檔案改變，會到 web server 更新\n6. 使用 `docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve` 開啟 container\n7. 重整瀏覽器來觀察變化\n8. 修改 **_posts\\\\** 且重整瀏覽器來觀察變化\n#### 答案：編輯與 Bind Mounts 一起運行的 container 的程式碼\n1. 使用 `docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve` 開啟 container\n2. 直接編輯目錄底下的 **_posts\\\\** 並重整瀏覽器，網站就會直接修改\n3. [Jekyll 靜態網頁生成器](https://jekyllrb.com/)","source":"_posts/docker-快速學習自我挑戰-Day4.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day4\nthumbnail:\n  - /images/learning/docker/dockerday4.png\ndate: 2017-07-28 15:32:17\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday4.png\">\n\n***\n### Container 生命週期和持久性數據：Volumes, Volumes, Volumes\n#### Container 生命週期和持久性數據\n##### 學習重點\n1. 定義持久性數據的問題\n2. Container 的關鍵觀念：immutable，ephemeral\n3. 學習使用 Data Volumes\n4. 學習使用 Bind Mounts\n5. 作業\n##### 觀念\n1. Container **通常**是 immutable 而且 ephemeral\n2. 「immutable infrastructure」：只重新部署 container，從來都不改變\n3. 這些都是理想的情境，但是 databases 或 unique data 呢？\n4. Docker 給我們一些特色來確保這些「separation of concerns」\n5. 這些被稱為「persistent data」\n6. 兩種方法：Volumes 和 Bind Mounts\n7. Volumes：製作一個特別的地點在 container UFS(Unit File System) 之外\n8. Bind Mounts：連結 container 路徑到 host 路徑\n#### 持久性數據：Data Volumes\n1. Dockerfile 裡面的 `VOLUME` 命令\n2. `docker volume prune` 可以清除未使用的 volume\n3. `docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql` 使用 mysql 的 image 開啟一個 container\n4. `docker container inspect mysql` 查看 mysql 狀態，`Mounts` 可以看到路徑\n5. `docker volume inspect {Volume Name}` 可以看到 Mountpoint 路徑\n6. `docker container rm {container name}` 將 container 都刪除之後，使用 `docker volume ls` 觀察，會發現 Volume 都還會在\n7. `docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql` `-v` 的指令在這邊表示外接 volume，volume 的名稱為 mysql-db\n8. `docker volume create` 必須要在 `docker container run` 之前執行，這樣才能選擇自訂的 drives 和 labels\n#### 持久性數據：Bind Mounting\n1. Map host 檔案或目錄到 container 的檔案或目錄\n2. 基本上只有兩個位址會指定到相同的檔案\n3. 省略 UFS 和 host 檔案覆寫任何 container 裡的東西\n4. 不能在 Dockerfile 使用，必須在 `container run` 的時候使用\n5. `... run -v /Users/vincent/stuff:/path/container` (Mac/Linux)\n6. `... run -v //c/Users/vincent/stuff:/path/container` (Windows)\n7. `docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx` 新增一個 container 並指定 volume 到現在的路徑 $(pwd)\n8. `docker container run -d --name nginx2 -p 8080:80 nginx` 再新增一個 container 做比較\n9. `docker container exec -it nginx bash` 用 bash 連進去 nginx\n10. `touch testme.txt` 在本來的目錄新增檔案，最後檔案會出現在 container 裡面，因為目錄是共用的\n#### 作業：Database 與命名好的 Volume 一起升級\n1. 讓 database 跟 container 一起升級\n2. 創建一個 **postgres** container 並將 volume 命名為 psql-data，且使用版本 **9.6.1**\n3. 使用 Docker Hub 學習 **VOLUME** 必要路徑和版本，然後運行它\n4. 檢查 logs 並停止 container\n5. 再創建一個 **postgres** container 並使用同個 volume 名稱，且使用版本 **9.6.2**\n6. 透過檢查 logs 來驗證\n7. (這些只在 patch 版本能運作，大部分 SQL 資料庫需要手動設定指令來升級資料庫到主要/次要版本，換言之，這是資料庫的限制，而非 container 的限制)\n#### 答案：Database 與命名好的 Volume 一起升級\n1. `docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6.1`\n2. `docker container logs -f psql` `-f` 代表持續 follow\n3. `docker container stop psql`\n4. `docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6.2`\n5. `docker container logs psql2`\n#### 作業：編輯與 Bind Mounts 一起運行的 container 的程式碼\n1. 使用 Jekyll 「靜態網頁生成器」來啟動本地端的 web server\n2. 不一定要成為 web 開發者：這是一個橋接在本地檔案存取和運行在 container 的 apps 間的 gap 的範例\n3. 來源程式碼在 **bindmount-sample-1** 的課程 repo 裡面\n4. 我們會用 host 上的原生工具當作編輯器來編輯檔案\n5. Container 偵測到 host 端檔案改變，會到 web server 更新\n6. 使用 `docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve` 開啟 container\n7. 重整瀏覽器來觀察變化\n8. 修改 **_posts\\\\** 且重整瀏覽器來觀察變化\n#### 答案：編輯與 Bind Mounts 一起運行的 container 的程式碼\n1. 使用 `docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve` 開啟 container\n2. 直接編輯目錄底下的 **_posts\\\\** 並重整瀏覽器，網站就會直接修改\n3. [Jekyll 靜態網頁生成器](https://jekyllrb.com/)","slug":"docker-快速學習自我挑戰-Day4","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyn006l7ifaz7any40u","content":"<img src=\"/images/learning/docker/dockerday4.png\">\n<hr>\n<h3>Container 生命週期和持久性數據：Volumes, Volumes, Volumes</h3>\n<h4>Container 生命週期和持久性數據</h4>\n<h5>學習重點</h5>\n<ol>\n<li>定義持久性數據的問題</li>\n<li>Container 的關鍵觀念：immutable，ephemeral</li>\n<li>學習使用 Data Volumes</li>\n<li>學習使用 Bind Mounts</li>\n<li>作業</li>\n</ol>\n<h5>觀念</h5>\n<ol>\n<li>Container <strong>通常</strong>是 immutable 而且 ephemeral</li>\n<li>「immutable infrastructure」：只重新部署 container，從來都不改變</li>\n<li>這些都是理想的情境，但是 databases 或 unique data 呢？</li>\n<li>Docker 給我們一些特色來確保這些「separation of concerns」</li>\n<li>這些被稱為「persistent data」</li>\n<li>兩種方法：Volumes 和 Bind Mounts</li>\n<li>Volumes：製作一個特別的地點在 container UFS(Unit File System) 之外</li>\n<li>Bind Mounts：連結 container 路徑到 host 路徑</li>\n</ol>\n<h4>持久性數據：Data Volumes</h4>\n<ol>\n<li>Dockerfile 裡面的 <code>VOLUME</code> 命令</li>\n<li><code>docker volume prune</code> 可以清除未使用的 volume</li>\n<li><code>docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql</code> 使用 mysql 的 image 開啟一個 container</li>\n<li><code>docker container inspect mysql</code> 查看 mysql 狀態，<code>Mounts</code> 可以看到路徑</li>\n<li><code>docker volume inspect {Volume Name}</code> 可以看到 Mountpoint 路徑</li>\n<li><code>docker container rm {container name}</code> 將 container 都刪除之後，使用 <code>docker volume ls</code> 觀察，會發現 Volume 都還會在</li>\n<li><code>docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql</code> <code>-v</code> 的指令在這邊表示外接 volume，volume 的名稱為 mysql-db</li>\n<li><code>docker volume create</code> 必須要在 <code>docker container run</code> 之前執行，這樣才能選擇自訂的 drives 和 labels</li>\n</ol>\n<h4>持久性數據：Bind Mounting</h4>\n<ol>\n<li>Map host 檔案或目錄到 container 的檔案或目錄</li>\n<li>基本上只有兩個位址會指定到相同的檔案</li>\n<li>省略 UFS 和 host 檔案覆寫任何 container 裡的東西</li>\n<li>不能在 Dockerfile 使用，必須在 <code>container run</code> 的時候使用</li>\n<li><code>... run -v /Users/vincent/stuff:/path/container</code> (Mac/Linux)</li>\n<li><code>... run -v //c/Users/vincent/stuff:/path/container</code> (Windows)</li>\n<li><code>docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx</code> 新增一個 container 並指定 volume 到現在的路徑 $(pwd)</li>\n<li><code>docker container run -d --name nginx2 -p 8080:80 nginx</code> 再新增一個 container 做比較</li>\n<li><code>docker container exec -it nginx bash</code> 用 bash 連進去 nginx</li>\n<li><code>touch testme.txt</code> 在本來的目錄新增檔案，最後檔案會出現在 container 裡面，因為目錄是共用的</li>\n</ol>\n<h4>作業：Database 與命名好的 Volume 一起升級</h4>\n<ol>\n<li>讓 database 跟 container 一起升級</li>\n<li>創建一個 <strong>postgres</strong> container 並將 volume 命名為 psql-data，且使用版本 <strong>9.6.1</strong></li>\n<li>使用 Docker Hub 學習 <strong>VOLUME</strong> 必要路徑和版本，然後運行它</li>\n<li>檢查 logs 並停止 container</li>\n<li>再創建一個 <strong>postgres</strong> container 並使用同個 volume 名稱，且使用版本 <strong>9.6.2</strong></li>\n<li>透過檢查 logs 來驗證</li>\n<li>(這些只在 patch 版本能運作，大部分 SQL 資料庫需要手動設定指令來升級資料庫到主要/次要版本，換言之，這是資料庫的限制，而非 container 的限制)</li>\n</ol>\n<h4>答案：Database 與命名好的 Volume 一起升級</h4>\n<ol>\n<li><code>docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6.1</code></li>\n<li><code>docker container logs -f psql</code> <code>-f</code> 代表持續 follow</li>\n<li><code>docker container stop psql</code></li>\n<li><code>docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6.2</code></li>\n<li><code>docker container logs psql2</code></li>\n</ol>\n<h4>作業：編輯與 Bind Mounts 一起運行的 container 的程式碼</h4>\n<ol>\n<li>使用 Jekyll 「靜態網頁生成器」來啟動本地端的 web server</li>\n<li>不一定要成為 web 開發者：這是一個橋接在本地檔案存取和運行在 container 的 apps 間的 gap 的範例</li>\n<li>來源程式碼在 <strong>bindmount-sample-1</strong> 的課程 repo 裡面</li>\n<li>我們會用 host 上的原生工具當作編輯器來編輯檔案</li>\n<li>Container 偵測到 host 端檔案改變，會到 web server 更新</li>\n<li>使用 <code>docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve</code> 開啟 container</li>\n<li>重整瀏覽器來觀察變化</li>\n<li>修改 <strong>_posts\\</strong> 且重整瀏覽器來觀察變化</li>\n</ol>\n<h4>答案：編輯與 Bind Mounts 一起運行的 container 的程式碼</h4>\n<ol>\n<li>使用 <code>docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve</code> 開啟 container</li>\n<li>直接編輯目錄底下的 <strong>_posts\\</strong> 並重整瀏覽器，網站就會直接修改</li>\n<li><a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"external\">Jekyll 靜態網頁生成器</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday4.png\">\n<hr>\n<h3>Container 生命週期和持久性數據：Volumes, Volumes, Volumes</h3>\n<h4>Container 生命週期和持久性數據</h4>\n<h5>學習重點</h5>\n<ol>\n<li>定義持久性數據的問題</li>\n<li>Container 的關鍵觀念：immutable，ephemeral</li>\n<li>學習使用 Data Volumes</li>\n<li>學習使用 Bind Mounts</li>\n<li>作業</li>\n</ol>\n<h5>觀念</h5>\n<ol>\n<li>Container <strong>通常</strong>是 immutable 而且 ephemeral</li>\n<li>「immutable infrastructure」：只重新部署 container，從來都不改變</li>\n<li>這些都是理想的情境，但是 databases 或 unique data 呢？</li>\n<li>Docker 給我們一些特色來確保這些「separation of concerns」</li>\n<li>這些被稱為「persistent data」</li>\n<li>兩種方法：Volumes 和 Bind Mounts</li>\n<li>Volumes：製作一個特別的地點在 container UFS(Unit File System) 之外</li>\n<li>Bind Mounts：連結 container 路徑到 host 路徑</li>\n</ol>\n<h4>持久性數據：Data Volumes</h4>\n<ol>\n<li>Dockerfile 裡面的 <code>VOLUME</code> 命令</li>\n<li><code>docker volume prune</code> 可以清除未使用的 volume</li>\n<li><code>docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql</code> 使用 mysql 的 image 開啟一個 container</li>\n<li><code>docker container inspect mysql</code> 查看 mysql 狀態，<code>Mounts</code> 可以看到路徑</li>\n<li><code>docker volume inspect {Volume Name}</code> 可以看到 Mountpoint 路徑</li>\n<li><code>docker container rm {container name}</code> 將 container 都刪除之後，使用 <code>docker volume ls</code> 觀察，會發現 Volume 都還會在</li>\n<li><code>docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql</code> <code>-v</code> 的指令在這邊表示外接 volume，volume 的名稱為 mysql-db</li>\n<li><code>docker volume create</code> 必須要在 <code>docker container run</code> 之前執行，這樣才能選擇自訂的 drives 和 labels</li>\n</ol>\n<h4>持久性數據：Bind Mounting</h4>\n<ol>\n<li>Map host 檔案或目錄到 container 的檔案或目錄</li>\n<li>基本上只有兩個位址會指定到相同的檔案</li>\n<li>省略 UFS 和 host 檔案覆寫任何 container 裡的東西</li>\n<li>不能在 Dockerfile 使用，必須在 <code>container run</code> 的時候使用</li>\n<li><code>... run -v /Users/vincent/stuff:/path/container</code> (Mac/Linux)</li>\n<li><code>... run -v //c/Users/vincent/stuff:/path/container</code> (Windows)</li>\n<li><code>docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx</code> 新增一個 container 並指定 volume 到現在的路徑 $(pwd)</li>\n<li><code>docker container run -d --name nginx2 -p 8080:80 nginx</code> 再新增一個 container 做比較</li>\n<li><code>docker container exec -it nginx bash</code> 用 bash 連進去 nginx</li>\n<li><code>touch testme.txt</code> 在本來的目錄新增檔案，最後檔案會出現在 container 裡面，因為目錄是共用的</li>\n</ol>\n<h4>作業：Database 與命名好的 Volume 一起升級</h4>\n<ol>\n<li>讓 database 跟 container 一起升級</li>\n<li>創建一個 <strong>postgres</strong> container 並將 volume 命名為 psql-data，且使用版本 <strong>9.6.1</strong></li>\n<li>使用 Docker Hub 學習 <strong>VOLUME</strong> 必要路徑和版本，然後運行它</li>\n<li>檢查 logs 並停止 container</li>\n<li>再創建一個 <strong>postgres</strong> container 並使用同個 volume 名稱，且使用版本 <strong>9.6.2</strong></li>\n<li>透過檢查 logs 來驗證</li>\n<li>(這些只在 patch 版本能運作，大部分 SQL 資料庫需要手動設定指令來升級資料庫到主要/次要版本，換言之，這是資料庫的限制，而非 container 的限制)</li>\n</ol>\n<h4>答案：Database 與命名好的 Volume 一起升級</h4>\n<ol>\n<li><code>docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6.1</code></li>\n<li><code>docker container logs -f psql</code> <code>-f</code> 代表持續 follow</li>\n<li><code>docker container stop psql</code></li>\n<li><code>docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6.2</code></li>\n<li><code>docker container logs psql2</code></li>\n</ol>\n<h4>作業：編輯與 Bind Mounts 一起運行的 container 的程式碼</h4>\n<ol>\n<li>使用 Jekyll 「靜態網頁生成器」來啟動本地端的 web server</li>\n<li>不一定要成為 web 開發者：這是一個橋接在本地檔案存取和運行在 container 的 apps 間的 gap 的範例</li>\n<li>來源程式碼在 <strong>bindmount-sample-1</strong> 的課程 repo 裡面</li>\n<li>我們會用 host 上的原生工具當作編輯器來編輯檔案</li>\n<li>Container 偵測到 host 端檔案改變，會到 web server 更新</li>\n<li>使用 <code>docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve</code> 開啟 container</li>\n<li>重整瀏覽器來觀察變化</li>\n<li>修改 <strong>_posts\\</strong> 且重整瀏覽器來觀察變化</li>\n</ol>\n<h4>答案：編輯與 Bind Mounts 一起運行的 container 的程式碼</h4>\n<ol>\n<li>使用 <code>docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve</code> 開啟 container</li>\n<li>直接編輯目錄底下的 <strong>_posts\\</strong> 並重整瀏覽器，網站就會直接修改</li>\n<li><a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"external\">Jekyll 靜態網頁生成器</a></li>\n</ol>\n"},{"title":"docker 快速學習自我挑戰 Day5","thumbnail":["/images/learning/docker/dockerday5.jpg"],"date":"2017-07-29T04:37:49.000Z","_content":"<img src=\"/images/learning/docker/dockerday5.jpg\">\n\n***\n### 讓 Docker Compose 更簡單：Multi-Container 工具\n#### Docker Compose 和 The docker-compose.yml\n##### Docker Compose\n1. 為什麼：搞清楚 container 之間的關係\n2. 為什麼：將 Docker container 的運行設定存成易讀取的檔案\n3. 為什麼：一線開發者環境啟動\n4. 可以分成兩個相關的事情\n    - YAML 格式描述我們的解決方案選項：containers、networks、volumes\n    - CLI 工具 **docker-compose** 被用在開發/測試自動化且使用 YAML 檔案\n##### docker-compose.yml\n1. Compose YAML 格式有自己的版本：1、2、2.1、3、3.1\n2. YAML 檔案可以被用於本地 docker 自動化或...的 **docker-compose** 命令\n3. **docker** 已經直接被產品化，叫做 Swarm (從 v.1.13 開始)\n4. `docker-compose --help`\n5. **docker-compose.yml** 是預設名稱，但是`docker-compose -f`可以任何使用喜歡的名稱\n#### 測試基本 Compose 命令\n1. Docker 的 CLI 工具有 Windows/Mac 版本，但是 Linux 需要分開下載\n2. 不是一個產品化等級的工具，但是對在本地端開發和測試是理想的\n3. 最常使用的兩個命令是\n    - `docker-compose up` # 設定 volumes/networks 和開啟所有的 containers\n    - `docker-compose down` # 停止所有的 containers 和移除 cont/vol/net\n4. 如果你的所有專案都有 **Dockerfile** 和 **docker-compose.yml**，那「新的開發者」應該要\n    - `git clone github.com/some/software`\n    - `docker-compose up`\n5. 進入超級管理員模式 `sudo -i`\n6. 安裝 docker-compose [最新版本](https://github.com/docker/compose/releases) ``curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose``\n#### 作業：為 Multi-Container 服務建立一個 Compose File\n1. 建立一個基本的 compose file 用於 Drupal CMS 網站，Docker Hub 是你的好朋友\n2. 使用 **Drupal** image 並與 **postgres** imgae 一起使用\n3. 使用 **ports** 使 Drupal 運行在 8080，如此一來可以透過 localhost:8080 來存取網頁\n4. 確定有設定 postgres 的 **POSTGRES_PASSWORD**\n5. 用瀏覽器來設定 Drupal\n6. 秘訣：Drupal 假定 DB 是 localhost，但是資料庫在另外一個 container，要在 Drupal 設定讓它跟 Docker network 溝通\n7. 額外加分：使用 volumes 來儲存 Drupal 的 unique data\n#### 答案：為 Multi-Container 服務建立一個 Compose File\n1. 建立一個 docker-compose.yml\n```\nversion: '2'\n\nservices:\n  drupal:\n    image: drupal\n    ports:\n      - \"8080:80\"\n    volumes:\n      - drupal-modules:/var/www/html/modules \\\n      - drupal-profiles:/var/www/html/profiles \\\n      - drupal-sites:/var/www/html/sites \\\n      - drupal-themes:/var/www/html/themes\n  postgres:\n    image: postgres\n    environment:\n      - POSTGRES_PASSWORD=mypassword\n```\n2. `docker-compose up` 啟動專案\n3. `docker-compose down -v` 刪除專案\n#### 新增 Image Building 到 Compose Files\n##### 使用 Compose 來 Build\n1. Compose 也可以建立你自己的客製化 images\n2. 如果在 cache 沒有找到，會在 `docker-compose up` 的時候建立起來\n3. 也可以透過 `docker-compose build` 或 `docker-compose up --build` 重建 \n4. 對複雜的 builds 非常好，因為它會有很多 vars 或 build args\n##### 實作\n1. 建立一個 docker-compose.yml，如果找不到 nginx-custom 的 image，則會執行 build 裡的 Dockerfile\n```\nversion: '2'\n\n# based off compose-sample-2, only we build nginx.conf into image\n# uses sample site from https://startbootstrap.com/template-overviews/agency/\n\nservices:\n  proxy:\n    build:\n      context: .\n      dockerfile: nginx.Dockerfile\n    image: nginx-custom\n    ports:\n      - '80:80'\n  web:\n    image: httpd\n    volumes:\n      - ./html:/usr/local/apache2/htdocs/\n```\n2. `docker-compose up`\n3. `docker-compose down`\n4. `docker-compose down --rmi local` 在關閉的時候同時刪除 image\n#### 作業：Run-Time Image Building 和 Multi-Container 開發的 Compose\n1. 為本地端測試建立一個客製化的 **drupal** image\n2. Compose 並不是只有給開發者使用，測試 apps 是很簡單/有趣的\n3. 或許你在學習成為 Drupal 的管理者，或者是軟體測試者\n4. 從上一次的作業開始 Compose file\n5. 在目錄 **compose-assignment-2** 建立你自己的 **Dockerfile** 和 **docker-compose.yml**\n6. 使用 **drupal** image 並與 **postgres** image 一起使用，就像之前一樣\n7. 使用目錄裡的 [**README.md**](https://github.com/BretFisher/udemy-docker-mastery/tree/master/compose-assignment-2) 取得更多細節\n#### 答案：Run-Time Image Building 和 Multi-Container 開發的 Compose\n1. 建立 Dockerfile\n```\nFROM drupal:8.2\n\nRUN apt-get update && apt-get install -y git \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /var/www/html/themes\n\nRUN git clone --branch 8.x-3.x --single-branch --depth 1 https://git.drupal.org/project/bootstrap.git \\\n    && chown -R www-data:www-data bootstrap\n\nWORKDIR /var/www/html\n```\n2. 建立 docker-compose.yml\n```\nversion: '2'\n\nservices:\n  drupal:\n    image: custom-drupal\n    build: .\n    ports:\n      - \"8080:80\"\n    volumes:\n      - drupal-modules:/var/www/html/modules \\\n      - drupal-profiles:/var/www/html/profiles \\\n      - drupal-sites:/var/www/html/sites \\\n      - drupal-themes:/var/www/html/themes\n  postgres:\n    image: postgres:9.6\n    environment:\n      - POSTGRES_PASSWORD=mypassword\n    volumes:\n      - drupal-data:/var/lib/postgresql/data\n\nvolumes:\n  drupal-data:\n  drupal-modules:\n  drupal-profiles:\n  drupal-sites:\n  drupal-themes:\n```\n\n\n\n","source":"_posts/docker-快速學習自我挑戰-Day5.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day5\nthumbnail:\n  - /images/learning/docker/dockerday5.jpg\ndate: 2017-07-29 12:37:49\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday5.jpg\">\n\n***\n### 讓 Docker Compose 更簡單：Multi-Container 工具\n#### Docker Compose 和 The docker-compose.yml\n##### Docker Compose\n1. 為什麼：搞清楚 container 之間的關係\n2. 為什麼：將 Docker container 的運行設定存成易讀取的檔案\n3. 為什麼：一線開發者環境啟動\n4. 可以分成兩個相關的事情\n    - YAML 格式描述我們的解決方案選項：containers、networks、volumes\n    - CLI 工具 **docker-compose** 被用在開發/測試自動化且使用 YAML 檔案\n##### docker-compose.yml\n1. Compose YAML 格式有自己的版本：1、2、2.1、3、3.1\n2. YAML 檔案可以被用於本地 docker 自動化或...的 **docker-compose** 命令\n3. **docker** 已經直接被產品化，叫做 Swarm (從 v.1.13 開始)\n4. `docker-compose --help`\n5. **docker-compose.yml** 是預設名稱，但是`docker-compose -f`可以任何使用喜歡的名稱\n#### 測試基本 Compose 命令\n1. Docker 的 CLI 工具有 Windows/Mac 版本，但是 Linux 需要分開下載\n2. 不是一個產品化等級的工具，但是對在本地端開發和測試是理想的\n3. 最常使用的兩個命令是\n    - `docker-compose up` # 設定 volumes/networks 和開啟所有的 containers\n    - `docker-compose down` # 停止所有的 containers 和移除 cont/vol/net\n4. 如果你的所有專案都有 **Dockerfile** 和 **docker-compose.yml**，那「新的開發者」應該要\n    - `git clone github.com/some/software`\n    - `docker-compose up`\n5. 進入超級管理員模式 `sudo -i`\n6. 安裝 docker-compose [最新版本](https://github.com/docker/compose/releases) ``curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose``\n#### 作業：為 Multi-Container 服務建立一個 Compose File\n1. 建立一個基本的 compose file 用於 Drupal CMS 網站，Docker Hub 是你的好朋友\n2. 使用 **Drupal** image 並與 **postgres** imgae 一起使用\n3. 使用 **ports** 使 Drupal 運行在 8080，如此一來可以透過 localhost:8080 來存取網頁\n4. 確定有設定 postgres 的 **POSTGRES_PASSWORD**\n5. 用瀏覽器來設定 Drupal\n6. 秘訣：Drupal 假定 DB 是 localhost，但是資料庫在另外一個 container，要在 Drupal 設定讓它跟 Docker network 溝通\n7. 額外加分：使用 volumes 來儲存 Drupal 的 unique data\n#### 答案：為 Multi-Container 服務建立一個 Compose File\n1. 建立一個 docker-compose.yml\n```\nversion: '2'\n\nservices:\n  drupal:\n    image: drupal\n    ports:\n      - \"8080:80\"\n    volumes:\n      - drupal-modules:/var/www/html/modules \\\n      - drupal-profiles:/var/www/html/profiles \\\n      - drupal-sites:/var/www/html/sites \\\n      - drupal-themes:/var/www/html/themes\n  postgres:\n    image: postgres\n    environment:\n      - POSTGRES_PASSWORD=mypassword\n```\n2. `docker-compose up` 啟動專案\n3. `docker-compose down -v` 刪除專案\n#### 新增 Image Building 到 Compose Files\n##### 使用 Compose 來 Build\n1. Compose 也可以建立你自己的客製化 images\n2. 如果在 cache 沒有找到，會在 `docker-compose up` 的時候建立起來\n3. 也可以透過 `docker-compose build` 或 `docker-compose up --build` 重建 \n4. 對複雜的 builds 非常好，因為它會有很多 vars 或 build args\n##### 實作\n1. 建立一個 docker-compose.yml，如果找不到 nginx-custom 的 image，則會執行 build 裡的 Dockerfile\n```\nversion: '2'\n\n# based off compose-sample-2, only we build nginx.conf into image\n# uses sample site from https://startbootstrap.com/template-overviews/agency/\n\nservices:\n  proxy:\n    build:\n      context: .\n      dockerfile: nginx.Dockerfile\n    image: nginx-custom\n    ports:\n      - '80:80'\n  web:\n    image: httpd\n    volumes:\n      - ./html:/usr/local/apache2/htdocs/\n```\n2. `docker-compose up`\n3. `docker-compose down`\n4. `docker-compose down --rmi local` 在關閉的時候同時刪除 image\n#### 作業：Run-Time Image Building 和 Multi-Container 開發的 Compose\n1. 為本地端測試建立一個客製化的 **drupal** image\n2. Compose 並不是只有給開發者使用，測試 apps 是很簡單/有趣的\n3. 或許你在學習成為 Drupal 的管理者，或者是軟體測試者\n4. 從上一次的作業開始 Compose file\n5. 在目錄 **compose-assignment-2** 建立你自己的 **Dockerfile** 和 **docker-compose.yml**\n6. 使用 **drupal** image 並與 **postgres** image 一起使用，就像之前一樣\n7. 使用目錄裡的 [**README.md**](https://github.com/BretFisher/udemy-docker-mastery/tree/master/compose-assignment-2) 取得更多細節\n#### 答案：Run-Time Image Building 和 Multi-Container 開發的 Compose\n1. 建立 Dockerfile\n```\nFROM drupal:8.2\n\nRUN apt-get update && apt-get install -y git \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /var/www/html/themes\n\nRUN git clone --branch 8.x-3.x --single-branch --depth 1 https://git.drupal.org/project/bootstrap.git \\\n    && chown -R www-data:www-data bootstrap\n\nWORKDIR /var/www/html\n```\n2. 建立 docker-compose.yml\n```\nversion: '2'\n\nservices:\n  drupal:\n    image: custom-drupal\n    build: .\n    ports:\n      - \"8080:80\"\n    volumes:\n      - drupal-modules:/var/www/html/modules \\\n      - drupal-profiles:/var/www/html/profiles \\\n      - drupal-sites:/var/www/html/sites \\\n      - drupal-themes:/var/www/html/themes\n  postgres:\n    image: postgres:9.6\n    environment:\n      - POSTGRES_PASSWORD=mypassword\n    volumes:\n      - drupal-data:/var/lib/postgresql/data\n\nvolumes:\n  drupal-data:\n  drupal-modules:\n  drupal-profiles:\n  drupal-sites:\n  drupal-themes:\n```\n\n\n\n","slug":"docker-快速學習自我挑戰-Day5","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyn006o7ifaoymxsl84","content":"<img src=\"/images/learning/docker/dockerday5.jpg\">\n<hr>\n<h3>讓 Docker Compose 更簡單：Multi-Container 工具</h3>\n<h4>Docker Compose 和 The docker-compose.yml</h4>\n<h5>Docker Compose</h5>\n<ol>\n<li>為什麼：搞清楚 container 之間的關係</li>\n<li>為什麼：將 Docker container 的運行設定存成易讀取的檔案</li>\n<li>為什麼：一線開發者環境啟動</li>\n<li>可以分成兩個相關的事情\n<ul>\n<li>YAML 格式描述我們的解決方案選項：containers、networks、volumes</li>\n<li>CLI 工具 <strong>docker-compose</strong> 被用在開發/測試自動化且使用 YAML 檔案</li>\n</ul>\n</li>\n</ol>\n<h5>docker-compose.yml</h5>\n<ol>\n<li>Compose YAML 格式有自己的版本：1、2、2.1、3、3.1</li>\n<li>YAML 檔案可以被用於本地 docker 自動化或…的 <strong>docker-compose</strong> 命令</li>\n<li><strong>docker</strong> 已經直接被產品化，叫做 Swarm (從 v.1.13 開始)</li>\n<li><code>docker-compose --help</code></li>\n<li><strong>docker-compose.yml</strong> 是預設名稱，但是<code>docker-compose -f</code>可以任何使用喜歡的名稱</li>\n</ol>\n<h4>測試基本 Compose 命令</h4>\n<ol>\n<li>Docker 的 CLI 工具有 Windows/Mac 版本，但是 Linux 需要分開下載</li>\n<li>不是一個產品化等級的工具，但是對在本地端開發和測試是理想的</li>\n<li>最常使用的兩個命令是\n<ul>\n<li><code>docker-compose up</code> # 設定 volumes/networks 和開啟所有的 containers</li>\n<li><code>docker-compose down</code> # 停止所有的 containers 和移除 cont/vol/net</li>\n</ul>\n</li>\n<li>如果你的所有專案都有 <strong>Dockerfile</strong> 和 <strong>docker-compose.yml</strong>，那「新的開發者」應該要\n<ul>\n<li><code>git clone github.com/some/software</code></li>\n<li><code>docker-compose up</code></li>\n</ul>\n</li>\n<li>進入超級管理員模式 <code>sudo -i</code></li>\n<li>安裝 docker-compose <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"external\">最新版本</a> <code>curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</code></li>\n</ol>\n<h4>作業：為 Multi-Container 服務建立一個 Compose File</h4>\n<ol>\n<li>建立一個基本的 compose file 用於 Drupal CMS 網站，Docker Hub 是你的好朋友</li>\n<li>使用 <strong>Drupal</strong> image 並與 <strong>postgres</strong> imgae 一起使用</li>\n<li>使用 <strong>ports</strong> 使 Drupal 運行在 8080，如此一來可以透過 localhost:8080 來存取網頁</li>\n<li>確定有設定 postgres 的 <strong>POSTGRES_PASSWORD</strong></li>\n<li>用瀏覽器來設定 Drupal</li>\n<li>秘訣：Drupal 假定 DB 是 localhost，但是資料庫在另外一個 container，要在 Drupal 設定讓它跟 Docker network 溝通</li>\n<li>額外加分：使用 volumes 來儲存 Drupal 的 unique data</li>\n</ol>\n<h4>答案：為 Multi-Container 服務建立一個 Compose File</h4>\n<ol>\n<li>建立一個 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;2&apos;</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\">  drupal:</div><div class=\"line\">    image: drupal</div><div class=\"line\">    ports:</div><div class=\"line\">      - &quot;8080:80&quot;</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-modules:/var/www/html/modules \\</div><div class=\"line\">      - drupal-profiles:/var/www/html/profiles \\</div><div class=\"line\">      - drupal-sites:/var/www/html/sites \\</div><div class=\"line\">      - drupal-themes:/var/www/html/themes</div><div class=\"line\">  postgres:</div><div class=\"line\">    image: postgres</div><div class=\"line\">    environment:</div><div class=\"line\">      - POSTGRES_PASSWORD=mypassword</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>docker-compose up</code> 啟動專案</li>\n<li><code>docker-compose down -v</code> 刪除專案</li>\n</ol>\n<h4>新增 Image Building 到 Compose Files</h4>\n<h5>使用 Compose 來 Build</h5>\n<ol>\n<li>Compose 也可以建立你自己的客製化 images</li>\n<li>如果在 cache 沒有找到，會在 <code>docker-compose up</code> 的時候建立起來</li>\n<li>也可以透過 <code>docker-compose build</code> 或 <code>docker-compose up --build</code> 重建</li>\n<li>對複雜的 builds 非常好，因為它會有很多 vars 或 build args</li>\n</ol>\n<h5>實作</h5>\n<ol>\n<li>建立一個 docker-compose.yml，如果找不到 nginx-custom 的 image，則會執行 build 裡的 Dockerfile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;2&apos;</div><div class=\"line\"></div><div class=\"line\"># based off compose-sample-2, only we build nginx.conf into image</div><div class=\"line\"># uses sample site from https://startbootstrap.com/template-overviews/agency/</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\">  proxy:</div><div class=\"line\">    build:</div><div class=\"line\">      context: .</div><div class=\"line\">      dockerfile: nginx.Dockerfile</div><div class=\"line\">    image: nginx-custom</div><div class=\"line\">    ports:</div><div class=\"line\">      - &apos;80:80&apos;</div><div class=\"line\">  web:</div><div class=\"line\">    image: httpd</div><div class=\"line\">    volumes:</div><div class=\"line\">      - ./html:/usr/local/apache2/htdocs/</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>docker-compose up</code></li>\n<li><code>docker-compose down</code></li>\n<li><code>docker-compose down --rmi local</code> 在關閉的時候同時刪除 image</li>\n</ol>\n<h4>作業：Run-Time Image Building 和 Multi-Container 開發的 Compose</h4>\n<ol>\n<li>為本地端測試建立一個客製化的 <strong>drupal</strong> image</li>\n<li>Compose 並不是只有給開發者使用，測試 apps 是很簡單/有趣的</li>\n<li>或許你在學習成為 Drupal 的管理者，或者是軟體測試者</li>\n<li>從上一次的作業開始 Compose file</li>\n<li>在目錄 <strong>compose-assignment-2</strong> 建立你自己的 <strong>Dockerfile</strong> 和 <strong>docker-compose.yml</strong></li>\n<li>使用 <strong>drupal</strong> image 並與 <strong>postgres</strong> image 一起使用，就像之前一樣</li>\n<li>使用目錄裡的 <a href=\"https://github.com/BretFisher/udemy-docker-mastery/tree/master/compose-assignment-2\" target=\"_blank\" rel=\"external\"><strong>README.md</strong></a> 取得更多細節</li>\n</ol>\n<h4>答案：Run-Time Image Building 和 Multi-Container 開發的 Compose</h4>\n<ol>\n<li>建立 Dockerfile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM drupal:8.2</div><div class=\"line\"></div><div class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y git \\</div><div class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/*</div><div class=\"line\"></div><div class=\"line\">WORKDIR /var/www/html/themes</div><div class=\"line\"></div><div class=\"line\">RUN git clone --branch 8.x-3.x --single-branch --depth 1 https://git.drupal.org/project/bootstrap.git \\</div><div class=\"line\">    &amp;&amp; chown -R www-data:www-data bootstrap</div><div class=\"line\"></div><div class=\"line\">WORKDIR /var/www/html</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>建立 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;2&apos;</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\">  drupal:</div><div class=\"line\">    image: custom-drupal</div><div class=\"line\">    build: .</div><div class=\"line\">    ports:</div><div class=\"line\">      - &quot;8080:80&quot;</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-modules:/var/www/html/modules \\</div><div class=\"line\">      - drupal-profiles:/var/www/html/profiles \\</div><div class=\"line\">      - drupal-sites:/var/www/html/sites \\</div><div class=\"line\">      - drupal-themes:/var/www/html/themes</div><div class=\"line\">  postgres:</div><div class=\"line\">    image: postgres:9.6</div><div class=\"line\">    environment:</div><div class=\"line\">      - POSTGRES_PASSWORD=mypassword</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-data:/var/lib/postgresql/data</div><div class=\"line\"></div><div class=\"line\">volumes:</div><div class=\"line\">  drupal-data:</div><div class=\"line\">  drupal-modules:</div><div class=\"line\">  drupal-profiles:</div><div class=\"line\">  drupal-sites:</div><div class=\"line\">  drupal-themes:</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday5.jpg\">\n<hr>\n<h3>讓 Docker Compose 更簡單：Multi-Container 工具</h3>\n<h4>Docker Compose 和 The docker-compose.yml</h4>\n<h5>Docker Compose</h5>\n<ol>\n<li>為什麼：搞清楚 container 之間的關係</li>\n<li>為什麼：將 Docker container 的運行設定存成易讀取的檔案</li>\n<li>為什麼：一線開發者環境啟動</li>\n<li>可以分成兩個相關的事情\n<ul>\n<li>YAML 格式描述我們的解決方案選項：containers、networks、volumes</li>\n<li>CLI 工具 <strong>docker-compose</strong> 被用在開發/測試自動化且使用 YAML 檔案</li>\n</ul>\n</li>\n</ol>\n<h5>docker-compose.yml</h5>\n<ol>\n<li>Compose YAML 格式有自己的版本：1、2、2.1、3、3.1</li>\n<li>YAML 檔案可以被用於本地 docker 自動化或…的 <strong>docker-compose</strong> 命令</li>\n<li><strong>docker</strong> 已經直接被產品化，叫做 Swarm (從 v.1.13 開始)</li>\n<li><code>docker-compose --help</code></li>\n<li><strong>docker-compose.yml</strong> 是預設名稱，但是<code>docker-compose -f</code>可以任何使用喜歡的名稱</li>\n</ol>\n<h4>測試基本 Compose 命令</h4>\n<ol>\n<li>Docker 的 CLI 工具有 Windows/Mac 版本，但是 Linux 需要分開下載</li>\n<li>不是一個產品化等級的工具，但是對在本地端開發和測試是理想的</li>\n<li>最常使用的兩個命令是\n<ul>\n<li><code>docker-compose up</code> # 設定 volumes/networks 和開啟所有的 containers</li>\n<li><code>docker-compose down</code> # 停止所有的 containers 和移除 cont/vol/net</li>\n</ul>\n</li>\n<li>如果你的所有專案都有 <strong>Dockerfile</strong> 和 <strong>docker-compose.yml</strong>，那「新的開發者」應該要\n<ul>\n<li><code>git clone github.com/some/software</code></li>\n<li><code>docker-compose up</code></li>\n</ul>\n</li>\n<li>進入超級管理員模式 <code>sudo -i</code></li>\n<li>安裝 docker-compose <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"external\">最新版本</a> <code>curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</code></li>\n</ol>\n<h4>作業：為 Multi-Container 服務建立一個 Compose File</h4>\n<ol>\n<li>建立一個基本的 compose file 用於 Drupal CMS 網站，Docker Hub 是你的好朋友</li>\n<li>使用 <strong>Drupal</strong> image 並與 <strong>postgres</strong> imgae 一起使用</li>\n<li>使用 <strong>ports</strong> 使 Drupal 運行在 8080，如此一來可以透過 localhost:8080 來存取網頁</li>\n<li>確定有設定 postgres 的 <strong>POSTGRES_PASSWORD</strong></li>\n<li>用瀏覽器來設定 Drupal</li>\n<li>秘訣：Drupal 假定 DB 是 localhost，但是資料庫在另外一個 container，要在 Drupal 設定讓它跟 Docker network 溝通</li>\n<li>額外加分：使用 volumes 來儲存 Drupal 的 unique data</li>\n</ol>\n<h4>答案：為 Multi-Container 服務建立一個 Compose File</h4>\n<ol>\n<li>建立一個 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;2&apos;</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\">  drupal:</div><div class=\"line\">    image: drupal</div><div class=\"line\">    ports:</div><div class=\"line\">      - &quot;8080:80&quot;</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-modules:/var/www/html/modules \\</div><div class=\"line\">      - drupal-profiles:/var/www/html/profiles \\</div><div class=\"line\">      - drupal-sites:/var/www/html/sites \\</div><div class=\"line\">      - drupal-themes:/var/www/html/themes</div><div class=\"line\">  postgres:</div><div class=\"line\">    image: postgres</div><div class=\"line\">    environment:</div><div class=\"line\">      - POSTGRES_PASSWORD=mypassword</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>docker-compose up</code> 啟動專案</li>\n<li><code>docker-compose down -v</code> 刪除專案</li>\n</ol>\n<h4>新增 Image Building 到 Compose Files</h4>\n<h5>使用 Compose 來 Build</h5>\n<ol>\n<li>Compose 也可以建立你自己的客製化 images</li>\n<li>如果在 cache 沒有找到，會在 <code>docker-compose up</code> 的時候建立起來</li>\n<li>也可以透過 <code>docker-compose build</code> 或 <code>docker-compose up --build</code> 重建</li>\n<li>對複雜的 builds 非常好，因為它會有很多 vars 或 build args</li>\n</ol>\n<h5>實作</h5>\n<ol>\n<li>建立一個 docker-compose.yml，如果找不到 nginx-custom 的 image，則會執行 build 裡的 Dockerfile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;2&apos;</div><div class=\"line\"></div><div class=\"line\"># based off compose-sample-2, only we build nginx.conf into image</div><div class=\"line\"># uses sample site from https://startbootstrap.com/template-overviews/agency/</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\">  proxy:</div><div class=\"line\">    build:</div><div class=\"line\">      context: .</div><div class=\"line\">      dockerfile: nginx.Dockerfile</div><div class=\"line\">    image: nginx-custom</div><div class=\"line\">    ports:</div><div class=\"line\">      - &apos;80:80&apos;</div><div class=\"line\">  web:</div><div class=\"line\">    image: httpd</div><div class=\"line\">    volumes:</div><div class=\"line\">      - ./html:/usr/local/apache2/htdocs/</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>docker-compose up</code></li>\n<li><code>docker-compose down</code></li>\n<li><code>docker-compose down --rmi local</code> 在關閉的時候同時刪除 image</li>\n</ol>\n<h4>作業：Run-Time Image Building 和 Multi-Container 開發的 Compose</h4>\n<ol>\n<li>為本地端測試建立一個客製化的 <strong>drupal</strong> image</li>\n<li>Compose 並不是只有給開發者使用，測試 apps 是很簡單/有趣的</li>\n<li>或許你在學習成為 Drupal 的管理者，或者是軟體測試者</li>\n<li>從上一次的作業開始 Compose file</li>\n<li>在目錄 <strong>compose-assignment-2</strong> 建立你自己的 <strong>Dockerfile</strong> 和 <strong>docker-compose.yml</strong></li>\n<li>使用 <strong>drupal</strong> image 並與 <strong>postgres</strong> image 一起使用，就像之前一樣</li>\n<li>使用目錄裡的 <a href=\"https://github.com/BretFisher/udemy-docker-mastery/tree/master/compose-assignment-2\" target=\"_blank\" rel=\"external\"><strong>README.md</strong></a> 取得更多細節</li>\n</ol>\n<h4>答案：Run-Time Image Building 和 Multi-Container 開發的 Compose</h4>\n<ol>\n<li>建立 Dockerfile</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM drupal:8.2</div><div class=\"line\"></div><div class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y git \\</div><div class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/*</div><div class=\"line\"></div><div class=\"line\">WORKDIR /var/www/html/themes</div><div class=\"line\"></div><div class=\"line\">RUN git clone --branch 8.x-3.x --single-branch --depth 1 https://git.drupal.org/project/bootstrap.git \\</div><div class=\"line\">    &amp;&amp; chown -R www-data:www-data bootstrap</div><div class=\"line\"></div><div class=\"line\">WORKDIR /var/www/html</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>建立 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;2&apos;</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\">  drupal:</div><div class=\"line\">    image: custom-drupal</div><div class=\"line\">    build: .</div><div class=\"line\">    ports:</div><div class=\"line\">      - &quot;8080:80&quot;</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-modules:/var/www/html/modules \\</div><div class=\"line\">      - drupal-profiles:/var/www/html/profiles \\</div><div class=\"line\">      - drupal-sites:/var/www/html/sites \\</div><div class=\"line\">      - drupal-themes:/var/www/html/themes</div><div class=\"line\">  postgres:</div><div class=\"line\">    image: postgres:9.6</div><div class=\"line\">    environment:</div><div class=\"line\">      - POSTGRES_PASSWORD=mypassword</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-data:/var/lib/postgresql/data</div><div class=\"line\"></div><div class=\"line\">volumes:</div><div class=\"line\">  drupal-data:</div><div class=\"line\">  drupal-modules:</div><div class=\"line\">  drupal-profiles:</div><div class=\"line\">  drupal-sites:</div><div class=\"line\">  drupal-themes:</div></pre></td></tr></table></figure>\n"},{"title":"docker 快速學習自我挑戰 Day6","thumbnail":["/images/learning/docker/dockerday6.png"],"date":"2017-07-29T20:50:58.000Z","_content":"<img src=\"/images/learning/docker/dockerday6.png\">\n\n***\n### Docker 服務和 Swarm 的威力： Build-In Orchestration\n#### Swarm 模式：Build-In Orchestration\n##### 到處都有 container = 新問題\n1. 我們如何自動化 container 生命週期？\n2. 我們如何簡單的 scale out/in/up/down？\n3. 我們如何確保我們的 container 在失敗的情況下會自動重建？\n4. 我們如何取代 container 且沒有任何停機時間(藍色/綠色部署)？\n5. 我們如何控制/追蹤哪裡的 container 啟動了？\n6. 我們如何創建 cross-node 虛擬網路？\n7. 我們如何確保只有受信任的伺服器可以運行我們的 container？\n8. 我們如何儲存 secrets、keys、passwords 且將它們放到正確的 container (或是只有那個 container)？\n##### Swarm 模式：Build-In Orchestration\n1. Swarm 模式是建立在 Docker 裡面的叢集解決方案\n2. 跟早於 1.12 版本的 Swarm \"classic\" 沒有關係\n3. 被 SwarmKit toolkit 新增到 1.12 (2016 年夏天)\n4. 被 Stacks and Secrets 做改善後新增到 1.13 (2017 年 1 月)\n5. 預設並沒有被啟動，一旦啟動會有以下新指令\n    - docker swarm\n    - docker node\n    - docker service\n    - docker stack\n    - docker secret\n6. Manager Node\n    - API：從客戶端接受指令並創建服務 object\n    - Orchestrator：協調服務 object 和創建任務間的 loop\n    - Allocator：分配 IP 給任務\n    - Scheduler：分配 node 給任務\n    - Dispatcher：在 Worker Node 報到\n7. Worker Node\n    - Worker：連接 dispatcher 來檢查被分配的任務\n    - Executor：執行被分派到 Worker Node 的任務\n#### 創建第一個服務且在本地端擴展它\n1. `docker info` 可以檢查 swarm 是否開啟\n2. `docker swarm init --advertise-addr <ip>` 啟用 swarm\n3. docker swarm init：剛剛發生什麼事情了？\n    - 眾多 PKI 和安全自動化\n        - 用於 swarm 的 Root 登入認證被建立\n        - 用於第一次的 Manager Node 認證被發佈\n        - Join tokens 被創建\n    - Raft 資料庫被建立，並被用來儲存 root CA、config 和 secrets\n        - 在硬碟上預設被加密 (1.13+)\n        - 不需要為了額外的 key/value 系統來保有 orchestration/secrets\n        - 使用 mutual TLS 的 Managers 中的 Replicates logs 在「控制面板」中\n4. `docker service create alpine ping 8.8.8.8`\n5. `docker service update eloquent_ride --replicas 3` 升級 replicas\n6. `docker container rm -f <container name>` 刪除其中一個 container，他也會自動再產生，可以用 `docker service ps <service name>` 檢查紀錄\n#### 創建一個 3-Node Swarm 叢集\n##### 創建一個 3-Node Swarm：Host 選項\n1. [play-with-docker.com](http://play-with-docker.com)\n    - 只需要瀏覽器，但是在四小時後會重置\n2. Docker-machine + VirtualBox\n    - 本地端可以免費執行和運作，但是需要一台大於 8GB 記憶體的機器\n3. Digital Ocean + Docker install\n    - 大部分很像產品化的設置，但是在學習時要花費 $5-10/node/mouth\n4. 註冊自己的\n    - docker-machine 可以用在 Amazon、Azure、DO、Google...等等的配置機器\n    - 使用 get.docker.com 到處安裝 docker\n##### 開始建立\n1. [安裝 Docker-machine](https://github.com/docker/machine/releases/)\n2. [下載指令稿](https://get.docker.com/)\n3. `docker swarm init --advertise-addr <ip>` 啟動 swarm\n4. 啟動後會產生 join 的指令，把指令貼在其他兩台上面\n5. `docker swarm join-token manager` 取得 manager 的 token\n#### 使用 Overlay Network 進行擴展\n1. 當創建網路的時候就選擇 `--driver overlay`\n2. 為了在單一 Swarm 裡面的 container-to-container traffic\n3. 在網路建立的時候，選擇性使用的 IPSec (AES) 加密法\n4. `docker network create --driver overlay mydrupal` 建立一個新網路\n5. `docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres`\n6. `docker service create --name drupal --network mydrupal -p 80:80 drupal`\n7. 在瀏覽器隨便輸入其中一個 node 的 ip 都可以執行\n#### 使用 Routing Mesh 進行擴展\n1. 為了將服務分配到適當的任務的 Routes ingress(incoming) 封包\n2. 在 Swarm 裡面 span 所有 nodes\n3. 使用 Linux 核心裡面的 IPVS\n4. 在任務間做 Swarm Services 的負載平衡\n5. 兩個方法讓這樣的模式可以執行：\n    - 在 Overlay network 裡面運行 container-to-container (使用 VIP)\n    - 外部 traffic 進入到 published ports (所有的 nodes listen)\n6. `docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2`\n7. `curl localhost:9200` 檢查狀態\n8. 這是無狀態的負載平衡\n9. 這個負載平衡(LB)位在 OSI 第三層 (TCP)，不是第四層 (DNS)\n10. 以上兩種限制都可以透過以下來克服：\n    - Nginx 或 HAProxy LB proxy\n    - Docker Enterprise Edition，它內建 L4 web proxy\n#### 作業：建立一個 Multi-Service Multi-Node Web App\n1. 使用 Docker 分散式投票 App\n2. 使用課程倉庫裡面的 [**swarm-app-1**](https://github.com/BretFisher/udemy-docker-mastery/tree/master/swarm-app-1) 目錄來完成需求\n3. 需要 1 volumes, 2 networks, 5 services\n4. 建立需要的 commands，讓服務跑起來並測試 App\n5. 所有的東西都使用 Docker Hub images，所以在 Swarm 上面不需要任何 data\n6. 像很多電腦的東西，這是一半藝術一半科學\n#### 答案：建立一個 Multi-Service Multi-Node Web App\n1. `docker network create -d overlay backend`\n2. `docker network create -d overlay frontend`\n3. Vote App：`docker service create --name vote -p 80:80 --network frontend --replicas 2 dockersamples/examplevotingapp_vote:before`\n4. Redis：`docker service create --name redis --network frontend redis:3.2`\n5. Worker：`docker service create --name worker --network frontend --network backend dockersamples/examplevotingapp_worker`\n6. Postgres：`docker service create --name db --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4`\n7. Result：`docker service create --name result --network backend -p 5001:80 dockersamples/examplevotingapp_result:before`","source":"_posts/docker-快速學習自我挑戰-Day6.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day6\nthumbnail:\n  - /images/learning/docker/dockerday6.png\ndate: 2017-07-30 04:50:58\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday6.png\">\n\n***\n### Docker 服務和 Swarm 的威力： Build-In Orchestration\n#### Swarm 模式：Build-In Orchestration\n##### 到處都有 container = 新問題\n1. 我們如何自動化 container 生命週期？\n2. 我們如何簡單的 scale out/in/up/down？\n3. 我們如何確保我們的 container 在失敗的情況下會自動重建？\n4. 我們如何取代 container 且沒有任何停機時間(藍色/綠色部署)？\n5. 我們如何控制/追蹤哪裡的 container 啟動了？\n6. 我們如何創建 cross-node 虛擬網路？\n7. 我們如何確保只有受信任的伺服器可以運行我們的 container？\n8. 我們如何儲存 secrets、keys、passwords 且將它們放到正確的 container (或是只有那個 container)？\n##### Swarm 模式：Build-In Orchestration\n1. Swarm 模式是建立在 Docker 裡面的叢集解決方案\n2. 跟早於 1.12 版本的 Swarm \"classic\" 沒有關係\n3. 被 SwarmKit toolkit 新增到 1.12 (2016 年夏天)\n4. 被 Stacks and Secrets 做改善後新增到 1.13 (2017 年 1 月)\n5. 預設並沒有被啟動，一旦啟動會有以下新指令\n    - docker swarm\n    - docker node\n    - docker service\n    - docker stack\n    - docker secret\n6. Manager Node\n    - API：從客戶端接受指令並創建服務 object\n    - Orchestrator：協調服務 object 和創建任務間的 loop\n    - Allocator：分配 IP 給任務\n    - Scheduler：分配 node 給任務\n    - Dispatcher：在 Worker Node 報到\n7. Worker Node\n    - Worker：連接 dispatcher 來檢查被分配的任務\n    - Executor：執行被分派到 Worker Node 的任務\n#### 創建第一個服務且在本地端擴展它\n1. `docker info` 可以檢查 swarm 是否開啟\n2. `docker swarm init --advertise-addr <ip>` 啟用 swarm\n3. docker swarm init：剛剛發生什麼事情了？\n    - 眾多 PKI 和安全自動化\n        - 用於 swarm 的 Root 登入認證被建立\n        - 用於第一次的 Manager Node 認證被發佈\n        - Join tokens 被創建\n    - Raft 資料庫被建立，並被用來儲存 root CA、config 和 secrets\n        - 在硬碟上預設被加密 (1.13+)\n        - 不需要為了額外的 key/value 系統來保有 orchestration/secrets\n        - 使用 mutual TLS 的 Managers 中的 Replicates logs 在「控制面板」中\n4. `docker service create alpine ping 8.8.8.8`\n5. `docker service update eloquent_ride --replicas 3` 升級 replicas\n6. `docker container rm -f <container name>` 刪除其中一個 container，他也會自動再產生，可以用 `docker service ps <service name>` 檢查紀錄\n#### 創建一個 3-Node Swarm 叢集\n##### 創建一個 3-Node Swarm：Host 選項\n1. [play-with-docker.com](http://play-with-docker.com)\n    - 只需要瀏覽器，但是在四小時後會重置\n2. Docker-machine + VirtualBox\n    - 本地端可以免費執行和運作，但是需要一台大於 8GB 記憶體的機器\n3. Digital Ocean + Docker install\n    - 大部分很像產品化的設置，但是在學習時要花費 $5-10/node/mouth\n4. 註冊自己的\n    - docker-machine 可以用在 Amazon、Azure、DO、Google...等等的配置機器\n    - 使用 get.docker.com 到處安裝 docker\n##### 開始建立\n1. [安裝 Docker-machine](https://github.com/docker/machine/releases/)\n2. [下載指令稿](https://get.docker.com/)\n3. `docker swarm init --advertise-addr <ip>` 啟動 swarm\n4. 啟動後會產生 join 的指令，把指令貼在其他兩台上面\n5. `docker swarm join-token manager` 取得 manager 的 token\n#### 使用 Overlay Network 進行擴展\n1. 當創建網路的時候就選擇 `--driver overlay`\n2. 為了在單一 Swarm 裡面的 container-to-container traffic\n3. 在網路建立的時候，選擇性使用的 IPSec (AES) 加密法\n4. `docker network create --driver overlay mydrupal` 建立一個新網路\n5. `docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres`\n6. `docker service create --name drupal --network mydrupal -p 80:80 drupal`\n7. 在瀏覽器隨便輸入其中一個 node 的 ip 都可以執行\n#### 使用 Routing Mesh 進行擴展\n1. 為了將服務分配到適當的任務的 Routes ingress(incoming) 封包\n2. 在 Swarm 裡面 span 所有 nodes\n3. 使用 Linux 核心裡面的 IPVS\n4. 在任務間做 Swarm Services 的負載平衡\n5. 兩個方法讓這樣的模式可以執行：\n    - 在 Overlay network 裡面運行 container-to-container (使用 VIP)\n    - 外部 traffic 進入到 published ports (所有的 nodes listen)\n6. `docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2`\n7. `curl localhost:9200` 檢查狀態\n8. 這是無狀態的負載平衡\n9. 這個負載平衡(LB)位在 OSI 第三層 (TCP)，不是第四層 (DNS)\n10. 以上兩種限制都可以透過以下來克服：\n    - Nginx 或 HAProxy LB proxy\n    - Docker Enterprise Edition，它內建 L4 web proxy\n#### 作業：建立一個 Multi-Service Multi-Node Web App\n1. 使用 Docker 分散式投票 App\n2. 使用課程倉庫裡面的 [**swarm-app-1**](https://github.com/BretFisher/udemy-docker-mastery/tree/master/swarm-app-1) 目錄來完成需求\n3. 需要 1 volumes, 2 networks, 5 services\n4. 建立需要的 commands，讓服務跑起來並測試 App\n5. 所有的東西都使用 Docker Hub images，所以在 Swarm 上面不需要任何 data\n6. 像很多電腦的東西，這是一半藝術一半科學\n#### 答案：建立一個 Multi-Service Multi-Node Web App\n1. `docker network create -d overlay backend`\n2. `docker network create -d overlay frontend`\n3. Vote App：`docker service create --name vote -p 80:80 --network frontend --replicas 2 dockersamples/examplevotingapp_vote:before`\n4. Redis：`docker service create --name redis --network frontend redis:3.2`\n5. Worker：`docker service create --name worker --network frontend --network backend dockersamples/examplevotingapp_worker`\n6. Postgres：`docker service create --name db --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4`\n7. Result：`docker service create --name result --network backend -p 5001:80 dockersamples/examplevotingapp_result:before`","slug":"docker-快速學習自我挑戰-Day6","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyo006r7ifa9vdfmdrv","content":"<img src=\"/images/learning/docker/dockerday6.png\">\n<hr>\n<h3>Docker 服務和 Swarm 的威力： Build-In Orchestration</h3>\n<h4>Swarm 模式：Build-In Orchestration</h4>\n<h5>到處都有 container = 新問題</h5>\n<ol>\n<li>我們如何自動化 container 生命週期？</li>\n<li>我們如何簡單的 scale out/in/up/down？</li>\n<li>我們如何確保我們的 container 在失敗的情況下會自動重建？</li>\n<li>我們如何取代 container 且沒有任何停機時間(藍色/綠色部署)？</li>\n<li>我們如何控制/追蹤哪裡的 container 啟動了？</li>\n<li>我們如何創建 cross-node 虛擬網路？</li>\n<li>我們如何確保只有受信任的伺服器可以運行我們的 container？</li>\n<li>我們如何儲存 secrets、keys、passwords 且將它們放到正確的 container (或是只有那個 container)？</li>\n</ol>\n<h5>Swarm 模式：Build-In Orchestration</h5>\n<ol>\n<li>Swarm 模式是建立在 Docker 裡面的叢集解決方案</li>\n<li>跟早於 1.12 版本的 Swarm “classic” 沒有關係</li>\n<li>被 SwarmKit toolkit 新增到 1.12 (2016 年夏天)</li>\n<li>被 Stacks and Secrets 做改善後新增到 1.13 (2017 年 1 月)</li>\n<li>預設並沒有被啟動，一旦啟動會有以下新指令\n<ul>\n<li>docker swarm</li>\n<li>docker node</li>\n<li>docker service</li>\n<li>docker stack</li>\n<li>docker secret</li>\n</ul>\n</li>\n<li>Manager Node\n<ul>\n<li>API：從客戶端接受指令並創建服務 object</li>\n<li>Orchestrator：協調服務 object 和創建任務間的 loop</li>\n<li>Allocator：分配 IP 給任務</li>\n<li>Scheduler：分配 node 給任務</li>\n<li>Dispatcher：在 Worker Node 報到</li>\n</ul>\n</li>\n<li>Worker Node\n<ul>\n<li>Worker：連接 dispatcher 來檢查被分配的任務</li>\n<li>Executor：執行被分派到 Worker Node 的任務</li>\n</ul>\n</li>\n</ol>\n<h4>創建第一個服務且在本地端擴展它</h4>\n<ol>\n<li><code>docker info</code> 可以檢查 swarm 是否開啟</li>\n<li><code>docker swarm init --advertise-addr &lt;ip&gt;</code> 啟用 swarm</li>\n<li>docker swarm init：剛剛發生什麼事情了？\n<ul>\n<li>眾多 PKI 和安全自動化\n<ul>\n<li>用於 swarm 的 Root 登入認證被建立</li>\n<li>用於第一次的 Manager Node 認證被發佈</li>\n<li>Join tokens 被創建</li>\n</ul>\n</li>\n<li>Raft 資料庫被建立，並被用來儲存 root CA、config 和 secrets\n<ul>\n<li>在硬碟上預設被加密 (1.13+)</li>\n<li>不需要為了額外的 key/value 系統來保有 orchestration/secrets</li>\n<li>使用 mutual TLS 的 Managers 中的 Replicates logs 在「控制面板」中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>docker service create alpine ping 8.8.8.8</code></li>\n<li><code>docker service update eloquent_ride --replicas 3</code> 升級 replicas</li>\n<li><code>docker container rm -f &lt;container name&gt;</code> 刪除其中一個 container，他也會自動再產生，可以用 <code>docker service ps &lt;service name&gt;</code> 檢查紀錄</li>\n</ol>\n<h4>創建一個 3-Node Swarm 叢集</h4>\n<h5>創建一個 3-Node Swarm：Host 選項</h5>\n<ol>\n<li><a href=\"http://play-with-docker.com\" target=\"_blank\" rel=\"external\">play-with-docker.com</a>\n<ul>\n<li>只需要瀏覽器，但是在四小時後會重置</li>\n</ul>\n</li>\n<li>Docker-machine + VirtualBox\n<ul>\n<li>本地端可以免費執行和運作，但是需要一台大於 8GB 記憶體的機器</li>\n</ul>\n</li>\n<li>Digital Ocean + Docker install\n<ul>\n<li>大部分很像產品化的設置，但是在學習時要花費 $5-10/node/mouth</li>\n</ul>\n</li>\n<li>註冊自己的\n<ul>\n<li>docker-machine 可以用在 Amazon、Azure、DO、Google…等等的配置機器</li>\n<li>使用 <a href=\"http://get.docker.com\" target=\"_blank\" rel=\"external\">get.docker.com</a> 到處安裝 docker</li>\n</ul>\n</li>\n</ol>\n<h5>開始建立</h5>\n<ol>\n<li><a href=\"https://github.com/docker/machine/releases/\" target=\"_blank\" rel=\"external\">安裝 Docker-machine</a></li>\n<li><a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"external\">下載指令稿</a></li>\n<li><code>docker swarm init --advertise-addr &lt;ip&gt;</code> 啟動 swarm</li>\n<li>啟動後會產生 join 的指令，把指令貼在其他兩台上面</li>\n<li><code>docker swarm join-token manager</code> 取得 manager 的 token</li>\n</ol>\n<h4>使用 Overlay Network 進行擴展</h4>\n<ol>\n<li>當創建網路的時候就選擇 <code>--driver overlay</code></li>\n<li>為了在單一 Swarm 裡面的 container-to-container traffic</li>\n<li>在網路建立的時候，選擇性使用的 IPSec (AES) 加密法</li>\n<li><code>docker network create --driver overlay mydrupal</code> 建立一個新網路</li>\n<li><code>docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres</code></li>\n<li><code>docker service create --name drupal --network mydrupal -p 80:80 drupal</code></li>\n<li>在瀏覽器隨便輸入其中一個 node 的 ip 都可以執行</li>\n</ol>\n<h4>使用 Routing Mesh 進行擴展</h4>\n<ol>\n<li>為了將服務分配到適當的任務的 Routes ingress(incoming) 封包</li>\n<li>在 Swarm 裡面 span 所有 nodes</li>\n<li>使用 Linux 核心裡面的 IPVS</li>\n<li>在任務間做 Swarm Services 的負載平衡</li>\n<li>兩個方法讓這樣的模式可以執行：\n<ul>\n<li>在 Overlay network 裡面運行 container-to-container (使用 VIP)</li>\n<li>外部 traffic 進入到 published ports (所有的 nodes listen)</li>\n</ul>\n</li>\n<li><code>docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2</code></li>\n<li><code>curl localhost:9200</code> 檢查狀態</li>\n<li>這是無狀態的負載平衡</li>\n<li>這個負載平衡(LB)位在 OSI 第三層 (TCP)，不是第四層 (DNS)</li>\n<li>以上兩種限制都可以透過以下來克服：\n<ul>\n<li>Nginx 或 HAProxy LB proxy</li>\n<li>Docker Enterprise Edition，它內建 L4 web proxy</li>\n</ul>\n</li>\n</ol>\n<h4>作業：建立一個 Multi-Service Multi-Node Web App</h4>\n<ol>\n<li>使用 Docker 分散式投票 App</li>\n<li>使用課程倉庫裡面的 <a href=\"https://github.com/BretFisher/udemy-docker-mastery/tree/master/swarm-app-1\" target=\"_blank\" rel=\"external\"><strong>swarm-app-1</strong></a> 目錄來完成需求</li>\n<li>需要 1 volumes, 2 networks, 5 services</li>\n<li>建立需要的 commands，讓服務跑起來並測試 App</li>\n<li>所有的東西都使用 Docker Hub images，所以在 Swarm 上面不需要任何 data</li>\n<li>像很多電腦的東西，這是一半藝術一半科學</li>\n</ol>\n<h4>答案：建立一個 Multi-Service Multi-Node Web App</h4>\n<ol>\n<li><code>docker network create -d overlay backend</code></li>\n<li><code>docker network create -d overlay frontend</code></li>\n<li>Vote App：<code>docker service create --name vote -p 80:80 --network frontend --replicas 2 dockersamples/examplevotingapp_vote:before</code></li>\n<li>Redis：<code>docker service create --name redis --network frontend redis:3.2</code></li>\n<li>Worker：<code>docker service create --name worker --network frontend --network backend dockersamples/examplevotingapp_worker</code></li>\n<li>Postgres：<code>docker service create --name db --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4</code></li>\n<li>Result：<code>docker service create --name result --network backend -p 5001:80 dockersamples/examplevotingapp_result:before</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday6.png\">\n<hr>\n<h3>Docker 服務和 Swarm 的威力： Build-In Orchestration</h3>\n<h4>Swarm 模式：Build-In Orchestration</h4>\n<h5>到處都有 container = 新問題</h5>\n<ol>\n<li>我們如何自動化 container 生命週期？</li>\n<li>我們如何簡單的 scale out/in/up/down？</li>\n<li>我們如何確保我們的 container 在失敗的情況下會自動重建？</li>\n<li>我們如何取代 container 且沒有任何停機時間(藍色/綠色部署)？</li>\n<li>我們如何控制/追蹤哪裡的 container 啟動了？</li>\n<li>我們如何創建 cross-node 虛擬網路？</li>\n<li>我們如何確保只有受信任的伺服器可以運行我們的 container？</li>\n<li>我們如何儲存 secrets、keys、passwords 且將它們放到正確的 container (或是只有那個 container)？</li>\n</ol>\n<h5>Swarm 模式：Build-In Orchestration</h5>\n<ol>\n<li>Swarm 模式是建立在 Docker 裡面的叢集解決方案</li>\n<li>跟早於 1.12 版本的 Swarm “classic” 沒有關係</li>\n<li>被 SwarmKit toolkit 新增到 1.12 (2016 年夏天)</li>\n<li>被 Stacks and Secrets 做改善後新增到 1.13 (2017 年 1 月)</li>\n<li>預設並沒有被啟動，一旦啟動會有以下新指令\n<ul>\n<li>docker swarm</li>\n<li>docker node</li>\n<li>docker service</li>\n<li>docker stack</li>\n<li>docker secret</li>\n</ul>\n</li>\n<li>Manager Node\n<ul>\n<li>API：從客戶端接受指令並創建服務 object</li>\n<li>Orchestrator：協調服務 object 和創建任務間的 loop</li>\n<li>Allocator：分配 IP 給任務</li>\n<li>Scheduler：分配 node 給任務</li>\n<li>Dispatcher：在 Worker Node 報到</li>\n</ul>\n</li>\n<li>Worker Node\n<ul>\n<li>Worker：連接 dispatcher 來檢查被分配的任務</li>\n<li>Executor：執行被分派到 Worker Node 的任務</li>\n</ul>\n</li>\n</ol>\n<h4>創建第一個服務且在本地端擴展它</h4>\n<ol>\n<li><code>docker info</code> 可以檢查 swarm 是否開啟</li>\n<li><code>docker swarm init --advertise-addr &lt;ip&gt;</code> 啟用 swarm</li>\n<li>docker swarm init：剛剛發生什麼事情了？\n<ul>\n<li>眾多 PKI 和安全自動化\n<ul>\n<li>用於 swarm 的 Root 登入認證被建立</li>\n<li>用於第一次的 Manager Node 認證被發佈</li>\n<li>Join tokens 被創建</li>\n</ul>\n</li>\n<li>Raft 資料庫被建立，並被用來儲存 root CA、config 和 secrets\n<ul>\n<li>在硬碟上預設被加密 (1.13+)</li>\n<li>不需要為了額外的 key/value 系統來保有 orchestration/secrets</li>\n<li>使用 mutual TLS 的 Managers 中的 Replicates logs 在「控制面板」中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>docker service create alpine ping 8.8.8.8</code></li>\n<li><code>docker service update eloquent_ride --replicas 3</code> 升級 replicas</li>\n<li><code>docker container rm -f &lt;container name&gt;</code> 刪除其中一個 container，他也會自動再產生，可以用 <code>docker service ps &lt;service name&gt;</code> 檢查紀錄</li>\n</ol>\n<h4>創建一個 3-Node Swarm 叢集</h4>\n<h5>創建一個 3-Node Swarm：Host 選項</h5>\n<ol>\n<li><a href=\"http://play-with-docker.com\" target=\"_blank\" rel=\"external\">play-with-docker.com</a>\n<ul>\n<li>只需要瀏覽器，但是在四小時後會重置</li>\n</ul>\n</li>\n<li>Docker-machine + VirtualBox\n<ul>\n<li>本地端可以免費執行和運作，但是需要一台大於 8GB 記憶體的機器</li>\n</ul>\n</li>\n<li>Digital Ocean + Docker install\n<ul>\n<li>大部分很像產品化的設置，但是在學習時要花費 $5-10/node/mouth</li>\n</ul>\n</li>\n<li>註冊自己的\n<ul>\n<li>docker-machine 可以用在 Amazon、Azure、DO、Google…等等的配置機器</li>\n<li>使用 <a href=\"http://get.docker.com\" target=\"_blank\" rel=\"external\">get.docker.com</a> 到處安裝 docker</li>\n</ul>\n</li>\n</ol>\n<h5>開始建立</h5>\n<ol>\n<li><a href=\"https://github.com/docker/machine/releases/\" target=\"_blank\" rel=\"external\">安裝 Docker-machine</a></li>\n<li><a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"external\">下載指令稿</a></li>\n<li><code>docker swarm init --advertise-addr &lt;ip&gt;</code> 啟動 swarm</li>\n<li>啟動後會產生 join 的指令，把指令貼在其他兩台上面</li>\n<li><code>docker swarm join-token manager</code> 取得 manager 的 token</li>\n</ol>\n<h4>使用 Overlay Network 進行擴展</h4>\n<ol>\n<li>當創建網路的時候就選擇 <code>--driver overlay</code></li>\n<li>為了在單一 Swarm 裡面的 container-to-container traffic</li>\n<li>在網路建立的時候，選擇性使用的 IPSec (AES) 加密法</li>\n<li><code>docker network create --driver overlay mydrupal</code> 建立一個新網路</li>\n<li><code>docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres</code></li>\n<li><code>docker service create --name drupal --network mydrupal -p 80:80 drupal</code></li>\n<li>在瀏覽器隨便輸入其中一個 node 的 ip 都可以執行</li>\n</ol>\n<h4>使用 Routing Mesh 進行擴展</h4>\n<ol>\n<li>為了將服務分配到適當的任務的 Routes ingress(incoming) 封包</li>\n<li>在 Swarm 裡面 span 所有 nodes</li>\n<li>使用 Linux 核心裡面的 IPVS</li>\n<li>在任務間做 Swarm Services 的負載平衡</li>\n<li>兩個方法讓這樣的模式可以執行：\n<ul>\n<li>在 Overlay network 裡面運行 container-to-container (使用 VIP)</li>\n<li>外部 traffic 進入到 published ports (所有的 nodes listen)</li>\n</ul>\n</li>\n<li><code>docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2</code></li>\n<li><code>curl localhost:9200</code> 檢查狀態</li>\n<li>這是無狀態的負載平衡</li>\n<li>這個負載平衡(LB)位在 OSI 第三層 (TCP)，不是第四層 (DNS)</li>\n<li>以上兩種限制都可以透過以下來克服：\n<ul>\n<li>Nginx 或 HAProxy LB proxy</li>\n<li>Docker Enterprise Edition，它內建 L4 web proxy</li>\n</ul>\n</li>\n</ol>\n<h4>作業：建立一個 Multi-Service Multi-Node Web App</h4>\n<ol>\n<li>使用 Docker 分散式投票 App</li>\n<li>使用課程倉庫裡面的 <a href=\"https://github.com/BretFisher/udemy-docker-mastery/tree/master/swarm-app-1\" target=\"_blank\" rel=\"external\"><strong>swarm-app-1</strong></a> 目錄來完成需求</li>\n<li>需要 1 volumes, 2 networks, 5 services</li>\n<li>建立需要的 commands，讓服務跑起來並測試 App</li>\n<li>所有的東西都使用 Docker Hub images，所以在 Swarm 上面不需要任何 data</li>\n<li>像很多電腦的東西，這是一半藝術一半科學</li>\n</ol>\n<h4>答案：建立一個 Multi-Service Multi-Node Web App</h4>\n<ol>\n<li><code>docker network create -d overlay backend</code></li>\n<li><code>docker network create -d overlay frontend</code></li>\n<li>Vote App：<code>docker service create --name vote -p 80:80 --network frontend --replicas 2 dockersamples/examplevotingapp_vote:before</code></li>\n<li>Redis：<code>docker service create --name redis --network frontend redis:3.2</code></li>\n<li>Worker：<code>docker service create --name worker --network frontend --network backend dockersamples/examplevotingapp_worker</code></li>\n<li>Postgres：<code>docker service create --name db --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4</code></li>\n<li>Result：<code>docker service create --name result --network backend -p 5001:80 dockersamples/examplevotingapp_result:before</code></li>\n</ol>\n"},{"title":"docker 快速學習自我挑戰 Day8","thumbnail":["/images/learning/docker/dockerday8.png"],"date":"2017-08-02T05:54:52.000Z","_content":"<img src=\"/images/learning/docker/dockerday8.png\">\n\n***\n### Container Registry：Image Storage and Distribution\n#### Docker Hub：探尋的更深入\n##### Container Registries\n1. 你的 Container plan 需要有 Image Registry 成為 plan 的一部分\n2. 更多 Docker Hub 的細節，包含 auto-build\n3. Docker Store 是怎麼樣跟 Hub 不一樣\n4. Docker Cloud 是怎麼樣跟 Hub 不一樣\n5. 使用 Cloud 的新 Swarm 功能來讓 Mac/Win 跟 Swarm 連線\n6. 安裝和使用 Docker Registry，且當作 private image store\n7. 第三方 registry 套件選項\n##### Docker Hub：探尋的更深入\n1. 最有名的 public image registry\n2. 它是真的 Docker Registry 而且最輕量的 image building\n3. 讓我們探索更多 Docker Hub 的功能\n4. 連結 GitHub/BitBucket 到 Hub 而且自動建立 images commit\n5. 將 image building 串連在一起\n#### Docker Store：它可以做什麼？\n1. 下載 Docker \"Editions\"\n2. 找到認證過的 Docker/Swarm 外掛和商業認證的 images\n#### Docker Cloud：CI/CD 和 Server Ops\n1. Web based Docker Swarm 創建/管理\n2. 使用有名的雲端主機商和自建式伺服器\n3. 自動化的 image building、測試和部署\n4. 跟 Docker Hub 免費的東西相比更進階\n5. 包含 image 安全掃描服務\n#### 使用 Docker Cloud 來做簡單的遠端 Swarm 管理 \n1. [觀看此影片](https://www.youtube.com/watch?v=VJmbCioYKGg)\n#### 了解 Docker Registry\n1. 一個提供給你的網路的私有 image registry\n2. Docker/Distribution Github Repo 的一部分\n3. 事實上在私有的 container registry\n4. 不像完整功能的 Hub 或其它東西，它沒有完整的網頁介面，只有基本的認證\n5. 在核心的部分：一個網頁的 API 和儲存系統，用 Go 語言撰寫\n6. 儲存系統支援 local、S3/Azure/Alibaba/Google 雲，還有 OpenStack Swift\n7. 查看以下資源：\n    - [使用 TLS 加密你的 Registry](https://docs.docker.com/registry/configuration/)\n    - [透過 Garbage Collection 來進行儲存清理](https://docs.docker.com/registry/garbage-collection/)\n    - [透過 \"--registry-mirror\" 開啟 Hub caching](https://docs.docker.com/registry/recipes/mirror/)\n#### 運行一個私有的 Docker Registry\n1. 運行 registry image 在預設 port 5000\n2. Re-tag 已存在的 image，且推送它到你的新 registry\n3. 從本地端 cache 移除 image，且從新的 registry pull 下來\n4. 使用 bind mount 來 Re-create registry，且觀察它如何儲存資料\n##### Registry 和適合的 TLS\n1. 「預設加密」：Docker 不會用沒有 HTTPS 的方式跟 registry 溝通，除了 localhost (127.0.0.0/8)\n2. 對於遠端自行登入的 TLS，要再引擎啟動 「insecure-registry」\n3. 運行私有 registry image\n    - `docker container run -d -p 5000:5000 --name registry registry`\n4. `docker pull hello-world` 下載很輕量的 image 來測試\n5. Re-tag 已存在的 image，且推送它到你的新 registry\n    - `docker tag hello-world 127.0.0.1:5000/hello-world`\n    - `docker push 127.0.0.1:5000/hello-world`\n6. 從本地端 cache 移除 image，且從新的 registry pull 下來\n    - `docker image remove hello-world`\n    - `docker image remove 127.0.0.1:5000/hello-world`\n    - `docker pull 127.0.0.1:5000/hello-world`\n7. `docker container kill registry`\n8. `docker container rm registry`\n9. 使用 bind mount 來 Re-create registry，且觀察它如何儲存資料\n    - `docker container run -d -p 5000:5000 --name registry -v $(pwd)/registry-data:/var/lib/registry registry`\n    - `docker push 127.0.0.1:5000/hello-world`\n    - `tree registry-data`\n#### 安裝 Docker 自動完成\n1. [Oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/docker)\n2. [docker-zsh-completion](https://github.com/felixr/docker-zsh-completion)\n#### 作業：使用 TLS 和認證加密 Docker Registry\n1. 透過創建給 HTTPS 的 self-signed 認證和啟動 **htpasswd** 認證可以學習到基礎\n2. 會使用 Play With Docker 來完成這個作業\n3. 建議使用 [Part 2 and 3 of \"Docker Registry for Linux](http://training.play-with-docker.com/linux-registry-part2/) 來完成作業，或是跳回 [Part 1](http://training.play-with-docker.com/linux-registry-part1/) 且在他們的 infrastructure 上運行 container，使用他們的實際 Docker Engine 的 web-based 介面學習 **PWD** 怎麼運作的\n4. 更多實驗請參考：[點此](http://training.play-with-docker.com/)\n#### 跟 Swarm 一起使用 Registry\n1. 跟 localhost 用一樣的方式\n2. 由於 Routing Mesh，所有的節點可以在 127.0.0.1:5000 被看到\n3. 記得決定如何儲存 image (volume driver)\n4. 筆記：所有的 nodes 都要可以存取 images\n5. 專業的技巧：如果可以的話，使用 hosted SaaS registry\n##### 使用 play-with-docker.com\n1. `docker service create --name registry --publish 5000:5000 registry`\n2. 在 5000 port 的 console 後面加上 v2/_catalog 可以看到 json 格式的紀錄\n3. `docker pull hello-world`\n4. `docker tag hello-world 127.0.0.1:5000/hello-world`\n5. `docker push 127.0.0.1:5000/hello-world`\n6. 在 5000 port 的 console 後面加上 v2/_catalog 可以看到 `{\"repositories\":[\"hello-world\"]}`\n7. `docker pull nginx`\n8. `docker tag nginx 127.0.0.1:5000/nginx`\n9. `docker push 127.0.0.1:5000/nginx`\n10. `docker service create --name nginx -p 80:80 --replicas 5 --detach=false 127.0.0.1:5000/nginx`\n11. `docker service ps nginx` 就可以看到它使用的是本機端的 image **(127.0.0.1:5000/nginx:latest)**\n#### Docker 的第三方套件\n1. 最流行的是：[Quay.io](https://quay.io/)\n2. 如果使用 [AWS](https://www.docker.com/enterprise-edition#/container_management)、[Azure](https://azure.microsoft.com/en-us/services/container-registry/)、[Google Cloud](https://cloud.google.com/container-registry/)，他們都有自己專屬的 registry\n3. 如果是自建式主機，[Docker EE](https://www.docker.com/enterprise-edition#/container_management)、[Quay Enterprise](https://quay.io/plans/?tab=enterprise)、[GitLab](https://about.gitlab.com/2016/05/23/gitlab-container-registry/)\n4. 更多詳細的 [registry 清單](https://github.com/veggiemonk/awesome-docker#hosting-images-registries)\n### 額外的課程\n1. [Journey to Docker Production: Evolving Your Infrastructure and Processes](https://www.youtube.com/watch?v=ZdUcKtg84T8)\n    - What host OS should I use?\n    - What base FROM images should I use?\n    - How should my Swarm node design look?\n    - What common issues do people have when starting a production docker project?\n    - How to limit the project from trying to change too much at once.\n    - How to speed up the project by outsourcing small pieces of solution to existing products.\n    - How Docker's Enterprise/Cloud products can help.\n2. [Everything You Thought You Already Knew About Orchestration](https://www.youtube.com/watch?v=Qsv-q8WbIZY)\n3. [Docker tip: docker system prune and df](https://www.youtube.com/watch?v=_4QzP7uwtvI)\n4. [Docker 17.06 Community Edition](https://www.youtube.com/watch?v=-NeaXUGEK_g)\n    - [更詳細的 changelog](https://github.com/docker/docker-ce/releases)\n\n***\n### 完成課程\n<img src=\"/images/learning/docker/Bret Fisher_Docker.jpg\">","source":"_posts/docker-快速學習自我挑戰-Day8.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day8\nthumbnail:\n  - /images/learning/docker/dockerday8.png\ndate: 2017-08-02 13:54:52\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday8.png\">\n\n***\n### Container Registry：Image Storage and Distribution\n#### Docker Hub：探尋的更深入\n##### Container Registries\n1. 你的 Container plan 需要有 Image Registry 成為 plan 的一部分\n2. 更多 Docker Hub 的細節，包含 auto-build\n3. Docker Store 是怎麼樣跟 Hub 不一樣\n4. Docker Cloud 是怎麼樣跟 Hub 不一樣\n5. 使用 Cloud 的新 Swarm 功能來讓 Mac/Win 跟 Swarm 連線\n6. 安裝和使用 Docker Registry，且當作 private image store\n7. 第三方 registry 套件選項\n##### Docker Hub：探尋的更深入\n1. 最有名的 public image registry\n2. 它是真的 Docker Registry 而且最輕量的 image building\n3. 讓我們探索更多 Docker Hub 的功能\n4. 連結 GitHub/BitBucket 到 Hub 而且自動建立 images commit\n5. 將 image building 串連在一起\n#### Docker Store：它可以做什麼？\n1. 下載 Docker \"Editions\"\n2. 找到認證過的 Docker/Swarm 外掛和商業認證的 images\n#### Docker Cloud：CI/CD 和 Server Ops\n1. Web based Docker Swarm 創建/管理\n2. 使用有名的雲端主機商和自建式伺服器\n3. 自動化的 image building、測試和部署\n4. 跟 Docker Hub 免費的東西相比更進階\n5. 包含 image 安全掃描服務\n#### 使用 Docker Cloud 來做簡單的遠端 Swarm 管理 \n1. [觀看此影片](https://www.youtube.com/watch?v=VJmbCioYKGg)\n#### 了解 Docker Registry\n1. 一個提供給你的網路的私有 image registry\n2. Docker/Distribution Github Repo 的一部分\n3. 事實上在私有的 container registry\n4. 不像完整功能的 Hub 或其它東西，它沒有完整的網頁介面，只有基本的認證\n5. 在核心的部分：一個網頁的 API 和儲存系統，用 Go 語言撰寫\n6. 儲存系統支援 local、S3/Azure/Alibaba/Google 雲，還有 OpenStack Swift\n7. 查看以下資源：\n    - [使用 TLS 加密你的 Registry](https://docs.docker.com/registry/configuration/)\n    - [透過 Garbage Collection 來進行儲存清理](https://docs.docker.com/registry/garbage-collection/)\n    - [透過 \"--registry-mirror\" 開啟 Hub caching](https://docs.docker.com/registry/recipes/mirror/)\n#### 運行一個私有的 Docker Registry\n1. 運行 registry image 在預設 port 5000\n2. Re-tag 已存在的 image，且推送它到你的新 registry\n3. 從本地端 cache 移除 image，且從新的 registry pull 下來\n4. 使用 bind mount 來 Re-create registry，且觀察它如何儲存資料\n##### Registry 和適合的 TLS\n1. 「預設加密」：Docker 不會用沒有 HTTPS 的方式跟 registry 溝通，除了 localhost (127.0.0.0/8)\n2. 對於遠端自行登入的 TLS，要再引擎啟動 「insecure-registry」\n3. 運行私有 registry image\n    - `docker container run -d -p 5000:5000 --name registry registry`\n4. `docker pull hello-world` 下載很輕量的 image 來測試\n5. Re-tag 已存在的 image，且推送它到你的新 registry\n    - `docker tag hello-world 127.0.0.1:5000/hello-world`\n    - `docker push 127.0.0.1:5000/hello-world`\n6. 從本地端 cache 移除 image，且從新的 registry pull 下來\n    - `docker image remove hello-world`\n    - `docker image remove 127.0.0.1:5000/hello-world`\n    - `docker pull 127.0.0.1:5000/hello-world`\n7. `docker container kill registry`\n8. `docker container rm registry`\n9. 使用 bind mount 來 Re-create registry，且觀察它如何儲存資料\n    - `docker container run -d -p 5000:5000 --name registry -v $(pwd)/registry-data:/var/lib/registry registry`\n    - `docker push 127.0.0.1:5000/hello-world`\n    - `tree registry-data`\n#### 安裝 Docker 自動完成\n1. [Oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/docker)\n2. [docker-zsh-completion](https://github.com/felixr/docker-zsh-completion)\n#### 作業：使用 TLS 和認證加密 Docker Registry\n1. 透過創建給 HTTPS 的 self-signed 認證和啟動 **htpasswd** 認證可以學習到基礎\n2. 會使用 Play With Docker 來完成這個作業\n3. 建議使用 [Part 2 and 3 of \"Docker Registry for Linux](http://training.play-with-docker.com/linux-registry-part2/) 來完成作業，或是跳回 [Part 1](http://training.play-with-docker.com/linux-registry-part1/) 且在他們的 infrastructure 上運行 container，使用他們的實際 Docker Engine 的 web-based 介面學習 **PWD** 怎麼運作的\n4. 更多實驗請參考：[點此](http://training.play-with-docker.com/)\n#### 跟 Swarm 一起使用 Registry\n1. 跟 localhost 用一樣的方式\n2. 由於 Routing Mesh，所有的節點可以在 127.0.0.1:5000 被看到\n3. 記得決定如何儲存 image (volume driver)\n4. 筆記：所有的 nodes 都要可以存取 images\n5. 專業的技巧：如果可以的話，使用 hosted SaaS registry\n##### 使用 play-with-docker.com\n1. `docker service create --name registry --publish 5000:5000 registry`\n2. 在 5000 port 的 console 後面加上 v2/_catalog 可以看到 json 格式的紀錄\n3. `docker pull hello-world`\n4. `docker tag hello-world 127.0.0.1:5000/hello-world`\n5. `docker push 127.0.0.1:5000/hello-world`\n6. 在 5000 port 的 console 後面加上 v2/_catalog 可以看到 `{\"repositories\":[\"hello-world\"]}`\n7. `docker pull nginx`\n8. `docker tag nginx 127.0.0.1:5000/nginx`\n9. `docker push 127.0.0.1:5000/nginx`\n10. `docker service create --name nginx -p 80:80 --replicas 5 --detach=false 127.0.0.1:5000/nginx`\n11. `docker service ps nginx` 就可以看到它使用的是本機端的 image **(127.0.0.1:5000/nginx:latest)**\n#### Docker 的第三方套件\n1. 最流行的是：[Quay.io](https://quay.io/)\n2. 如果使用 [AWS](https://www.docker.com/enterprise-edition#/container_management)、[Azure](https://azure.microsoft.com/en-us/services/container-registry/)、[Google Cloud](https://cloud.google.com/container-registry/)，他們都有自己專屬的 registry\n3. 如果是自建式主機，[Docker EE](https://www.docker.com/enterprise-edition#/container_management)、[Quay Enterprise](https://quay.io/plans/?tab=enterprise)、[GitLab](https://about.gitlab.com/2016/05/23/gitlab-container-registry/)\n4. 更多詳細的 [registry 清單](https://github.com/veggiemonk/awesome-docker#hosting-images-registries)\n### 額外的課程\n1. [Journey to Docker Production: Evolving Your Infrastructure and Processes](https://www.youtube.com/watch?v=ZdUcKtg84T8)\n    - What host OS should I use?\n    - What base FROM images should I use?\n    - How should my Swarm node design look?\n    - What common issues do people have when starting a production docker project?\n    - How to limit the project from trying to change too much at once.\n    - How to speed up the project by outsourcing small pieces of solution to existing products.\n    - How Docker's Enterprise/Cloud products can help.\n2. [Everything You Thought You Already Knew About Orchestration](https://www.youtube.com/watch?v=Qsv-q8WbIZY)\n3. [Docker tip: docker system prune and df](https://www.youtube.com/watch?v=_4QzP7uwtvI)\n4. [Docker 17.06 Community Edition](https://www.youtube.com/watch?v=-NeaXUGEK_g)\n    - [更詳細的 changelog](https://github.com/docker/docker-ce/releases)\n\n***\n### 完成課程\n<img src=\"/images/learning/docker/Bret Fisher_Docker.jpg\">","slug":"docker-快速學習自我挑戰-Day8","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyp006u7ifazx2urw0g","content":"<img src=\"/images/learning/docker/dockerday8.png\">\n<hr>\n<h3>Container Registry：Image Storage and Distribution</h3>\n<h4>Docker Hub：探尋的更深入</h4>\n<h5>Container Registries</h5>\n<ol>\n<li>你的 Container plan 需要有 Image Registry 成為 plan 的一部分</li>\n<li>更多 Docker Hub 的細節，包含 auto-build</li>\n<li>Docker Store 是怎麼樣跟 Hub 不一樣</li>\n<li>Docker Cloud 是怎麼樣跟 Hub 不一樣</li>\n<li>使用 Cloud 的新 Swarm 功能來讓 Mac/Win 跟 Swarm 連線</li>\n<li>安裝和使用 Docker Registry，且當作 private image store</li>\n<li>第三方 registry 套件選項</li>\n</ol>\n<h5>Docker Hub：探尋的更深入</h5>\n<ol>\n<li>最有名的 public image registry</li>\n<li>它是真的 Docker Registry 而且最輕量的 image building</li>\n<li>讓我們探索更多 Docker Hub 的功能</li>\n<li>連結 GitHub/BitBucket 到 Hub 而且自動建立 images commit</li>\n<li>將 image building 串連在一起</li>\n</ol>\n<h4>Docker Store：它可以做什麼？</h4>\n<ol>\n<li>下載 Docker “Editions”</li>\n<li>找到認證過的 Docker/Swarm 外掛和商業認證的 images</li>\n</ol>\n<h4>Docker Cloud：CI/CD 和 Server Ops</h4>\n<ol>\n<li>Web based Docker Swarm 創建/管理</li>\n<li>使用有名的雲端主機商和自建式伺服器</li>\n<li>自動化的 image building、測試和部署</li>\n<li>跟 Docker Hub 免費的東西相比更進階</li>\n<li>包含 image 安全掃描服務</li>\n</ol>\n<h4>使用 Docker Cloud 來做簡單的遠端 Swarm 管理</h4>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=VJmbCioYKGg\" target=\"_blank\" rel=\"external\">觀看此影片</a></li>\n</ol>\n<h4>了解 Docker Registry</h4>\n<ol>\n<li>一個提供給你的網路的私有 image registry</li>\n<li>Docker/Distribution Github Repo 的一部分</li>\n<li>事實上在私有的 container registry</li>\n<li>不像完整功能的 Hub 或其它東西，它沒有完整的網頁介面，只有基本的認證</li>\n<li>在核心的部分：一個網頁的 API 和儲存系統，用 Go 語言撰寫</li>\n<li>儲存系統支援 local、S3/Azure/Alibaba/Google 雲，還有 OpenStack Swift</li>\n<li>查看以下資源：\n<ul>\n<li><a href=\"https://docs.docker.com/registry/configuration/\" target=\"_blank\" rel=\"external\">使用 TLS 加密你的 Registry</a></li>\n<li><a href=\"https://docs.docker.com/registry/garbage-collection/\" target=\"_blank\" rel=\"external\">透過 Garbage Collection 來進行儲存清理</a></li>\n<li><a href=\"https://docs.docker.com/registry/recipes/mirror/\" target=\"_blank\" rel=\"external\">透過 “–registry-mirror” 開啟 Hub caching</a></li>\n</ul>\n</li>\n</ol>\n<h4>運行一個私有的 Docker Registry</h4>\n<ol>\n<li>運行 registry image 在預設 port 5000</li>\n<li>Re-tag 已存在的 image，且推送它到你的新 registry</li>\n<li>從本地端 cache 移除 image，且從新的 registry pull 下來</li>\n<li>使用 bind mount 來 Re-create registry，且觀察它如何儲存資料</li>\n</ol>\n<h5>Registry 和適合的 TLS</h5>\n<ol>\n<li>「預設加密」：Docker 不會用沒有 HTTPS 的方式跟 registry 溝通，除了 localhost (127.0.0.0/8)</li>\n<li>對於遠端自行登入的 TLS，要再引擎啟動 「insecure-registry」</li>\n<li>運行私有 registry image\n<ul>\n<li><code>docker container run -d -p 5000:5000 --name registry registry</code></li>\n</ul>\n</li>\n<li><code>docker pull hello-world</code> 下載很輕量的 image 來測試</li>\n<li>Re-tag 已存在的 image，且推送它到你的新 registry\n<ul>\n<li><code>docker tag hello-world 127.0.0.1:5000/hello-world</code></li>\n<li><code>docker push 127.0.0.1:5000/hello-world</code></li>\n</ul>\n</li>\n<li>從本地端 cache 移除 image，且從新的 registry pull 下來\n<ul>\n<li><code>docker image remove hello-world</code></li>\n<li><code>docker image remove 127.0.0.1:5000/hello-world</code></li>\n<li><code>docker pull 127.0.0.1:5000/hello-world</code></li>\n</ul>\n</li>\n<li><code>docker container kill registry</code></li>\n<li><code>docker container rm registry</code></li>\n<li>使用 bind mount 來 Re-create registry，且觀察它如何儲存資料\n<ul>\n<li><code>docker container run -d -p 5000:5000 --name registry -v $(pwd)/registry-data:/var/lib/registry registry</code></li>\n<li><code>docker push 127.0.0.1:5000/hello-world</code></li>\n<li><code>tree registry-data</code></li>\n</ul>\n</li>\n</ol>\n<h4>安裝 Docker 自動完成</h4>\n<ol>\n<li><a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/docker\" target=\"_blank\" rel=\"external\">Oh-my-zsh</a></li>\n<li><a href=\"https://github.com/felixr/docker-zsh-completion\" target=\"_blank\" rel=\"external\">docker-zsh-completion</a></li>\n</ol>\n<h4>作業：使用 TLS 和認證加密 Docker Registry</h4>\n<ol>\n<li>透過創建給 HTTPS 的 self-signed 認證和啟動 <strong>htpasswd</strong> 認證可以學習到基礎</li>\n<li>會使用 Play With Docker 來完成這個作業</li>\n<li>建議使用 <a href=\"http://training.play-with-docker.com/linux-registry-part2/\" target=\"_blank\" rel=\"external\">Part 2 and 3 of &quot;Docker Registry for Linux</a> 來完成作業，或是跳回 <a href=\"http://training.play-with-docker.com/linux-registry-part1/\" target=\"_blank\" rel=\"external\">Part 1</a> 且在他們的 infrastructure 上運行 container，使用他們的實際 Docker Engine 的 web-based 介面學習 <strong>PWD</strong> 怎麼運作的</li>\n<li>更多實驗請參考：<a href=\"http://training.play-with-docker.com/\" target=\"_blank\" rel=\"external\">點此</a></li>\n</ol>\n<h4>跟 Swarm 一起使用 Registry</h4>\n<ol>\n<li>跟 localhost 用一樣的方式</li>\n<li>由於 Routing Mesh，所有的節點可以在 127.0.0.1:5000 被看到</li>\n<li>記得決定如何儲存 image (volume driver)</li>\n<li>筆記：所有的 nodes 都要可以存取 images</li>\n<li>專業的技巧：如果可以的話，使用 hosted SaaS registry</li>\n</ol>\n<h5>使用 <a href=\"http://play-with-docker.com\" target=\"_blank\" rel=\"external\">play-with-docker.com</a></h5>\n<ol>\n<li><code>docker service create --name registry --publish 5000:5000 registry</code></li>\n<li>在 5000 port 的 console 後面加上 v2/_catalog 可以看到 json 格式的紀錄</li>\n<li><code>docker pull hello-world</code></li>\n<li><code>docker tag hello-world 127.0.0.1:5000/hello-world</code></li>\n<li><code>docker push 127.0.0.1:5000/hello-world</code></li>\n<li>在 5000 port 的 console 後面加上 v2/_catalog 可以看到 <code>{&quot;repositories&quot;:[&quot;hello-world&quot;]}</code></li>\n<li><code>docker pull nginx</code></li>\n<li><code>docker tag nginx 127.0.0.1:5000/nginx</code></li>\n<li><code>docker push 127.0.0.1:5000/nginx</code></li>\n<li><code>docker service create --name nginx -p 80:80 --replicas 5 --detach=false 127.0.0.1:5000/nginx</code></li>\n<li><code>docker service ps nginx</code> 就可以看到它使用的是本機端的 image <strong>(127.0.0.1:5000/nginx:latest)</strong></li>\n</ol>\n<h4>Docker 的第三方套件</h4>\n<ol>\n<li>最流行的是：<a href=\"https://quay.io/\" target=\"_blank\" rel=\"external\">Quay.io</a></li>\n<li>如果使用 <a href=\"https://www.docker.com/enterprise-edition#/container_management\" target=\"_blank\" rel=\"external\">AWS</a>、<a href=\"https://azure.microsoft.com/en-us/services/container-registry/\" target=\"_blank\" rel=\"external\">Azure</a>、<a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\" rel=\"external\">Google Cloud</a>，他們都有自己專屬的 registry</li>\n<li>如果是自建式主機，<a href=\"https://www.docker.com/enterprise-edition#/container_management\" target=\"_blank\" rel=\"external\">Docker EE</a>、<a href=\"https://quay.io/plans/?tab=enterprise\" target=\"_blank\" rel=\"external\">Quay Enterprise</a>、<a href=\"https://about.gitlab.com/2016/05/23/gitlab-container-registry/\" target=\"_blank\" rel=\"external\">GitLab</a></li>\n<li>更多詳細的 <a href=\"https://github.com/veggiemonk/awesome-docker#hosting-images-registries\" target=\"_blank\" rel=\"external\">registry 清單</a></li>\n</ol>\n<h3>額外的課程</h3>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=ZdUcKtg84T8\" target=\"_blank\" rel=\"external\">Journey to Docker Production: Evolving Your Infrastructure and Processes</a>\n<ul>\n<li>What host OS should I use?</li>\n<li>What base FROM images should I use?</li>\n<li>How should my Swarm node design look?</li>\n<li>What common issues do people have when starting a production docker project?</li>\n<li>How to limit the project from trying to change too much at once.</li>\n<li>How to speed up the project by outsourcing small pieces of solution to existing products.</li>\n<li>How Docker’s Enterprise/Cloud products can help.</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=Qsv-q8WbIZY\" target=\"_blank\" rel=\"external\">Everything You Thought You Already Knew About Orchestration</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_4QzP7uwtvI\" target=\"_blank\" rel=\"external\">Docker tip: docker system prune and df</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-NeaXUGEK_g\" target=\"_blank\" rel=\"external\">Docker 17.06 Community Edition</a>\n<ul>\n<li><a href=\"https://github.com/docker/docker-ce/releases\" target=\"_blank\" rel=\"external\">更詳細的 changelog</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3>完成課程</h3>\n<img src=\"/images/learning/docker/Bret Fisher_Docker.jpg\">","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday8.png\">\n<hr>\n<h3>Container Registry：Image Storage and Distribution</h3>\n<h4>Docker Hub：探尋的更深入</h4>\n<h5>Container Registries</h5>\n<ol>\n<li>你的 Container plan 需要有 Image Registry 成為 plan 的一部分</li>\n<li>更多 Docker Hub 的細節，包含 auto-build</li>\n<li>Docker Store 是怎麼樣跟 Hub 不一樣</li>\n<li>Docker Cloud 是怎麼樣跟 Hub 不一樣</li>\n<li>使用 Cloud 的新 Swarm 功能來讓 Mac/Win 跟 Swarm 連線</li>\n<li>安裝和使用 Docker Registry，且當作 private image store</li>\n<li>第三方 registry 套件選項</li>\n</ol>\n<h5>Docker Hub：探尋的更深入</h5>\n<ol>\n<li>最有名的 public image registry</li>\n<li>它是真的 Docker Registry 而且最輕量的 image building</li>\n<li>讓我們探索更多 Docker Hub 的功能</li>\n<li>連結 GitHub/BitBucket 到 Hub 而且自動建立 images commit</li>\n<li>將 image building 串連在一起</li>\n</ol>\n<h4>Docker Store：它可以做什麼？</h4>\n<ol>\n<li>下載 Docker “Editions”</li>\n<li>找到認證過的 Docker/Swarm 外掛和商業認證的 images</li>\n</ol>\n<h4>Docker Cloud：CI/CD 和 Server Ops</h4>\n<ol>\n<li>Web based Docker Swarm 創建/管理</li>\n<li>使用有名的雲端主機商和自建式伺服器</li>\n<li>自動化的 image building、測試和部署</li>\n<li>跟 Docker Hub 免費的東西相比更進階</li>\n<li>包含 image 安全掃描服務</li>\n</ol>\n<h4>使用 Docker Cloud 來做簡單的遠端 Swarm 管理</h4>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=VJmbCioYKGg\" target=\"_blank\" rel=\"external\">觀看此影片</a></li>\n</ol>\n<h4>了解 Docker Registry</h4>\n<ol>\n<li>一個提供給你的網路的私有 image registry</li>\n<li>Docker/Distribution Github Repo 的一部分</li>\n<li>事實上在私有的 container registry</li>\n<li>不像完整功能的 Hub 或其它東西，它沒有完整的網頁介面，只有基本的認證</li>\n<li>在核心的部分：一個網頁的 API 和儲存系統，用 Go 語言撰寫</li>\n<li>儲存系統支援 local、S3/Azure/Alibaba/Google 雲，還有 OpenStack Swift</li>\n<li>查看以下資源：\n<ul>\n<li><a href=\"https://docs.docker.com/registry/configuration/\" target=\"_blank\" rel=\"external\">使用 TLS 加密你的 Registry</a></li>\n<li><a href=\"https://docs.docker.com/registry/garbage-collection/\" target=\"_blank\" rel=\"external\">透過 Garbage Collection 來進行儲存清理</a></li>\n<li><a href=\"https://docs.docker.com/registry/recipes/mirror/\" target=\"_blank\" rel=\"external\">透過 “–registry-mirror” 開啟 Hub caching</a></li>\n</ul>\n</li>\n</ol>\n<h4>運行一個私有的 Docker Registry</h4>\n<ol>\n<li>運行 registry image 在預設 port 5000</li>\n<li>Re-tag 已存在的 image，且推送它到你的新 registry</li>\n<li>從本地端 cache 移除 image，且從新的 registry pull 下來</li>\n<li>使用 bind mount 來 Re-create registry，且觀察它如何儲存資料</li>\n</ol>\n<h5>Registry 和適合的 TLS</h5>\n<ol>\n<li>「預設加密」：Docker 不會用沒有 HTTPS 的方式跟 registry 溝通，除了 localhost (127.0.0.0/8)</li>\n<li>對於遠端自行登入的 TLS，要再引擎啟動 「insecure-registry」</li>\n<li>運行私有 registry image\n<ul>\n<li><code>docker container run -d -p 5000:5000 --name registry registry</code></li>\n</ul>\n</li>\n<li><code>docker pull hello-world</code> 下載很輕量的 image 來測試</li>\n<li>Re-tag 已存在的 image，且推送它到你的新 registry\n<ul>\n<li><code>docker tag hello-world 127.0.0.1:5000/hello-world</code></li>\n<li><code>docker push 127.0.0.1:5000/hello-world</code></li>\n</ul>\n</li>\n<li>從本地端 cache 移除 image，且從新的 registry pull 下來\n<ul>\n<li><code>docker image remove hello-world</code></li>\n<li><code>docker image remove 127.0.0.1:5000/hello-world</code></li>\n<li><code>docker pull 127.0.0.1:5000/hello-world</code></li>\n</ul>\n</li>\n<li><code>docker container kill registry</code></li>\n<li><code>docker container rm registry</code></li>\n<li>使用 bind mount 來 Re-create registry，且觀察它如何儲存資料\n<ul>\n<li><code>docker container run -d -p 5000:5000 --name registry -v $(pwd)/registry-data:/var/lib/registry registry</code></li>\n<li><code>docker push 127.0.0.1:5000/hello-world</code></li>\n<li><code>tree registry-data</code></li>\n</ul>\n</li>\n</ol>\n<h4>安裝 Docker 自動完成</h4>\n<ol>\n<li><a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/docker\" target=\"_blank\" rel=\"external\">Oh-my-zsh</a></li>\n<li><a href=\"https://github.com/felixr/docker-zsh-completion\" target=\"_blank\" rel=\"external\">docker-zsh-completion</a></li>\n</ol>\n<h4>作業：使用 TLS 和認證加密 Docker Registry</h4>\n<ol>\n<li>透過創建給 HTTPS 的 self-signed 認證和啟動 <strong>htpasswd</strong> 認證可以學習到基礎</li>\n<li>會使用 Play With Docker 來完成這個作業</li>\n<li>建議使用 <a href=\"http://training.play-with-docker.com/linux-registry-part2/\" target=\"_blank\" rel=\"external\">Part 2 and 3 of &quot;Docker Registry for Linux</a> 來完成作業，或是跳回 <a href=\"http://training.play-with-docker.com/linux-registry-part1/\" target=\"_blank\" rel=\"external\">Part 1</a> 且在他們的 infrastructure 上運行 container，使用他們的實際 Docker Engine 的 web-based 介面學習 <strong>PWD</strong> 怎麼運作的</li>\n<li>更多實驗請參考：<a href=\"http://training.play-with-docker.com/\" target=\"_blank\" rel=\"external\">點此</a></li>\n</ol>\n<h4>跟 Swarm 一起使用 Registry</h4>\n<ol>\n<li>跟 localhost 用一樣的方式</li>\n<li>由於 Routing Mesh，所有的節點可以在 127.0.0.1:5000 被看到</li>\n<li>記得決定如何儲存 image (volume driver)</li>\n<li>筆記：所有的 nodes 都要可以存取 images</li>\n<li>專業的技巧：如果可以的話，使用 hosted SaaS registry</li>\n</ol>\n<h5>使用 <a href=\"http://play-with-docker.com\" target=\"_blank\" rel=\"external\">play-with-docker.com</a></h5>\n<ol>\n<li><code>docker service create --name registry --publish 5000:5000 registry</code></li>\n<li>在 5000 port 的 console 後面加上 v2/_catalog 可以看到 json 格式的紀錄</li>\n<li><code>docker pull hello-world</code></li>\n<li><code>docker tag hello-world 127.0.0.1:5000/hello-world</code></li>\n<li><code>docker push 127.0.0.1:5000/hello-world</code></li>\n<li>在 5000 port 的 console 後面加上 v2/_catalog 可以看到 <code>{&quot;repositories&quot;:[&quot;hello-world&quot;]}</code></li>\n<li><code>docker pull nginx</code></li>\n<li><code>docker tag nginx 127.0.0.1:5000/nginx</code></li>\n<li><code>docker push 127.0.0.1:5000/nginx</code></li>\n<li><code>docker service create --name nginx -p 80:80 --replicas 5 --detach=false 127.0.0.1:5000/nginx</code></li>\n<li><code>docker service ps nginx</code> 就可以看到它使用的是本機端的 image <strong>(127.0.0.1:5000/nginx:latest)</strong></li>\n</ol>\n<h4>Docker 的第三方套件</h4>\n<ol>\n<li>最流行的是：<a href=\"https://quay.io/\" target=\"_blank\" rel=\"external\">Quay.io</a></li>\n<li>如果使用 <a href=\"https://www.docker.com/enterprise-edition#/container_management\" target=\"_blank\" rel=\"external\">AWS</a>、<a href=\"https://azure.microsoft.com/en-us/services/container-registry/\" target=\"_blank\" rel=\"external\">Azure</a>、<a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\" rel=\"external\">Google Cloud</a>，他們都有自己專屬的 registry</li>\n<li>如果是自建式主機，<a href=\"https://www.docker.com/enterprise-edition#/container_management\" target=\"_blank\" rel=\"external\">Docker EE</a>、<a href=\"https://quay.io/plans/?tab=enterprise\" target=\"_blank\" rel=\"external\">Quay Enterprise</a>、<a href=\"https://about.gitlab.com/2016/05/23/gitlab-container-registry/\" target=\"_blank\" rel=\"external\">GitLab</a></li>\n<li>更多詳細的 <a href=\"https://github.com/veggiemonk/awesome-docker#hosting-images-registries\" target=\"_blank\" rel=\"external\">registry 清單</a></li>\n</ol>\n<h3>額外的課程</h3>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=ZdUcKtg84T8\" target=\"_blank\" rel=\"external\">Journey to Docker Production: Evolving Your Infrastructure and Processes</a>\n<ul>\n<li>What host OS should I use?</li>\n<li>What base FROM images should I use?</li>\n<li>How should my Swarm node design look?</li>\n<li>What common issues do people have when starting a production docker project?</li>\n<li>How to limit the project from trying to change too much at once.</li>\n<li>How to speed up the project by outsourcing small pieces of solution to existing products.</li>\n<li>How Docker’s Enterprise/Cloud products can help.</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=Qsv-q8WbIZY\" target=\"_blank\" rel=\"external\">Everything You Thought You Already Knew About Orchestration</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_4QzP7uwtvI\" target=\"_blank\" rel=\"external\">Docker tip: docker system prune and df</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-NeaXUGEK_g\" target=\"_blank\" rel=\"external\">Docker 17.06 Community Edition</a>\n<ul>\n<li><a href=\"https://github.com/docker/docker-ce/releases\" target=\"_blank\" rel=\"external\">更詳細的 changelog</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3>完成課程</h3>\n<img src=\"/images/learning/docker/Bret Fisher_Docker.jpg\">"},{"title":"docker 快速學習自我挑戰 Day7","thumbnail":["/images/learning/docker/dockerday7.png"],"date":"2017-08-01T10:38:10.000Z","_content":"<img src=\"/images/learning/docker/dockerday7.png\">\n\n***\n### Docker 服務和 Swarm 的威力： Build-In Orchestration\n#### Swarms Stacks 和產品化等級的 Compose\n1. 在 1.13 版本，Docker 增加了一個新的抽象層到 Swarm，且命名為 Stacks\n2. Stacks 接受的 Compose files 如同他們對 Services、Networks 和 Volumes 的聲明性定義\n3. 我們使用 `docker stack deploy` 而不是 docker service create\n4. Stacks 為我們掌管這些 objects，包括每一個 stack 的 overlay network，新增 stack 名稱來開始他們的名稱\n5. 新的 `deploy`：Compose file 裡面的 key，不能用 `build`\n6. Compose 現在省略 `deploy`，Swarm 省略 `build`\n7. `docker-compose` cli 在 Swarm server 上面不被需要\n8. `docker stack deploy -c example-voting-app-stack.yml voteapp` 使用 YAML 檔案開始部署專案\n9. `docker stack ps voteapp` 檢查運行狀態\n10. `docker stack services voteapp` 顯示 server 狀態，有點像是 `docker service ls`\n11. 如果檔案有修改，再執行一次 `docker stack deploy -c example-voting-app-stack.yml voteapp` 就會自動更新了\n#### 給 Swarm 使用的 Secrets Storage：保護你的環境變數\n1. 給 Swarm 儲存 Secrets 的最簡單的「安全」解決方案 \n2. 什麼是 Secret？\n    - Usernames and passwords\n    - TLS 認證和 keys\n    - SSH keys\n    - 任何你將不會放在「前端頁面的新聞」的資料\n3. 支援 generic strings 或二進位內容，最多不可大於 500kb\n4. 不需要要求 apps 可以被覆寫\n5. 在 1.13.0 版本後的 Docker，Swarm Raft DB 在硬碟上是被加密的\n6. 只儲存在 Manager nodes 的硬碟上\n7. 預設 Managers 和 Workers 「控制面板」是 TLS ＋ 雙向認證\n8. Secrets 首先儲存在 Swarm，然後再分派給 Service(s)\n9. 只有在被分派的 Service(s) 的 containers 可以看見它們\n10. 它們看起來是 container 裡面的檔案，但事實上它們在記憶體上的 fs\n11. `/run/secrets/<secret_name>` 或`/run/secrets/<secret_alias>`\n12. 本地端的 docker-compose 可以使用基於檔案的 secrets，但是不安全\n#### 在 Swarm Services 使用 Secrets\n1. `docker secret create psql_user psql_user.txt`\n2. `echo \"myDBpassWORD\" | docker secret create psql_pass -`\n3. `docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres`\n4. `docker service ps psql` 觀察在第幾個 node，跳到那個 node\n5. `docker exec -it <container> bash`\n6. `cat /run/secrets/psql_user` 可以直接看到 psql_user 內容\n7. `docker service update --secret-rm` 可以使用這個語法移除 secrets\n#### 與 Swarm Stacks 一起使用 Secrets\n1. `docker stack deploy -c docker-compose.yml mydb`\n2. `docker stack rm mydb`\n#### 與本地端 Docker Compose 一起使用 Secrets\n1. `docker-compose up -d`\n2. `docker-compose exec psql cat /run/secrets/psql_user`\n#### 作業：創建一個帶有 Secrets 的 Stack 並且 Deploy\n1. 使用上一個作業(**compose-assignment-2**)的 Drupal compose 檔案\n2. 重新命名 image 回到官方版本 **drupal:8.2**\n3. 移除 **build:**\n4. 透過 **external:** 新增 secret\n5. 使用環境變數 **POSTGRES_PASSWORD_FILE**\n6. 透過 cli **echo \"\\<pw\\>\" | docker secret create psql-pw -** 新增 secret\n7. 複製 compose 到 Swarm node1 的 新 yml 檔案\n#### 答案：創建一個帶有 Secrets 的 Stack 並且 Deploy\n1. 新增 docker-compose.yml\n```\nversion: '3.1'\n\nservices:\n\n  drupal:\n    image: drupal:8.3.5\n    ports:\n      - \"80:80\"\n    volumes:\n      - drupal-modules:/var/www/html/modules\n      - drupal-profiles:/var/www/html/profiles\n      - drupal-sites:/var/www/html/sites\n      - drupal-themes:/var/www/html/themes\n\n  postgres:\n    image: postgres:9.6\n    environment:\n      - POSTGRES_PASSWORD=/run/secrets/psql-pw\n    secrets:\n      - psql-pw\n    volumes:\n      - drupal-data:/var/lib/postgresql/data\n\nvolumes:\n  drupal-data:\n  drupal-modules:\n  drupal-profiles:\n  drupal-sites:\n  drupal-themes:\n\nsecrets:\n  psql-pw:\n    external: true\n```\n2. `echo \"123456\" | docker secret create psql-pw -`\n3. `docker stack deploy -c docker-compose.yml drupal`\n4. `docker stack ps drupal`\n#### 完整的 App 生命週期：與單一 Compose 設計的 Dev、Build 和 Deploy\n1. 保持夢想\n2. 一組 Compose files 給：\n    - 本機端 **docker-compose up** 開發環境\n        - `docker-compose up -d`\n        - `docker-compose down`\n    - 遠端 **docker-compose up** CI 環境\n        - `docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d`\n    - 遠端 **docker stack deploy** 產品化環境\n        - `docker-compose -f docker-compose.yml -f docker-compose.prod.yml config > output.yml`\n3. 筆記：`docker-compose -f a.yml -f b.yml config` 大部分可以運作\n4. 筆記：Compose **extends**：尚無法再 Stacks 裡運作","source":"_posts/docker-快速學習自我挑戰-Day7.md","raw":"---\ntitle: docker 快速學習自我挑戰 Day7\nthumbnail:\n  - /images/learning/docker/dockerday7.png\ndate: 2017-08-01 18:38:10\ncategories: 學習歷程\ntags: Docker\n---\n<img src=\"/images/learning/docker/dockerday7.png\">\n\n***\n### Docker 服務和 Swarm 的威力： Build-In Orchestration\n#### Swarms Stacks 和產品化等級的 Compose\n1. 在 1.13 版本，Docker 增加了一個新的抽象層到 Swarm，且命名為 Stacks\n2. Stacks 接受的 Compose files 如同他們對 Services、Networks 和 Volumes 的聲明性定義\n3. 我們使用 `docker stack deploy` 而不是 docker service create\n4. Stacks 為我們掌管這些 objects，包括每一個 stack 的 overlay network，新增 stack 名稱來開始他們的名稱\n5. 新的 `deploy`：Compose file 裡面的 key，不能用 `build`\n6. Compose 現在省略 `deploy`，Swarm 省略 `build`\n7. `docker-compose` cli 在 Swarm server 上面不被需要\n8. `docker stack deploy -c example-voting-app-stack.yml voteapp` 使用 YAML 檔案開始部署專案\n9. `docker stack ps voteapp` 檢查運行狀態\n10. `docker stack services voteapp` 顯示 server 狀態，有點像是 `docker service ls`\n11. 如果檔案有修改，再執行一次 `docker stack deploy -c example-voting-app-stack.yml voteapp` 就會自動更新了\n#### 給 Swarm 使用的 Secrets Storage：保護你的環境變數\n1. 給 Swarm 儲存 Secrets 的最簡單的「安全」解決方案 \n2. 什麼是 Secret？\n    - Usernames and passwords\n    - TLS 認證和 keys\n    - SSH keys\n    - 任何你將不會放在「前端頁面的新聞」的資料\n3. 支援 generic strings 或二進位內容，最多不可大於 500kb\n4. 不需要要求 apps 可以被覆寫\n5. 在 1.13.0 版本後的 Docker，Swarm Raft DB 在硬碟上是被加密的\n6. 只儲存在 Manager nodes 的硬碟上\n7. 預設 Managers 和 Workers 「控制面板」是 TLS ＋ 雙向認證\n8. Secrets 首先儲存在 Swarm，然後再分派給 Service(s)\n9. 只有在被分派的 Service(s) 的 containers 可以看見它們\n10. 它們看起來是 container 裡面的檔案，但事實上它們在記憶體上的 fs\n11. `/run/secrets/<secret_name>` 或`/run/secrets/<secret_alias>`\n12. 本地端的 docker-compose 可以使用基於檔案的 secrets，但是不安全\n#### 在 Swarm Services 使用 Secrets\n1. `docker secret create psql_user psql_user.txt`\n2. `echo \"myDBpassWORD\" | docker secret create psql_pass -`\n3. `docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres`\n4. `docker service ps psql` 觀察在第幾個 node，跳到那個 node\n5. `docker exec -it <container> bash`\n6. `cat /run/secrets/psql_user` 可以直接看到 psql_user 內容\n7. `docker service update --secret-rm` 可以使用這個語法移除 secrets\n#### 與 Swarm Stacks 一起使用 Secrets\n1. `docker stack deploy -c docker-compose.yml mydb`\n2. `docker stack rm mydb`\n#### 與本地端 Docker Compose 一起使用 Secrets\n1. `docker-compose up -d`\n2. `docker-compose exec psql cat /run/secrets/psql_user`\n#### 作業：創建一個帶有 Secrets 的 Stack 並且 Deploy\n1. 使用上一個作業(**compose-assignment-2**)的 Drupal compose 檔案\n2. 重新命名 image 回到官方版本 **drupal:8.2**\n3. 移除 **build:**\n4. 透過 **external:** 新增 secret\n5. 使用環境變數 **POSTGRES_PASSWORD_FILE**\n6. 透過 cli **echo \"\\<pw\\>\" | docker secret create psql-pw -** 新增 secret\n7. 複製 compose 到 Swarm node1 的 新 yml 檔案\n#### 答案：創建一個帶有 Secrets 的 Stack 並且 Deploy\n1. 新增 docker-compose.yml\n```\nversion: '3.1'\n\nservices:\n\n  drupal:\n    image: drupal:8.3.5\n    ports:\n      - \"80:80\"\n    volumes:\n      - drupal-modules:/var/www/html/modules\n      - drupal-profiles:/var/www/html/profiles\n      - drupal-sites:/var/www/html/sites\n      - drupal-themes:/var/www/html/themes\n\n  postgres:\n    image: postgres:9.6\n    environment:\n      - POSTGRES_PASSWORD=/run/secrets/psql-pw\n    secrets:\n      - psql-pw\n    volumes:\n      - drupal-data:/var/lib/postgresql/data\n\nvolumes:\n  drupal-data:\n  drupal-modules:\n  drupal-profiles:\n  drupal-sites:\n  drupal-themes:\n\nsecrets:\n  psql-pw:\n    external: true\n```\n2. `echo \"123456\" | docker secret create psql-pw -`\n3. `docker stack deploy -c docker-compose.yml drupal`\n4. `docker stack ps drupal`\n#### 完整的 App 生命週期：與單一 Compose 設計的 Dev、Build 和 Deploy\n1. 保持夢想\n2. 一組 Compose files 給：\n    - 本機端 **docker-compose up** 開發環境\n        - `docker-compose up -d`\n        - `docker-compose down`\n    - 遠端 **docker-compose up** CI 環境\n        - `docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d`\n    - 遠端 **docker stack deploy** 產品化環境\n        - `docker-compose -f docker-compose.yml -f docker-compose.prod.yml config > output.yml`\n3. 筆記：`docker-compose -f a.yml -f b.yml config` 大部分可以運作\n4. 筆記：Compose **extends**：尚無法再 Stacks 裡運作","slug":"docker-快速學習自我挑戰-Day7","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyq006x7ifaha4laghr","content":"<img src=\"/images/learning/docker/dockerday7.png\">\n<hr>\n<h3>Docker 服務和 Swarm 的威力： Build-In Orchestration</h3>\n<h4>Swarms Stacks 和產品化等級的 Compose</h4>\n<ol>\n<li>在 1.13 版本，Docker 增加了一個新的抽象層到 Swarm，且命名為 Stacks</li>\n<li>Stacks 接受的 Compose files 如同他們對 Services、Networks 和 Volumes 的聲明性定義</li>\n<li>我們使用 <code>docker stack deploy</code> 而不是 docker service create</li>\n<li>Stacks 為我們掌管這些 objects，包括每一個 stack 的 overlay network，新增 stack 名稱來開始他們的名稱</li>\n<li>新的 <code>deploy</code>：Compose file 裡面的 key，不能用 <code>build</code></li>\n<li>Compose 現在省略 <code>deploy</code>，Swarm 省略 <code>build</code></li>\n<li><code>docker-compose</code> cli 在 Swarm server 上面不被需要</li>\n<li><code>docker stack deploy -c example-voting-app-stack.yml voteapp</code> 使用 YAML 檔案開始部署專案</li>\n<li><code>docker stack ps voteapp</code> 檢查運行狀態</li>\n<li><code>docker stack services voteapp</code> 顯示 server 狀態，有點像是 <code>docker service ls</code></li>\n<li>如果檔案有修改，再執行一次 <code>docker stack deploy -c example-voting-app-stack.yml voteapp</code> 就會自動更新了</li>\n</ol>\n<h4>給 Swarm 使用的 Secrets Storage：保護你的環境變數</h4>\n<ol>\n<li>給 Swarm 儲存 Secrets 的最簡單的「安全」解決方案</li>\n<li>什麼是 Secret？\n<ul>\n<li>Usernames and passwords</li>\n<li>TLS 認證和 keys</li>\n<li>SSH keys</li>\n<li>任何你將不會放在「前端頁面的新聞」的資料</li>\n</ul>\n</li>\n<li>支援 generic strings 或二進位內容，最多不可大於 500kb</li>\n<li>不需要要求 apps 可以被覆寫</li>\n<li>在 1.13.0 版本後的 Docker，Swarm Raft DB 在硬碟上是被加密的</li>\n<li>只儲存在 Manager nodes 的硬碟上</li>\n<li>預設 Managers 和 Workers 「控制面板」是 TLS ＋ 雙向認證</li>\n<li>Secrets 首先儲存在 Swarm，然後再分派給 Service(s)</li>\n<li>只有在被分派的 Service(s) 的 containers 可以看見它們</li>\n<li>它們看起來是 container 裡面的檔案，但事實上它們在記憶體上的 fs</li>\n<li><code>/run/secrets/&lt;secret_name&gt;</code> 或<code>/run/secrets/&lt;secret_alias&gt;</code></li>\n<li>本地端的 docker-compose 可以使用基於檔案的 secrets，但是不安全</li>\n</ol>\n<h4>在 Swarm Services 使用 Secrets</h4>\n<ol>\n<li><code>docker secret create psql_user psql_user.txt</code></li>\n<li><code>echo &quot;myDBpassWORD&quot; | docker secret create psql_pass -</code></li>\n<li><code>docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres</code></li>\n<li><code>docker service ps psql</code> 觀察在第幾個 node，跳到那個 node</li>\n<li><code>docker exec -it &lt;container&gt; bash</code></li>\n<li><code>cat /run/secrets/psql_user</code> 可以直接看到 psql_user 內容</li>\n<li><code>docker service update --secret-rm</code> 可以使用這個語法移除 secrets</li>\n</ol>\n<h4>與 Swarm Stacks 一起使用 Secrets</h4>\n<ol>\n<li><code>docker stack deploy -c docker-compose.yml mydb</code></li>\n<li><code>docker stack rm mydb</code></li>\n</ol>\n<h4>與本地端 Docker Compose 一起使用 Secrets</h4>\n<ol>\n<li><code>docker-compose up -d</code></li>\n<li><code>docker-compose exec psql cat /run/secrets/psql_user</code></li>\n</ol>\n<h4>作業：創建一個帶有 Secrets 的 Stack 並且 Deploy</h4>\n<ol>\n<li>使用上一個作業(<strong>compose-assignment-2</strong>)的 Drupal compose 檔案</li>\n<li>重新命名 image 回到官方版本 <strong>drupal:8.2</strong></li>\n<li>移除 <strong>build:</strong></li>\n<li>透過 <strong>external:</strong> 新增 secret</li>\n<li>使用環境變數 <strong>POSTGRES_PASSWORD_FILE</strong></li>\n<li>透過 cli <strong>echo “&lt;pw&gt;” | docker secret create psql-pw -</strong> 新增 secret</li>\n<li>複製 compose 到 Swarm node1 的 新 yml 檔案</li>\n</ol>\n<h4>答案：創建一個帶有 Secrets 的 Stack 並且 Deploy</h4>\n<ol>\n<li>新增 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;3.1&apos;</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\"></div><div class=\"line\">  drupal:</div><div class=\"line\">    image: drupal:8.3.5</div><div class=\"line\">    ports:</div><div class=\"line\">      - &quot;80:80&quot;</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-modules:/var/www/html/modules</div><div class=\"line\">      - drupal-profiles:/var/www/html/profiles</div><div class=\"line\">      - drupal-sites:/var/www/html/sites</div><div class=\"line\">      - drupal-themes:/var/www/html/themes</div><div class=\"line\"></div><div class=\"line\">  postgres:</div><div class=\"line\">    image: postgres:9.6</div><div class=\"line\">    environment:</div><div class=\"line\">      - POSTGRES_PASSWORD=/run/secrets/psql-pw</div><div class=\"line\">    secrets:</div><div class=\"line\">      - psql-pw</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-data:/var/lib/postgresql/data</div><div class=\"line\"></div><div class=\"line\">volumes:</div><div class=\"line\">  drupal-data:</div><div class=\"line\">  drupal-modules:</div><div class=\"line\">  drupal-profiles:</div><div class=\"line\">  drupal-sites:</div><div class=\"line\">  drupal-themes:</div><div class=\"line\"></div><div class=\"line\">secrets:</div><div class=\"line\">  psql-pw:</div><div class=\"line\">    external: true</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>echo &quot;123456&quot; | docker secret create psql-pw -</code></li>\n<li><code>docker stack deploy -c docker-compose.yml drupal</code></li>\n<li><code>docker stack ps drupal</code></li>\n</ol>\n<h4>完整的 App 生命週期：與單一 Compose 設計的 Dev、Build 和 Deploy</h4>\n<ol>\n<li>保持夢想</li>\n<li>一組 Compose files 給：\n<ul>\n<li>本機端 <strong>docker-compose up</strong> 開發環境\n<ul>\n<li><code>docker-compose up -d</code></li>\n<li><code>docker-compose down</code></li>\n</ul>\n</li>\n<li>遠端 <strong>docker-compose up</strong> CI 環境\n<ul>\n<li><code>docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d</code></li>\n</ul>\n</li>\n<li>遠端 <strong>docker stack deploy</strong> 產品化環境\n<ul>\n<li><code>docker-compose -f docker-compose.yml -f docker-compose.prod.yml config &gt; output.yml</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>筆記：<code>docker-compose -f a.yml -f b.yml config</code> 大部分可以運作</li>\n<li>筆記：Compose <strong>extends</strong>：尚無法再 Stacks 裡運作</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/docker/dockerday7.png\">\n<hr>\n<h3>Docker 服務和 Swarm 的威力： Build-In Orchestration</h3>\n<h4>Swarms Stacks 和產品化等級的 Compose</h4>\n<ol>\n<li>在 1.13 版本，Docker 增加了一個新的抽象層到 Swarm，且命名為 Stacks</li>\n<li>Stacks 接受的 Compose files 如同他們對 Services、Networks 和 Volumes 的聲明性定義</li>\n<li>我們使用 <code>docker stack deploy</code> 而不是 docker service create</li>\n<li>Stacks 為我們掌管這些 objects，包括每一個 stack 的 overlay network，新增 stack 名稱來開始他們的名稱</li>\n<li>新的 <code>deploy</code>：Compose file 裡面的 key，不能用 <code>build</code></li>\n<li>Compose 現在省略 <code>deploy</code>，Swarm 省略 <code>build</code></li>\n<li><code>docker-compose</code> cli 在 Swarm server 上面不被需要</li>\n<li><code>docker stack deploy -c example-voting-app-stack.yml voteapp</code> 使用 YAML 檔案開始部署專案</li>\n<li><code>docker stack ps voteapp</code> 檢查運行狀態</li>\n<li><code>docker stack services voteapp</code> 顯示 server 狀態，有點像是 <code>docker service ls</code></li>\n<li>如果檔案有修改，再執行一次 <code>docker stack deploy -c example-voting-app-stack.yml voteapp</code> 就會自動更新了</li>\n</ol>\n<h4>給 Swarm 使用的 Secrets Storage：保護你的環境變數</h4>\n<ol>\n<li>給 Swarm 儲存 Secrets 的最簡單的「安全」解決方案</li>\n<li>什麼是 Secret？\n<ul>\n<li>Usernames and passwords</li>\n<li>TLS 認證和 keys</li>\n<li>SSH keys</li>\n<li>任何你將不會放在「前端頁面的新聞」的資料</li>\n</ul>\n</li>\n<li>支援 generic strings 或二進位內容，最多不可大於 500kb</li>\n<li>不需要要求 apps 可以被覆寫</li>\n<li>在 1.13.0 版本後的 Docker，Swarm Raft DB 在硬碟上是被加密的</li>\n<li>只儲存在 Manager nodes 的硬碟上</li>\n<li>預設 Managers 和 Workers 「控制面板」是 TLS ＋ 雙向認證</li>\n<li>Secrets 首先儲存在 Swarm，然後再分派給 Service(s)</li>\n<li>只有在被分派的 Service(s) 的 containers 可以看見它們</li>\n<li>它們看起來是 container 裡面的檔案，但事實上它們在記憶體上的 fs</li>\n<li><code>/run/secrets/&lt;secret_name&gt;</code> 或<code>/run/secrets/&lt;secret_alias&gt;</code></li>\n<li>本地端的 docker-compose 可以使用基於檔案的 secrets，但是不安全</li>\n</ol>\n<h4>在 Swarm Services 使用 Secrets</h4>\n<ol>\n<li><code>docker secret create psql_user psql_user.txt</code></li>\n<li><code>echo &quot;myDBpassWORD&quot; | docker secret create psql_pass -</code></li>\n<li><code>docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres</code></li>\n<li><code>docker service ps psql</code> 觀察在第幾個 node，跳到那個 node</li>\n<li><code>docker exec -it &lt;container&gt; bash</code></li>\n<li><code>cat /run/secrets/psql_user</code> 可以直接看到 psql_user 內容</li>\n<li><code>docker service update --secret-rm</code> 可以使用這個語法移除 secrets</li>\n</ol>\n<h4>與 Swarm Stacks 一起使用 Secrets</h4>\n<ol>\n<li><code>docker stack deploy -c docker-compose.yml mydb</code></li>\n<li><code>docker stack rm mydb</code></li>\n</ol>\n<h4>與本地端 Docker Compose 一起使用 Secrets</h4>\n<ol>\n<li><code>docker-compose up -d</code></li>\n<li><code>docker-compose exec psql cat /run/secrets/psql_user</code></li>\n</ol>\n<h4>作業：創建一個帶有 Secrets 的 Stack 並且 Deploy</h4>\n<ol>\n<li>使用上一個作業(<strong>compose-assignment-2</strong>)的 Drupal compose 檔案</li>\n<li>重新命名 image 回到官方版本 <strong>drupal:8.2</strong></li>\n<li>移除 <strong>build:</strong></li>\n<li>透過 <strong>external:</strong> 新增 secret</li>\n<li>使用環境變數 <strong>POSTGRES_PASSWORD_FILE</strong></li>\n<li>透過 cli <strong>echo “&lt;pw&gt;” | docker secret create psql-pw -</strong> 新增 secret</li>\n<li>複製 compose 到 Swarm node1 的 新 yml 檔案</li>\n</ol>\n<h4>答案：創建一個帶有 Secrets 的 Stack 並且 Deploy</h4>\n<ol>\n<li>新增 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;3.1&apos;</div><div class=\"line\"></div><div class=\"line\">services:</div><div class=\"line\"></div><div class=\"line\">  drupal:</div><div class=\"line\">    image: drupal:8.3.5</div><div class=\"line\">    ports:</div><div class=\"line\">      - &quot;80:80&quot;</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-modules:/var/www/html/modules</div><div class=\"line\">      - drupal-profiles:/var/www/html/profiles</div><div class=\"line\">      - drupal-sites:/var/www/html/sites</div><div class=\"line\">      - drupal-themes:/var/www/html/themes</div><div class=\"line\"></div><div class=\"line\">  postgres:</div><div class=\"line\">    image: postgres:9.6</div><div class=\"line\">    environment:</div><div class=\"line\">      - POSTGRES_PASSWORD=/run/secrets/psql-pw</div><div class=\"line\">    secrets:</div><div class=\"line\">      - psql-pw</div><div class=\"line\">    volumes:</div><div class=\"line\">      - drupal-data:/var/lib/postgresql/data</div><div class=\"line\"></div><div class=\"line\">volumes:</div><div class=\"line\">  drupal-data:</div><div class=\"line\">  drupal-modules:</div><div class=\"line\">  drupal-profiles:</div><div class=\"line\">  drupal-sites:</div><div class=\"line\">  drupal-themes:</div><div class=\"line\"></div><div class=\"line\">secrets:</div><div class=\"line\">  psql-pw:</div><div class=\"line\">    external: true</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>echo &quot;123456&quot; | docker secret create psql-pw -</code></li>\n<li><code>docker stack deploy -c docker-compose.yml drupal</code></li>\n<li><code>docker stack ps drupal</code></li>\n</ol>\n<h4>完整的 App 生命週期：與單一 Compose 設計的 Dev、Build 和 Deploy</h4>\n<ol>\n<li>保持夢想</li>\n<li>一組 Compose files 給：\n<ul>\n<li>本機端 <strong>docker-compose up</strong> 開發環境\n<ul>\n<li><code>docker-compose up -d</code></li>\n<li><code>docker-compose down</code></li>\n</ul>\n</li>\n<li>遠端 <strong>docker-compose up</strong> CI 環境\n<ul>\n<li><code>docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d</code></li>\n</ul>\n</li>\n<li>遠端 <strong>docker stack deploy</strong> 產品化環境\n<ul>\n<li><code>docker-compose -f docker-compose.yml -f docker-compose.prod.yml config &gt; output.yml</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>筆記：<code>docker-compose -f a.yml -f b.yml config</code> 大部分可以運作</li>\n<li>筆記：Compose <strong>extends</strong>：尚無法再 Stacks 裡運作</li>\n</ol>\n"},{"title":"Hello World","date":"2016-09-02T08:36:32.000Z","thumbnail":["/images/hello_world.png"],"_content":"<img src=\"/images/hello_world.png\">\n\n***\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-09-02 16:36:32\ncategories: 技術分享\nthumbnail:\n  - /images/hello_world.png\n---\n<img src=\"/images/hello_world.png\">\n\n***\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-11-04T14:07:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyr00707ifap90ducbi","content":"<img src=\"/images/hello_world.png\">\n<hr>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2>Quick Start</h2>\n<h3>Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3>Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3>Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3>Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/hello_world.png\">\n<hr>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2>Quick Start</h2>\n<h3>Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3>Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3>Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3>Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"在hexo使用emoji","thumbnail":["/images/emoji.png"],"date":"2016-09-11T02:15:30.000Z","_content":"<img src=\"/images/emoji.png\">\n\n***\n## 修改渲染器\n\n```\ncd /workspace/blogs/   //跳轉到hexo的目錄\nnpm un hexo-renderer-marked --save\nnpm i hexo-renderer-markdown-it --save\n```\n\n## 下載markdown-it-emoji插件：\n\n```\nnpm install markdown-it-emoji --save\n```\n\n## 編輯Hexo的最上層的配置文件_config.yml來配置markdown渲染器\n\n```\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true  //這邊我改成true直接在.md裡面enter就換行\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n  plugins:\n    - markdown-it-footnote\n    - markdown-it-sup\n    - markdown-it-sub\n    - markdown-it-abbr\n    - markdown-it-emoji\n```\n","source":"_posts/在hexo使用emoji.md","raw":"---\ntitle: 在hexo使用emoji\nthumbnail:\n  - /images/emoji.png\ndate: 2016-09-11 10:15:30\ncategories: 技術分享\ntags:\n---\n<img src=\"/images/emoji.png\">\n\n***\n## 修改渲染器\n\n```\ncd /workspace/blogs/   //跳轉到hexo的目錄\nnpm un hexo-renderer-marked --save\nnpm i hexo-renderer-markdown-it --save\n```\n\n## 下載markdown-it-emoji插件：\n\n```\nnpm install markdown-it-emoji --save\n```\n\n## 編輯Hexo的最上層的配置文件_config.yml來配置markdown渲染器\n\n```\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true  //這邊我改成true直接在.md裡面enter就換行\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n  plugins:\n    - markdown-it-footnote\n    - markdown-it-sup\n    - markdown-it-sub\n    - markdown-it-abbr\n    - markdown-it-emoji\n```\n","slug":"在hexo使用emoji","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwys00737ifaf3t4n4u9","content":"<img src=\"/images/emoji.png\">\n<hr>\n<h2>修改渲染器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /workspace/blogs/   //跳轉到hexo的目錄</div><div class=\"line\">npm un hexo-renderer-marked --save</div><div class=\"line\">npm i hexo-renderer-markdown-it --save</div></pre></td></tr></table></figure>\n<h2>下載markdown-it-emoji插件：</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install markdown-it-emoji --save</div></pre></td></tr></table></figure>\n<h2>編輯Hexo的最上層的配置文件_config.yml來配置markdown渲染器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">markdown:</div><div class=\"line\">  render:</div><div class=\"line\">    html: true</div><div class=\"line\">    xhtmlOut: false</div><div class=\"line\">    breaks: true  //這邊我改成true直接在.md裡面enter就換行</div><div class=\"line\">    linkify: true</div><div class=\"line\">    typographer: true</div><div class=\"line\">    quotes: &apos;“”‘’&apos;</div><div class=\"line\">  plugins:</div><div class=\"line\">    - markdown-it-footnote</div><div class=\"line\">    - markdown-it-sup</div><div class=\"line\">    - markdown-it-sub</div><div class=\"line\">    - markdown-it-abbr</div><div class=\"line\">    - markdown-it-emoji</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/emoji.png\">\n<hr>\n<h2>修改渲染器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /workspace/blogs/   //跳轉到hexo的目錄</div><div class=\"line\">npm un hexo-renderer-marked --save</div><div class=\"line\">npm i hexo-renderer-markdown-it --save</div></pre></td></tr></table></figure>\n<h2>下載markdown-it-emoji插件：</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install markdown-it-emoji --save</div></pre></td></tr></table></figure>\n<h2>編輯Hexo的最上層的配置文件_config.yml來配置markdown渲染器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">markdown:</div><div class=\"line\">  render:</div><div class=\"line\">    html: true</div><div class=\"line\">    xhtmlOut: false</div><div class=\"line\">    breaks: true  //這邊我改成true直接在.md裡面enter就換行</div><div class=\"line\">    linkify: true</div><div class=\"line\">    typographer: true</div><div class=\"line\">    quotes: &apos;“”‘’&apos;</div><div class=\"line\">  plugins:</div><div class=\"line\">    - markdown-it-footnote</div><div class=\"line\">    - markdown-it-sup</div><div class=\"line\">    - markdown-it-sub</div><div class=\"line\">    - markdown-it-abbr</div><div class=\"line\">    - markdown-it-emoji</div></pre></td></tr></table></figure>\n"},{"title":"提高生產效率：適應、改善、執行","thumbnail":["/images/learning/productivity/productivity.jpg"],"date":"2017-08-31T07:39:56.000Z","_content":"<img src=\"/images/learning/productivity/productivity.jpg\">\n\n***\n### 為誰設計的課程？\n1. 從 Planning 到 doing faster\n2. 課程有以下特點\n    - 根據研究\n    - 實際演練\n    - 證明結果\n    - 什麼都有，就是沒有 generic advice\n    - 很簡單易用\n3. 帶你從 **Where You Are** 到 **You Want To Be**\n4. 概觀\n    - 意志力\n    - 動機\n    - 習慣\n    - 做決定\n    - 設定目標\n### 意志力：你最重要的資源\n1. 這邊會談到自我管理的重要性\n2. 每天練習，持續三十天，並記錄結果\n#### 第一項：意志力\n1. 冥想\n    - 幫助專注\n    - 減輕壓力\n    - 增強意志力\n    - 對初學者有很好的效果\n2. 在 11 小時之後，腦中會產生生理改變\n3. 快速開始指南\n    - 坐下\n    - 清理思緒\n    - 注意呼吸\n    - 每天至少 10 分鐘，堅持至少三個禮拜\n#### 第二項：Pause & Plan Response\n1. 大腦在壓力之下，會做**不好的**決定\n2. You + Stress = Short Term Thinking\n3. 讓呼吸變慢\n#### 第三項：原諒自己\n1. 原諒讓自己回到正軌\n2. PRE-COMMIT：找別人一起做，你就會不得不做\n3. 想像未來的自己是真的人，關心他，在做不好的決定的時候想到他\n### 動機：為什麼它很重要但不夠\n1. 它很棒，但是它不夠讓你完成事情\n2. 思考為什麼：你為什麼想達成這個目標？\n3. 我現在就想要，但是現實不是這樣的\n4. 動機讓你開始，但是只有**習慣**可以讓你持續進行\n5. 如果你什麼都有了，你想要做什麼？\n6. 你不會永遠享受它\n7. 答案在你自己的心中\n### 習慣：成功的秘密\n1. We first make our habits then our habits make us - John Dryden\n2. 他們可以在生理上改變大腦\n3. 習慣由什麼組成？\n    - Craving\n    - Cue\n    - Routine\n    - Reward\n4. 習慣**永遠不會**完全消失\n5. 壞習慣就養成好習慣來取代它就可以了\n    - 工作 -> 覺得無聊 -> 看社交軟體，產生拖延\n    - 工作 -> 覺得無聊 -> 回來工作吧！\n6. 針對壞習慣記得：\n    - 讓習慣慢下來\n    - 然後針對某個環節攻擊\n7. 創造動力\n    - 建立 checklist\n    - 當危機產生的時候就是最好的改變時間\n8. 結論\n    - 了解習慣\n    - 創造動力\n    - 讓時機更正確\n### 目標：達成任何事情的框架\n1. 一定要知道目標\n2. 有效目標設定 6 步驟\n    - 1 你想要達成什麼？\n    - 2 你想要付出什麼作為交換？\n    - 3 設定明確的時間\n    - 4 有一個清楚的計畫\n    - 5 列印出來並簽名\n    - 6 每天大聲唸出來兩遍 (起床的時候和要睡覺的時候)\n3. S M A R T rule\n    - Specific\n    - Measurable\n    - Attainable\n    - Realistic\n    - Time Bound：把它分為每週里程碑\n### 做決定：速度、彈性和持續性\n1. 準備 => 決定 => 溝通 => 執行 => 衡量\n2. 做決定的四個核心標準\n    - 結果\n    - 選擇\n    - 時間框架\n    - 參與的人事物\n3. 準備：做好調查，可以減少很多投資，還有更多選擇。但是記得不要真的行動，就做調查就好\n4. 決定：最好的做法是 Consensus，但是很難執行，而且很慢。\n5. 溝通：使用適合的工具來通知\n    - 1 做了什麼決定？\n    - 2 誰做的決定？\n    - 3 為什麼做了這個決定？\n6. 執行：完全取決於你\n7. 衡量：分析反應，然後適應！\n8. 3 個做決定的迷思\n    - CEO 決定的\n    - 在會議決定\n    - 決定一定會是最明智的\n9. 最大的問題：認知偏差\n    - 我們通常都過分自信\n    - sunk-cost 效應\n    - recency 效應：比較願意相信已經隨時可用的東西\n10. 克服做決定的風險\n    - 注意\n    - 鼓勵回饋\n    - 擁抱坦率\n11. 記得\n    - 專注於改正那些錯誤的決定\n    - 改善速度\n    - 瞄準 Concensus 的做法\n### 舒適圈：它如何同時是祝福也是詛咒\n1. 你的知覺會決定怎麼體驗事情\n2. 如何修復有缺陷的知覺\n    - 了解 Map 如何形成\n3. Map 的形成\n    - 知覺\n    - 連結\n    - 評估\n    - 決定\n4. 建構式想像：當覺得有尚未完成的潛力，那是因為有限制的信念(憤怒、噁心、害怕)\n5. 完成建構式想像\n    - 找到未完成的潛力\n    - 了解自己目前的情緒\n    - 想像自己要用什麼心情緒來達成尚未完成的潛力\n    - 口頭承諾你要改變的事情\n    - 重新規劃你自己\n6. 10 個承諾設計法則\n    - 個人的\n    - 正向的\n    - 現在式的\n    - 包含成果\n    - 關於自己的：跟自己比較，不要跟別人比較\n    - 行動\n    - 興奮的情緒\n    - 準確的\n    - 現實的\n    - 負責任的\n7. 承諾就是一種工具，他不關說話，他是關於感覺的\n8. 每天重複兩次，不然他不會有效的\n### 帶走生產力關鍵\n1. 這些都是關於自我管理\n2. 意志力：\n    - 冥想\n    - pause & plan\n    - 原諒自己\n    - 背水一戰\n3. 動機：\n    - 為什麼？\n4. 習慣：\n    - 關鍵 Component：cue、routine、reward、craving\n    - 建立動力\n    - 在危機時刻改變\n5. 目標設定\n    - S.M.A.R.T\n6. 做決定\n    - components\n    - 類型\n    - 陷阱\n7. 舒適圈、Reality Map\n### 你的戰鬥計畫\n1. 了解為什麼？\n    - 寫下來\n    - 有備忘錄\n2. 使用意志力創造習慣和動機\n    - **慢慢地**整合新習慣\n    - 重複至少 30 天\n    - 選擇**一樣東西**，然後黏著它\n    - 你想要**持續的**效果\n3. 當準備好的時候，增加更多\n    - 這是關於你有多難受到打擊，而且**持續向前行**；你能花費多少，而且**持續向前行**。這就是成功。\n### 完成課程\n<img src=\"/images/learning/productivity/Doru Catana_Productivity.jpg\">","source":"_posts/提高生產效率：適應、改善、執行.md","raw":"---\ntitle: 提高生產效率：適應、改善、執行\nthumbnail:\n  - /images/learning/productivity/productivity.jpg\ndate: 2017-08-31 15:39:56\ncategories: 學習歷程\ntags: Productivity\n---\n<img src=\"/images/learning/productivity/productivity.jpg\">\n\n***\n### 為誰設計的課程？\n1. 從 Planning 到 doing faster\n2. 課程有以下特點\n    - 根據研究\n    - 實際演練\n    - 證明結果\n    - 什麼都有，就是沒有 generic advice\n    - 很簡單易用\n3. 帶你從 **Where You Are** 到 **You Want To Be**\n4. 概觀\n    - 意志力\n    - 動機\n    - 習慣\n    - 做決定\n    - 設定目標\n### 意志力：你最重要的資源\n1. 這邊會談到自我管理的重要性\n2. 每天練習，持續三十天，並記錄結果\n#### 第一項：意志力\n1. 冥想\n    - 幫助專注\n    - 減輕壓力\n    - 增強意志力\n    - 對初學者有很好的效果\n2. 在 11 小時之後，腦中會產生生理改變\n3. 快速開始指南\n    - 坐下\n    - 清理思緒\n    - 注意呼吸\n    - 每天至少 10 分鐘，堅持至少三個禮拜\n#### 第二項：Pause & Plan Response\n1. 大腦在壓力之下，會做**不好的**決定\n2. You + Stress = Short Term Thinking\n3. 讓呼吸變慢\n#### 第三項：原諒自己\n1. 原諒讓自己回到正軌\n2. PRE-COMMIT：找別人一起做，你就會不得不做\n3. 想像未來的自己是真的人，關心他，在做不好的決定的時候想到他\n### 動機：為什麼它很重要但不夠\n1. 它很棒，但是它不夠讓你完成事情\n2. 思考為什麼：你為什麼想達成這個目標？\n3. 我現在就想要，但是現實不是這樣的\n4. 動機讓你開始，但是只有**習慣**可以讓你持續進行\n5. 如果你什麼都有了，你想要做什麼？\n6. 你不會永遠享受它\n7. 答案在你自己的心中\n### 習慣：成功的秘密\n1. We first make our habits then our habits make us - John Dryden\n2. 他們可以在生理上改變大腦\n3. 習慣由什麼組成？\n    - Craving\n    - Cue\n    - Routine\n    - Reward\n4. 習慣**永遠不會**完全消失\n5. 壞習慣就養成好習慣來取代它就可以了\n    - 工作 -> 覺得無聊 -> 看社交軟體，產生拖延\n    - 工作 -> 覺得無聊 -> 回來工作吧！\n6. 針對壞習慣記得：\n    - 讓習慣慢下來\n    - 然後針對某個環節攻擊\n7. 創造動力\n    - 建立 checklist\n    - 當危機產生的時候就是最好的改變時間\n8. 結論\n    - 了解習慣\n    - 創造動力\n    - 讓時機更正確\n### 目標：達成任何事情的框架\n1. 一定要知道目標\n2. 有效目標設定 6 步驟\n    - 1 你想要達成什麼？\n    - 2 你想要付出什麼作為交換？\n    - 3 設定明確的時間\n    - 4 有一個清楚的計畫\n    - 5 列印出來並簽名\n    - 6 每天大聲唸出來兩遍 (起床的時候和要睡覺的時候)\n3. S M A R T rule\n    - Specific\n    - Measurable\n    - Attainable\n    - Realistic\n    - Time Bound：把它分為每週里程碑\n### 做決定：速度、彈性和持續性\n1. 準備 => 決定 => 溝通 => 執行 => 衡量\n2. 做決定的四個核心標準\n    - 結果\n    - 選擇\n    - 時間框架\n    - 參與的人事物\n3. 準備：做好調查，可以減少很多投資，還有更多選擇。但是記得不要真的行動，就做調查就好\n4. 決定：最好的做法是 Consensus，但是很難執行，而且很慢。\n5. 溝通：使用適合的工具來通知\n    - 1 做了什麼決定？\n    - 2 誰做的決定？\n    - 3 為什麼做了這個決定？\n6. 執行：完全取決於你\n7. 衡量：分析反應，然後適應！\n8. 3 個做決定的迷思\n    - CEO 決定的\n    - 在會議決定\n    - 決定一定會是最明智的\n9. 最大的問題：認知偏差\n    - 我們通常都過分自信\n    - sunk-cost 效應\n    - recency 效應：比較願意相信已經隨時可用的東西\n10. 克服做決定的風險\n    - 注意\n    - 鼓勵回饋\n    - 擁抱坦率\n11. 記得\n    - 專注於改正那些錯誤的決定\n    - 改善速度\n    - 瞄準 Concensus 的做法\n### 舒適圈：它如何同時是祝福也是詛咒\n1. 你的知覺會決定怎麼體驗事情\n2. 如何修復有缺陷的知覺\n    - 了解 Map 如何形成\n3. Map 的形成\n    - 知覺\n    - 連結\n    - 評估\n    - 決定\n4. 建構式想像：當覺得有尚未完成的潛力，那是因為有限制的信念(憤怒、噁心、害怕)\n5. 完成建構式想像\n    - 找到未完成的潛力\n    - 了解自己目前的情緒\n    - 想像自己要用什麼心情緒來達成尚未完成的潛力\n    - 口頭承諾你要改變的事情\n    - 重新規劃你自己\n6. 10 個承諾設計法則\n    - 個人的\n    - 正向的\n    - 現在式的\n    - 包含成果\n    - 關於自己的：跟自己比較，不要跟別人比較\n    - 行動\n    - 興奮的情緒\n    - 準確的\n    - 現實的\n    - 負責任的\n7. 承諾就是一種工具，他不關說話，他是關於感覺的\n8. 每天重複兩次，不然他不會有效的\n### 帶走生產力關鍵\n1. 這些都是關於自我管理\n2. 意志力：\n    - 冥想\n    - pause & plan\n    - 原諒自己\n    - 背水一戰\n3. 動機：\n    - 為什麼？\n4. 習慣：\n    - 關鍵 Component：cue、routine、reward、craving\n    - 建立動力\n    - 在危機時刻改變\n5. 目標設定\n    - S.M.A.R.T\n6. 做決定\n    - components\n    - 類型\n    - 陷阱\n7. 舒適圈、Reality Map\n### 你的戰鬥計畫\n1. 了解為什麼？\n    - 寫下來\n    - 有備忘錄\n2. 使用意志力創造習慣和動機\n    - **慢慢地**整合新習慣\n    - 重複至少 30 天\n    - 選擇**一樣東西**，然後黏著它\n    - 你想要**持續的**效果\n3. 當準備好的時候，增加更多\n    - 這是關於你有多難受到打擊，而且**持續向前行**；你能花費多少，而且**持續向前行**。這就是成功。\n### 完成課程\n<img src=\"/images/learning/productivity/Doru Catana_Productivity.jpg\">","slug":"提高生產效率：適應、改善、執行","published":1,"updated":"2017-11-03T14:58:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyt00767ifa7s41rlcq","content":"<img src=\"/images/learning/productivity/productivity.jpg\">\n<hr>\n<h3>為誰設計的課程？</h3>\n<ol>\n<li>從 Planning 到 doing faster</li>\n<li>課程有以下特點\n<ul>\n<li>根據研究</li>\n<li>實際演練</li>\n<li>證明結果</li>\n<li>什麼都有，就是沒有 generic advice</li>\n<li>很簡單易用</li>\n</ul>\n</li>\n<li>帶你從 <strong>Where You Are</strong> 到 <strong>You Want To Be</strong></li>\n<li>概觀\n<ul>\n<li>意志力</li>\n<li>動機</li>\n<li>習慣</li>\n<li>做決定</li>\n<li>設定目標</li>\n</ul>\n</li>\n</ol>\n<h3>意志力：你最重要的資源</h3>\n<ol>\n<li>這邊會談到自我管理的重要性</li>\n<li>每天練習，持續三十天，並記錄結果</li>\n</ol>\n<h4>第一項：意志力</h4>\n<ol>\n<li>冥想\n<ul>\n<li>幫助專注</li>\n<li>減輕壓力</li>\n<li>增強意志力</li>\n<li>對初學者有很好的效果</li>\n</ul>\n</li>\n<li>在 11 小時之後，腦中會產生生理改變</li>\n<li>快速開始指南\n<ul>\n<li>坐下</li>\n<li>清理思緒</li>\n<li>注意呼吸</li>\n<li>每天至少 10 分鐘，堅持至少三個禮拜</li>\n</ul>\n</li>\n</ol>\n<h4>第二項：Pause &amp; Plan Response</h4>\n<ol>\n<li>大腦在壓力之下，會做<strong>不好的</strong>決定</li>\n<li>You + Stress = Short Term Thinking</li>\n<li>讓呼吸變慢</li>\n</ol>\n<h4>第三項：原諒自己</h4>\n<ol>\n<li>原諒讓自己回到正軌</li>\n<li>PRE-COMMIT：找別人一起做，你就會不得不做</li>\n<li>想像未來的自己是真的人，關心他，在做不好的決定的時候想到他</li>\n</ol>\n<h3>動機：為什麼它很重要但不夠</h3>\n<ol>\n<li>它很棒，但是它不夠讓你完成事情</li>\n<li>思考為什麼：你為什麼想達成這個目標？</li>\n<li>我現在就想要，但是現實不是這樣的</li>\n<li>動機讓你開始，但是只有<strong>習慣</strong>可以讓你持續進行</li>\n<li>如果你什麼都有了，你想要做什麼？</li>\n<li>你不會永遠享受它</li>\n<li>答案在你自己的心中</li>\n</ol>\n<h3>習慣：成功的秘密</h3>\n<ol>\n<li>We first make our habits then our habits make us - John Dryden</li>\n<li>他們可以在生理上改變大腦</li>\n<li>習慣由什麼組成？\n<ul>\n<li>Craving</li>\n<li>Cue</li>\n<li>Routine</li>\n<li>Reward</li>\n</ul>\n</li>\n<li>習慣<strong>永遠不會</strong>完全消失</li>\n<li>壞習慣就養成好習慣來取代它就可以了\n<ul>\n<li>工作 -&gt; 覺得無聊 -&gt; 看社交軟體，產生拖延</li>\n<li>工作 -&gt; 覺得無聊 -&gt; 回來工作吧！</li>\n</ul>\n</li>\n<li>針對壞習慣記得：\n<ul>\n<li>讓習慣慢下來</li>\n<li>然後針對某個環節攻擊</li>\n</ul>\n</li>\n<li>創造動力\n<ul>\n<li>建立 checklist</li>\n<li>當危機產生的時候就是最好的改變時間</li>\n</ul>\n</li>\n<li>結論\n<ul>\n<li>了解習慣</li>\n<li>創造動力</li>\n<li>讓時機更正確</li>\n</ul>\n</li>\n</ol>\n<h3>目標：達成任何事情的框架</h3>\n<ol>\n<li>一定要知道目標</li>\n<li>有效目標設定 6 步驟\n<ul>\n<li>1 你想要達成什麼？</li>\n<li>2 你想要付出什麼作為交換？</li>\n<li>3 設定明確的時間</li>\n<li>4 有一個清楚的計畫</li>\n<li>5 列印出來並簽名</li>\n<li>6 每天大聲唸出來兩遍 (起床的時候和要睡覺的時候)</li>\n</ul>\n</li>\n<li>S M A R T rule\n<ul>\n<li>Specific</li>\n<li>Measurable</li>\n<li>Attainable</li>\n<li>Realistic</li>\n<li>Time Bound：把它分為每週里程碑</li>\n</ul>\n</li>\n</ol>\n<h3>做決定：速度、彈性和持續性</h3>\n<ol>\n<li>準備 =&gt; 決定 =&gt; 溝通 =&gt; 執行 =&gt; 衡量</li>\n<li>做決定的四個核心標準\n<ul>\n<li>結果</li>\n<li>選擇</li>\n<li>時間框架</li>\n<li>參與的人事物</li>\n</ul>\n</li>\n<li>準備：做好調查，可以減少很多投資，還有更多選擇。但是記得不要真的行動，就做調查就好</li>\n<li>決定：最好的做法是 Consensus，但是很難執行，而且很慢。</li>\n<li>溝通：使用適合的工具來通知\n<ul>\n<li>1 做了什麼決定？</li>\n<li>2 誰做的決定？</li>\n<li>3 為什麼做了這個決定？</li>\n</ul>\n</li>\n<li>執行：完全取決於你</li>\n<li>衡量：分析反應，然後適應！</li>\n<li>3 個做決定的迷思\n<ul>\n<li>CEO 決定的</li>\n<li>在會議決定</li>\n<li>決定一定會是最明智的</li>\n</ul>\n</li>\n<li>最大的問題：認知偏差\n<ul>\n<li>我們通常都過分自信</li>\n<li>sunk-cost 效應</li>\n<li>recency 效應：比較願意相信已經隨時可用的東西</li>\n</ul>\n</li>\n<li>克服做決定的風險\n<ul>\n<li>注意</li>\n<li>鼓勵回饋</li>\n<li>擁抱坦率</li>\n</ul>\n</li>\n<li>記得\n<ul>\n<li>專注於改正那些錯誤的決定</li>\n<li>改善速度</li>\n<li>瞄準 Concensus 的做法</li>\n</ul>\n</li>\n</ol>\n<h3>舒適圈：它如何同時是祝福也是詛咒</h3>\n<ol>\n<li>你的知覺會決定怎麼體驗事情</li>\n<li>如何修復有缺陷的知覺\n<ul>\n<li>了解 Map 如何形成</li>\n</ul>\n</li>\n<li>Map 的形成\n<ul>\n<li>知覺</li>\n<li>連結</li>\n<li>評估</li>\n<li>決定</li>\n</ul>\n</li>\n<li>建構式想像：當覺得有尚未完成的潛力，那是因為有限制的信念(憤怒、噁心、害怕)</li>\n<li>完成建構式想像\n<ul>\n<li>找到未完成的潛力</li>\n<li>了解自己目前的情緒</li>\n<li>想像自己要用什麼心情緒來達成尚未完成的潛力</li>\n<li>口頭承諾你要改變的事情</li>\n<li>重新規劃你自己</li>\n</ul>\n</li>\n<li>10 個承諾設計法則\n<ul>\n<li>個人的</li>\n<li>正向的</li>\n<li>現在式的</li>\n<li>包含成果</li>\n<li>關於自己的：跟自己比較，不要跟別人比較</li>\n<li>行動</li>\n<li>興奮的情緒</li>\n<li>準確的</li>\n<li>現實的</li>\n<li>負責任的</li>\n</ul>\n</li>\n<li>承諾就是一種工具，他不關說話，他是關於感覺的</li>\n<li>每天重複兩次，不然他不會有效的</li>\n</ol>\n<h3>帶走生產力關鍵</h3>\n<ol>\n<li>這些都是關於自我管理</li>\n<li>意志力：\n<ul>\n<li>冥想</li>\n<li>pause &amp; plan</li>\n<li>原諒自己</li>\n<li>背水一戰</li>\n</ul>\n</li>\n<li>動機：\n<ul>\n<li>為什麼？</li>\n</ul>\n</li>\n<li>習慣：\n<ul>\n<li>關鍵 Component：cue、routine、reward、craving</li>\n<li>建立動力</li>\n<li>在危機時刻改變</li>\n</ul>\n</li>\n<li>目標設定\n<ul>\n<li>S.M.A.R.T</li>\n</ul>\n</li>\n<li>做決定\n<ul>\n<li>components</li>\n<li>類型</li>\n<li>陷阱</li>\n</ul>\n</li>\n<li>舒適圈、Reality Map</li>\n</ol>\n<h3>你的戰鬥計畫</h3>\n<ol>\n<li>了解為什麼？\n<ul>\n<li>寫下來</li>\n<li>有備忘錄</li>\n</ul>\n</li>\n<li>使用意志力創造習慣和動機\n<ul>\n<li><strong>慢慢地</strong>整合新習慣</li>\n<li>重複至少 30 天</li>\n<li>選擇<strong>一樣東西</strong>，然後黏著它</li>\n<li>你想要<strong>持續的</strong>效果</li>\n</ul>\n</li>\n<li>當準備好的時候，增加更多\n<ul>\n<li>這是關於你有多難受到打擊，而且<strong>持續向前行</strong>；你能花費多少，而且<strong>持續向前行</strong>。這就是成功。</li>\n</ul>\n</li>\n</ol>\n<h3>完成課程</h3>\n<img src=\"/images/learning/productivity/Doru Catana_Productivity.jpg\">","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/learning/productivity/productivity.jpg\">\n<hr>\n<h3>為誰設計的課程？</h3>\n<ol>\n<li>從 Planning 到 doing faster</li>\n<li>課程有以下特點\n<ul>\n<li>根據研究</li>\n<li>實際演練</li>\n<li>證明結果</li>\n<li>什麼都有，就是沒有 generic advice</li>\n<li>很簡單易用</li>\n</ul>\n</li>\n<li>帶你從 <strong>Where You Are</strong> 到 <strong>You Want To Be</strong></li>\n<li>概觀\n<ul>\n<li>意志力</li>\n<li>動機</li>\n<li>習慣</li>\n<li>做決定</li>\n<li>設定目標</li>\n</ul>\n</li>\n</ol>\n<h3>意志力：你最重要的資源</h3>\n<ol>\n<li>這邊會談到自我管理的重要性</li>\n<li>每天練習，持續三十天，並記錄結果</li>\n</ol>\n<h4>第一項：意志力</h4>\n<ol>\n<li>冥想\n<ul>\n<li>幫助專注</li>\n<li>減輕壓力</li>\n<li>增強意志力</li>\n<li>對初學者有很好的效果</li>\n</ul>\n</li>\n<li>在 11 小時之後，腦中會產生生理改變</li>\n<li>快速開始指南\n<ul>\n<li>坐下</li>\n<li>清理思緒</li>\n<li>注意呼吸</li>\n<li>每天至少 10 分鐘，堅持至少三個禮拜</li>\n</ul>\n</li>\n</ol>\n<h4>第二項：Pause &amp; Plan Response</h4>\n<ol>\n<li>大腦在壓力之下，會做<strong>不好的</strong>決定</li>\n<li>You + Stress = Short Term Thinking</li>\n<li>讓呼吸變慢</li>\n</ol>\n<h4>第三項：原諒自己</h4>\n<ol>\n<li>原諒讓自己回到正軌</li>\n<li>PRE-COMMIT：找別人一起做，你就會不得不做</li>\n<li>想像未來的自己是真的人，關心他，在做不好的決定的時候想到他</li>\n</ol>\n<h3>動機：為什麼它很重要但不夠</h3>\n<ol>\n<li>它很棒，但是它不夠讓你完成事情</li>\n<li>思考為什麼：你為什麼想達成這個目標？</li>\n<li>我現在就想要，但是現實不是這樣的</li>\n<li>動機讓你開始，但是只有<strong>習慣</strong>可以讓你持續進行</li>\n<li>如果你什麼都有了，你想要做什麼？</li>\n<li>你不會永遠享受它</li>\n<li>答案在你自己的心中</li>\n</ol>\n<h3>習慣：成功的秘密</h3>\n<ol>\n<li>We first make our habits then our habits make us - John Dryden</li>\n<li>他們可以在生理上改變大腦</li>\n<li>習慣由什麼組成？\n<ul>\n<li>Craving</li>\n<li>Cue</li>\n<li>Routine</li>\n<li>Reward</li>\n</ul>\n</li>\n<li>習慣<strong>永遠不會</strong>完全消失</li>\n<li>壞習慣就養成好習慣來取代它就可以了\n<ul>\n<li>工作 -&gt; 覺得無聊 -&gt; 看社交軟體，產生拖延</li>\n<li>工作 -&gt; 覺得無聊 -&gt; 回來工作吧！</li>\n</ul>\n</li>\n<li>針對壞習慣記得：\n<ul>\n<li>讓習慣慢下來</li>\n<li>然後針對某個環節攻擊</li>\n</ul>\n</li>\n<li>創造動力\n<ul>\n<li>建立 checklist</li>\n<li>當危機產生的時候就是最好的改變時間</li>\n</ul>\n</li>\n<li>結論\n<ul>\n<li>了解習慣</li>\n<li>創造動力</li>\n<li>讓時機更正確</li>\n</ul>\n</li>\n</ol>\n<h3>目標：達成任何事情的框架</h3>\n<ol>\n<li>一定要知道目標</li>\n<li>有效目標設定 6 步驟\n<ul>\n<li>1 你想要達成什麼？</li>\n<li>2 你想要付出什麼作為交換？</li>\n<li>3 設定明確的時間</li>\n<li>4 有一個清楚的計畫</li>\n<li>5 列印出來並簽名</li>\n<li>6 每天大聲唸出來兩遍 (起床的時候和要睡覺的時候)</li>\n</ul>\n</li>\n<li>S M A R T rule\n<ul>\n<li>Specific</li>\n<li>Measurable</li>\n<li>Attainable</li>\n<li>Realistic</li>\n<li>Time Bound：把它分為每週里程碑</li>\n</ul>\n</li>\n</ol>\n<h3>做決定：速度、彈性和持續性</h3>\n<ol>\n<li>準備 =&gt; 決定 =&gt; 溝通 =&gt; 執行 =&gt; 衡量</li>\n<li>做決定的四個核心標準\n<ul>\n<li>結果</li>\n<li>選擇</li>\n<li>時間框架</li>\n<li>參與的人事物</li>\n</ul>\n</li>\n<li>準備：做好調查，可以減少很多投資，還有更多選擇。但是記得不要真的行動，就做調查就好</li>\n<li>決定：最好的做法是 Consensus，但是很難執行，而且很慢。</li>\n<li>溝通：使用適合的工具來通知\n<ul>\n<li>1 做了什麼決定？</li>\n<li>2 誰做的決定？</li>\n<li>3 為什麼做了這個決定？</li>\n</ul>\n</li>\n<li>執行：完全取決於你</li>\n<li>衡量：分析反應，然後適應！</li>\n<li>3 個做決定的迷思\n<ul>\n<li>CEO 決定的</li>\n<li>在會議決定</li>\n<li>決定一定會是最明智的</li>\n</ul>\n</li>\n<li>最大的問題：認知偏差\n<ul>\n<li>我們通常都過分自信</li>\n<li>sunk-cost 效應</li>\n<li>recency 效應：比較願意相信已經隨時可用的東西</li>\n</ul>\n</li>\n<li>克服做決定的風險\n<ul>\n<li>注意</li>\n<li>鼓勵回饋</li>\n<li>擁抱坦率</li>\n</ul>\n</li>\n<li>記得\n<ul>\n<li>專注於改正那些錯誤的決定</li>\n<li>改善速度</li>\n<li>瞄準 Concensus 的做法</li>\n</ul>\n</li>\n</ol>\n<h3>舒適圈：它如何同時是祝福也是詛咒</h3>\n<ol>\n<li>你的知覺會決定怎麼體驗事情</li>\n<li>如何修復有缺陷的知覺\n<ul>\n<li>了解 Map 如何形成</li>\n</ul>\n</li>\n<li>Map 的形成\n<ul>\n<li>知覺</li>\n<li>連結</li>\n<li>評估</li>\n<li>決定</li>\n</ul>\n</li>\n<li>建構式想像：當覺得有尚未完成的潛力，那是因為有限制的信念(憤怒、噁心、害怕)</li>\n<li>完成建構式想像\n<ul>\n<li>找到未完成的潛力</li>\n<li>了解自己目前的情緒</li>\n<li>想像自己要用什麼心情緒來達成尚未完成的潛力</li>\n<li>口頭承諾你要改變的事情</li>\n<li>重新規劃你自己</li>\n</ul>\n</li>\n<li>10 個承諾設計法則\n<ul>\n<li>個人的</li>\n<li>正向的</li>\n<li>現在式的</li>\n<li>包含成果</li>\n<li>關於自己的：跟自己比較，不要跟別人比較</li>\n<li>行動</li>\n<li>興奮的情緒</li>\n<li>準確的</li>\n<li>現實的</li>\n<li>負責任的</li>\n</ul>\n</li>\n<li>承諾就是一種工具，他不關說話，他是關於感覺的</li>\n<li>每天重複兩次，不然他不會有效的</li>\n</ol>\n<h3>帶走生產力關鍵</h3>\n<ol>\n<li>這些都是關於自我管理</li>\n<li>意志力：\n<ul>\n<li>冥想</li>\n<li>pause &amp; plan</li>\n<li>原諒自己</li>\n<li>背水一戰</li>\n</ul>\n</li>\n<li>動機：\n<ul>\n<li>為什麼？</li>\n</ul>\n</li>\n<li>習慣：\n<ul>\n<li>關鍵 Component：cue、routine、reward、craving</li>\n<li>建立動力</li>\n<li>在危機時刻改變</li>\n</ul>\n</li>\n<li>目標設定\n<ul>\n<li>S.M.A.R.T</li>\n</ul>\n</li>\n<li>做決定\n<ul>\n<li>components</li>\n<li>類型</li>\n<li>陷阱</li>\n</ul>\n</li>\n<li>舒適圈、Reality Map</li>\n</ol>\n<h3>你的戰鬥計畫</h3>\n<ol>\n<li>了解為什麼？\n<ul>\n<li>寫下來</li>\n<li>有備忘錄</li>\n</ul>\n</li>\n<li>使用意志力創造習慣和動機\n<ul>\n<li><strong>慢慢地</strong>整合新習慣</li>\n<li>重複至少 30 天</li>\n<li>選擇<strong>一樣東西</strong>，然後黏著它</li>\n<li>你想要<strong>持續的</strong>效果</li>\n</ul>\n</li>\n<li>當準備好的時候，增加更多\n<ul>\n<li>這是關於你有多難受到打擊，而且<strong>持續向前行</strong>；你能花費多少，而且<strong>持續向前行</strong>。這就是成功。</li>\n</ul>\n</li>\n</ol>\n<h3>完成課程</h3>\n<img src=\"/images/learning/productivity/Doru Catana_Productivity.jpg\">"},{"title":"筆記規則 重點摘要","thumbnail":["/images/notebook.jpeg"],"date":"2017-01-13T02:22:47.000Z","_content":"<img src=\"/images/notebook.jpeg\">\n\n***\n\n1. 為每一天重要的事情，下一個大標題。\n2. 把實際開始和結束的時間用螢光筆框起來，紀錄行程是否太滿。\n3. 用一些自己專屬的記號。\n4. 多色規則：我喜歡五色原則(加上自己的顏色)。\n    - 紅色：重要事項。\n    - 藍色：工作相關。\n    - 黑色：日常私事、每日固定工作(包含記帳)。\n    - 綠色：非日常私事。\n    - 粉紅色：朝夢想前進的行動。\n5. 專案管理的方法。\n    - 設定專案目標，寫下要做的事情。\n    - 用便利貼，為目標訂出細部的具體任務。\n    - 用甘特圖將進度圖像化。\n6. 把已經約好的事情寫入待辦事項，還沒約好的事情另外用清單管理。\n7. 利用多色便條紙來書寫，藍色代表 **工作**、黃色代表 **外出**、綠色代表 **私事**、粉紅色代表 **朝夢想前進的行動**。\n8. 重要的靈感用另外一本筆記本紀錄。\n9. 所有的事情加上人，可以輕鬆回憶起事情。\n10. 每天寫三行日記，第一行主題、第二行感想、第三行對未來的展望。\n11. 用漫畫的對白框寫下自己為什麼快樂和傷心。\n12. 對自己有用的資訊額外也用一本筆記本。\n    - 重要的通訊錄。\n    - 紀錄上司推薦的事情。\n    - 寫下想看的書籍。\n    - 寫下別人送禮清單。\n    - 寫下自己可以送別人的禮物清單(包含別人提過他想要的)。\n    - 標記重要的紀念日。\n    - 寫下死前想完成的事情。\n13. 將自己想做的目標加以分類，分類別：工作、證照、金錢、健康、興趣、旅行、家人、朋友。\n14. 計畫凌亂時，寫出理想時間表，找回自己的節奏。\n15. 把成功者的名言佳句寫在書的一角，化為動力。\n16. 幾點睡覺、幾點起床要寫下來。\n17. 也可以記錄天氣，喚起那一天的所有回憶。\n","source":"_posts/筆記規則-重點摘要.md","raw":"---\ntitle: 筆記規則 重點摘要\nthumbnail:\n  - /images/notebook.jpeg\ndate: 2017-01-13 10:22:47\ncategories: 閱讀賞析\ntags:\n---\n<img src=\"/images/notebook.jpeg\">\n\n***\n\n1. 為每一天重要的事情，下一個大標題。\n2. 把實際開始和結束的時間用螢光筆框起來，紀錄行程是否太滿。\n3. 用一些自己專屬的記號。\n4. 多色規則：我喜歡五色原則(加上自己的顏色)。\n    - 紅色：重要事項。\n    - 藍色：工作相關。\n    - 黑色：日常私事、每日固定工作(包含記帳)。\n    - 綠色：非日常私事。\n    - 粉紅色：朝夢想前進的行動。\n5. 專案管理的方法。\n    - 設定專案目標，寫下要做的事情。\n    - 用便利貼，為目標訂出細部的具體任務。\n    - 用甘特圖將進度圖像化。\n6. 把已經約好的事情寫入待辦事項，還沒約好的事情另外用清單管理。\n7. 利用多色便條紙來書寫，藍色代表 **工作**、黃色代表 **外出**、綠色代表 **私事**、粉紅色代表 **朝夢想前進的行動**。\n8. 重要的靈感用另外一本筆記本紀錄。\n9. 所有的事情加上人，可以輕鬆回憶起事情。\n10. 每天寫三行日記，第一行主題、第二行感想、第三行對未來的展望。\n11. 用漫畫的對白框寫下自己為什麼快樂和傷心。\n12. 對自己有用的資訊額外也用一本筆記本。\n    - 重要的通訊錄。\n    - 紀錄上司推薦的事情。\n    - 寫下想看的書籍。\n    - 寫下別人送禮清單。\n    - 寫下自己可以送別人的禮物清單(包含別人提過他想要的)。\n    - 標記重要的紀念日。\n    - 寫下死前想完成的事情。\n13. 將自己想做的目標加以分類，分類別：工作、證照、金錢、健康、興趣、旅行、家人、朋友。\n14. 計畫凌亂時，寫出理想時間表，找回自己的節奏。\n15. 把成功者的名言佳句寫在書的一角，化為動力。\n16. 幾點睡覺、幾點起床要寫下來。\n17. 也可以記錄天氣，喚起那一天的所有回憶。\n","slug":"筆記規則-重點摘要","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyu00797ifa4t2vk16c","content":"<img src=\"/images/notebook.jpeg\">\n<hr>\n<ol>\n<li>為每一天重要的事情，下一個大標題。</li>\n<li>把實際開始和結束的時間用螢光筆框起來，紀錄行程是否太滿。</li>\n<li>用一些自己專屬的記號。</li>\n<li>多色規則：我喜歡五色原則(加上自己的顏色)。\n<ul>\n<li>紅色：重要事項。</li>\n<li>藍色：工作相關。</li>\n<li>黑色：日常私事、每日固定工作(包含記帳)。</li>\n<li>綠色：非日常私事。</li>\n<li>粉紅色：朝夢想前進的行動。</li>\n</ul>\n</li>\n<li>專案管理的方法。\n<ul>\n<li>設定專案目標，寫下要做的事情。</li>\n<li>用便利貼，為目標訂出細部的具體任務。</li>\n<li>用甘特圖將進度圖像化。</li>\n</ul>\n</li>\n<li>把已經約好的事情寫入待辦事項，還沒約好的事情另外用清單管理。</li>\n<li>利用多色便條紙來書寫，藍色代表 <strong>工作</strong>、黃色代表 <strong>外出</strong>、綠色代表 <strong>私事</strong>、粉紅色代表 <strong>朝夢想前進的行動</strong>。</li>\n<li>重要的靈感用另外一本筆記本紀錄。</li>\n<li>所有的事情加上人，可以輕鬆回憶起事情。</li>\n<li>每天寫三行日記，第一行主題、第二行感想、第三行對未來的展望。</li>\n<li>用漫畫的對白框寫下自己為什麼快樂和傷心。</li>\n<li>對自己有用的資訊額外也用一本筆記本。\n<ul>\n<li>重要的通訊錄。</li>\n<li>紀錄上司推薦的事情。</li>\n<li>寫下想看的書籍。</li>\n<li>寫下別人送禮清單。</li>\n<li>寫下自己可以送別人的禮物清單(包含別人提過他想要的)。</li>\n<li>標記重要的紀念日。</li>\n<li>寫下死前想完成的事情。</li>\n</ul>\n</li>\n<li>將自己想做的目標加以分類，分類別：工作、證照、金錢、健康、興趣、旅行、家人、朋友。</li>\n<li>計畫凌亂時，寫出理想時間表，找回自己的節奏。</li>\n<li>把成功者的名言佳句寫在書的一角，化為動力。</li>\n<li>幾點睡覺、幾點起床要寫下來。</li>\n<li>也可以記錄天氣，喚起那一天的所有回憶。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/notebook.jpeg\">\n<hr>\n<ol>\n<li>為每一天重要的事情，下一個大標題。</li>\n<li>把實際開始和結束的時間用螢光筆框起來，紀錄行程是否太滿。</li>\n<li>用一些自己專屬的記號。</li>\n<li>多色規則：我喜歡五色原則(加上自己的顏色)。\n<ul>\n<li>紅色：重要事項。</li>\n<li>藍色：工作相關。</li>\n<li>黑色：日常私事、每日固定工作(包含記帳)。</li>\n<li>綠色：非日常私事。</li>\n<li>粉紅色：朝夢想前進的行動。</li>\n</ul>\n</li>\n<li>專案管理的方法。\n<ul>\n<li>設定專案目標，寫下要做的事情。</li>\n<li>用便利貼，為目標訂出細部的具體任務。</li>\n<li>用甘特圖將進度圖像化。</li>\n</ul>\n</li>\n<li>把已經約好的事情寫入待辦事項，還沒約好的事情另外用清單管理。</li>\n<li>利用多色便條紙來書寫，藍色代表 <strong>工作</strong>、黃色代表 <strong>外出</strong>、綠色代表 <strong>私事</strong>、粉紅色代表 <strong>朝夢想前進的行動</strong>。</li>\n<li>重要的靈感用另外一本筆記本紀錄。</li>\n<li>所有的事情加上人，可以輕鬆回憶起事情。</li>\n<li>每天寫三行日記，第一行主題、第二行感想、第三行對未來的展望。</li>\n<li>用漫畫的對白框寫下自己為什麼快樂和傷心。</li>\n<li>對自己有用的資訊額外也用一本筆記本。\n<ul>\n<li>重要的通訊錄。</li>\n<li>紀錄上司推薦的事情。</li>\n<li>寫下想看的書籍。</li>\n<li>寫下別人送禮清單。</li>\n<li>寫下自己可以送別人的禮物清單(包含別人提過他想要的)。</li>\n<li>標記重要的紀念日。</li>\n<li>寫下死前想完成的事情。</li>\n</ul>\n</li>\n<li>將自己想做的目標加以分類，分類別：工作、證照、金錢、健康、興趣、旅行、家人、朋友。</li>\n<li>計畫凌亂時，寫出理想時間表，找回自己的節奏。</li>\n<li>把成功者的名言佳句寫在書的一角，化為動力。</li>\n<li>幾點睡覺、幾點起床要寫下來。</li>\n<li>也可以記錄天氣，喚起那一天的所有回憶。</li>\n</ol>\n"},{"title":"華碩Win8電腦USB開機","date":"2016-09-03T19:30:18.000Z","thumbnail":["/images/asus.png"],"_content":"<img src=\"/images/asus.png\">\n\n***\n(1) 開機連按Del進入BIOS之後，切換到「Security」選單，將「Secure Boot Control」設定成「Disabled」，重新開機。\n(2) 重新開機後繼續連按Del進入BIOS，切換到「Boot」選單，將「Lunch CSM」設定成「Enabled」，重新開機。\n(3) 重新開機後繼續連按Del進入BIOS，切換到「Exit」選單，就可以找到USB進行重灌囉！\n","source":"_posts/華碩Win8電腦USB開機.md","raw":"---\ntitle: 華碩Win8電腦USB開機\ndate: 2016-09-04 03:30:18\ncategories: 技術分享\ntags:\nthumbnail:\n  - /images/asus.png\n---\n<img src=\"/images/asus.png\">\n\n***\n(1) 開機連按Del進入BIOS之後，切換到「Security」選單，將「Secure Boot Control」設定成「Disabled」，重新開機。\n(2) 重新開機後繼續連按Del進入BIOS，切換到「Boot」選單，將「Lunch CSM」設定成「Enabled」，重新開機。\n(3) 重新開機後繼續連按Del進入BIOS，切換到「Exit」選單，就可以找到USB進行重灌囉！\n","slug":"華碩Win8電腦USB開機","published":1,"updated":"2017-11-03T15:02:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjahrvwyv007c7ifa82qaydgy","content":"<img src=\"/images/asus.png\">\n<hr>\n<p>(1) 開機連按Del進入BIOS之後，切換到「Security」選單，將「Secure Boot Control」設定成「Disabled」，重新開機。<br>\n(2) 重新開機後繼續連按Del進入BIOS，切換到「Boot」選單，將「Lunch CSM」設定成「Enabled」，重新開機。<br>\n(3) 重新開機後繼續連按Del進入BIOS，切換到「Exit」選單，就可以找到USB進行重灌囉！</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/asus.png\">\n<hr>\n<p>(1) 開機連按Del進入BIOS之後，切換到「Security」選單，將「Secure Boot Control」設定成「Disabled」，重新開機。<br>\n(2) 重新開機後繼續連按Del進入BIOS，切換到「Boot」選單，將「Lunch CSM」設定成「Enabled」，重新開機。<br>\n(3) 重新開機後繼續連按Del進入BIOS，切換到「Exit」選單，就可以找到USB進行重灌囉！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjahrvww000017ifa2j10oqn5","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwwa000c7ifaumq8o56s"},{"post_id":"cjahrvww200027ifamv5ud8jg","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwd000j7ifam9iuo97j"},{"post_id":"cjahrvww9000b7ifa48kffu51","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwwf000n7ifaamykpc1t"},{"post_id":"cjahrvwwb000e7ifa08ins291","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwg000p7ifai6wmwuj0"},{"post_id":"cjahrvww500047ifa4oinhvmu","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwi000t7ifazo3ht9wx"},{"post_id":"cjahrvwwc000g7ifapb19d0w8","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwj000v7ifar7wbwy8b"},{"post_id":"cjahrvwwe000k7ifats26kzeb","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwk000y7ifaf539xl1r"},{"post_id":"cjahrvww600067ifa7allllp3","category_id":"cjahrvwwd000i7ifa0p47542x","_id":"cjahrvwwl00127ifaeh6jj25m"},{"post_id":"cjahrvwwf000o7ifalpcw5v90","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwl00157ifayb0tvi0m"},{"post_id":"cjahrvwwh000r7ifahp1xw80e","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwm00197ifansrpkgbm"},{"post_id":"cjahrvww700077ifagn52d6wb","category_id":"cjahrvwwd000i7ifa0p47542x","_id":"cjahrvwwn001c7ifa4vxbb8bl"},{"post_id":"cjahrvwwi000u7ifadmswh3pb","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwp001f7ifax86v00ik"},{"post_id":"cjahrvwwj000x7ifaogxugo39","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwq001i7ifa0oaomtfb"},{"post_id":"cjahrvww800097ifaavgsbhip","category_id":"cjahrvwwj000w7ifa14yjo8bk","_id":"cjahrvwwr001l7ifaqdtbah1r"},{"post_id":"cjahrvwwk00107ifav061t6mp","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwws001o7ifaip6gm1oi"},{"post_id":"cjahrvwwl00137ifa6umt0etl","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwu001r7ifaxow79huj"},{"post_id":"cjahrvwwm00177ifa6fagmdw2","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwv001u7ifa3e46hfcu"},{"post_id":"cjahrvwwn001a7ifa6qzl1koy","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwx001x7ifa8tkbgtb2"},{"post_id":"cjahrvwwo001e7ifagkn29a51","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwy00207ifa4jadh3yb"},{"post_id":"cjahrvwwp001h7ifa055dg7bt","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwwz00237ifaqtg3pfvd"},{"post_id":"cjahrvwwq001k7ifa501npu6h","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx000267ifa78ujubkl"},{"post_id":"cjahrvwwr001n7ifa6c010al1","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx100297ifay91o8dap"},{"post_id":"cjahrvwws001p7ifajilpxpb4","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx2002c7ifaa0icglap"},{"post_id":"cjahrvwwu001t7ifajvc6rgts","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx3002f7ifaypal9c3t"},{"post_id":"cjahrvwwv001v7ifafu5b9oxw","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx4002i7ifaadk3li4s"},{"post_id":"cjahrvwwx001z7ifal099x57m","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx6002m7ifapu4tmlwb"},{"post_id":"cjahrvwwy00217ifa3tpasu1k","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx7002p7ifapd08vhnn"},{"post_id":"cjahrvwwz00257ifalnr05ij3","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx8002t7ifaczgjx3mg"},{"post_id":"cjahrvwx000277ifap0268f5c","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwx9002w7ifaxmyh84hv"},{"post_id":"cjahrvwx1002b7ifa1qy8rojr","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxa00307ifa7de1a4ra"},{"post_id":"cjahrvwx2002d7ifatbswi1xb","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxb00337ifa0m7dn9d3"},{"post_id":"cjahrvwx3002h7ifamb13exti","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxc00377ifa17zwaq1a"},{"post_id":"cjahrvwx5002k7ifa8ap4hruq","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxe003b7ifasy22w9jy"},{"post_id":"cjahrvwx6002o7ifaibwxc8vm","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxf003f7ifa6jnd1oc1"},{"post_id":"cjahrvwx7002r7ifasxtmu8mt","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxg003i7ifahnsqoplt"},{"post_id":"cjahrvwx8002v7ifaikqkdh45","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxh003m7ifa44n7dukw"},{"post_id":"cjahrvwx9002y7ifahkub9wry","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwxi003p7ifa5s6skkkw"},{"post_id":"cjahrvwxb00357ifawl2zj746","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxj003t7ifa6wq572rr"},{"post_id":"cjahrvwxd003a7ifaq4c4bz5g","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxk003w7ifaqfmbo2fn"},{"post_id":"cjahrvwxe003d7ifate7k0xr4","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxl003z7ifa3xraci22"},{"post_id":"cjahrvwxa00327ifa1bom3pdu","category_id":"cjahrvwxd00387ifagsbpwznq","_id":"cjahrvwxm00427ifars4oph2w"},{"post_id":"cjahrvwxf003h7ifan9i43o0r","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxn00457ifawh2aohtu"},{"post_id":"cjahrvwxg003k7ifa0grw8eu3","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxo00487ifatmij93c7"},{"post_id":"cjahrvwxh003o7ifale1fwfuk","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxp004b7ifaygdu4783"},{"post_id":"cjahrvwxi003r7ifaeu6l2c4s","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxq004e7ifaxiyirmed"},{"post_id":"cjahrvwxk003u7ifa61sippnm","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxr004h7ifa3vn2n236"},{"post_id":"cjahrvwxl003x7ifaa8fv11wv","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxs004k7ifamgca75s7"},{"post_id":"cjahrvwxm00407ifa8dyb9wqk","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxt004n7ifatuhduy3c"},{"post_id":"cjahrvwxm00437ifa7zrydo71","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxu004q7ifa5625hdvy"},{"post_id":"cjahrvwxo00467ifa0wctaggs","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxv004t7ifajlsbhr3s"},{"post_id":"cjahrvwxo00497ifaba1xnjjs","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxw004w7ifa1qqmt684"},{"post_id":"cjahrvwxp004c7ifa9hzrdy9f","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwxx004z7ifa9iszof5s"},{"post_id":"cjahrvwxq004f7ifa414fbt28","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwxy00527ifaqki5pa29"},{"post_id":"cjahrvwxr004i7ifa60mszeln","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy000547ifa61dawesg"},{"post_id":"cjahrvwxs004l7ifaz0tf9fvf","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy100587ifabzl2y9os"},{"post_id":"cjahrvwxu004o7ifau121pl6h","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy2005a7ifavcth28rm"},{"post_id":"cjahrvwxu004r7ifa4wya6ysa","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy3005d7ifajneci937"},{"post_id":"cjahrvwxw004u7ifa7o5l699e","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy5005g7ifa1cdcemba"},{"post_id":"cjahrvwxx004x7ifalodds8r9","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy6005j7ifahgg15sl7"},{"post_id":"cjahrvwxy00507ifa03x6b3kl","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy7005m7ifad3lylq4a"},{"post_id":"cjahrvwxy00537ifa0ykjrxew","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy8005p7ifadvi41fc4"},{"post_id":"cjahrvwy000567ifa8oq65xlc","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwy9005s7ifay9n80szk"},{"post_id":"cjahrvwy100597ifa0ngjoaqs","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwya005v7ifanh5m8pye"},{"post_id":"cjahrvwy2005c7ifaxdbdl5jv","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyb005y7ifaysyatz4p"},{"post_id":"cjahrvwy3005f7ifa2286svcs","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyc00617ifaqsam7sfr"},{"post_id":"cjahrvwy5005i7ifazfedckzx","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyd00647ifaj82juoms"},{"post_id":"cjahrvwy7005l7ifaflp7nr6l","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwye00677ifayritz6to"},{"post_id":"cjahrvwy7005o7ifaeh6bfs9m","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyf006a7ifafp1zybdz"},{"post_id":"cjahrvwy9005r7ifaglgsymvv","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyg006d7ifah80gukni"},{"post_id":"cjahrvwya005u7ifa54wou6ex","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyl006g7ifamgsims9c"},{"post_id":"cjahrvwyb005x7ifa5v2wn4st","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwym006j7ifamifhhq3q"},{"post_id":"cjahrvwyc00607ifah8icox1o","category_id":"cjahrvwwj000w7ifa14yjo8bk","_id":"cjahrvwyn006m7ifa66imopzl"},{"post_id":"cjahrvwyc00637ifa2u6f6fw1","category_id":"cjahrvwxd00387ifagsbpwznq","_id":"cjahrvwyo006p7ifaxu5e2o1b"},{"post_id":"cjahrvwyd00667ifa1303zt8q","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyp006s7ifa3glse4yp"},{"post_id":"cjahrvwye00697ifazh42emng","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwyq006v7ifas2cdbqbl"},{"post_id":"cjahrvwyf006c7ifax7z6a8kb","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyr006y7ifab3aa0hj5"},{"post_id":"cjahrvwyg006f7ifani8ulx40","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwys00717ifan02nn9ww"},{"post_id":"cjahrvwym006i7ifatowjagf5","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyt00747ifasz3ztd7q"},{"post_id":"cjahrvwyn006l7ifaz7any40u","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyu00777ifapurf2m1s"},{"post_id":"cjahrvwyn006o7ifaoymxsl84","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyv007a7ifawj5ci1z5"},{"post_id":"cjahrvwyo006r7ifa9vdfmdrv","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyw007d7ifa5p0rphvz"},{"post_id":"cjahrvwyp006u7ifazx2urw0g","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyw007f7ifa3mhom4lu"},{"post_id":"cjahrvwyq006x7ifaha4laghr","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyx007h7ifaliim8xsu"},{"post_id":"cjahrvwyr00707ifap90ducbi","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwyx007j7ifa5qxz58be"},{"post_id":"cjahrvwys00737ifaf3t4n4u9","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwyy007l7ifakvnhlstp"},{"post_id":"cjahrvwyt00767ifa7s41rlcq","category_id":"cjahrvww800087ifaiskeo2c7","_id":"cjahrvwyy007n7ifawdqvgbkh"},{"post_id":"cjahrvwyu00797ifa4t2vk16c","category_id":"cjahrvwxd00387ifagsbpwznq","_id":"cjahrvwyy007p7ifafdiso3os"},{"post_id":"cjahrvwyv007c7ifa82qaydgy","category_id":"cjahrvww400037ifarra5jrx4","_id":"cjahrvwyy007r7ifa7hrybt1f"}],"PostTag":[{"post_id":"cjahrvww200027ifamv5ud8jg","tag_id":"cjahrvww600057ifa7s4jxfpz","_id":"cjahrvwwd000h7ifa2tx4rm2c"},{"post_id":"cjahrvww200027ifamv5ud8jg","tag_id":"cjahrvww9000a7ifa08c23a2n","_id":"cjahrvwwf000l7ifat8f2nmpx"},{"post_id":"cjahrvww500047ifa4oinhvmu","tag_id":"cjahrvww600057ifa7s4jxfpz","_id":"cjahrvwwk00117ifatsd3f2m6"},{"post_id":"cjahrvww500047ifa4oinhvmu","tag_id":"cjahrvww9000a7ifa08c23a2n","_id":"cjahrvwwl00147ifap2oz94nm"},{"post_id":"cjahrvww500047ifa4oinhvmu","tag_id":"cjahrvwwi000s7ifarz0456wg","_id":"cjahrvwwm00187ifaex7hocre"},{"post_id":"cjahrvwwb000e7ifa08ins291","tag_id":"cjahrvwwk000z7ifacafccdiq","_id":"cjahrvwwn001b7ifai4p1l7qc"},{"post_id":"cjahrvwwc000g7ifapb19d0w8","tag_id":"cjahrvwwk000z7ifacafccdiq","_id":"cjahrvwwp001g7ifapxertyjv"},{"post_id":"cjahrvwwe000k7ifats26kzeb","tag_id":"cjahrvwwk000z7ifacafccdiq","_id":"cjahrvwwr001m7ifa0y8axn0g"},{"post_id":"cjahrvwwf000o7ifalpcw5v90","tag_id":"cjahrvwwq001j7ifanad2395x","_id":"cjahrvwwu001s7ifai2kjg3lz"},{"post_id":"cjahrvwwh000r7ifahp1xw80e","tag_id":"cjahrvwwk000z7ifacafccdiq","_id":"cjahrvwwx001y7ifavwx11hkw"},{"post_id":"cjahrvwwi000u7ifadmswh3pb","tag_id":"cjahrvwwk000z7ifacafccdiq","_id":"cjahrvwwz00247ifa9i1z4g4d"},{"post_id":"cjahrvwwj000x7ifaogxugo39","tag_id":"cjahrvwwk000z7ifacafccdiq","_id":"cjahrvwx1002a7ifa6l431mi1"},{"post_id":"cjahrvwx1002b7ifa1qy8rojr","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwx3002g7ifauqo49gyq"},{"post_id":"cjahrvwwk00107ifav061t6mp","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwx5002j7ifa5mnfx8yj"},{"post_id":"cjahrvwx2002d7ifatbswi1xb","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwx6002n7ifab355gwi1"},{"post_id":"cjahrvwx3002h7ifamb13exti","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwx7002q7ifa4wgyd4ry"},{"post_id":"cjahrvwwl00137ifa6umt0etl","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwx8002u7ifaz5keoihc"},{"post_id":"cjahrvwx5002k7ifa8ap4hruq","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwx9002x7ifaqtrwz5qp"},{"post_id":"cjahrvwx6002o7ifaibwxc8vm","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxa00317ifa41ibg2z0"},{"post_id":"cjahrvwwm00177ifa6fagmdw2","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxb00347ifa8s80d1tk"},{"post_id":"cjahrvwx7002r7ifasxtmu8mt","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxd00397ifabsbqxiux"},{"post_id":"cjahrvwx8002v7ifaikqkdh45","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxe003c7ifa9fm2erdq"},{"post_id":"cjahrvwwn001a7ifa6qzl1koy","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxf003g7ifar8u59nak"},{"post_id":"cjahrvwwo001e7ifagkn29a51","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxg003j7ifa1ebdu8ev"},{"post_id":"cjahrvwwp001h7ifa055dg7bt","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxh003n7ifau7aa3gqv"},{"post_id":"cjahrvwwq001k7ifa501npu6h","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxi003q7ifaxz4ys2ml"},{"post_id":"cjahrvwwr001n7ifa6c010al1","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxk003v7ifardilhjp9"},{"post_id":"cjahrvwws001p7ifajilpxpb4","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxm00417ifa6thsc929"},{"post_id":"cjahrvwwu001t7ifajvc6rgts","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxo00477ifa8irlj847"},{"post_id":"cjahrvwwv001v7ifafu5b9oxw","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxq004d7ifa87gt3g65"},{"post_id":"cjahrvwwx001z7ifal099x57m","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxs004j7ifa7pvsr3gg"},{"post_id":"cjahrvwwy00217ifa3tpasu1k","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxu004p7ifavqqit0a8"},{"post_id":"cjahrvwwz00257ifalnr05ij3","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxw004v7ifa9oxjb35z"},{"post_id":"cjahrvwx000277ifap0268f5c","tag_id":"cjahrvwx100287ifaq8kkxuyw","_id":"cjahrvwxy00517ifa107m9ae2"},{"post_id":"cjahrvwx9002y7ifahkub9wry","tag_id":"cjahrvwxx004y7ifa9heqc8s8","_id":"cjahrvwy100577ifadzx0amca"},{"post_id":"cjahrvwxb00357ifawl2zj746","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwy3005e7ifau95tj88m"},{"post_id":"cjahrvwxd003a7ifaq4c4bz5g","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwy6005k7ifam61oi1mh"},{"post_id":"cjahrvwxe003d7ifate7k0xr4","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwy8005q7ifa1asnzptb"},{"post_id":"cjahrvwxf003h7ifan9i43o0r","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyb005w7ifahbtnaggw"},{"post_id":"cjahrvwxg003k7ifa0grw8eu3","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyc00627ifag0m37tr5"},{"post_id":"cjahrvwxh003o7ifale1fwfuk","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwye00687ifa61f5qbaw"},{"post_id":"cjahrvwxi003r7ifaeu6l2c4s","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyg006e7ifag8pyo2xv"},{"post_id":"cjahrvwxk003u7ifa61sippnm","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyn006k7ifalcchw1kl"},{"post_id":"cjahrvwxl003x7ifaa8fv11wv","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyo006q7ifaq7yhge5u"},{"post_id":"cjahrvwxm00407ifa8dyb9wqk","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyq006w7ifa0xi1z96m"},{"post_id":"cjahrvwxm00437ifa7zrydo71","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwys00727ifarcko3i5v"},{"post_id":"cjahrvwxo00467ifa0wctaggs","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyu00787ifan75gh2e1"},{"post_id":"cjahrvwxo00497ifaba1xnjjs","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyw007e7ifa3f2ejq93"},{"post_id":"cjahrvwxq004f7ifa414fbt28","tag_id":"cjahrvwy000557ifa8xclpuz1","_id":"cjahrvwyx007i7ifa6tb3tqur"},{"post_id":"cjahrvwxr004i7ifa60mszeln","tag_id":"cjahrvwyx007g7ifa9g5pnxx5","_id":"cjahrvwyy007m7ifa5txvdgeg"},{"post_id":"cjahrvwxs004l7ifaz0tf9fvf","tag_id":"cjahrvwyx007g7ifa9g5pnxx5","_id":"cjahrvwyy007q7ifad5fbhp4r"},{"post_id":"cjahrvwxu004o7ifau121pl6h","tag_id":"cjahrvwyx007g7ifa9g5pnxx5","_id":"cjahrvwyz007t7ifaz6oq6mck"},{"post_id":"cjahrvwxu004r7ifa4wya6ysa","tag_id":"cjahrvwyx007g7ifa9g5pnxx5","_id":"cjahrvwyz007v7ifa2byzlc9v"},{"post_id":"cjahrvwxw004u7ifa7o5l699e","tag_id":"cjahrvwyx007g7ifa9g5pnxx5","_id":"cjahrvwyz007x7ifazer85unq"},{"post_id":"cjahrvwxx004x7ifalodds8r9","tag_id":"cjahrvwyx007g7ifa9g5pnxx5","_id":"cjahrvwz0007z7ifa79nrklne"},{"post_id":"cjahrvwxy00507ifa03x6b3kl","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz000817ifawmol349s"},{"post_id":"cjahrvwxy00537ifa0ykjrxew","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz000837ifaha7q34wm"},{"post_id":"cjahrvwy000567ifa8oq65xlc","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz100857ifa2f1aznlo"},{"post_id":"cjahrvwy100597ifa0ngjoaqs","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz100877ifakxipseop"},{"post_id":"cjahrvwy2005c7ifaxdbdl5jv","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz100897ifah0gn0hrl"},{"post_id":"cjahrvwy3005f7ifa2286svcs","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz2008b7ifafweu11ne"},{"post_id":"cjahrvwy5005i7ifazfedckzx","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz2008d7ifagcv6e3io"},{"post_id":"cjahrvwy7005l7ifaflp7nr6l","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz2008f7ifagp4h9d8g"},{"post_id":"cjahrvwy7005o7ifaeh6bfs9m","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz3008h7ifao50qkv8u"},{"post_id":"cjahrvwy9005r7ifaglgsymvv","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz3008j7ifat7j6obb7"},{"post_id":"cjahrvwya005u7ifa54wou6ex","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz4008l7ifavu21hb17"},{"post_id":"cjahrvwyb005x7ifa5v2wn4st","tag_id":"cjahrvwyz007y7ifaq2as4wpf","_id":"cjahrvwz4008n7ifapw8jt5ix"},{"post_id":"cjahrvwyd00667ifa1303zt8q","tag_id":"cjahrvwz4008m7ifa7pgqkz1g","_id":"cjahrvwz4008q7ifaoghka2lc"},{"post_id":"cjahrvwyd00667ifa1303zt8q","tag_id":"cjahrvwz4008o7ifao2j7bt5y","_id":"cjahrvwz4008r7ifaqbwv2f5z"},{"post_id":"cjahrvwyf006c7ifax7z6a8kb","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz5008t7ifa3e4kilc8"},{"post_id":"cjahrvwyg006f7ifani8ulx40","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz5008v7ifajvdztxf8"},{"post_id":"cjahrvwym006i7ifatowjagf5","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz6008x7ifa900ny1d5"},{"post_id":"cjahrvwyn006l7ifaz7any40u","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz6008z7ifa8g8p6m37"},{"post_id":"cjahrvwyn006o7ifaoymxsl84","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz600917ifazmfzolwl"},{"post_id":"cjahrvwyo006r7ifa9vdfmdrv","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz700937ifay5me3iuu"},{"post_id":"cjahrvwyp006u7ifazx2urw0g","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz700957ifa7igybu84"},{"post_id":"cjahrvwyq006x7ifaha4laghr","tag_id":"cjahrvwz4008p7ifa45vcc9le","_id":"cjahrvwz700977ifagv1nvo0x"},{"post_id":"cjahrvwyt00767ifa7s41rlcq","tag_id":"cjahrvwz700967ifac4ewqs6z","_id":"cjahrvwz700987ifag6zvto6o"}],"Tag":[{"name":"HTML","_id":"cjahrvww600057ifa7s4jxfpz"},{"name":"CSS","_id":"cjahrvww9000a7ifa08c23a2n"},{"name":"UX","_id":"cjahrvwwi000s7ifarz0456wg"},{"name":"Kubernetes","_id":"cjahrvwwk000z7ifacafccdiq"},{"name":"Jenkins","_id":"cjahrvwwq001j7ifanad2395x"},{"name":"Laravel","_id":"cjahrvwx100287ifaq8kkxuyw"},{"name":"Mac","_id":"cjahrvwxx004y7ifa9heqc8s8"},{"name":"Nodejs","_id":"cjahrvwy000557ifa8xclpuz1"},{"name":"React-Native","_id":"cjahrvwyx007g7ifa9g5pnxx5"},{"name":"React","_id":"cjahrvwyz007y7ifaq2as4wpf"},{"name":"UI","_id":"cjahrvwz4008m7ifa7pgqkz1g"},{"name":"Illustrator","_id":"cjahrvwz4008o7ifao2j7bt5y"},{"name":"Docker","_id":"cjahrvwz4008p7ifa45vcc9le"},{"name":"Productivity","_id":"cjahrvwz700967ifac4ewqs6z"}]}}